{"prompt": "LIBRARY MANAGEMENT SYSTEM", "response": "nan"}
{"prompt": "MEMBER/STUDENT", "response": "nan"}
{"prompt": "Question (Natural Language)", "response": "SQL Query"}
{"prompt": "Did I log in to the system on Monday morning?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND action LIKE '%login%' AND DATE(timestamp) = '2025-06-02';"}
{"prompt": "Is the book 'Artificial Intelligence: A Modern Approach' currently issued?", "response": "SELECT status FROM Book_Issues WHERE book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach') AND status = 'issued';"}
{"prompt": "When is 'Artificial Intelligence: A Modern Approach' expected to be returned?", "response": "SELECT due_date FROM Book_Issues WHERE book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach') AND status = 'issued';"}
{"prompt": "Have I reserved the book 'Artificial Intelligence: A Modern Approach'?", "response": "SELECT * FROM Book_Reservations WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach');"}
{"prompt": "Which books have I borrowed currently?", "response": "SELECT B.title FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id WHERE BI.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND BI.status = 'issued';"}
{"prompt": "When did I borrow the book 'Python for Data Analysis'?", "response": "SELECT issue_date FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Python for Data Analysis');"}
{"prompt": "When is the due date for 'Machine Learning Basics'?", "response": "SELECT due_date FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Machine Learning Basics');"}
{"prompt": "Did I return the book 'Python for Data Analysis' after 10 days?", "response": "SELECT return_date FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Python for Data Analysis');"}
{"prompt": "Did I renew the 'Machine Learning Basics' book?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND action LIKE '%renew%' AND table_name = 'Book_Issues' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 MONTH);"}
{"prompt": "How many books have I borrowed this semester?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND issue_date BETWEEN '2025-01-01' AND '2025-06-02';"}
{"prompt": "Do I have any overdue books currently?", "response": "SELECT B.title FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id WHERE BI.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND BI.due_date < CURDATE() AND BI.return_date IS NULL;"}
{"prompt": "What is the status of my reservation for 'Artificial Intelligence: A Modern Approach'?", "response": "SELECT status FROM Book_Reservations WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach');"}
{"prompt": "When was my reservation for 'Artificial Intelligence: A Modern Approach' made?", "response": "SELECT reservation_date FROM Book_Reservations WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach');"}
{"prompt": "Did I collect the reserved book 'Artificial Intelligence: A Modern Approach' after notification?", "response": "SELECT return_date FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach') AND issue_date > (SELECT reservation_date FROM Book_Reservations WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach'));"}
{"prompt": "What is my borrowing history?", "response": "SELECT B.title, BI.issue_date, BI.return_date FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id WHERE BI.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY BI.issue_date DESC;"}
{"prompt": "Have I paid any fines?", "response": "SELECT SUM(fine_amount) FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya');"}
{"prompt": "How many books do I currently have issued?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND status = 'issued';"}
{"prompt": "Can I reserve a book that is currently unavailable?", "response": "(This is a system policy question, no direct query but:) SELECT available_copies FROM Books WHERE title = 'Some Book Title';"}
{"prompt": "What is my contact information in the system?", "response": "SELECT phone, email FROM Users WHERE name = 'Riya';"}
{"prompt": "How do I check if a book is available to borrow?", "response": "SELECT available_copies FROM Books WHERE title = 'Book Title';"}
{"prompt": "LIBRARIAN", "response": "nan"}
{"prompt": "Question (Natural Language)", "response": "SQL Query"}
{"prompt": "Did I successfully log into the system this morning?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Meera') AND action LIKE '%login%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which books are due for return today?", "response": "SELECT B.title, U.name FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id JOIN Users U ON BI.user_id = U.user_id WHERE BI.due_date = CURDATE() AND BI.return_date IS NULL;"}
{"prompt": "Is 'Python for Data Analysis' due today and issued to Riya?", "response": "SELECT * FROM Book_Issues WHERE book_id = (SELECT book_id FROM Books WHERE title = 'Python for Data Analysis') AND user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND due_date = CURDATE();"}
{"prompt": "Who has reserved 'Artificial Intelligence: A Modern Approach'?", "response": "SELECT U.name, BR.status FROM Book_Reservations BR JOIN Users U ON BR.user_id = U.user_id WHERE BR.book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach');"}
{"prompt": "Was 'Artificial Intelligence: A Modern Approach' returned this morning?", "response": "SELECT return_date FROM Book_Issues WHERE book_id = (SELECT book_id FROM Books WHERE title = 'Artificial Intelligence: A Modern Approach') AND DATE(return_date) = CURDATE();"}
{"prompt": "Have I updated the availability status of 'Artificial Intelligence: A Modern Approach'?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Meera') AND action LIKE '%update%' AND table_name = 'Books' AND timestamp >= CURDATE();"}
{"prompt": "Did the system send an email notification for the reserved book?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%email%' AND action LIKE '%Artificial Intelligence%' AND timestamp >= CURDATE();"}
{"prompt": "Did I approve Riya’s renewal request for 'Machine Learning Basics'?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Meera') AND action_type = 'update' AND table_name = 'Book_Issues' AND action LIKE '%renew%' AND timestamp >= CURDATE();"}
{"prompt": "When was 'Machine Learning Basics' renewed?", "response": "SELECT issue_date, due_date FROM Book_Issues WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND book_id = (SELECT book_id FROM Books WHERE title = 'Machine Learning Basics');"}
{"prompt": "Did I add a new book titled 'Deep Learning with PyTorch'?", "response": "SELECT * FROM Books WHERE title = 'Deep Learning with PyTorch';"}
{"prompt": "What is the shelf location of 'Deep Learning with PyTorch'?", "response": "SELECT location FROM Books WHERE title = 'Deep Learning with PyTorch';"}
{"prompt": "Which student reported a book as lost today?", "response": "SELECT U.name FROM Book_Issues BI JOIN Users U ON BI.user_id = U.user_id WHERE BI.status = 'lost' AND DATE(BI.return_date) = CURDATE();"}
{"prompt": "Did I mark the book as lost in the system today?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Meera') AND action_type = 'update' AND action LIKE '%lost%' AND table_name = 'Book_Issues' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What fine amount was added to the student’s account for the lost book?", "response": "SELECT fine_amount FROM Book_Issues WHERE status = 'lost' AND DATE(return_date) = CURDATE();"}
{"prompt": "Can I generate a weekly report of books issued and returned?", "response": "SELECT DATE(issue_date) AS date, COUNT(*) AS total_issued FROM Book_Issues WHERE issue_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY DATE(issue_date); SELECT DATE(return_date) AS date, COUNT(*) AS total_returned FROM Book_Issues WHERE return_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY DATE(return_date);"}
{"prompt": "What is the total number of books issued this week?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE issue_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the total number of books returned this week?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE return_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Have there been any overdue returns this week?", "response": "SELECT * FROM Book_Issues WHERE due_date < return_date AND return_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Did any new reservations come in today?", "response": "SELECT * FROM Book_Reservations WHERE reservation_date = CURDATE();"}
{"prompt": "What actions did I perform in the system today?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Meera') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Administrator", "response": "nan"}
{"prompt": "Question (Natural Language)", "response": "SQL Query"}
{"prompt": "Did I successfully log into the admin panel on Monday morning?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Mr. Arvind') AND action LIKE '%login%' AND DATE(timestamp) = '2025-06-02';"}
{"prompt": "Were there any suspicious login attempts in the last 24 hours?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%failed login%' AND timestamp >= NOW() - INTERVAL 1 DAY;"}
{"prompt": "Did any user try to access unauthorized areas like the admin panel?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%unauthorized%' AND table_name = 'Admin Panel' AND timestamp >= NOW() - INTERVAL 1 DAY;"}
{"prompt": "Can I view all login activities from this morning?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%login%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Did the librarian request new accounts today?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%new user request%' AND timestamp >= CURDATE();"}
{"prompt": "Did I create librarian accounts for five new staff members?", "response": "SELECT * FROM Users WHERE role = 'librarian' AND registration_date = CURDATE();"}
{"prompt": "What roles and permissions were assigned to the new librarian accounts?", "response": "SELECT name, role, is_active FROM Users WHERE role = 'librarian' AND registration_date = CURDATE();"}
{"prompt": "When did I last update the fine policy?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Mr. Arvind') AND action LIKE '%fine%' AND table_name = 'Book_Issues' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Has the fine amount for late returns changed to ₹10?", "response": "SELECT fine_amount FROM Book_Issues ORDER BY issue_id DESC LIMIT 1; (Assumes new issues reflect the updated fine rate.)"}
{"prompt": "Did I take a backup of the library database today?", "response": "SELECT * FROM Audit_Logs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Mr. Arvind') AND action LIKE '%backup%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which student account had incorrect privileges today?", "response": "SELECT user_id, name FROM Users WHERE role != 'admin' AND user_id IN (SELECT user_id FROM Audit_Logs WHERE action LIKE '%edit%' AND table_name = 'Books' AND DATE(timestamp) = CURDATE());"}
{"prompt": "Did I correct privileges for the misconfigured student account?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%permission corrected%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Was the library team notified about the permission correction?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%notification sent%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Did I generate a system performance report today?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%performance report%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the server status as of now?", "response": "(Assuming server status is tracked separately; mock query below)SELECT * FROM System_Statistics ORDER BY date DESC LIMIT 1;"}
{"prompt": "How many user accounts were created this week?", "response": "SELECT COUNT(*) FROM Users WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Have there been any failed login attempts in the past week?", "response": "SELECT COUNT(*) FROM Audit_Logs WHERE action LIKE '%failed login%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most frequent actions performed in the system this week?", "response": "SELECT action, COUNT(*) as frequency FROM Audit_Logs WHERE timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY action ORDER BY frequency DESC;"}
{"prompt": "Are there any inactive accounts in the system?", "response": "SELECT * FROM Users WHERE is_active = FALSE;"}
{"prompt": "How many times has the database been backed up this month?", "response": "SELECT COUNT(*) FROM Audit_Logs WHERE action LIKE '%backup%' AND MONTH(timestamp) = MONTH(CURDATE());"}
{"prompt": "Data Aanlyst", "response": "nan"}
{"prompt": "Question (Natural Language)", "response": "SQL Query"}
{"prompt": "What were the most borrowed books this week?", "response": "SELECT B.title, COUNT(*) AS borrow_count FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id WHERE BI.issue_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY B.title ORDER BY borrow_count DESC LIMIT 5;"}
{"prompt": "How many times was 'Python for Data Analysis' issued this week?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE book_id = (SELECT book_id FROM Books WHERE title = 'Python for Data Analysis') AND issue_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the top 2 most borrowed books of the week?", "response": "SELECT B.title, COUNT(*) AS count FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id WHERE BI.issue_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY B.title ORDER BY count DESC LIMIT 2;"}
{"prompt": "How many machine learning–related books were borrowed by computer science students this month?", "response": "SELECT COUNT(*) FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id JOIN Users U ON BI.user_id = U.user_id WHERE B.title LIKE '%Machine Learning%' AND U.name LIKE '%computer science%' AND BI.issue_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the borrowing trend by department over the past 6 months?", "response": "SELECT SUBSTRING_INDEX(U.name, ' ', 1) AS department, MONTH(issue_date) AS month, COUNT(*) AS total FROM Book_Issues BI JOIN Users U ON BI.user_id = U.user_id WHERE issue_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY department, month ORDER BY month;"}
{"prompt": "How many books were overdue this month?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE due_date < return_date AND MONTH(return_date) = MONTH(CURDATE());"}
{"prompt": "By what percentage did overdue books increase compared to last month?", "response": "WITH this_month AS (SELECT COUNT(*) AS count FROM Book_Issues WHERE due_date < return_date AND MONTH(return_date) = MONTH(CURDATE())), last_month AS (SELECT COUNT(*) AS count FROM Book_Issues WHERE due_date < return_date AND MONTH(return_date) = MONTH(CURDATE() - INTERVAL 1 MONTH)) SELECT ROUND((this_month.count - last_month.count) * 100.0 / NULLIF(last_month.count, 0), 2) AS percentage_increase FROM this_month, last_month;"}
{"prompt": "What is the monthly trend of overdue books?", "response": "SELECT MONTH(return_date) AS month, COUNT(*) AS overdue_count FROM Book_Issues WHERE due_date < return_date GROUP BY month ORDER BY month;"}
{"prompt": "Which departments have the highest overdue rate?", "response": "SELECT SUBSTRING_INDEX(U.name, ' ', 1) AS department, COUNT(*) AS overdue_count FROM Book_Issues BI JOIN Users U ON BI.user_id = U.user_id WHERE BI.due_date < BI.return_date GROUP BY department ORDER BY overdue_count DESC;"}
{"prompt": "Can I get the borrowing frequency by book category?", "response": "SELECT B.category, COUNT(*) AS borrow_count FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id GROUP BY B.category ORDER BY borrow_count DESC;"}
{"prompt": "How many books were borrowed by each department this semester?", "response": "SELECT SUBSTRING_INDEX(U.name, ' ', 1) AS department, COUNT(*) AS borrow_count FROM Book_Issues BI JOIN Users U ON BI.user_id = U.user_id WHERE BI.issue_date >= '2025-01-01' GROUP BY department;"}
{"prompt": "What is the weekly borrowing trend for the past month?", "response": "SELECT WEEK(issue_date) AS week_number, COUNT(*) AS total_borrowed FROM Book_Issues WHERE issue_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY week_number;"}
{"prompt": "Can I see the fine trends over the past three months?", "response": "SELECT MONTH(return_date) AS month, SUM(fine_amount) AS total_fines FROM Book_Issues WHERE return_date IS NOT NULL GROUP BY month ORDER BY month;"}
{"prompt": "Which books had the highest fines associated with them?", "response": "SELECT B.title, SUM(fine_amount) AS total_fines FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id GROUP BY B.title ORDER BY total_fines DESC LIMIT 5;"}
{"prompt": "How many books were issued and returned each week this semester?", "response": "SELECT WEEK(issue_date) AS week_num, COUNT(*) AS issued FROM Book_Issues WHERE issue_date >= '2025-01-01' GROUP BY week_num; SELECT WEEK(return_date) AS week_num, COUNT(*) AS returned FROM Book_Issues WHERE return_date >= '2025-01-01' GROUP BY week_num;"}
{"prompt": "What is the borrowing rate by year of publish for books?", "response": "SELECT B.publish_year, COUNT(*) AS borrow_count FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id GROUP BY B.publish_year ORDER BY B.publish_year;"}
{"prompt": "Can I forecast high-demand books for the next semester based on past two years’ data?", "response": "SELECT B.title, COUNT(*) AS total_borrows FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id WHERE BI.issue_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY B.title ORDER BY total_borrows DESC;"}
{"prompt": "Which categories of books have seasonal demand patterns?", "response": "SELECT B.category, MONTH(issue_date) AS month, COUNT(*) AS borrow_count FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id GROUP BY B.category, month ORDER BY B.category, month;"}
{"prompt": "What is the average borrowing duration for books?", "response": "SELECT AVG(DATEDIFF(IFNULL(return_date, CURDATE()), issue_date)) AS avg_days FROM Book_Issues;"}
{"prompt": "Which books should the librarian consider purchasing more copies of, based on shortage trends?", "response": "SELECT title, total_copies, COUNT(*) AS demand FROM Book_Issues BI JOIN Books B ON BI.book_id = B.book_id GROUP BY B.book_id HAVING demand > total_copies ORDER BY demand DESC;"}
{"prompt": "EXTERNAL AUDITOR / AUDIT TEAM", "response": "nan"}
{"prompt": "Natural Language Question", "response": "SQL Query"}
{"prompt": "Can I get the complete inventory list of all books in the system?", "response": "SELECT * FROM Books;"}
{"prompt": "How many books are currently marked as “issued” in the LMS?", "response": "SELECT COUNT(*) FROM Book_Issues WHERE status = 'issued';"}
{"prompt": "Can I see all books that are marked as issued but have already been returned (possible data error)?", "response": "SELECT * FROM Book_Issues WHERE status = 'issued' AND return_date IS NOT NULL;"}
{"prompt": "Can I view all transactions (issue/return) for a specific user?", "response": "SELECT * FROM Book_Issues WHERE user_id = [USER_ID];"}
{"prompt": "Can I get a list of all overdue books where fines were not collected?", "response": "SELECT * FROM Book_Issues WHERE return_date > due_date AND fine_amount = 0;"}
{"prompt": "Can I verify if fine was calculated correctly for each late return?", "response": "SELECT issue_id, DATEDIFF(return_date, due_date) AS days_late, fine_amount FROM Book_Issues WHERE return_date > due_date;"}
{"prompt": "Show me transactions where books were returned before due date but fines were still applied.", "response": "SELECT * FROM Book_Issues WHERE return_date <= due_date AND fine_amount > 0;"}
{"prompt": "Can I check the audit logs of actions performed in the last 30 days?", "response": "SELECT * FROM Audit_Logs WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 30 DAY);"}
{"prompt": "Which users made changes to the Book_Issues table in the last 7 days?", "response": "SELECT DISTINCT user_id FROM Audit_Logs WHERE table_name = 'Book_Issues' AND timestamp >= DATE_SUB(NOW(), INTERVAL 7 DAY);"}
{"prompt": "Are there any audit logs showing DELETE or UPDATE operations by unauthorized roles?", "response": "SELECT * FROM Audit_Logs A JOIN Users U ON A.user_id = U.user_id WHERE action_type IN ('DELETE', 'UPDATE') AND U.role NOT IN ('Admin', 'Librarian');"}
{"prompt": "What’s the total fine collected this year as per the LMS?", "response": "SELECT SUM(fine_amount) AS total_fines FROM Book_Issues WHERE YEAR(return_date) = YEAR(CURDATE());"}
{"prompt": "Show me a monthly breakdown of fines collected.", "response": "SELECT MONTH(return_date) AS month, SUM(fine_amount) AS total_fines FROM Book_Issues WHERE fine_amount > 0 GROUP BY MONTH(return_date);"}
{"prompt": "Can I get a list of books returned late along with user details?", "response": "SELECT U.name, B.title, BI.return_date, BI.due_date, BI.fine_amount FROM Book_Issues BI JOIN Users U ON BI.user_id = U.user_id JOIN Books B ON BI.book_id = B.book_id WHERE BI.return_date > BI.due_date;"}
{"prompt": "Are there users with more than 3 overdue returns this semester?", "response": "SELECT user_id, COUNT(*) AS overdue_count FROM Book_Issues WHERE return_date > due_date AND issue_date >= '2025-01-01' GROUP BY user_id HAVING overdue_count > 3;"}
{"prompt": "Can I view books that are missing or not accounted for in the database but should exist physically?", "response": "(Manual check needed, but LMS side:) SELECT * FROM Books WHERE available_copies + (SELECT COUNT(*) FROM Book_Issues WHERE status = 'issued' AND book_id = Books.book_id) < total_copies;"}
{"prompt": "Which users have issued more books than the limit (assuming 5)?", "response": "SELECT user_id, COUNT(*) AS total_issued FROM Book_Issues WHERE status = 'issued' GROUP BY user_id HAVING total_issued > 5;"}
{"prompt": "Has any book record been updated or deleted recently?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Books' AND action_type IN ('UPDATE', 'DELETE') ORDER BY timestamp DESC;"}
{"prompt": "Can I list all books purchased in the last 12 months along with quantity and price?", "response": "SELECT * FROM Book_Purchases WHERE purchase_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);"}
{"prompt": "Can I get the total number of issues, returns, and overdue records for the past year?", "response": "SELECT SUM(total_issues) AS issues, SUM(total_returns) AS returns, SUM(total_overdue) AS overdue FROM System_Statistics WHERE date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}
{"prompt": "Show all login actions and table changes in the LMS this week.", "response": "SELECT * FROM Audit_Logs WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 7 DAY);"}
{"prompt": "nan", "response": "nan"}
{"prompt": "HospitalDB", "response": "nan"}
{"prompt": "doctor", "response": "nan"}
{"prompt": "Dr. Verma's Question", "response": "SQL Query"}
{"prompt": "I want to see all my appointments scheduled for today.", "response": "SELECT a.appointment_id, p.first_name, p.last_name, a.appointment_date, a.status, a.reason FROM Appointments a JOIN Patients p ON a.patient_id = p.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' AND DATE(a.appointment_date) = CURRENT_DATE;"}
{"prompt": "How many of my appointments today are follow-ups?", "response": "SELECT COUNT(*) FROM Appointments a JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' AND DATE(a.appointment_date) = CURRENT_DATE AND a.reason LIKE '%follow-up%';"}
{"prompt": "Let me review Ravi’s medical history.", "response": "SELECT mr.visit_date, mr.diagnosis, mr.treatment, mr.prescription, mr.notes FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE p.first_name = 'Ravi';"}
{"prompt": "Show me all medical records I entered today.", "response": "SELECT mr.record_id, p.first_name, p.last_name, mr.diagnosis, mr.treatment FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE mr.doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND mr.visit_date = CURRENT_DATE;"}
{"prompt": "Which patients did I prescribe medication to today?", "response": "SELECT DISTINCT p.first_name, p.last_name, mr.prescription FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE mr.doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND mr.visit_date = CURRENT_DATE AND mr.prescription IS NOT NULL;"}
{"prompt": "I want to see all appointments that are currently marked as 'Scheduled'.", "response": "SELECT a.appointment_id, p.first_name, p.last_name, a.appointment_date FROM Appointments a JOIN Patients p ON a.patient_id = p.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' AND a.status = 'Scheduled';"}
{"prompt": "List all the patients I’ve treated so far.", "response": "SELECT DISTINCT p.first_name, p.last_name FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE mr.doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma');"}
{"prompt": "How many unique patients have I treated?", "response": "SELECT COUNT(DISTINCT patient_id) FROM Medical_Records WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma');"}
{"prompt": "Show me all my past appointments that were completed.", "response": "SELECT a.appointment_id, a.appointment_date, a.reason FROM Appointments a JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' AND a.status = 'Completed';"}
{"prompt": "I want to find appointments that were canceled.", "response": "SELECT a.appointment_id, a.appointment_date, p.first_name, p.last_name FROM Appointments a JOIN Patients p ON a.patient_id = p.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' AND a.status = 'Cancelled';"}
{"prompt": "What diagnoses have I recorded most frequently?", "response": "SELECT diagnosis, COUNT(*) AS count FROM Medical_Records WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') GROUP BY diagnosis ORDER BY count DESC;"}
{"prompt": "Which patients have multiple appointments with me?", "response": "SELECT p.first_name, p.last_name, COUNT(*) AS total_appointments FROM Appointments a JOIN Patients p ON a.patient_id = p.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' GROUP BY p.first_name, p.last_name HAVING COUNT(*) > 1;"}
{"prompt": "Show all patients I’ve treated in the Cardiology department.", "response": "SELECT DISTINCT p.first_name, p.last_name FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id JOIN Doctors d ON mr.doctor_id = d.doctor_id WHERE d.name = 'Dr. Anil Verma' AND d.department = 'Cardiology';"}
{"prompt": "I want to see all prescriptions I’ve written this month.", "response": "SELECT prescription FROM Medical_Records WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND EXTRACT(MONTH FROM visit_date) = EXTRACT(MONTH FROM CURRENT_DATE);"}
{"prompt": "Which days in the last week did I have appointments?", "response": "SELECT DISTINCT DATE(appointment_date) AS day FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND appointment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many appointments did I have last week?", "response": "SELECT COUNT(*) FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND appointment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which patients have no prescription records from me?", "response": "SELECT DISTINCT p.first_name, p.last_name FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE mr.doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND (mr.prescription IS NULL OR mr.prescription = '');"}
{"prompt": "I want to check all medical records where I wrote notes.", "response": "SELECT record_id, notes FROM Medical_Records WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') AND notes IS NOT NULL;"}
{"prompt": "Show me the latest patient record I entered.", "response": "SELECT * FROM Medical_Records WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE name = 'Dr. Anil Verma') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What is my department and availability status?", "response": "SELECT department, availability FROM Doctors WHERE name = 'Dr. Anil Verma';"}
{"prompt": "Nurse", "response": "nan"}
{"prompt": "Natural Language Question (Nurse's POV)", "response": "SQL Query"}
{"prompt": "Show my assigned patients in Ward 3.", "response": "SELECT patient_id, first_name, last_name FROM Patients WHERE address like '%Ward 3%';"}
{"prompt": "How many patients am I responsible for in Ward 3?", "response": "SELECT COUNT(*) FROM Patients WHERE address like '%Ward 3%';"}
{"prompt": "What is Mr. Sharma’s contact information?", "response": "SELECT phone, email FROM Patients WHERE last_name = 'Sharma';"}
{"prompt": "What doctor is currently on duty for Ward 3?", "response": "SELECT name, phone FROM Doctors WHERE department = 'Ward 3' AND availability like '%on-duty%';"}
{"prompt": "Show patients currently admitted in Ward 3.", "response": "SELECT DISTINCT p.patient_id, p.first_name, p.last_name FROM Patients p JOIN Medical_Records mr ON p.patient_id = mr.patient_id WHERE p.address like '%Ward 3%';"}
{"prompt": "How many patients did I administer medication to today?", "response": "SELECT COUNT(DISTINCT patient_id) FROM Medical_Records WHERE visit_date = CURRENT_DATE AND treatment like '%medication%';"}
{"prompt": "Show today’s records with IV fluids prescribed.", "response": "SELECT patient_id, treatment FROM Medical_Records WHERE visit_date = CURRENT_DATE AND treatment like '%IV fluid%';"}
{"prompt": "What prescriptions were added today for my Ward 3 patients?", "response": "SELECT p.first_name, p.last_name, mr.prescription FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE mr.visit_date = CURRENT_DATE AND p.address like '%Ward 3%' AND mr.prescription IS NOT NULL;"}
{"prompt": "What notes did I enter today for my patients?", "response": "SELECT notes FROM Medical_Records WHERE visit_date = CURRENT_DATE AND notes IS NOT NULL;"}
{"prompt": "Show discharge records today for my patients.", "response": "SELECT patient_id, diagnosis, notes FROM Medical_Records WHERE visit_date = CURRENT_DATE AND notes like '%discharge%';"}
{"prompt": "Did any patient show abnormal oxygen levels today?", "response": "SELECT patient_id, notes FROM Medical_Records WHERE visit_date = CURRENT_DATE AND notes like '%oxygen saturation%';"}
{"prompt": "What was prescribed today for Mr. Sharma?", "response": "SELECT prescription FROM Medical_Records WHERE patient_id = (SELECT patient_id FROM Patients WHERE last_name = 'Sharma') AND visit_date = CURRENT_DATE;"}
{"prompt": "How many patient records did I update today in Ward 3?", "response": "SELECT COUNT(*) FROM Medical_Records mr JOIN Patients p ON mr.patient_id = p.patient_id WHERE mr.visit_date = CURRENT_DATE AND p.address like '%Ward 3%';"}
{"prompt": "Which patients got medication at 9 a.m. today?", "response": "SELECT patient_id, treatment FROM Medical_Records WHERE visit_date = CURRENT_DATE AND treatment like '%9 a.m.%';"}
{"prompt": "Are there any pending tasks I handed over today?", "response": "SELECT notes FROM Medical_Records WHERE visit_date = CURRENT_DATE AND notes like '%pending tasks%';"}
{"prompt": "Who had their IV fluid bags replaced today?", "response": "SELECT patient_id, treatment FROM Medical_Records WHERE visit_date = CURRENT_DATE AND treatment like '%IV bag%';"}
{"prompt": "What is my shift timing?", "response": "SELECT shift FROM Nurses WHERE name = 'Nurse Priya';"}
{"prompt": "How many patients had vitals recorded this morning?", "response": "SELECT COUNT(*) FROM Medical_Records WHERE visit_date = CURRENT_DATE AND (notes like '%blood pressure%' OR notes like '%temperature%' OR notes like '%heart rate%');"}
{"prompt": "Show vitals recorded today for Ward 3 patients.", "response": "SELECT patient_id, notes FROM Medical_Records WHERE visit_date = CURRENT_DATE AND patient_id IN (SELECT patient_id FROM Patients WHERE address like '%Ward 3%');"}
{"prompt": "Which Ward 3 patients were treated more than once this week?", "response": "SELECT patient_id, COUNT(*) AS visit_count FROM Medical_Records WHERE visit_date >= CURRENT_DATE - INTERVAL '7 days' AND patient_id IN (SELECT patient_id FROM Patients WHERE address like '%Ward 3%') GROUP BY patient_id HAVING COUNT(*) > 1;"}
{"prompt": "RECEPTIONIST", "response": "nan"}
{"prompt": "Question", "response": "SQL Query"}
{"prompt": "What are today’s appointments for all patients?", "response": "SELECT * FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "Which patients have upcoming appointments with Dr. Anil Verma today?", "response": "SELECT p.* FROM Patients p JOIN Appointments a ON p.patient_id = a.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.name = 'Anil Verma' AND DATE(a.appointment_date) = CURRENT_DATE;"}
{"prompt": "How do I register a new patient, Mr. Rohit Mehra, in the system?", "response": "INSERT INTO Patients (first_name, last_name, gender, dob, phone, email, address, registration_date) VALUES ('Rohit', 'Mehra', 'Male', [dob], [phone], [email], [address], CURRENT_DATE);"}
{"prompt": "How do I book an appointment for Mr. Rohit Mehra with Dr. Anil Verma at 10:30 AM?", "response": "INSERT INTO Appointments (patient_id, doctor_id, appointment_date, status, reason) VALUES ([patient_id], [doctor_id], '2025-06-09 10:30:00', 'Scheduled', [reason]);"}
{"prompt": "How do I reschedule an appointment for a patient who called in?", "response": "UPDATE Appointments SET appointment_date = [new_datetime] WHERE appointment_id = [appointment_id];"}
{"prompt": "How do I view a patient’s profile by name?", "response": "SELECT * FROM Patients WHERE first_name = '[Name]' OR last_name = '[Name]';"}
{"prompt": "What is the availability of Dr. Anil Verma for today?", "response": "SELECT availability FROM Doctors WHERE name = 'Anil Verma';"}
{"prompt": "Which doctors are available for appointments today?", "response": "SELECT name, availability FROM Doctors WHERE availability LIKE '%today%';"}
{"prompt": "How do I print the appointment slip for a specific appointment?", "response": "SELECT a.*, p.first_name, p.last_name, d.name FROM Appointments a JOIN Patients p ON a.patient_id = p.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE a.appointment_id = [appointment_id];"}
{"prompt": "How do I check if a patient is already registered?", "response": "SELECT * FROM Patients WHERE first_name = '[Name]' AND last_name = '[Name]';"}
{"prompt": "How do I update a patient’s contact information?", "response": "UPDATE Patients SET phone = '[new_phone]', email = '[new_email]' WHERE patient_id = [patient_id];"}
{"prompt": "How do I view all appointments for a specific department today?", "response": "SELECT a.* FROM Appointments a JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE d.department = '[Department]' AND DATE(a.appointment_date) = CURRENT_DATE;"}
{"prompt": "How do I generate a quick admission record for a walk-in emergency patient?", "response": "INSERT INTO Medical_Records (patient_id, doctor_id, visit_date, diagnosis, treatment, prescription, notes) VALUES ([patient_id], [doctor_id], CURRENT_DATE, 'Emergency', '', '', 'Walk-in emergency');"}
{"prompt": "How do I print the daily appointment summary?", "response": "SELECT a.*, p.first_name, p.last_name, d.name FROM Appointments a JOIN Patients p ON a.patient_id = p.patient_id JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE DATE(a.appointment_date) = CURRENT_DATE;"}
{"prompt": "How do I find all appointments that need to be rescheduled?", "response": "SELECT * FROM Appointments WHERE status = 'Rescheduled';"}
{"prompt": "How do I find all appointments for a specific patient?", "response": "SELECT * FROM Appointments WHERE patient_id = [patient_id];"}
{"prompt": "How do I check the current status of an appointment?", "response": "SELECT status FROM Appointments WHERE appointment_id = [appointment_id];"}
{"prompt": "How do I view all emergency admissions for the day?", "response": "SELECT * FROM Medical_Records WHERE diagnosis = 'Emergency' AND visit_date = CURRENT_DATE;"}
{"prompt": "How do I view the list of all doctors in a particular department?", "response": "SELECT * FROM Doctors WHERE department = '[Department]';"}
{"prompt": "How do I find all patients registered on a specific date?", "response": "SELECT * FROM Patients WHERE DATE(registration_date) = '[YYYY-MM-DD]';"}
{"prompt": "ADMINISTRATOR", "response": "nan"}
{"prompt": "Question", "response": "SQL Query"}
{"prompt": "How do I view all login actions in the audit logs from the last 24 hours?", "response": "SELECT * FROM Audit_Logs WHERE action_type = 'Login' AND timestamp >= (CURRENT_TIMESTAMP - INTERVAL 1 DAY);"}
{"prompt": "How do I check for unauthorized login attempts in the audit logs?", "response": "SELECT * FROM Audit_Logs WHERE action_type = 'Login' AND action LIKE '%unauthorized%';"}
{"prompt": "How do I see all actions performed by a specific user in the audit logs?", "response": "SELECT * FROM Audit_Logs WHERE user_id = [user_id] ORDER BY timestamp DESC;"}
{"prompt": "How do I list all nurses in the system?", "response": "SELECT * FROM Nurses;"}
{"prompt": "How do I create a new nurse account?", "response": "INSERT INTO Nurses (name, email, phone, assigned_ward, shift) VALUES ([name], [email], [phone], [assigned_ward], [shift]);"}
{"prompt": "How do I assign a role to a staff member?", "response": "UPDATE Staff SET role = '[role]' WHERE staff_id = [staff_id];"}
{"prompt": "How do I find doctors with expired credentials?", "response": "/* No credential expiry field in schema; cannot query directly */"}
{"prompt": "How do I reset a doctor's contact information?", "response": "UPDATE Doctors SET email = '[new_email]', phone = '[new_phone]' WHERE doctor_id = [doctor_id];"}
{"prompt": "How do I view the backup-related actions in the audit logs?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%backup%';"}
{"prompt": "How do I view all audit log entries from today?", "response": "SELECT * FROM Audit_Logs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "How do I find system actions related to performance in the audit logs?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%performance%' OR action LIKE '%response%';"}
{"prompt": "How do I list all staff and their roles?", "response": "SELECT staff_id, name, role FROM Staff;"}
{"prompt": "How do I view all policy changes made in the last week?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%policy%' AND timestamp >= (CURRENT_TIMESTAMP - INTERVAL 7 DAY);"}
{"prompt": "How do I list all departments and their OPD hours?", "response": "/* No OPD hours field in Departments table; cannot query directly */"}
{"prompt": "How do I view all audit log entries for the Appointments table?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Appointments';"}
{"prompt": "How do I find all users who made changes to the system in the last week?", "response": "SELECT DISTINCT user_id FROM Audit_Logs WHERE timestamp >= (CURRENT_TIMESTAMP - INTERVAL 7 DAY);"}
{"prompt": "How do I view all actions performed on the Nurses table?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Nurses';"}
{"prompt": "How do I find all staff who are not assigned to any department?", "response": "SELECT staff_id, name FROM Staff WHERE department IS NULL OR department = '';"}
{"prompt": "How do I list all feedback items submitted in the last month?", "response": "SELECT * FROM Feedback WHERE submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "How do I view all audit log entries related to backup or restore actions?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%backup%' OR action LIKE '%restore%';"}
{"prompt": "DATA ANALYST", "response": "nan"}
{"prompt": "Question", "response": "SQL Query"}
{"prompt": "What is the trend in patient admissions over the past three months?", "response": "SELECT DATE(visit_date) as admission_date, COUNT(*) as admissions FROM Medical_Records WHERE visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY DATE(visit_date);"}
{"prompt": "How many emergency admissions have occurred in the past three months?", "response": "SELECT COUNT(*) as emergency_admissions FROM Medical_Records WHERE diagnosis = 'Emergency' AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "How many emergency cases were on weekends over the past three months?", "response": "SELECT COUNT(*) as weekend_emergencies FROM Medical_Records WHERE diagnosis = 'Emergency' AND DAYOFWEEK(visit_date) IN (1,7) AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Which doctors have seen the most patients in the last three months?", "response": "SELECT d.doctor_id, d.name, COUNT(m.record_id) as patients_seen FROM Doctors d LEFT JOIN Medical_Records m ON d.doctor_id = m.doctor_id WHERE m.visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY d.doctor_id, d.name ORDER BY patients_seen DESC;"}
{"prompt": "How many patients did each doctor see last week?", "response": "SELECT d.doctor_id, d.name, COUNT(m.record_id) as patients_seen FROM Doctors d LEFT JOIN Medical_Records m ON d.doctor_id = m.doctor_id WHERE m.visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY d.doctor_id, d.name;"}
{"prompt": "What is the average daily patient admission for the past three months?", "response": "SELECT AVG(daily_count) as avg_daily_admissions FROM (SELECT DATE(visit_date) as date, COUNT(*) as daily_count FROM Medical_Records WHERE visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY DATE(visit_date)) as daily_admissions;"}
{"prompt": "Which departments handle the most emergency cases?", "response": "SELECT d.department, COUNT(m.record_id) as emergency_cases FROM Doctors d JOIN Medical_Records m ON d.doctor_id = m.doctor_id WHERE m.diagnosis = 'Emergency' AND m.visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY d.department ORDER BY emergency_cases DESC;"}
{"prompt": "How many patients have multiple emergency admissions in the last month?", "response": "SELECT patient_id, COUNT(*) as emergency_admissions FROM Medical_Records WHERE diagnosis = 'Emergency' AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY patient_id HAVING COUNT(*) > 1;"}
{"prompt": "Which doctors are assigned to which departments?", "response": "SELECT doctor_id, name, department FROM Doctors;"}
{"prompt": "What is the total number of appointments scheduled in the past week?", "response": "SELECT COUNT(*) as weekly_appointments FROM Appointments WHERE appointment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);"}
{"prompt": "What is the breakdown of appointment statuses for the past week?", "response": "SELECT status, COUNT(*) as count FROM Appointments WHERE appointment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY status;"}
{"prompt": "How many new patients were registered in the last month?", "response": "SELECT COUNT(*) as new_patients FROM Patients WHERE registration_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the gender distribution of patients admitted in the last month?", "response": "SELECT gender, COUNT(*) as count FROM Patients WHERE patient_id IN (SELECT DISTINCT patient_id FROM Medical_Records WHERE visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) GROUP BY gender;"}
{"prompt": "Which patients have the most medical records in the last three months?", "response": "SELECT patient_id, COUNT(*) as record_count FROM Medical_Records WHERE visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY patient_id ORDER BY record_count DESC;"}
{"prompt": "How many patients were billed in the past month?", "response": "SELECT COUNT(DISTINCT patient_id) as billed_patients FROM Billing WHERE billing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the total revenue generated from billing in the past month?", "response": "SELECT SUM(total_amount) as total_revenue FROM Billing WHERE billing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What are the most common reasons for appointments in the last week?", "response": "SELECT reason, COUNT(*) as count FROM Appointments WHERE appointment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY reason ORDER BY count DESC;"}
{"prompt": "Which wards have the most nurses assigned?", "response": "SELECT assigned_ward, COUNT(*) as nurse_count FROM Nurses GROUP BY assigned_ward ORDER BY nurse_count DESC;"}
{"prompt": "How many feedback items were resolved in the last month?", "response": "SELECT COUNT(*) as resolved_feedback FROM Feedback WHERE resolved = TRUE AND submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the trend in system usage based on audit logs in the last month?", "response": "SELECT DATE(timestamp) as log_date, COUNT(*) as log_count FROM Audit_Logs WHERE timestamp >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY DATE(timestamp);"}
{"prompt": "IT / DATABASE ENGINEER", "response": "nan"}
{"prompt": "Question", "response": "SQL Query"}
{"prompt": "How do I check for failed login attempts in the audit logs in the last 24 hours?", "response": "SELECT * FROM Audit_Logs WHERE action_type = 'Login' AND action LIKE '%failed%' AND timestamp >= (CURRENT_TIMESTAMP - INTERVAL 1 DAY);"}
{"prompt": "How do I view all login actions in the audit logs today?", "response": "SELECT * FROM Audit_Logs WHERE action_type = 'Login' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "How do I see all actions performed by a specific user in the audit logs?", "response": "SELECT * FROM Audit_Logs WHERE user_id = [user_id] ORDER BY timestamp DESC;"}
{"prompt": "How do I find all audit log entries for the Billing table this week?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Billing' AND timestamp >= (CURRENT_DATE - INTERVAL 7 DAY);"}
{"prompt": "How do I list all patients who do not have a billing record?", "response": "SELECT p.patient_id, p.first_name, p.last_name FROM Patients p LEFT JOIN Billing b ON p.patient_id = b.patient_id WHERE b.patient_id IS NULL;"}
{"prompt": "How do I list all patients who do not have any medical records?", "response": "SELECT p.patient_id, p.first_name, p.last_name FROM Patients p LEFT JOIN Medical_Records m ON p.patient_id = m.patient_id WHERE m.patient_id IS NULL;"}
{"prompt": "How do I list all patients who do not have any appointments?", "response": "SELECT p.patient_id, p.first_name, p.last_name FROM Patients p LEFT JOIN Appointments a ON p.patient_id = a.patient_id WHERE a.patient_id IS NULL;"}
{"prompt": "How do I check for appointments referencing non-existent patients?", "response": "SELECT a.appointment_id FROM Appointments a LEFT JOIN Patients p ON a.patient_id = p.patient_id WHERE p.patient_id IS NULL;"}
{"prompt": "How do I check for billing records referencing non-existent appointments?", "response": "SELECT b.bill_id FROM Billing b LEFT JOIN Appointments a ON b.appointment_id = a.appointment_id WHERE a.appointment_id IS NULL;"}
{"prompt": "How do I check for medical records referencing non-existent doctors?", "response": "SELECT m.record_id FROM Medical_Records m LEFT JOIN Doctors d ON m.doctor_id = d.doctor_id WHERE d.doctor_id IS NULL;"}
{"prompt": "How do I create an index on the last_name column in the Patients table?", "response": "CREATE INDEX idx_patients_last_name ON Patients(last_name);"}
{"prompt": "How do I view the structure of the Patients table?", "response": "DESCRIBE Patients;"}
{"prompt": "How do I add a new column for vaccination status to the Patients table?", "response": "ALTER TABLE Patients ADD COLUMN vaccination_status VARCHAR(50);"}
{"prompt": "How do I confirm the vaccination_status column was added to the Patients table?", "response": "DESCRIBE Patients;"}
{"prompt": "How do I see all audit log entries related to schema changes?", "response": "SELECT * FROM Audit_Logs WHERE action LIKE '%ALTER%' OR action LIKE '%CREATE%' OR action LIKE '%DROP%';"}
{"prompt": "How do I check the number of audit log entries per day for the last week?", "response": "SELECT DATE(timestamp) as log_date, COUNT(*) as count FROM Audit_Logs WHERE timestamp >= (CURRENT_DATE - INTERVAL 7 DAY) GROUP BY DATE(timestamp);"}
{"prompt": "How do I view all actions on the Patients table in the audit logs?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Patients';"}
{"prompt": "How do I check for duplicate patient phone numbers?", "response": "SELECT phone, count(*) as count FROM Patients GROUP BY phone HAVING count(*) > 1;"}
{"prompt": "How do I find all patients with missing email addresses?", "response": "SELECT patient_id, first_name, last_name FROM Patients WHERE email IS NULL OR email = '';"}
{"prompt": "How do I check for any nurses without an assigned ward?", "response": "SELECT nurse_id, name FROM Nurses WHERE assigned_ward IS NULL OR assigned_ward = '';"}
{"prompt": "AUDITOR / QUALITY ASSURANCE", "response": "nan"}
{"prompt": "Question", "response": "SQL Query"}
{"prompt": "Which medical records are missing diagnosis information?", "response": "SELECT * FROM Medical_Records WHERE diagnosis IS NULL OR diagnosis = '';"}
{"prompt": "Which medical records are missing doctor notes?", "response": "SELECT * FROM Medical_Records WHERE notes IS NULL OR notes = '';"}
{"prompt": "Which medical records are missing treatment information?", "response": "SELECT * FROM Medical_Records WHERE treatment IS NULL OR treatment = '';"}
{"prompt": "What percentage of recent medical records are missing essential notes?", "response": "SELECT (count(*) * 100.0 / (SELECT count(*) FROM Medical_Records WHERE visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH))) AS percent_missing FROM Medical_Records WHERE (notes IS NULL OR notes = '') AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "How many emergency admissions were recorded in the last quarter?", "response": "SELECT COUNT(*) FROM Medical_Records WHERE diagnosis = 'Emergency' AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Which patients had multiple emergency admissions in the last quarter?", "response": "SELECT patient_id, count(*) as emergency_admissions FROM Medical_Records WHERE diagnosis = 'Emergency' AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY patient_id HAVING count(*) > 1;"}
{"prompt": "Which doctors have the most emergency cases assigned in the last quarter?", "response": "SELECT doctor_id, COUNT(*) as emergency_cases FROM Medical_Records WHERE diagnosis = 'Emergency' AND visit_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY doctor_id ORDER BY emergency_cases DESC;"}
{"prompt": "Which nurses have not been assigned to any ward?", "response": "SELECT nurse_id, name FROM Nurses WHERE assigned_ward IS NULL OR assigned_ward = '';"}
{"prompt": "Which nurses are assigned to the most wards?", "response": "SELECT assigned_ward, COUNT(*) as nurse_count FROM Nurses GROUP BY assigned_ward ORDER BY nurse_count DESC;"}
{"prompt": "Which patients have no appointments scheduled?", "response": "SELECT p.patient_id, p.first_name, p.last_name FROM Patients p LEFT JOIN Appointments a ON p.patient_id = a.patient_id WHERE a.appointment_id IS NULL;"}
{"prompt": "Which appointments have not been assigned to any doctor?", "response": "SELECT * FROM Appointments WHERE doctor_id IS NULL;"}
{"prompt": "Which billing records are missing payment method information?", "response": "SELECT * FROM Billing WHERE payment_method IS NULL OR payment_method = '';"}
{"prompt": "Which billing records are unpaid?", "response": "SELECT * FROM Billing WHERE paid = FALSE;"}
{"prompt": "Which patients have multiple billing records in the last month?", "response": "SELECT patient_id, count(*) as bill_count FROM Billing WHERE billing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY patient_id HAVING count(*) > 1;"}
{"prompt": "Which staff members are not assigned to any department?", "response": "SELECT staff_id, name FROM Staff WHERE department IS NULL OR department = '';"}
{"prompt": "Which audit log entries show updates to patient records in the last quarter?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Patients' AND action_type = 'UPDATE' AND timestamp >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Which users made changes to the Medical_Records table in the last month?", "response": "SELECT DISTINCT user_id FROM Audit_Logs WHERE table_name = 'Medical_Records' AND timestamp >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which audit log entries indicate deletions in the Billing table?", "response": "SELECT * FROM Audit_Logs WHERE table_name = 'Billing' AND action_type = 'DELETE';"}
{"prompt": "Which patients have missing email addresses?", "response": "SELECT patient_id, first_name, last_name FROM Patients WHERE email IS NULL OR email = '';"}
{"prompt": "Which departments do not have a head of department assigned?", "response": "SELECT * FROM Departments WHERE head_of_department IS NULL OR head_of_department = '';"}
{"prompt": "nan", "response": "nan"}
{"prompt": "ECommerce", "response": "nan"}
{"prompt": "CUSTOMER", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are the latest summer clothing products available on TrendyCart?", "response": "SELECT * FROM Products WHERE category = 'Summer Clothing' AND is_active = TRUE ORDER BY added_date DESC;"}
{"prompt": "What items did Riya add to her cart on Sunday evening?", "response": "SELECT oi.product_id, p.name, oi.quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND DATE(o.order_date) = '2025-06-08';"}
{"prompt": "What discount did Riya receive on her recent order?", "response": "SELECT (total_amount / 0.85) - total_amount AS discount FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "Which payment method did Riya use for her last order?", "response": "SELECT payment_method FROM Payments WHERE order_id = (SELECT order_id FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What is the estimated delivery date for Riya’s last order?", "response": "SELECT delivered_date FROM Deliveries WHERE order_id = (SELECT order_id FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What is the current status of Riya’s most recent order?", "response": "SELECT status FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "Has Riya received a confirmation email for her last order?", "response": "SELECT COUNT(*) > 0 AS confirmation_sent FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND action = 'Order Confirmation Email Sent' AND timestamp >= (SELECT order_date FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What products has Riya reviewed in the last week?", "response": "SELECT p.name, pr.rating, pr.review_text FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id WHERE pr.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND pr.review_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the review Riya left for the product she bought last week?", "response": "SELECT pr.review_text, pr.rating FROM ProductReviews pr JOIN Orders o ON pr.user_id = o.user_id WHERE pr.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND pr.product_id IN (SELECT oi.product_id FROM OrderItems oi WHERE oi.order_id = o.order_id AND o.user_id = pr.user_id AND o.order_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 14 DAY) AND DATE_SUB(CURDATE(), INTERVAL 7 DAY));"}
{"prompt": "What products are currently in Riya's wishlist?", "response": "-- Assuming a Wishlist table exists: SELECT p.name FROM Wishlist w JOIN Products p ON w.product_id = p.product_id WHERE w.user_id = (SELECT user_id FROM Users WHERE name = 'Riya');"}
{"prompt": "What support tickets has Riya raised this week?", "response": "SELECT subject, message, status FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND created_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the status of Riya’s latest return request?", "response": "SELECT status FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND subject LIKE '%return%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What pickup time slot did Riya select for her return?", "response": "-- Assuming a ReturnRequests table exists: SELECT pickup_time FROM ReturnRequests WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY request_date DESC LIMIT 1;"}
{"prompt": "How many orders has Riya placed in the last month?", "response": "SELECT COUNT(*) FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the total amount Riya has spent on TrendyCart to date?", "response": "SELECT SUM(total_amount) FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya');"}
{"prompt": "Which delivery agent is handling Riya’s current order?", "response": "SELECT agent_id FROM Deliveries WHERE order_id = (SELECT order_id FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What is the delivery status of Riya’s last order?", "response": "SELECT delivery_status FROM Deliveries WHERE order_id = (SELECT order_id FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What address did Riya use for her most recent order?", "response": "SELECT delivery_address FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "What brands has Riya purchased most frequently?", "response": "SELECT p.brand, COUNT(*) as purchase_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.user_id = (SELECT user_id FROM Users WHERE name = 'Riya') GROUP BY p.brand ORDER BY purchase_count DESC;"}
{"prompt": "What is the average rating Riya gives in her product reviews?", "response": "SELECT AVG(rating) FROM ProductReviews WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Riya');"}
{"prompt": "ADMIN", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What is today’s overall system sales performance?", "response": "SELECT report_date, total_sales, total_orders, returns_count FROM SystemStats WHERE report_date = '2025-06-09';"}
{"prompt": "How many new users registered today?", "response": "SELECT new_users FROM SystemStats WHERE report_date = '2025-06-09';"}
{"prompt": "How many electronics orders were placed today?", "response": "SELECT COUNT(*) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Electronics' AND DATE(o.order_date) = '2025-06-09';"}
{"prompt": "Which products in the electronics category sold the most today?", "response": "SELECT p.name, SUM(oi.quantity) as total_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Electronics' AND DATE(o.order_date) = '2025-06-09' GROUP BY p.name ORDER BY total_sold DESC;"}
{"prompt": "Which users registered as sellers today?", "response": "SELECT user_id, name, email, registration_date FROM Users WHERE role = 'seller' AND registration_date = '2025-06-09';"}
{"prompt": "Which newly registered sellers are pending document verification?", "response": "SELECT user_id, name, registration_date FROM Users WHERE role = 'seller' AND is_active = FALSE AND registration_date = '2025-06-09';"}
{"prompt": "Which seller uploaded an invalid GST certificate today?", "response": "SELECT user_id, name FROM AuditLogs WHERE action = 'Invalid GST Certificate Uploaded' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "Which seller accounts have been flagged for review today?", "response": "SELECT user_id, name FROM AuditLogs WHERE action = 'Seller Flagged for Review' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "Which payments failed today?", "response": "SELECT payment_id, order_id, amount, payment_method FROM Payments WHERE payment_status = 'Failed' AND DATE(payment_date) = '2025-06-09';"}
{"prompt": "Which user reported a failed payment today?", "response": "SELECT DISTINCT p.user_id, u.name FROM Payments p JOIN Orders o ON p.order_id = o.order_id JOIN Users u ON o.user_id = u.user_id WHERE p.payment_status = 'Failed' AND DATE(p.payment_date) = '2025-06-09';"}
{"prompt": "What are the details of failed payment transactions today?", "response": "SELECT payment_id, order_id, amount, payment_method, payment_status FROM Payments WHERE payment_status = 'Failed' AND DATE(payment_date) = '2025-06-09';"}
{"prompt": "Which products are currently out of stock?", "response": "SELECT product_id, name FROM Products WHERE stock_quantity = 0 AND is_active = TRUE;"}
{"prompt": "Which sellers have out-of-stock products?", "response": "SELECT DISTINCT p.brand FROM Products p WHERE p.stock_quantity = 0 AND p.is_active = TRUE;"}
{"prompt": "Which products need inventory updates?", "response": "SELECT product_id, name FROM Products WHERE stock_quantity < 5 AND is_active = TRUE;"}
{"prompt": "What changes did Aman make to the home page banners today?", "response": "SELECT * FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aman') AND action LIKE '%banner%' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "What discounts were updated for the weekend sale?", "response": "SELECT * FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aman') AND action LIKE '%discount%' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "Which products are currently included in active discount campaigns?", "response": "SELECT p.name, mc.name as campaign_name, mc.budget, mc.start_date, mc.end_date FROM MarketingCampaigns mc JOIN Products p ON mc.campaign_id = p.product_id WHERE mc.start_date <= '2025-06-09' AND mc.end_date >= '2025-06-09';"}
{"prompt": "Which product links on the home page are currently active?", "response": "SELECT product_id, name FROM Products WHERE is_active = TRUE;"}
{"prompt": "What actions did Aman perform during his shift today?", "response": "SELECT action, table_name, action_type, timestamp FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aman') AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "What was the peak order hour today?", "response": "SELECT HOUR(order_date) as hour, COUNT(*) as order_count FROM Orders WHERE DATE(order_date) = '2025-06-09' GROUP BY hour ORDER BY order_count DESC LIMIT 1;"}
{"prompt": "DELIVERY AGENT", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "How many pending deliveries are assigned to Rahul today?", "response": "SELECT COUNT(*) FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Pending' AND dispatched_date = '2025-06-09';"}
{"prompt": "What are the order IDs and addresses for Rahul’s deliveries today?", "response": "SELECT order_id, delivery_notes FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND dispatched_date = '2025-06-09';"}
{"prompt": "Which zones are Rahul’s deliveries scheduled for today?", "response": "SELECT DISTINCT delivery_notes AS zone FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND dispatched_date = '2025-06-09';"}
{"prompt": "Which packages has Rahul scanned into his van today?", "response": "SELECT order_id, delivery_status FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND dispatched_date = '2025-06-09';"}
{"prompt": "Which delivery did Rahul mark as “Out for Delivery” first today?", "response": "SELECT order_id FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Out for Delivery' AND dispatched_date = '2025-06-09' ORDER BY dispatched_date, delivery_id LIMIT 1;"}
{"prompt": "Which order did Rahul successfully deliver today?", "response": "SELECT order_id FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Delivered' AND delivered_date = '2025-06-09';"}
{"prompt": "What is the OTP verification status for Rahul’s delivered orders today?", "response": "-- Not in schema, but if available in AuditLogs: SELECT order_id, action FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND action LIKE '%OTP Verified%' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "Which delivery was marked as “Return Initiated” by Rahul today?", "response": "SELECT order_id FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Return Initiated' AND dispatched_date = '2025-06-09';"}
{"prompt": "What was the reason for return on Rahul’s route today?", "response": "SELECT order_id, delivery_notes FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Return Initiated' AND dispatched_date = '2025-06-09';"}
{"prompt": "Which orders did Rahul return to the warehouse today?", "response": "SELECT order_id FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Return Initiated' AND delivered_date = '2025-06-09';"}
{"prompt": "Which delivery had an address correction today?", "response": "-- If logged in AuditLogs: SELECT order_id, action FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND action LIKE '%Address Corrected%' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "Which support ticket did Rahul open for address issues today?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND subject LIKE '%address%' AND created_at >= '2025-06-09 00:00:00';"}
{"prompt": "How many successful deliveries did Rahul complete today?", "response": "SELECT COUNT(*) FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Delivered' AND delivered_date = '2025-06-09';"}
{"prompt": "How many returns did Rahul handle today?", "response": "SELECT COUNT(*) FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Return Initiated' AND dispatched_date = '2025-06-09';"}
{"prompt": "How many delivery issues did Rahul encounter today?", "response": "-- If issues are logged in AuditLogs: SELECT COUNT(*) FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND action_type = 'Issue' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "What is the summary of Rahul’s delivery report for today?", "response": "SELECT delivery_status, COUNT(*) as total FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND dispatched_date = '2025-06-09' GROUP BY delivery_status;"}
{"prompt": "Which orders are still pending for Rahul at the end of the day?", "response": "SELECT order_id FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Pending' AND dispatched_date = '2025-06-09';"}
{"prompt": "What time did Rahul submit his delivery report today?", "response": "-- If logged in AuditLogs: SELECT timestamp FROM AuditLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND action = 'Submitted Delivery Report' AND DATE(timestamp) = '2025-06-09';"}
{"prompt": "What feedback did customers give for Rahul’s deliveries today?", "response": "-- If feedback is in ProductReviews or another table: SELECT pr.review_text, pr.rating FROM ProductReviews pr JOIN Orders o ON pr.product_id = o.order_id WHERE o.order_id IN (SELECT order_id FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivered_date = '2025-06-09');"}
{"prompt": "What is Rahul’s delivery completion rate for today?", "response": "SELECT (SELECT count(*) FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND delivery_status = 'Delivered' AND dispatched_date = '2025-06-09') / (SELECT count(*) FROM Deliveries WHERE agent_id = (SELECT user_id FROM Users WHERE name = 'Rahul') AND dispatched_date = '2025-06-09') * 100 AS completion_rate;"}
{"prompt": "CUSTOMER SUPPORT", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What is Sana’s user ID?", "response": "SELECT user_id FROM Users WHERE name = 'Sana'"}
{"prompt": "What is the product ID for the wireless headphones Sana ordered?", "response": "SELECT product_id FROM Products WHERE name LIKE '%wireless headphones%' AND is_active = TRUE"}
{"prompt": "What are the details of Sana’s latest order for wireless headphones?", "response": "SELECT order_id, order_date, delivery_address FROM Orders WHERE user_id = 101 AND order_id IN (SELECT order_id FROM OrderItems WHERE product_id = 501) ORDER BY order_date DESC LIMIT 1"}
{"prompt": "What is the current delivery status and notes for Sana’s headphones order?", "response": "SELECT delivery_status, delivered_date, delivery_notes FROM Deliveries WHERE order_id = 1001"}
{"prompt": "Has Sana raised any support tickets about her delivery issue?", "response": "SELECT ticket_id, subject, status, created_at, resolved_at, handled_by FROM SupportTickets WHERE user_id = 101 AND subject LIKE '%delivery%' ORDER BY created_at DESC LIMIT 1"}
{"prompt": "Which support agent handled Sana’s complaint about the delivery?", "response": "SELECT * FROM SupportTickets WHERE ticket_id = 201 AND handled_by = 102"}
{"prompt": "What instructions or updates did Sana receive about tracking her complaint?", "response": "SELECT message FROM SupportTickets WHERE ticket_id = 201 AND user_id = 101"}
{"prompt": "Was there any OTP or image confirmation for Sana’s delivery?", "response": "SELECT delivery_notes FROM Deliveries WHERE order_id = 1001 AND (delivery_notes LIKE '%OTP%' OR delivery_notes LIKE '%image%')"}
{"prompt": "When was the support ticket about Sana’s delivery issue created and resolved?", "response": "SELECT created_at, resolved_at FROM SupportTickets WHERE ticket_id = 201"}
{"prompt": "What is the current status of Sana’s support ticket?", "response": "SELECT status FROM SupportTickets WHERE ticket_id = 201"}
{"prompt": "What was the subject of Sana’s support ticket?", "response": "SELECT subject FROM SupportTickets WHERE ticket_id = 201"}
{"prompt": "Has a request for investigation been initiated for Sana’s delivery?", "response": "SELECT status FROM SupportTickets WHERE ticket_id = 201 AND subject LIKE '%investigation%'"}
{"prompt": "What is the expected resolution time for Sana’s complaint?", "response": "SELECT message FROM SupportTickets WHERE ticket_id = 201 AND user_id = 101"}
{"prompt": "Did Sana request a refund or replacement for her order?", "response": "SELECT message FROM SupportTickets WHERE ticket_id = 201 AND user_id = 101 AND (message LIKE '%refund%' OR message LIKE '%replacement%')"}
{"prompt": "Which section should Sana use to track her complaint progress?", "response": "SELECT message FROM SupportTickets WHERE ticket_id = 201 AND user_id = 101"}
{"prompt": "What are the details of the delivery agent who marked Sana’s order as delivered?", "response": "SELECT agent_id FROM Deliveries WHERE order_id = 1001"}
{"prompt": "Was there any discrepancy noted in the delivery notes for Sana’s order?", "response": "SELECT delivery_notes FROM Deliveries WHERE order_id = 1001"}
{"prompt": "Has Sana received any updates on her support ticket since it was created?", "response": "SELECT message FROM SupportTickets WHERE ticket_id = 201 AND user_id = 101"}
{"prompt": "What actions did support agent Riya take regarding Sana’s complaint?", "response": "SELECT * FROM SupportTickets WHERE ticket_id = 201 AND handled_by = 102"}
{"prompt": "How can Sana contact customer support for further updates?", "response": "SELECT message FROM SupportTickets WHERE ticket_id = 201 AND user_id = 101"}
{"prompt": "DATA ANALYST", "response": "nan"}
{"prompt": "NL Question (Raj’s POV)", "response": "SQL Query"}
{"prompt": "How many refund requests were made for wireless electronics in the last 2 weeks?", "response": "SELECT COUNT(*) FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Electronics' AND st.subject LIKE '%refund%' AND st.created_at >= DATE_SUB(CURDATE(), INTERVAL 14 DAY);"}
{"prompt": "Which products in the 'Wireless Headphones' category had the most refund requests recently?", "response": "SELECT p.name, COUNT(*) AS refund_count FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND st.subject LIKE '%refund%' AND st.created_at >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) GROUP BY p.name ORDER BY refund_count DESC;"}
{"prompt": "What is the percentage increase in refunds for wireless electronics compared to the previous 2 weeks?", "response": "SELECT ( (SELECT count(*) FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Electronics' AND st.subject LIKE '%refund%' AND st.created_at BETWEEN DATE_SUB(CURDATE(), INTERVAL 14 DAY) AND CURDATE()) / (SELECT count(*) FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Electronics' AND st.subject LIKE '%refund%' AND st.created_at BETWEEN DATE_SUB(CURDATE(), INTERVAL 28 DAY) AND DATE_SUB(CURDATE(), INTERVAL 14 DAY)) - 1 ) * 100 AS percent_increase;"}
{"prompt": "Which seller had the highest number of refund requests for wireless headphones?", "response": "SELECT p.brand, COUNT(*) AS refund_count FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND st.subject LIKE '%refund%' AND st.created_at >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) GROUP BY p.brand ORDER BY refund_count DESC;"}
{"prompt": "What are the most common reasons for return in wireless electronics?", "response": "SELECT st.message, COUNT(*) AS count FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Electronics' AND st.subject LIKE '%return%' AND st.created_at >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) GROUP BY st.message ORDER BY count DESC;"}
{"prompt": "How many deliveries for wireless headphones were delayed in the last 2 weeks?", "response": "SELECT COUNT(*) FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND d.delivery_status != 'Delivered' AND d.dispatched_date < DATE_SUB(d.delivered_date, INTERVAL 3 DAY) AND d.dispatched_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY);"}
{"prompt": "Which courier partner had the most delayed deliveries for wireless headphones?", "response": "SELECT d.agent_id, COUNT(*) AS delay_count FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND d.delivery_status != 'Delivered' AND d.dispatched_date < DATE_SUB(d.delivered_date, INTERVAL 3 DAY) AND d.dispatched_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) GROUP BY d.agent_id ORDER BY delay_count DESC;"}
{"prompt": "What is the average delivery time for wireless headphones in the last month?", "response": "SELECT AVG(DATEDIFF(d.delivered_date, d.dispatched_date)) AS avg_delivery_days FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND d.delivered_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"}
{"prompt": "What is the average customer review rating for wireless headphones from the flagged seller?", "response": "SELECT AVG(pr.rating) FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND p.brand = 'FlaggedSeller';"}
{"prompt": "How many poor reviews (below 2 stars) did the flagged seller receive in the last month?", "response": "SELECT COUNT(*) FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND p.brand = 'FlaggedSeller' AND pr.rating < 2 AND pr.review_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"}
{"prompt": "What are the most common negative review comments for wireless headphones?", "response": "SELECT pr.review_text, COUNT(*) AS count FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND pr.rating < 3 GROUP BY pr.review_text ORDER BY count DESC LIMIT 10;"}
{"prompt": "Which orders for wireless headphones were marked as incorrect product delivered?", "response": "SELECT o.order_id FROM Orders o JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id JOIN SupportTickets st ON st.user_id = o.user_id WHERE p.category = 'Wireless Headphones' AND st.message LIKE '%incorrect product%';"}
{"prompt": "How many customers complained about receiving the wrong product in wireless electronics?", "response": "SELECT COUNT(DISTINCT st.user_id) FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Electronics' AND st.message LIKE '%wrong product%';"}
{"prompt": "Which seller was deactivated due to performance issues?", "response": "SELECT user_id, name FROM Users WHERE role = 'seller' AND is_active = FALSE AND user_id IN (SELECT DISTINCT p.brand FROM Products p WHERE p.category = 'Wireless Headphones');"}
{"prompt": "When was the flagged seller’s account deactivated?", "response": "SELECT timestamp FROM AuditLogs WHERE action = 'Seller Deactivated' AND user_id = (SELECT user_id FROM Users WHERE name = 'FlaggedSeller') ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "How many refund requests are still unresolved for wireless headphones?", "response": "SELECT COUNT(*) FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND st.subject LIKE '%refund%' AND st.status != 'Resolved';"}
{"prompt": "What is the total refund amount processed for wireless headphones in the last 2 weeks?", "response": "SELECT SUM(p.price * oi.quantity) AS total_refund FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND st.subject LIKE '%refund%' AND st.created_at >= DATE_SUB(CURDATE(), INTERVAL 14 DAY);"}
{"prompt": "Which customers requested multiple refunds for wireless headphones?", "response": "SELECT st.user_id, COUNT(*) AS refund_count FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Headphones' AND st.subject LIKE '%refund%' GROUP BY st.user_id HAVING refund_count > 1;"}
{"prompt": "What is the trend of refund requests for wireless electronics over the past month?", "response": "SELECT DATE(st.created_at) AS date, COUNT(*) AS refund_count FROM SupportTickets st JOIN Orders o ON st.user_id = o.user_id JOIN OrderItems oi ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Wireless Electronics' AND st.subject LIKE '%refund%' AND st.created_at >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY DATE(st.created_at) ORDER BY date;"}
{"prompt": "Which products in wireless electronics have the lowest average review rating?", "response": "SELECT p.name, AVG(pr.rating) AS avg_rating FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id WHERE p.category = 'Wireless Electronics' GROUP BY p.name ORDER BY avg_rating ASC LIMIT 5;"}
{"prompt": "MARKETING", "response": "nan"}
{"prompt": "NL Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "How many first-time buyers made purchases during the summer sale campaign?", "response": "SELECT COUNT(DISTINCT o.user_id) FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE u.registration_date >= (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND o.order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale');"}
{"prompt": "What was the total sales amount for fashion products during the campaign?", "response": "SELECT SUM(oi.quantity * oi.price_per_unit) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Fashion' AND o.order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale');"}
{"prompt": "How many users abandoned their carts during the campaign period?", "response": "-- Assuming AuditLogs logs 'Cart Abandoned' actions: SELECT COUNT(DISTINCT user_id) FROM AuditLogs WHERE action = 'Cart Abandoned' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale');"}
{"prompt": "Which marketing platform brought the highest conversion rate for the campaign?", "response": "SELECT platform, conversion_rate FROM MarketingCampaigns WHERE name = 'Summer Sale' ORDER BY conversion_rate DESC LIMIT 1;"}
{"prompt": "What was the average order value for first-time buyers during the campaign?", "response": "SELECT AVG(total_amount) FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE u.registration_date >= (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND o.order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale');"}
{"prompt": "How many users used the 20% discount code successfully?", "response": "-- Assuming AuditLogs logs 'Discount Applied' actions: SELECT COUNT(DISTINCT user_id) FROM AuditLogs WHERE action = 'Discount Applied' AND table_name = 'Orders' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale');"}
{"prompt": "How many orders were placed via mobile devices during the campaign?", "response": "-- Assuming AuditLogs or Orders logs device info: SELECT COUNT(*) FROM Orders WHERE order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND delivery_address LIKE '%Mobile%';"}
{"prompt": "What was the bounce rate on the summer sale landing page during the campaign?", "response": "-- If tracked in AuditLogs: SELECT (SELECT count(*) FROM AuditLogs WHERE action = 'Landing Page Visit' AND table_name = 'Summer Sale' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale')) / (SELECT count(*) FROM AuditLogs WHERE action = 'Landing Page Exit' AND table_name = 'Summer Sale' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale')) * 100 AS bounce_rate;"}
{"prompt": "Which products had the highest cart abandonment rates during the campaign?", "response": "-- Assuming AuditLogs logs product in 'Cart Abandoned': SELECT p.name, COUNT(*) AS abandonment_count FROM AuditLogs a JOIN Products p ON a.table_name = 'Products' AND a.action = 'Cart Abandoned' AND a.timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale') GROUP BY p.name ORDER BY abandonment_count DESC;"}
{"prompt": "How many users returned to complete their purchases after retargeting?", "response": "-- Assuming AuditLogs logs 'Retargeted Purchase': SELECT COUNT(DISTINCT user_id) FROM AuditLogs WHERE action = 'Retargeted Purchase' AND timestamp BETWEEN DATE_ADD((SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale'), INTERVAL 1 DAY) AND DATE_ADD((SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale'), INTERVAL 5 DAY);"}
{"prompt": "What was the increase in sales after fixing the discount code bug?", "response": "SELECT (SELECT SUM(total_amount) FROM Orders WHERE order_date BETWEEN DATE_ADD((SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale'), INTERVAL 1 DAY) AND DATE_ADD((SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale'), INTERVAL 5 DAY)) / (SELECT SUM(total_amount) FROM Orders WHERE order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale')) * 100 - 100 AS sales_increase_percent;"}
{"prompt": "Which UTM links generated the most traffic to the campaign landing page?", "response": "-- Assuming AuditLogs logs UTM info: SELECT action, COUNT(*) AS click_count FROM AuditLogs WHERE action LIKE 'UTM%' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale') GROUP BY action ORDER BY click_count DESC;"}
{"prompt": "Which landing page (A/B test) had the highest conversion rate?", "response": "-- Assuming AuditLogs logs landing page version: SELECT table_name AS landing_page, COUNT(*) AS conversions FROM AuditLogs WHERE action = 'Order Placed' AND table_name LIKE 'LandingPage%' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale') GROUP BY table_name ORDER BY conversions DESC;"}
{"prompt": "How many users clicked through from Instagram, Google Ads, and email respectively?", "response": "SELECT platform, COUNT(*) AS clicks FROM MarketingCampaigns WHERE name = 'Summer Sale' GROUP BY platform;"}
{"prompt": "What was the total budget spent on the summer sale campaign?", "response": "SELECT budget FROM MarketingCampaigns WHERE name = 'Summer Sale';"}
{"prompt": "How many orders were placed using the summer sale campaign discount code on mobile vs desktop?", "response": "-- Assuming AuditLogs logs device info and discount code: SELECT table_name AS device, COUNT(*) FROM AuditLogs WHERE action = 'Discount Applied' AND timestamp BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale') GROUP BY table_name;"}
{"prompt": "What was the average time between cart creation and order placement during the campaign?", "response": "-- If times are logged in AuditLogs: SELECT AVG(TIMESTAMPDIFF(MINUTE, (SELECT timestamp FROM AuditLogs WHERE action = 'Cart Created' AND user_id = o.user_id AND timestamp <= o.order_date ORDER BY timestamp DESC LIMIT 1), o.order_date)) AS avg_time_to_purchase FROM Orders o WHERE o.order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale');"}
{"prompt": "How many users received the campaign email newsletter?", "response": "SELECT COUNT(*) FROM MarketingCampaigns WHERE name = 'Summer Sale' AND platform = 'Email';"}
{"prompt": "What was the conversion rate for first-time buyers during the campaign?", "response": "SELECT (SELECT COUNT(DISTINCT o.user_id) FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE u.registration_date >= (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND o.order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale')) / (SELECT COUNT(*) FROM Users WHERE registration_date >= (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale')) * 100 AS conversion_rate;"}
{"prompt": "Which fashion products had the highest sales during the campaign?", "response": "SELECT p.name, SUM(oi.quantity) AS total_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Fashion' AND o.order_date BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Summer Sale') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Summer Sale') GROUP BY p.name ORDER BY total_sold DESC;"}
{"prompt": "IT / DATABASE ENGINEER", "response": "nan"}
{"prompt": "NL Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "Which queries are currently consuming the most database resources?", "response": "SELECT action, COUNT(*) AS execution_count FROM AuditLogs WHERE action_type = 'Query' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY) GROUP BY action ORDER BY execution_count DESC;"}
{"prompt": "How many orders were placed in the last 24 hours?", "response": "SELECT COUNT(*) FROM Orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "Which orders have not received confirmation status?", "response": "SELECT order_id FROM Orders WHERE status != 'Confirmed';"}
{"prompt": "What is the average response time for order confirmation queries today?", "response": "-- Assuming AuditLogs logs query times: SELECT AVG(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) FROM AuditLogs WHERE action = 'Order Confirmation Query' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which tables have the highest row counts and may need archiving?", "response": "SELECT table_name, COUNT(*) AS row_count FROM information_schema.tables WHERE table_schema = 'quickcart_db' GROUP BY table_name ORDER BY row_count DESC;"}
{"prompt": "How much data was archived from the Orders table today?", "response": "SELECT COUNT(*) FROM ArchivedOrders WHERE archived_date = CURDATE();"}
{"prompt": "Which indexes exist on the Orders table?", "response": "SHOW INDEX FROM Orders;"}
{"prompt": "Which queries were optimized today?", "response": "SELECT action, timestamp FROM AuditLogs WHERE action_type = 'Query Optimized' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the current size of the Orders table?", "response": "SELECT table_name, ROUND((data_length + index_length) / 1024 / 1024, 2) AS size_mb FROM information_schema.tables WHERE table_name = 'Orders';"}
{"prompt": "How many slow queries were logged in the last 24 hours?", "response": "SELECT COUNT(*) FROM AuditLogs WHERE action_type = 'Slow Query' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "Which users reported order confirmation delays today?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE subject LIKE '%order confirmation%' AND created_at >= CURDATE();"}
{"prompt": "How many automated cleanup scripts ran successfully today?", "response": "SELECT COUNT(*) FROM AuditLogs WHERE action = 'Cleanup Script Executed' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which records were moved to the archive table today?", "response": "SELECT order_id FROM ArchivedOrders WHERE archived_date = CURDATE();"}
{"prompt": "What is the trend of order processing time over the past week?", "response": "SELECT DATE(order_date) AS date, AVG(TIMESTAMPDIFF(SECOND, order_date, (SELECT MIN(timestamp) FROM AuditLogs WHERE action = 'Order Confirmed' AND table_name = 'Orders' AND log_id = Orders.order_id))) AS avg_processing_time FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY DATE(order_date);"}
{"prompt": "What are the most common unoptimized queries in the logs?", "response": "SELECT action, COUNT(*) AS count FROM AuditLogs WHERE action_type = 'Unoptimized Query' GROUP BY action ORDER BY count DESC;"}
{"prompt": "How many queries have been logged for usage analysis today?", "response": "SELECT COUNT(*) FROM AuditLogs WHERE action_type = 'Query' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the current memory usage of the orders database?", "response": "-- Requires DBMS-specific command, e.g., SHOW STATUS LIKE 'Innodb_buffer_pool_bytes_data';"}
{"prompt": "Which indexes were added to the Orders table today?", "response": "SELECT * FROM AuditLogs WHERE action = 'Index Added' AND table_name = 'Orders' AND DATE(timestamp) = CURDATE();"}
{"prompt": "How many users were affected by the order confirmation delay?", "response": "SELECT COUNT(DISTINCT user_id) FROM SupportTickets WHERE subject LIKE '%order confirmation%' AND created_at >= CURDATE();"}
{"prompt": "When was the last database scaling strategy document updated?", "response": "SELECT MAX(timestamp) FROM AuditLogs WHERE action = 'Scaling Strategy Documented';"}
{"prompt": "nan", "response": "nan"}
{"prompt": "nan", "response": "nan"}
{"prompt": "SchoolDB", "response": "nan"}
{"prompt": "STUDENT", "response": "nan"}
{"prompt": "NL Question (Aarav’s POV or about Aarav)", "response": "SQL Query"}
{"prompt": "What is Aarav’s full profile and contact information?", "response": "SELECT * FROM Students WHERE first_name = 'Aarav';"}
{"prompt": "Who are Aarav’s parents and what are their contact details?", "response": "SELECT * FROM Parents WHERE parent_id = (SELECT parent_id FROM Students WHERE first_name = 'Aarav');"}
{"prompt": "Which grade and section is Aarav currently in?", "response": "SELECT grade, section FROM Students WHERE first_name = 'Aarav';"}
{"prompt": "What subjects is Aarav enrolled in this academic year?", "response": "SELECT s.name FROM Enrollments e JOIN Subjects s ON e.subject_id = s.subject_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav');"}
{"prompt": "Who are Aarav’s subject teachers?", "response": "SELECT s.name AS subject, t.name AS teacher FROM Enrollments e JOIN Subjects s ON e.subject_id = s.subject_id JOIN Teachers t ON s.teacher_id = t.teacher_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav');"}
{"prompt": "What is Aarav’s attendance record for the past month?", "response": "SELECT date, status FROM Attendance WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are Aarav’s latest exam results?", "response": "SELECT ex.name AS exam, s.name AS subject, r.marks_obtained, r.grade FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects s ON ex.subject_id = s.subject_id WHERE r.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') ORDER BY ex.exam_date DESC;"}
{"prompt": "Has Aarav paid all his school fees?", "response": "SELECT amount, due_date, payment_status, payment_date FROM Fees WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav');"}
{"prompt": "Which books has Aarav borrowed from the library this year?", "response": "SELECT l.title, l.author, b.issue_date, b.return_date, b.returned FROM BookIssues b JOIN Library l ON b.book_id = l.book_id WHERE b.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND YEAR(b.issue_date) = YEAR(CURDATE());"}
{"prompt": "What is the name and contact of Aarav’s class teacher?", "response": "SELECT t.name, t.email, t.phone FROM Classes c JOIN Teachers t ON c.class_teacher_id = t.teacher_id WHERE c.grade = (SELECT grade FROM Students WHERE first_name = 'Aarav') AND c.section = (SELECT section FROM Students WHERE first_name = 'Aarav');"}
{"prompt": "What are the latest notices relevant to Aarav’s grade?", "response": "SELECT title, message, date_posted FROM Notices WHERE target_audience = (SELECT grade FROM Students WHERE first_name = 'Aarav') OR target_audience = 'All' ORDER BY date_posted DESC;"}
{"prompt": "What science exams has Aarav appeared for this year?", "response": "SELECT ex.name, ex.exam_date, r.marks_obtained FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects s ON ex.subject_id = s.subject_id WHERE r.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND s.name = 'Science' AND YEAR(ex.exam_date) = YEAR(CURDATE());"}
{"prompt": "Did Aarav participate in any school events or exhibitions recently?", "response": "-- Assuming events are posted as Notices: SELECT title, message, date_posted FROM Notices WHERE message LIKE '%Aarav%' AND date_posted >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is Aarav’s overall grade average this year?", "response": "SELECT AVG(r.marks_obtained) FROM Results r WHERE r.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND r.grade IS NOT NULL;"}
{"prompt": "Has Aarav received any awards or recognition?", "response": "-- If awards are posted as Notices or in Results.grade: SELECT title, message, date_posted FROM Notices WHERE message LIKE '%Aarav%' AND (message LIKE '%prize%' OR message LIKE '%award%');"}
{"prompt": "How many days was Aarav absent in the last term?", "response": "SELECT COUNT(*) FROM Attendance WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND status = 'Absent' AND date >= (SELECT MIN(date) FROM Attendance WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND MONTH(date) = MONTH(CURDATE()));"}
{"prompt": "What is the list of all classmates in Aarav’s section?", "response": "SELECT first_name, last_name FROM Students WHERE grade = (SELECT grade FROM Students WHERE first_name = 'Aarav') AND section = (SELECT section FROM Students WHERE first_name = 'Aarav');"}
{"prompt": "Which subjects does Aarav help his classmates with?", "response": "-- If peer help is tracked in AuditLogs: SELECT action, timestamp FROM AuditLogs WHERE user_id = (SELECT student_id FROM Students WHERE first_name = 'Aarav') AND action LIKE '%helped%';"}
{"prompt": "What is the current student count and attendance rate in Aarav’s grade?", "response": "SELECT total_students, attendance_rate FROM SystemStats WHERE report_date = CURDATE();"}
{"prompt": "What are the upcoming exams for Aarav?", "response": "SELECT ex.name, s.name AS subject, ex.exam_date FROM Exams ex JOIN Subjects s ON ex.subject_id = s.subject_id WHERE ex.grade = (SELECT grade FROM Students WHERE first_name = 'Aarav') AND ex.exam_date > CURDATE();"}
{"prompt": "TEACHER", "response": "nan"}
{"prompt": "NL Question (Mrs. Sharma’s POV or about her)", "response": "SQL Query"}
{"prompt": "What is Mrs. Sharma’s full profile and contact information?", "response": "SELECT * FROM Teachers WHERE name = 'Mrs. Sharma';"}
{"prompt": "Which classes does Mrs. Sharma teach?", "response": "SELECT grade, section FROM Classes WHERE class_teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma');"}
{"prompt": "Which subjects is Mrs. Sharma responsible for?", "response": "SELECT name, code, grade FROM Subjects WHERE teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma');"}
{"prompt": "How many years has Mrs. Sharma been teaching?", "response": "SELECT YEAR(CURDATE()) - YEAR(hire_date) AS years_teaching FROM Teachers WHERE name = 'Mrs. Sharma';"}
{"prompt": "What is the list of students in Mrs. Sharma’s English classes?", "response": "SELECT s.first_name, s.last_name, s.grade, s.section FROM Enrollments e JOIN Subjects sub ON e.subject_id = sub.subject_id JOIN Students s ON e.student_id = s.student_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English';"}
{"prompt": "What is the average grade of students in Mrs. Sharma’s English subject?", "response": "SELECT AVG(r.marks_obtained) FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects sub ON ex.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English';"}
{"prompt": "What is the attendance record for Mrs. Sharma’s English classes this month?", "response": "SELECT s.first_name, s.last_name, a.date, a.status FROM Attendance a JOIN Students s ON a.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id JOIN Subjects sub ON e.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which students participated in the poetry competition organized by Mrs. Sharma?", "response": "SELECT s.first_name, s.last_name FROM Notices n JOIN Students s ON n.message LIKE CONCAT('%', s.first_name, '%', s.last_name, '%') WHERE n.title LIKE '%Poetry Competition%' AND n.posted_by = 'Mrs. Sharma' AND n.date_posted >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What was the announcement message for the poetry competition?", "response": "SELECT title, message, date_posted FROM Notices WHERE title LIKE '%Poetry Competition%' AND posted_by = 'Mrs. Sharma' ORDER BY date_posted DESC LIMIT 1;"}
{"prompt": "How many students in Mrs. Sharma’s class improved their English grades after the competition?", "response": "SELECT COUNT(DISTINCT r.student_id) FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects sub ON ex.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND ex.exam_date > (SELECT date_posted FROM Notices WHERE title LIKE '%Poetry Competition%' AND posted_by = 'Mrs. Sharma' ORDER BY date_posted DESC LIMIT 1);"}
{"prompt": "Which shy students participated in the poetry competition?", "response": "-- If shyness is tracked in a student profile or remarks: SELECT s.first_name, s.last_name FROM Students s JOIN Notices n ON n.message LIKE CONCAT('%', s.first_name, '%', s.last_name, '%') WHERE n.title LIKE '%Poetry Competition%' AND n.message LIKE '%shy%' AND n.posted_by = 'Mrs. Sharma';"}
{"prompt": "What feedback did Mrs. Sharma give to her students after the competition?", "response": "SELECT message FROM Notices WHERE title LIKE '%Poetry Competition%' AND posted_by = 'Mrs. Sharma' AND message LIKE '%feedback%';"}
{"prompt": "What are the upcoming English exams scheduled by Mrs. Sharma?", "response": "SELECT ex.name, ex.exam_date FROM Exams ex JOIN Subjects sub ON ex.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND ex.exam_date > CURDATE();"}
{"prompt": "Which students have perfect attendance in Mrs. Sharma’s English classes this year?", "response": "SELECT s.first_name, s.last_name FROM Students s WHERE NOT EXISTS (SELECT 1 FROM Attendance a JOIN Enrollments e ON a.student_id = e.student_id JOIN Subjects sub ON e.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND a.status != 'Present' AND a.student_id = s.student_id AND YEAR(a.date) = YEAR(CURDATE()));"}
{"prompt": "What is the gender ratio in Mrs. Sharma’s English classes?", "response": "SELECT gender, COUNT(*) AS count FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Subjects sub ON e.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' GROUP BY gender;"}
{"prompt": "How many students in Mrs. Sharma’s classes have overdue library books?", "response": "SELECT COUNT(DISTINCT s.student_id) FROM BookIssues b JOIN Students s ON b.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id JOIN Subjects sub ON e.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND b.returned = FALSE AND b.return_date < CURDATE();"}
{"prompt": "What is the average attendance rate in Mrs. Sharma’s English classes this term?", "response": "SELECT AVG(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) AS attendance_rate FROM Attendance a JOIN Students s ON a.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id JOIN Subjects sub ON e.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND a.date >= (SELECT MIN(date) FROM Attendance WHERE YEAR(date) = YEAR(CURDATE()));"}
{"prompt": "Which students have shown the most improvement in English this year?", "response": "SELECT s.first_name, s.last_name, MAX(r.marks_obtained) - MIN(r.marks_obtained) AS improvement FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects sub ON ex.subject_id = sub.subject_id JOIN Students s ON r.student_id = s.student_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English' AND YEAR(ex.exam_date) = YEAR(CURDATE()) GROUP BY s.student_id ORDER BY improvement DESC LIMIT 5;"}
{"prompt": "What is the list of all English subject exams Mrs. Sharma has conducted?", "response": "SELECT ex.name, ex.exam_date, ex.max_marks FROM Exams ex JOIN Subjects sub ON ex.subject_id = sub.subject_id WHERE sub.teacher_id = (SELECT teacher_id FROM Teachers WHERE name = 'Mrs. Sharma') AND sub.name = 'English';"}
{"prompt": "What school-wide notices has Mrs. Sharma posted?", "response": "SELECT title, message, date_posted FROM Notices WHERE posted_by = 'Mrs. Sharma' AND (target_audience = 'All' OR target_audience IS NULL);"}
{"prompt": "SCHOOL ADMIN", "response": "nan"}
{"prompt": "NL Question (Mr. Rajan’s POV or about his tasks)", "response": "SQL Query"}
{"prompt": "What is the total number of students currently enrolled in the school?", "response": "SELECT COUNT(*) FROM Students;"}
{"prompt": "How many new admissions were made this academic year?", "response": "SELECT COUNT(*) FROM Students WHERE YEAR(admission_date) = YEAR(CURDATE());"}
{"prompt": "What is the full list of students with pending fee payments?", "response": "SELECT s.first_name, s.last_name, f.amount, f.due_date FROM Fees f JOIN Students s ON f.student_id = s.student_id WHERE f.payment_status != 'Paid';"}
{"prompt": "What is the attendance rate for today across the whole school?", "response": "SELECT attendance_rate FROM SystemStats WHERE report_date = CURDATE();"}
{"prompt": "Which students were absent today?", "response": "SELECT s.first_name, s.last_name, s.grade, s.section FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE a.date = CURDATE() AND a.status = 'Absent';"}
{"prompt": "Which teachers are currently employed at the school?", "response": "SELECT name, department, subject, email, phone FROM Teachers;"}
{"prompt": "Which classrooms are assigned to each class and who are the class teachers?", "response": "SELECT c.grade, c.section, c.room_number, t.name AS class_teacher FROM Classes c JOIN Teachers t ON c.class_teacher_id = t.teacher_id;"}
{"prompt": "What are the most recent notices posted for all students and parents?", "response": "SELECT title, message, date_posted FROM Notices WHERE target_audience = 'All' ORDER BY date_posted DESC LIMIT 5;"}
{"prompt": "What is the list of parents who have visited the school in the last week?", "response": "-- If parent visits are logged in AuditLogs: SELECT DISTINCT p.father_name, p.mother_name, p.phone FROM AuditLogs a JOIN Parents p ON a.user_id = p.parent_id WHERE a.role = 'parent' AND a.action LIKE '%visit%' AND a.timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the total fee collection for the current month?", "response": "SELECT SUM(amount) FROM Fees WHERE payment_status = 'Paid' AND MONTH(payment_date) = MONTH(CURDATE()) AND YEAR(payment_date) = YEAR(CURDATE());"}
{"prompt": "Which students have overdue library books?", "response": "SELECT s.first_name, s.last_name, l.title, b.issue_date, b.return_date FROM BookIssues b JOIN Students s ON b.student_id = s.student_id JOIN Library l ON b.book_id = l.book_id WHERE b.returned = FALSE AND b.return_date < CURDATE();"}
{"prompt": "What are the supply requests or needs reported by teachers this month?", "response": "-- If supply requests are logged in AuditLogs or Notices: SELECT action, timestamp, user_id FROM AuditLogs WHERE action LIKE '%supply%' AND role = 'teacher' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many students are there in each grade and section?", "response": "SELECT grade, section, COUNT(*) AS student_count FROM Students GROUP BY grade, section;"}
{"prompt": "What is the list of all upcoming exams and their dates?", "response": "SELECT ex.name, s.name AS subject, ex.exam_date, ex.max_marks FROM Exams ex JOIN Subjects s ON ex.subject_id = s.subject_id WHERE ex.exam_date > CURDATE() ORDER BY ex.exam_date;"}
{"prompt": "Which students have perfect attendance this term?", "response": "SELECT s.first_name, s.last_name FROM Students s WHERE NOT EXISTS (SELECT 1 FROM Attendance a WHERE a.student_id = s.student_id AND a.status != 'Present' AND a.date >= (SELECT MIN(date) FROM Attendance WHERE MONTH(date) = MONTH(CURDATE())));"}
{"prompt": "What are the details of the last Annual Day program organized at school?", "response": "SELECT title, message, date_posted FROM Notices WHERE title LIKE '%Annual Day%' ORDER BY date_posted DESC LIMIT 1;"}
{"prompt": "Which teachers were involved in organizing the last Annual Day?", "response": "-- If involvement is logged in AuditLogs or Notices: SELECT DISTINCT user_id FROM AuditLogs WHERE action LIKE '%Annual Day%' AND role = 'teacher' AND timestamp >= (SELECT MAX(date_posted) FROM Notices WHERE title LIKE '%Annual Day%');"}
{"prompt": "What are the most common parent queries about admissions?", "response": "-- If queries are logged in AuditLogs or Notices: SELECT action, COUNT(*) AS count FROM AuditLogs WHERE action LIKE '%admission%' AND role = 'parent' GROUP BY action ORDER BY count DESC;"}
{"prompt": "What is the average grade across all students for the current academic year?", "response": "SELECT average_grade FROM SystemStats WHERE report_date = CURDATE();"}
{"prompt": "Which students have recently updated their contact information?", "response": "SELECT s.first_name, s.last_name, a.timestamp FROM AuditLogs a JOIN Students s ON a.user_id = s.student_id WHERE a.action LIKE '%update%' AND a.table_name = 'Students' AND a.timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "PARENTS", "response": "nan"}
{"prompt": "NL Question (Mrs. Latha’s POV)", "response": "SQL Query"}
{"prompt": "What is Ananya’s profile and grade information?", "response": "SELECT * FROM Students WHERE first_name = 'Ananya' AND grade = '7';"}
{"prompt": "What are my (Mrs. Latha’s) contact details as Ananya’s parent?", "response": "SELECT * FROM Parents WHERE parent_id = (SELECT parent_id FROM Students WHERE first_name = 'Ananya' AND grade = '7');"}
{"prompt": "Is Ananya enrolled in Math this year?", "response": "SELECT s.name, s.subject_id FROM Enrollments e JOIN Subjects s ON e.subject_id = s.subject_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND s.name = 'Math';"}
{"prompt": "What are Ananya’s recent Math exam results?", "response": "SELECT ex.name AS exam_name, r.marks_obtained, r.grade, ex.exam_date FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects s ON ex.subject_id = s.subject_id WHERE r.student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND s.name = 'Math' ORDER BY ex.exam_date DESC LIMIT 5;"}
{"prompt": "Has Ananya won any prizes in art competitions?", "response": "SELECT title, message, date_posted FROM Notices WHERE message LIKE '%Ananya%' AND (title LIKE '%art competition%' OR message LIKE '%first prize%') ORDER BY date_posted DESC LIMIT 5;"}
{"prompt": "When did I last attend a parent-teacher meeting for Ananya?", "response": "SELECT * FROM AuditLogs WHERE user_id = (SELECT parent_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND action LIKE '%parent-teacher meeting%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "What is Ananya’s attendance record for the past month?", "response": "SELECT date, status FROM Attendance WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Who are Ananya’s teachers for her subjects?", "response": "SELECT s.name AS subject, t.name AS teacher FROM Enrollments e JOIN Subjects s ON e.subject_id = s.subject_id JOIN Teachers t ON s.teacher_id = t.teacher_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7');"}
{"prompt": "What is Ananya’s overall academic performance this year?", "response": "SELECT AVG(r.marks_obtained) FROM Results r WHERE r.student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7');"}
{"prompt": "Has Ananya borrowed any library books recently?", "response": "SELECT l.title, l.author, b.issue_date, b.return_date, b.returned FROM BookIssues b JOIN Library l ON b.book_id = l.book_id WHERE b.student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND YEAR(b.issue_date) = YEAR(CURDATE());"}
{"prompt": "What is the next upcoming exam for Ananya?", "response": "SELECT ex.name, s.name AS subject, ex.exam_date FROM Exams ex JOIN Subjects s ON ex.subject_id = s.subject_id WHERE ex.grade = '7' AND ex.exam_date > CURDATE() ORDER BY ex.exam_date ASC LIMIT 1;"}
{"prompt": "What are the latest notices relevant to Ananya’s grade?", "response": "SELECT title, message, date_posted FROM Notices WHERE target_audience = '7' OR target_audience = 'All' ORDER BY date_posted DESC LIMIT 5;"}
{"prompt": "What is Ananya’s fee payment status?", "response": "SELECT amount, due_date, payment_status, payment_date FROM Fees WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7');"}
{"prompt": "Who is Ananya’s class teacher?", "response": "SELECT t.name, t.email, t.phone FROM Classes c JOIN Teachers t ON c.class_teacher_id = t.teacher_id WHERE c.grade = '7' AND c.section = (SELECT section FROM Students WHERE first_name = 'Ananya' AND grade = '7');"}
{"prompt": "How many days was Ananya absent last month?", "response": "SELECT COUNT(*) FROM Attendance WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND status = 'Absent' AND date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Has Ananya’s performance in Math improved after extra help?", "response": "SELECT ex.exam_date, r.marks_obtained FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects s ON ex.subject_id = s.subject_id WHERE r.student_id = (SELECT student_id FROM Students WHERE first_name = 'Ananya' AND grade = '7') AND s.name = 'Math' ORDER BY ex.exam_date ASC;"}
{"prompt": "Has Ananya’s artwork or achievements been posted on the school app?", "response": "SELECT title, message, date_posted FROM Notices WHERE message LIKE '%Ananya%' AND (title LIKE '%art%' OR message LIKE '%achievement%') ORDER BY date_posted DESC;"}
{"prompt": "What are the upcoming parent-teacher meetings for Ananya’s grade?", "response": "SELECT title, message, date_posted FROM Notices WHERE (title LIKE '%parent-teacher meeting%' OR message LIKE '%parent-teacher meeting%') AND (target_audience = '7' OR target_audience = 'All') AND date_posted >= CURDATE();"}
{"prompt": "What is the list of Ananya’s classmates?", "response": "SELECT first_name, last_name FROM Students WHERE grade = '7' AND section = (SELECT section FROM Students WHERE first_name = 'Ananya' AND grade = '7');"}
{"prompt": "Has Ananya received any recent feedback from her teachers?", "response": "SELECT message, date_posted FROM Notices WHERE message LIKE '%Ananya%' AND (message LIKE '%feedback%' OR message LIKE '%progress%') ORDER BY date_posted DESC;"}
{"prompt": "DATA ANALYST", "response": "nan"}
{"prompt": "NL Question (Ms. Neha’s POV)", "response": "SQL Query"}
{"prompt": "What is the attendance record for all 9th-grade students in the last month?", "response": "SELECT a.student_id, a.date, a.status, s.section FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which section in 9th grade had the most absentees last month?", "response": "SELECT s.section, COUNT(*) AS absent_count FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND a.status = 'Absent' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY s.section ORDER BY absent_count DESC;"}
{"prompt": "Which students in 9th grade have the highest number of absences in the last month?", "response": "SELECT s.first_name, s.last_name, COUNT(*) AS absent_days FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND a.status = 'Absent' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY a.student_id ORDER BY absent_days DESC;"}
{"prompt": "What are the exam results for all 9th-grade students?", "response": "SELECT r.student_id, ex.name AS exam_name, r.marks_obtained, r.grade FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects s ON ex.subject_id = s.subject_id JOIN Students st ON r.student_id = st.student_id WHERE st.grade = '9';"}
{"prompt": "Which 9th-grade students scored below 50% in any subject?", "response": "SELECT st.first_name, st.last_name, ex.name, r.marks_obtained FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Students st ON r.student_id = st.student_id WHERE st.grade = '9' AND r.marks_obtained < 50;"}
{"prompt": "What is the average exam score for each 9th-grade section?", "response": "SELECT s.section, AVG(r.marks_obtained) AS avg_score FROM Results r JOIN Students s ON r.student_id = s.student_id WHERE s.grade = '9' GROUP BY s.section;"}
{"prompt": "Which teachers are teaching 9th-grade subjects?", "response": "SELECT t.teacher_id, t.name, t.department, t.subject FROM Teachers t JOIN Subjects s ON t.teacher_id = s.teacher_id WHERE s.grade = '9';"}
{"prompt": "What is the list of 9th-grade subjects and their respective teachers?", "response": "SELECT sub.name AS subject, t.name AS teacher FROM Subjects sub JOIN Teachers t ON sub.teacher_id = t.teacher_id WHERE sub.grade = '9';"}
{"prompt": "What parent feedback was submitted about 9th-grade students in the last month?", "response": "SELECT * FROM AuditLogs WHERE role = 'parent' AND action LIKE '%feedback%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most common topics in parent feedback for 9th grade?", "response": "SELECT action, COUNT(*) AS feedback_count FROM AuditLogs WHERE role = 'parent' AND action LIKE '%feedback%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY action ORDER BY feedback_count DESC;"}
{"prompt": "Which 9th-grade students have improved their attendance after the stress management session?", "response": "SELECT a.student_id, COUNT(*) AS present_days FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND a.status = 'Present' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 2 WEEK) GROUP BY a.student_id ORDER BY present_days DESC;"}
{"prompt": "What is the overall attendance rate for 9th grade in the last month?", "response": "SELECT (SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS attendance_rate FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which 9th-grade students were referred to the counselor for stress?", "response": "-- If referrals are logged: SELECT s.first_name, s.last_name FROM AuditLogs a JOIN Students s ON a.user_id = s.student_id WHERE a.action LIKE '%counselor%' AND s.grade = '9' AND a.timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the trend in attendance for 9th grade over the past three months?", "response": "SELECT DATE(a.date) AS day, COUNT(*) AS present_count FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND a.status = 'Present' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY DATE(a.date) ORDER BY day;"}
{"prompt": "Which students in 9th grade need extra academic support based on their exam results?", "response": "SELECT st.first_name, st.last_name, AVG(r.marks_obtained) AS avg_marks FROM Results r JOIN Students st ON r.student_id = st.student_id WHERE st.grade = '9' GROUP BY r.student_id HAVING avg_marks < 60;"}
{"prompt": "What are the average grades for each subject in 9th grade?", "response": "SELECT sub.name, AVG(r.marks_obtained) AS avg_marks FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects sub ON ex.subject_id = sub.subject_id JOIN Students st ON r.student_id = st.student_id WHERE st.grade = '9' GROUP BY sub.name;"}
{"prompt": "Which teachers have the highest average student marks in 9th grade?", "response": "SELECT t.name, AVG(r.marks_obtained) AS avg_marks FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Subjects sub ON ex.subject_id = sub.subject_id JOIN Teachers t ON sub.teacher_id = t.teacher_id JOIN Students st ON r.student_id = st.student_id WHERE st.grade = '9' GROUP BY t.teacher_id ORDER BY avg_marks DESC;"}
{"prompt": "What is the overall attendance and academic performance trend for 9th grade?", "response": "-- Attendance: SELECT DATE(a.date) AS day, (SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS attendance_rate FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' GROUP BY DATE(a.date); -- Academics: SELECT ex.exam_date, AVG(r.marks_obtained) AS avg_marks FROM Results r JOIN Exams ex ON r.exam_id = ex.exam_id JOIN Students st ON r.student_id = st.student_id WHERE st.grade = '9' GROUP BY ex.exam_date;"}
{"prompt": "Which 9th-grade students have received the most positive feedback from parents?", "response": "-- If positive feedback is logged: SELECT s.first_name, s.last_name, COUNT(*) AS feedback_count FROM AuditLogs a JOIN Students s ON a.user_id = s.student_id WHERE a.role = 'parent' AND a.action LIKE '%positive feedback%' AND s.grade = '9' GROUP BY s.student_id ORDER BY feedback_count DESC;"}
{"prompt": "What is the list of students in 9th grade, section A, who were absent most often last month?", "response": "SELECT s.first_name, s.last_name, COUNT(*) AS absent_days FROM Attendance a JOIN Students s ON a.student_id = s.student_id WHERE s.grade = '9' AND s.section = 'A' AND a.status = 'Absent' AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY a.student_id ORDER BY absent_days DESC;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "UniversityDB", "response": "nan"}
{"prompt": "STUDENTS", "response": "nan"}
{"prompt": "NL Question (Riya & Aditya’s POV)", "response": "SQL Query"}
{"prompt": "What is Riya’s student profile and major?", "response": "SELECT * FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024;"}
{"prompt": "What is Aditya’s student profile and major?", "response": "SELECT * FROM Students WHERE first_name = 'Aditya' AND enrollment_year = 2024;"}
{"prompt": "Which courses is Riya enrolled in for the current semester?", "response": "SELECT c.course_name, c.course_code FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024) AND c.semester = 'Spring 2025';"}
{"prompt": "Which courses is Aditya enrolled in for the current semester?", "response": "SELECT c.course_name, c.course_code FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aditya' AND enrollment_year = 2024) AND c.semester = 'Spring 2025';"}
{"prompt": "Has Riya enrolled in the Artificial Intelligence elective?", "response": "SELECT c.course_name FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024) AND c.course_name LIKE '%Artificial Intelligence%';"}
{"prompt": "What are Riya’s grades for the current semester?", "response": "SELECT c.course_name, e.grade FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024) AND c.semester = 'Spring 2025';"}
{"prompt": "What are Aditya’s grades for the current semester?", "response": "SELECT c.course_name, e.grade FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aditya' AND enrollment_year = 2024) AND c.semester = 'Spring 2025';"}
{"prompt": "What is Riya’s attendance record for this semester?", "response": "-- Assuming attendance is tracked in Enrollments or a separate table: SELECT c.course_name, e.status FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024) AND c.semester = 'Spring 2025';"}
{"prompt": "What is Aditya’s attendance record for this semester?", "response": "-- Same as above, replace Riya with Aditya."}
{"prompt": "What is the exam schedule for Riya’s registered courses?", "response": "-- If exam schedules are part of Courses or a related table: SELECT c.course_name, c.course_code, c.semester FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT student_id FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024) AND c.semester = 'Spring 2025';"}
{"prompt": "Which books has Riya reserved or borrowed from the library?", "response": "SELECT lb.title, bl.loan_date, bl.return_date, bl.status FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.student_id = (SELECT student_id FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024);"}
{"prompt": "Which books has Aditya reserved or borrowed from the library?", "response": "SELECT lb.title, bl.loan_date, bl.return_date, bl.status FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.student_id = (SELECT student_id FROM Students WHERE first_name = 'Aditya' AND enrollment_year = 2024);"}
{"prompt": "Has Aditya checked his academic transcript recently?", "response": "-- If transcript access is logged in ITSupport or Audit table: SELECT * FROM ITSupport WHERE submitted_by = 'Aditya' AND issue LIKE '%transcript%';"}
{"prompt": "Did Riya face any issues with course registration last semester?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Riya' AND issue LIKE '%course registration%' AND created_on BETWEEN '2024-07-01' AND '2024-12-31';"}
{"prompt": "Was Riya’s course registration issue resolved quickly?", "response": "SELECT status, created_on FROM ITSupport WHERE submitted_by = 'Riya' AND issue LIKE '%course registration%' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "What is the list of all support tickets raised by Riya?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Riya';"}
{"prompt": "Which extracurricular clubs has Aditya joined?", "response": "-- Assuming club participation is tracked in a related table or ITSupport: SELECT * FROM ITSupport WHERE submitted_by = 'Aditya' AND issue LIKE '%Entrepreneurship Club%';"}
{"prompt": "What is Aditya’s current GPA?", "response": "SELECT gpa FROM Students WHERE first_name = 'Aditya' AND enrollment_year = 2024;"}
{"prompt": "What is Riya’s current GPA?", "response": "SELECT gpa FROM Students WHERE first_name = 'Riya' AND enrollment_year = 2024;"}
{"prompt": "Who are the advisors for Riya and Aditya?", "response": "SELECT s.first_name, s.last_name, p.first_name AS advisor_first, p.last_name AS advisor_last FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN Professors p ON a.professor_id = p.professor_id WHERE s.first_name IN ('Riya','Aditya') AND s.enrollment_year = 2024;"}
{"prompt": "Professors", "response": "nan"}
{"prompt": "What is my (Dr. Meera’s) full faculty profile?", "response": "SELECT * FROM Professors WHERE first_name = 'Meera' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Physics');"}
{"prompt": "Which undergraduate courses am I teaching this semester?", "response": "SELECT course_id, course_name, course_code, credits, semester FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND semester = 'Spring 2025';"}
{"prompt": "Who are the postgraduate students I am currently supervising?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.major FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Meera' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Physics')) AND s.enrollment_year >= 2023;"}
{"prompt": "What is the attendance record for my current courses?", "response": "SELECT e.course_id, c.course_name, e.student_id, s.first_name, s.last_name, e.status FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id JOIN Students s ON e.student_id = s.student_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND c.semester = 'Spring 2025';"}
{"prompt": "What are the latest grades I have entered for my students?", "response": "SELECT e.student_id, s.first_name, s.last_name, e.course_id, c.course_name, e.grade FROM Enrollments e JOIN Students s ON e.student_id = s.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND e.grade IS NOT NULL ORDER BY e.enroll_date DESC LIMIT 20;"}
{"prompt": "Which students in my courses are at risk (GPA < 2.0)?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.gpa FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND s.gpa < 2.0 GROUP BY s.student_id;"}
{"prompt": "What is the list of all Physics department courses I can recommend as electives?", "response": "SELECT course_id, course_name, course_code, credits, semester FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Physics');"}
{"prompt": "Who are my advisees in the second year, and what are their current courses?", "response": "SELECT s.student_id, s.first_name, s.last_name, c.course_name FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Meera' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Physics')) AND s.enrollment_year = (YEAR(CURDATE()) - 2);"}
{"prompt": "What is the average grade in each of my courses this semester?", "response": "SELECT c.course_name, AVG(CASE WHEN e.grade ~ '^[0-9]+$' THEN CAST(e.grade AS DECIMAL) ELSE NULL END) AS avg_grade FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND c.semester = 'Spring 2025' GROUP BY c.course_name;"}
{"prompt": "What is the attendance percentage for each of my courses?", "response": "SELECT c.course_name, (SUM(CASE WHEN e.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS attendance_pct FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND c.semester = 'Spring 2025' GROUP BY c.course_name;"}
{"prompt": "What is the list of research projects involving my postgraduate students?", "response": "SELECT rp.title, rp.status FROM ResearchProjects rp JOIN Researchers r ON rp.project_id = r.project_title WHERE r.name IN (SELECT CONCAT(s.first_name, ' ', s.last_name) FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Meera' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Physics')) AND s.enrollment_year >= 2023);"}
{"prompt": "What support or IT tickets have I submitted recently?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Meera' ORDER BY created_on DESC;"}
{"prompt": "What is the status of my latest leave application?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Meera' AND issue LIKE '%leave%' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "What is the status of my latest travel request?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Meera' AND issue LIKE '%travel%' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "What is the list of all students enrolled in my Physics courses this semester?", "response": "SELECT s.student_id, s.first_name, s.last_name, c.course_name FROM Enrollments e JOIN Students s ON e.student_id = s.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND c.semester = 'Spring 2025';"}
{"prompt": "What is the list of all Professors in the Physics department?", "response": "SELECT first_name, last_name, title, email FROM Professors WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Physics');"}
{"prompt": "What is the GPA distribution of students in my department?", "response": "SELECT gpa, COUNT(*) AS student_count FROM Students WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') GROUP BY gpa ORDER BY gpa DESC;"}
{"prompt": "What are the most recent accreditation reports for the Physics department?", "response": "SELECT * FROM AccreditationReports WHERE submitted_by = 'Physics' ORDER BY submission_date DESC LIMIT 5;"}
{"prompt": "What books have my students borrowed from the library this semester?", "response": "SELECT s.first_name, s.last_name, lb.title, bl.loan_date, bl.return_date FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE s.department_id = (SELECT department_id FROM Departments WHERE name = 'Physics') AND bl.loan_date >= '2025-01-01';"}
{"prompt": "What is the contact information for the Registrar’s office?", "response": "SELECT name, email, phone, office FROM Registrars;"}
{"prompt": "Department Heads", "response": "nan"}
{"prompt": "NL Question (Dr. Anil’s POV)", "response": "SQL Query"}
{"prompt": "What is my (Dr. Anil’s) full faculty profile and department information?", "response": "SELECT * FROM Professors WHERE first_name = 'Anil' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science');"}
{"prompt": "Which professors are currently assigned to the Computer Science department?", "response": "SELECT * FROM Professors WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science');"}
{"prompt": "What are the current faculty workloads in my department?", "response": "SELECT professor_id, first_name, last_name, title, (SELECT COUNT(*) FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND course_id IN (SELECT course_id FROM Enrollments WHERE status = 'Active')) AS active_courses FROM Professors WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science');"}
{"prompt": "Which courses are being offered by the Computer Science department next semester?", "response": "SELECT * FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND semester = 'Fall 2025';"}
{"prompt": "What is the schedule of departmental meetings for this semester?", "response": "-- If meetings are tracked in AccreditationReports or ITSupport: SELECT * FROM ITSupport WHERE issue LIKE '%department meeting%' AND status = 'Scheduled' AND created_on >= '2025-01-01';"}
{"prompt": "What is the pass percentage of students in the Computer Science department for the last semester?", "response": "SELECT (count(*) FILTER (WHERE grade IN ('A','B','C','D','Pass')) * 100.0 / count(*)) AS pass_percentage FROM Enrollments WHERE course_id IN (SELECT course_id FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND semester = 'Spring 2025');"}
{"prompt": "What is the graduation rate for Computer Science students in 2024?", "response": "SELECT (count(*) FILTER (WHERE status = 'Graduated') * 100.0 / count(*)) AS graduation_rate FROM Students WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND enrollment_year = 2020;"}
{"prompt": "What feedback reports have been submitted by students for my department?", "response": "-- If feedback is logged in ITSupport or AccreditationReports: SELECT * FROM ITSupport WHERE issue LIKE '%feedback%' AND status = 'Closed' AND created_on >= '2025-01-01';"}
{"prompt": "Which new elective course proposals are pending my approval?", "response": "SELECT * FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND status = 'Proposed';"}
{"prompt": "What are the research outputs from Computer Science faculty this year?", "response": "SELECT * FROM ResearchProjects WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND start_date >= '2025-01-01';"}
{"prompt": "Who are the final-year students eligible for campus recruitment?", "response": "SELECT student_id, first_name, last_name, gpa FROM Students WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND status = 'Final Year' AND gpa >= 2.5;"}
{"prompt": "What is the list of all courses and their assigned professors for my department?", "response": "SELECT c.course_name, c.course_code, p.first_name, p.last_name FROM Courses c JOIN Professors p ON c.department_id = p.department_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science');"}
{"prompt": "What is the average GPA of Computer Science students this semester?", "response": "SELECT AVG(gpa) FROM Students WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science');"}
{"prompt": "What is the enrollment trend in Computer Science courses over the last 3 years?", "response": "SELECT c.course_name, c.semester, COUNT(e.student_id) AS enrollment_count FROM Courses c JOIN Enrollments e ON c.course_id = e.course_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND c.semester IN ('Spring 2023','Fall 2023','Spring 2024','Fall 2024','Spring 2025') GROUP BY c.course_name, c.semester ORDER BY c.course_name, c.semester;"}
{"prompt": "Which students in my department have the highest and lowest GPAs?", "response": "SELECT first_name, last_name, gpa FROM Students WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') ORDER BY gpa DESC LIMIT 5;"}
{"prompt": "What is the list of all active research projects in my department?", "response": "SELECT * FROM ResearchProjects WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND status = 'In Progress';"}
{"prompt": "Which faculty members have submitted elective proposals this year?", "response": "SELECT DISTINCT p.first_name, p.last_name FROM Courses c JOIN Professors p ON c.department_id = p.department_id WHERE c.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND c.status = 'Proposed' AND c.semester = 'Fall 2025';"}
{"prompt": "What are the most recent accreditation reports for the Computer Science department?", "response": "SELECT * FROM AccreditationReports WHERE submitted_by = 'Computer Science' ORDER BY submission_date DESC LIMIT 3;"}
{"prompt": "What is the contact information for the placement office?", "response": "SELECT name, email, phone, office FROM Registrars WHERE name LIKE '%Placement%';"}
{"prompt": "What analytics/statistics are available for department performance by semester?", "response": "-- Example: SELECT semester, AVG(gpa) AS avg_gpa, COUNT(*) AS total_students FROM Students WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') GROUP BY semester;"}
{"prompt": "Registrars", "response": "nan"}
{"prompt": "NL Question (Mrs. Nandini’s POV)", "response": "SQL Query"}
{"prompt": "What is my (Mrs. Nandini’s) full profile as University Registrar?", "response": "SELECT * FROM Registrars WHERE name = 'Nandini';"}
{"prompt": "How many new student admissions were processed this semester?", "response": "SELECT COUNT(*) FROM Students WHERE enrollment_year = 2025;"}
{"prompt": "What is the current list of all active students?", "response": "SELECT student_id, first_name, last_name, major, status FROM Students WHERE status = 'Active';"}
{"prompt": "Which students have applied for graduation this year?", "response": "SELECT student_id, first_name, last_name FROM Students WHERE status = 'Applied for Graduation' AND enrollment_year <= 2021;"}
{"prompt": "What are the details of all transcript requests submitted this month?", "response": "SELECT * FROM ITSupport WHERE issue LIKE '%transcript%' AND created_on >= '2025-06-01';"}
{"prompt": "What is the status of degree certificate requests in the system?", "response": "SELECT * FROM ITSupport WHERE issue LIKE '%degree certificate%';"}
{"prompt": "Which courses are available for registration in the upcoming semester?", "response": "SELECT course_id, course_name, course_code, credits FROM Courses WHERE semester = 'Fall 2025';"}
{"prompt": "What are the scheduled registration windows for the next semester?", "response": "-- If tracked in ITSupport or AccreditationReports: SELECT * FROM ITSupport WHERE issue LIKE '%registration window%' AND status = 'Scheduled';"}
{"prompt": "Which students have incomplete or missing academic records?", "response": "SELECT student_id, first_name, last_name FROM Students WHERE gpa IS NULL OR major IS NULL OR status IS NULL;"}
{"prompt": "What is the list of students who graduated in the last academic year?", "response": "SELECT student_id, first_name, last_name, major FROM Students WHERE status = 'Graduated' AND enrollment_year = 2021;"}
{"prompt": "How many official certifications were issued this semester?", "response": "SELECT COUNT(*) FROM ITSupport WHERE issue LIKE '%certificate%' AND created_on >= '2025-01-01';"}
{"prompt": "What is the list of all course registrations processed this semester?", "response": "SELECT e.enrollment_id, s.first_name, s.last_name, c.course_name, e.enroll_date FROM Enrollments e JOIN Students s ON e.student_id = s.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.semester = 'Spring 2025';"}
{"prompt": "Which department heads have pending course completion verifications?", "response": "-- If tracked in ITSupport: SELECT DISTINCT submitted_by FROM ITSupport WHERE issue LIKE '%course completion%' AND status = 'Pending';"}
{"prompt": "What is the current status of the graduation list for this year?", "response": "-- If tracked in AccreditationReports: SELECT * FROM AccreditationReports WHERE title LIKE '%graduation list%' AND submission_date >= '2025-01-01';"}
{"prompt": "Which students have requested digital verification of their credentials?", "response": "SELECT DISTINCT submitted_by FROM ITSupport WHERE issue LIKE '%digital verification%';"}
{"prompt": "What is the log of all recent digital verification activities?", "response": "SELECT * FROM ITSupport WHERE issue LIKE '%digital verification%' ORDER BY created_on DESC;"}
{"prompt": "Which employers have accessed the digital verification feature?", "response": "-- If employer access is logged in ITSupport: SELECT DISTINCT submitted_by FROM ITSupport WHERE issue LIKE '%employer verification%';"}
{"prompt": "What is the list of all students with outstanding issues in their records?", "response": "SELECT student_id, first_name, last_name FROM Students WHERE status = 'Hold' OR status = 'Pending Documents';"}
{"prompt": "What is the summary of all academic records updated in the last month?", "response": "-- If updates are logged in ITSupport: SELECT * FROM ITSupport WHERE issue LIKE '%record update%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the contact information for all department heads?", "response": "SELECT p.first_name, p.last_name, d.name AS department, p.email FROM Professors p JOIN Departments d ON p.professor_id = d.head_id;"}
{"prompt": "Academic Advisors", "response": "nan"}
{"prompt": "NL Question (Mr. Ravi’s POV)", "response": "SQL Query"}
{"prompt": "What is my (Mr. Ravi’s) advisor profile?", "response": "SELECT * FROM Advisors WHERE advisor_id = (SELECT advisor_id FROM Professors WHERE first_name = 'Ravi');"}
{"prompt": "Which students am I currently advising?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.major, s.gpa FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi');"}
{"prompt": "What are the academic records of a specific advisee (e.g., student ID 101)?", "response": "SELECT * FROM Students WHERE student_id = 101;"}
{"prompt": "Which courses has student ID 101 completed, and what grades did they receive?", "response": "SELECT c.course_name, e.grade FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = 101 AND e.status = 'Completed';"}
{"prompt": "What is the GPA trend for my advisees this year?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.gpa FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND s.enrollment_year = 2025;"}
{"prompt": "Which students are at risk (GPA below 2.0) and may need extra support?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.gpa FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND s.gpa < 2.0;"}
{"prompt": "Which courses are available for the next semester that I can recommend as electives?", "response": "SELECT course_id, course_name, course_code, credits FROM Courses WHERE semester = 'Fall 2025';"}
{"prompt": "What are the prerequisites for a given course (e.g., 'Advanced Algorithms')?", "response": "-- If prerequisites are tracked in a related table: SELECT * FROM Courses WHERE course_name = 'Advanced Algorithms';"}
{"prompt": "Which of my advisees have attendance issues (e.g., status not 'Present')?", "response": "SELECT s.student_id, s.first_name, s.last_name, e.course_id, e.status FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND e.status != 'Present';"}
{"prompt": "What is the list of students who have applied to switch majors this semester?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.major FROM Students s WHERE status = 'Major Change Pending';"}
{"prompt": "What is the status of major change requests for my advisees?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.major, s.status FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND s.status = 'Major Change Pending';"}
{"prompt": "What is the course plan for a specific advisee for the next semester?", "response": "SELECT c.course_name, c.course_code FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = 101 AND c.semester = 'Fall 2025';"}
{"prompt": "Which students are on track to graduate next year?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.gpa FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND s.status = 'Final Year' AND s.gpa >= 2.0;"}
{"prompt": "What is the list of all course registrations for my advisees this semester?", "response": "SELECT s.student_id, s.first_name, s.last_name, c.course_name FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND c.semester = 'Spring 2025';"}
{"prompt": "Which of my advisees have requested academic transcripts recently?", "response": "SELECT DISTINCT s.student_id, s.first_name, s.last_name FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN ITSupport i ON i.submitted_by = CONCAT(s.first_name, ' ', s.last_name) WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND i.issue LIKE '%transcript%' AND i.created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which department heads have I coordinated with for student major changes?", "response": "SELECT DISTINCT d.name, p.first_name, p.last_name FROM Departments d JOIN Professors p ON d.head_id = p.professor_id JOIN ITSupport i ON i.issue LIKE '%major change%' AND i.submitted_by = 'Ravi';"}
{"prompt": "What is the academic progress of my advisees this semester (grades, GPA)?", "response": "SELECT s.student_id, s.first_name, s.last_name, s.gpa, c.course_name, e.grade FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND c.semester = 'Spring 2025';"}
{"prompt": "Which of my advisees have overdue library books?", "response": "SELECT s.student_id, s.first_name, s.last_name, lb.title, bl.return_date FROM Advisors a JOIN Students s ON a.student_id = s.student_id JOIN BookLoans bl ON s.student_id = bl.student_id JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi') AND bl.status = 'Overdue';"}
{"prompt": "What is the list of all students I have advised since joining Crestview University?", "response": "SELECT DISTINCT s.student_id, s.first_name, s.last_name FROM Advisors a JOIN Students s ON a.student_id = s.student_id WHERE a.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'Ravi');"}
{"prompt": "What are the contact details for the registrar and department heads I work with?", "response": "SELECT r.name AS registrar, r.email, r.phone, d.name AS department, p.first_name AS head_first, p.last_name AS head_last, p.email AS head_email FROM Registrars r, Departments d JOIN Professors p ON d.head_id = p.professor_id;"}
{"prompt": "IT/Admin Staff", "response": "nan"}
{"prompt": "NL Question (Anita’s POV)", "response": "SQL Query"}
{"prompt": "What is the list of all currently enrolled students?", "response": "SELECT student_id, first_name, last_name, major, status FROM Students WHERE status = 'Active';"}
{"prompt": "Which students were newly enrolled this semester?", "response": "SELECT student_id, first_name, last_name, major FROM Students WHERE enrollment_year = 2025;"}
{"prompt": "What is the latest contact and department info for all faculty?", "response": "SELECT professor_id, first_name, last_name, email, phone, department_id, title FROM Professors;"}
{"prompt": "Which courses are scheduled for the current semester?", "response": "SELECT course_id, course_name, course_code, credits, semester FROM Courses WHERE semester = 'Spring 2025';"}
{"prompt": "Which students have registered for exams this semester?", "response": "SELECT DISTINCT s.student_id, s.first_name, s.last_name FROM Enrollments e JOIN Students s ON e.student_id = s.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.semester = 'Spring 2025';"}
{"prompt": "What are the latest exam results uploaded for students?", "response": "SELECT e.student_id, s.first_name, s.last_name, c.course_name, e.grade FROM Enrollments e JOIN Students s ON e.student_id = s.student_id JOIN Courses c ON e.course_id = c.course_id WHERE e.grade IS NOT NULL ORDER BY e.enroll_date DESC LIMIT 20;"}
{"prompt": "Who are the students with pending exam results?", "response": "SELECT s.student_id, s.first_name, s.last_name, c.course_name FROM Enrollments e JOIN Students s ON e.student_id = s.student_id JOIN Courses c ON e.course_id = c.course_id WHERE e.grade IS NULL AND c.semester = 'Spring 2025';"}
{"prompt": "Which students or faculty have reported access issues recently?", "response": "SELECT * FROM ITSupport WHERE issue LIKE '%access%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most common technical issues reported in the last month?", "response": "SELECT issue, COUNT(*) AS count FROM ITSupport WHERE created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY issue ORDER BY count DESC;"}
{"prompt": "Which staff members have recently joined Cityview University?", "response": "SELECT professor_id, first_name, last_name, hire_date FROM Professors WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}
{"prompt": "What is the list of all departments and their heads?", "response": "SELECT d.name AS department, p.first_name AS head_first, p.last_name AS head_last, p.email FROM Departments d JOIN Professors p ON d.head_id = p.professor_id;"}
{"prompt": "Which students have overdue library books?", "response": "SELECT s.student_id, s.first_name, s.last_name, lb.title, bl.return_date FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.status = 'Overdue';"}
{"prompt": "What is the payment status for student fees this semester?", "response": "SELECT student_id, amount, payment_date, payment_method, status FROM Finance WHERE payment_date >= '2025-01-01';"}
{"prompt": "Which students have requested transcript or certificate processing?", "response": "SELECT DISTINCT student_id, submitted_by, issue, created_on FROM ITSupport WHERE issue LIKE '%transcript%' OR issue LIKE '%certificate%';"}
{"prompt": "What are the most recent updates made to student records?", "response": "-- If updates are logged in ITSupport: SELECT * FROM ITSupport WHERE issue LIKE '%student record update%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "Which courses have the highest enrollments this semester?", "response": "SELECT c.course_name, COUNT(e.student_id) AS enrollment_count FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE c.semester = 'Spring 2025' GROUP BY c.course_name ORDER BY enrollment_count DESC LIMIT 5;"}
{"prompt": "What is the list of all active IT support tickets?", "response": "SELECT * FROM ITSupport WHERE status = 'Open';"}
{"prompt": "Which students or staff have been trained on the UniversityDB portal recently?", "response": "-- If training is logged in ITSupport: SELECT submitted_by, issue, created_on FROM ITSupport WHERE issue LIKE '%training%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What is the summary of all technical issues resolved in the last month?", "response": "SELECT issue, COUNT(*) AS resolved_count FROM ITSupport WHERE status = 'Closed' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY issue ORDER BY resolved_count DESC;"}
{"prompt": "What are the contact details for all university administrative staff?", "response": "SELECT name, email, phone, office FROM Registrars;"}
{"prompt": "Finance/Bursar", "response": "nan"}
{"prompt": "NL Question (Mr. Suresh’s POV)", "response": "SQL Query"}
{"prompt": "What is the list of all students with outstanding (unpaid) fees?", "response": "SELECT student_id, amount, payment_date, status FROM Finance WHERE status != 'Paid';"}
{"prompt": "How much total tuition has been collected this semester?", "response": "SELECT SUM(amount) AS total_collected FROM Finance WHERE payment_date >= '2025-01-01' AND status = 'Paid';"}
{"prompt": "Which students have received scholarships this year?", "response": "SELECT student_id, amount, description, payment_date FROM Finance WHERE description LIKE '%scholarship%' AND payment_date >= '2025-01-01';"}
{"prompt": "What are the details of all fee payments made online?", "response": "SELECT student_id, amount, payment_date, payment_method, status FROM Finance WHERE payment_method = 'Online';"}
{"prompt": "Which students have been issued fee waivers or refunds this semester?", "response": "SELECT student_id, amount, description, payment_date FROM Finance WHERE description LIKE '%waiver%' OR description LIKE '%refund%' AND payment_date >= '2025-01-01';"}
{"prompt": "What is the summary of all financial transactions for the current academic year?", "response": "SELECT payment_date, amount, payment_method, description, status FROM Finance WHERE payment_date >= '2025-01-01';"}
{"prompt": "What is the total amount of refunds processed this semester?", "response": "SELECT SUM(amount) AS total_refunded FROM Finance WHERE description LIKE '%refund%' AND payment_date >= '2025-01-01';"}
{"prompt": "Which students have paid their fees in full for the current semester?", "response": "SELECT student_id, amount, payment_date FROM Finance WHERE status = 'Paid' AND payment_date >= '2025-01-01';"}
{"prompt": "What are the most common payment methods used by students?", "response": "SELECT payment_method, COUNT(*) AS count FROM Finance GROUP BY payment_method ORDER BY count DESC;"}
{"prompt": "Which students have overdue payments?", "response": "SELECT student_id, amount, payment_date, status FROM Finance WHERE status = 'Overdue';"}
{"prompt": "What is the list of all receipts issued in the last month?", "response": "SELECT transaction_id, student_id, amount, payment_date FROM Finance WHERE status = 'Paid' AND payment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many students paid their fees using the new online payment gateway?", "response": "SELECT COUNT(DISTINCT student_id) FROM Finance WHERE payment_method = 'Online' AND payment_date >= '2025-01-01';"}
{"prompt": "What is the total amount received from each department this semester?", "response": "SELECT s.department_id, d.name AS department_name, SUM(f.amount) AS total_received FROM Finance f JOIN Students s ON f.student_id = s.student_id JOIN Departments d ON s.department_id = d.department_id WHERE f.status = 'Paid' AND f.payment_date >= '2025-01-01' GROUP BY s.department_id, d.name;"}
{"prompt": "Which students have requested fee receipts or payment confirmations?", "response": "SELECT DISTINCT student_id FROM Finance WHERE description LIKE '%receipt%' OR description LIKE '%confirmation%';"}
{"prompt": "What is the list of all fee payments processed for new admissions this semester?", "response": "SELECT f.student_id, f.amount, f.payment_date FROM Finance f JOIN Students s ON f.student_id = s.student_id WHERE s.enrollment_year = 2025 AND f.payment_date >= '2025-01-01';"}
{"prompt": "Which students were granted partial fee waivers?", "response": "SELECT student_id, amount, description, payment_date FROM Finance WHERE description LIKE '%partial waiver%';"}
{"prompt": "What is the breakdown of income vs. refunds for the current semester?", "response": "SELECT SUM(CASE WHEN description NOT LIKE '%refund%' THEN amount ELSE 0 END) AS total_income, SUM(CASE WHEN description LIKE '%refund%' THEN amount ELSE 0 END) AS total_refunds FROM Finance WHERE payment_date >= '2025-01-01';"}
{"prompt": "Which students have made multiple payments in the same semester?", "response": "SELECT student_id, COUNT(*) AS payment_count FROM Finance WHERE payment_date >= '2025-01-01' GROUP BY student_id HAVING payment_count > 1;"}
{"prompt": "What is the total number of fee transactions processed this semester?", "response": "SELECT COUNT(*) FROM Finance WHERE payment_date >= '2025-01-01';"}
{"prompt": "What is the contact information for students with unpaid or overdue fees?", "response": "SELECT s.first_name, s.last_name, s.email, s.phone FROM Finance f JOIN Students s ON f.student_id = s.student_id WHERE f.status != 'Paid';"}
{"prompt": "Library Staff", "response": "nan"}
{"prompt": "NL Question (Ms. Kavita’s POV)", "response": "SQL Query"}
{"prompt": "What is the list of all books currently available in the library?", "response": "SELECT book_id, title, author, publisher, year FROM LibraryBooks WHERE status = 'Available';"}
{"prompt": "Which books have been newly added to the library this month?", "response": "SELECT book_id, title, author, publisher, year FROM LibraryBooks WHERE year = YEAR(CURDATE()) AND MONTH(CURDATE()) = MONTH(NOW());"}
{"prompt": "Which books are currently on loan and not yet returned?", "response": "SELECT lb.title, bl.student_id, bl.loan_date, bl.return_date FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.status = 'On Loan';"}
{"prompt": "Who are the students with overdue library books?", "response": "SELECT s.student_id, s.first_name, s.last_name, lb.title, bl.return_date FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.status = 'Overdue';"}
{"prompt": "What is the list of all reservations made online today?", "response": "SELECT bl.loan_id, s.first_name, s.last_name, lb.title, bl.loan_date FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE DATE(bl.loan_date) = CURDATE();"}
{"prompt": "Which books have the highest number of loans this semester?", "response": "SELECT lb.title, COUNT(*) AS loan_count FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.loan_date >= '2025-01-01' GROUP BY lb.title ORDER BY loan_count DESC LIMIT 5;"}
{"prompt": "Which students have borrowed the most books this semester?", "response": "SELECT s.student_id, s.first_name, s.last_name, COUNT(*) AS books_borrowed FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id WHERE bl.loan_date >= '2025-01-01' GROUP BY s.student_id ORDER BY books_borrowed DESC LIMIT 5;"}
{"prompt": "What is the list of all books reserved for exam study materials?", "response": "SELECT lb.title, bl.student_id, bl.loan_date FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE lb.title LIKE '%exam%' OR lb.title LIKE '%study%';"}
{"prompt": "Which students have requested loan period extensions during exam season?", "response": "-- If extension requests are tracked in ITSupport: SELECT submitted_by, issue, created_on FROM ITSupport WHERE issue LIKE '%loan extension%' AND created_on >= '2025-05-01';"}
{"prompt": "What is the inventory status of all books in the library?", "response": "SELECT title, available_copies, total_copies FROM LibraryBooks;"}
{"prompt": "What are the most popular authors based on book loans this year?", "response": "SELECT lb.author, COUNT(*) AS loan_count FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.loan_date >= '2025-01-01' GROUP BY lb.author ORDER BY loan_count DESC LIMIT 5;"}
{"prompt": "Which books are reserved but not yet picked up?", "response": "SELECT lb.title, bl.student_id, bl.loan_date FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.status = 'Reserved';"}
{"prompt": "What is the list of all overdue books and their borrowers?", "response": "SELECT lb.title, s.first_name, s.last_name, bl.return_date FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id JOIN Students s ON bl.student_id = s.student_id WHERE bl.status = 'Overdue';"}
{"prompt": "What is the total number of books currently in the library collection?", "response": "SELECT COUNT(*) FROM LibraryBooks;"}
{"prompt": "Which students or faculty have attended recent library orientation sessions?", "response": "-- If tracked in ITSupport: SELECT submitted_by, created_on FROM ITSupport WHERE issue LIKE '%library orientation%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 2 MONTH);"}
{"prompt": "What is the list of all books checked out via the self-checkout system?", "response": "-- If tracked in ITSupport: SELECT submitted_by, issue, created_on FROM ITSupport WHERE issue LIKE '%self-checkout%';"}
{"prompt": "Which books have been returned late most frequently?", "response": "SELECT lb.title, COUNT(*) AS late_return_count FROM BookLoans bl JOIN LibraryBooks lb ON bl.book_id = lb.book_id WHERE bl.status = 'Overdue' GROUP BY lb.title ORDER BY late_return_count DESC LIMIT 5;"}
{"prompt": "What is the current status of digital journal subscriptions?", "response": "-- If digital journals are tracked in LibraryBooks: SELECT * FROM LibraryBooks WHERE title LIKE '%journal%' AND status = 'Available';"}
{"prompt": "Which students have multiple overdue books?", "response": "SELECT s.student_id, s.first_name, s.last_name, COUNT(*) AS overdue_count FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id WHERE bl.status = 'Overdue' GROUP BY s.student_id HAVING overdue_count > 1;"}
{"prompt": "What is the contact information for students with overdue or lost books?", "response": "SELECT s.first_name, s.last_name, s.email, s.phone FROM BookLoans bl JOIN Students s ON bl.student_id = s.student_id WHERE bl.status IN ('Overdue', 'Lost');"}
{"prompt": "Researchers", "response": "nan"}
{"prompt": "NL Question (Dr. Priya’s POV)", "response": "SQL Query"}
{"prompt": "What is my (Dr. Priya’s) researcher profile in the system?", "response": "SELECT * FROM Researchers WHERE name = 'Priya' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Biotechnology');"}
{"prompt": "What are the details of all research projects I am leading?", "response": "SELECT * FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya');"}
{"prompt": "Which team members are part of my current research project?", "response": "SELECT name, email, role FROM Researchers WHERE project_title = (SELECT project_title FROM Researchers WHERE name = 'Priya');"}
{"prompt": "What is the funding status for my renewable energy project?", "response": "SELECT budget, status FROM ResearchProjects WHERE title LIKE '%renewable energy%';"}
{"prompt": "What is the timeline and progress for my ongoing research projects?", "response": "SELECT title, start_date, end_date, status FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya');"}
{"prompt": "What publications have my team produced this year?", "response": "-- If publications are tracked in ResearchProjects or a related table: SELECT * FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya') AND status = 'Published' AND end_date >= '2025-01-01';"}
{"prompt": "Which grant applications have I submitted recently?", "response": "-- If grant applications are tracked in ResearchProjects or ITSupport: SELECT * FROM ITSupport WHERE submitted_by = 'Priya' AND issue LIKE '%grant%';"}
{"prompt": "What is the list of all active research projects in the Biotechnology department?", "response": "SELECT * FROM ResearchProjects WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Biotechnology') AND status = 'In Progress';"}
{"prompt": "Which other departments are collaborating with my research team?", "response": "SELECT DISTINCT d.name FROM Researchers r JOIN Departments d ON r.department_id = d.department_id WHERE r.project_title = (SELECT project_title FROM Researchers WHERE name = 'Priya') AND d.name != 'Biotechnology';"}
{"prompt": "What is the list of all seminars organized by my team this year?", "response": "-- If seminars are tracked in ITSupport: SELECT * FROM ITSupport WHERE submitted_by = 'Priya' AND issue LIKE '%seminar%' AND created_on >= '2025-01-01';"}
{"prompt": "What is the status of my latest project proposal submission?", "response": "-- If proposals are tracked in ResearchProjects or ITSupport: SELECT * FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya') ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "What is the summary of all research funding received by my team?", "response": "SELECT title, budget FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya');"}
{"prompt": "Which journals are most accessed by my team via the university portal?", "response": "-- If journal access is tracked in ITSupport: SELECT issue, COUNT(*) AS access_count FROM ITSupport WHERE submitted_by = 'Priya' AND issue LIKE '%journal%' GROUP BY issue ORDER BY access_count DESC;"}
{"prompt": "What is the list of all archived research findings by my team?", "response": "-- If archiving is tracked in ITSupport: SELECT * FROM ITSupport WHERE submitted_by = 'Priya' AND issue LIKE '%archive%';"}
{"prompt": "What is the contact information for the university’s research office?", "response": "SELECT name, email, phone, office FROM Registrars WHERE name LIKE '%Research%';"}
{"prompt": "What is the status of my team’s latest publication?", "response": "-- If tracked in ResearchProjects or ITSupport: SELECT * FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya') AND status = 'Published' ORDER BY end_date DESC LIMIT 1;"}
{"prompt": "Which research projects in my department have received the highest funding?", "response": "SELECT title, budget FROM ResearchProjects WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Biotechnology') ORDER BY budget DESC LIMIT 5;"}
{"prompt": "What is the list of all grant applications submitted by the Biotechnology department this year?", "response": "-- If tracked in ITSupport: SELECT * FROM ITSupport WHERE issue LIKE '%grant%' AND created_on >= '2025-01-01' AND submitted_by IN (SELECT name FROM Researchers WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Biotechnology'));"}
{"prompt": "What is the progress report for my renewable energy project?", "response": "SELECT description, status FROM ResearchProjects WHERE title LIKE '%renewable energy%';"}
{"prompt": "Which of my research projects are due for completion this month?", "response": "SELECT title, end_date FROM ResearchProjects WHERE project_id IN (SELECT project_title FROM Researchers WHERE name = 'Priya') AND MONTH(end_date) = MONTH(CURDATE()) AND YEAR(end_date) = YEAR(CURDATE());"}
{"prompt": "Accreditation/Compliance Officers", "response": "nan"}
{"prompt": "NL Question (Ms. Kavya’s POV)", "response": "SQL Query"}
{"prompt": "What is the list of all current academic programs offered by the university?", "response": "SELECT DISTINCT major FROM Students;"}
{"prompt": "What are the qualifications and titles of all current faculty members?", "response": "SELECT first_name, last_name, title, department_id FROM Professors;"}
{"prompt": "What is the average GPA for each academic department?", "response": "SELECT d.name AS department, AVG(s.gpa) AS avg_gpa FROM Students s JOIN Departments d ON s.department_id = d.department_id GROUP BY d.name;"}
{"prompt": "Which departments have the highest and lowest student performance metrics?", "response": "SELECT d.name, AVG(s.gpa) AS avg_gpa FROM Students s JOIN Departments d ON s.department_id = d.department_id GROUP BY d.name ORDER BY avg_gpa DESC;"}
{"prompt": "What is the list of all accreditation reports submitted in the last two years?", "response": "SELECT * FROM AccreditationReports WHERE submission_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR);"}
{"prompt": "What is the current status of all ongoing accreditation reports?", "response": "SELECT title, status FROM AccreditationReports WHERE status = 'In Progress';"}
{"prompt": "Which departments have pending compliance issues?", "response": "SELECT DISTINCT submitted_by FROM AccreditationReports WHERE status = 'Pending' OR comments LIKE '%compliance issue%';"}
{"prompt": "What is the list of all faculty with PhDs or equivalent qualifications?", "response": "SELECT first_name, last_name, title FROM Professors WHERE title LIKE '%PhD%' OR title LIKE '%Doctor%';"}
{"prompt": "What are the most recent corrective actions implemented by departments?", "response": "SELECT title, comments, submission_date FROM AccreditationReports WHERE comments LIKE '%corrective action%' ORDER BY submission_date DESC;"}
{"prompt": "What is the schedule of upcoming accreditation audits?", "response": "SELECT title, submission_date, status FROM AccreditationReports WHERE title LIKE '%audit%' AND submission_date >= CURDATE();"}
{"prompt": "Which students are at risk academically (GPA < 2.0)?", "response": "SELECT student_id, first_name, last_name, gpa, department_id FROM Students WHERE gpa < 2.0;"}
{"prompt": "What is the list of all reaccreditation reports and their outcomes?", "response": "SELECT title, status, comments FROM AccreditationReports WHERE title LIKE '%reaccreditation%';"}
{"prompt": "Which departments have recently completed successful reaccreditation?", "response": "SELECT submitted_by, title, status FROM AccreditationReports WHERE title LIKE '%reaccreditation%' AND status = 'Approved';"}
{"prompt": "What is the summary of faculty qualifications by department?", "response": "SELECT d.name AS department, COUNT(p.professor_id) AS faculty_count, GROUP_CONCAT(p.title) AS qualifications FROM Professors p JOIN Departments d ON p.department_id = d.department_id GROUP BY d.name;"}
{"prompt": "What are the most common comments or issues noted in recent accreditation audits?", "response": "SELECT comments, COUNT(*) AS count FROM AccreditationReports WHERE title LIKE '%audit%' AND submission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY comments ORDER BY count DESC;"}
{"prompt": "What documentation was submitted for the latest reaccreditation process?", "response": "SELECT * FROM AccreditationReports WHERE title LIKE '%reaccreditation%' ORDER BY submission_date DESC LIMIT 1;"}
{"prompt": "Which departments have the highest number of compliance or audit reports?", "response": "SELECT submitted_by, COUNT(*) AS report_count FROM AccreditationReports GROUP BY submitted_by ORDER BY report_count DESC;"}
{"prompt": "What is the current status of virtual audit sessions organized by the university?", "response": "SELECT title, status, submission_date FROM AccreditationReports WHERE title LIKE '%virtual audit%' ORDER BY submission_date DESC;"}
{"prompt": "Which faculty members have participated in accreditation or compliance processes?", "response": "SELECT DISTINCT submitted_by FROM AccreditationReports WHERE submitted_by IN (SELECT CONCAT(first_name, ' ', last_name) FROM Professors);"}
{"prompt": "What is the timeline of all accreditation-related activities in the past year?", "response": "SELECT title, submission_date, status FROM AccreditationReports WHERE submission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ORDER BY submission_date;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "HotelBooking", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What is the list of all currently checked-in guests?", "response": "SELECT g.first_name, g.last_name, b.room_id, b.check_in_date FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status = 'Checked-In';"}
{"prompt": "Which rooms are available for booking today?", "response": "SELECT room_id, room_number, room_type, price_per_night FROM Rooms WHERE status = 'Available';"}
{"prompt": "What are the details of all bookings made in the last 7 days?", "response": "SELECT * FROM Bookings WHERE booking_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which guests have outstanding payments?", "response": "SELECT g.first_name, g.last_name, b.booking_id, b.payment_status FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.payment_status != 'Paid';"}
{"prompt": "What is the payment history for booking ID 101?", "response": "SELECT * FROM Payments WHERE booking_id = 101 ORDER BY payment_date DESC;"}
{"prompt": "Which rooms are scheduled for housekeeping today?", "response": "SELECT r.room_number, h.staff_id, h.scheduled_date, h.status FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE();"}
{"prompt": "What maintenance requests are currently open?", "response": "SELECT * FROM MaintenanceRequests WHERE status = 'Open';"}
{"prompt": "Which marketing campaigns are active this month?", "response": "SELECT * FROM MarketingCampaigns WHERE status = 'Active' AND start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "Who are the receptionists on the morning shift?", "response": "SELECT * FROM Receptionists WHERE shift = 'Morning';"}
{"prompt": "What is the total revenue and expenses for the hotel this month?", "response": "SELECT SUM(total_revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM FinanceAccounts WHERE MONTH(report_date) = MONTH(CURDATE()) AND YEAR(report_date) = YEAR(CURDATE());"}
{"prompt": "What is the list of all guests who have stayed in suite rooms?", "response": "SELECT DISTINCT g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Suite';"}
{"prompt": "Which rooms have pending maintenance issues?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status != 'Closed';"}
{"prompt": "What are the most recent IT support tickets submitted by staff?", "response": "SELECT * FROM ITSupport WHERE created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY created_on DESC;"}
{"prompt": "Which reservation agents have processed the most bookings this month?", "response": "-- If agent_id is tracked in Bookings: SELECT agent_id, COUNT(*) AS booking_count FROM Bookings WHERE MONTH(booking_date) = MONTH(CURDATE()) AND YEAR(booking_date) = YEAR(CURDATE()) GROUP BY agent_id ORDER BY booking_count DESC;"}
{"prompt": "What amenities are available in deluxe rooms?", "response": "SELECT amenities FROM Rooms WHERE room_type = 'Deluxe';"}
{"prompt": "Which guests have made multiple bookings in the last year?", "response": "SELECT g.first_name, g.last_name, COUNT(*) AS booking_count FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY b.guest_id HAVING booking_count > 1;"}
{"prompt": "What is the occupancy rate for the hotel this week?", "response": "SELECT (SELECT count(*) FROM Bookings WHERE check_in_date <= CURDATE() AND check_out_date >= CURDATE() AND booking_status = 'Checked-In') * 100.0 / (SELECT count(*) FROM Rooms) AS occupancy_rate;"}
{"prompt": "What are the contact details for all hotel managers?", "response": "SELECT name, email, phone, department FROM HotelManagers;"}
{"prompt": "Which rooms are booked for the upcoming weekend?", "response": "SELECT r.room_number, b.check_in_date, b.check_out_date FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE b.check_in_date <= DATE_ADD(CURDATE(), INTERVAL (7 - WEEKDAY(CURDATE())) DAY) AND b.check_out_date >= DATE_ADD(CURDATE(), INTERVAL (6 - WEEKDAY(CURDATE())) DAY);"}
{"prompt": "What analytics reports have been generated in the last month?", "response": "SELECT report_id, report_name, generated_on FROM Analytics WHERE generated_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Receptionists", "response": "nan"}
{"prompt": "NL Question (Raj’s POV)", "response": "SQL Query"}
{"prompt": "What is the list of all guests checking in today?", "response": "SELECT g.first_name, g.last_name, b.room_id, b.check_in_date FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date = CURDATE() AND b.booking_status = 'Confirmed';"}
{"prompt": "Which guests are scheduled to check out today?", "response": "SELECT g.first_name, g.last_name, b.room_id, b.check_out_date FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_out_date = CURDATE() AND b.booking_status = 'Checked-In';"}
{"prompt": "What rooms are currently available for walk-in guests?", "response": "SELECT room_id, room_number, room_type FROM Rooms WHERE status = 'Available';"}
{"prompt": "What are the details of a guest’s reservation by last name (e.g., 'Sharma')?", "response": "SELECT g.first_name, g.last_name, b.* FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE g.last_name = 'Sharma' AND b.booking_status IN ('Confirmed', 'Checked-In');"}
{"prompt": "Which rooms are ready for immediate check-in?", "response": "SELECT room_id, room_number FROM Rooms WHERE status = 'Available';"}
{"prompt": "What is the status of all current bookings for today?", "response": "SELECT b.booking_id, g.first_name, g.last_name, b.room_id, b.booking_status FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date = CURDATE();"}
{"prompt": "Which guests have requested airport pickups or late check-outs?", "response": "SELECT g.first_name, g.last_name, b.booking_id FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status IN ('Confirmed', 'Checked-In') AND (b.special_requests LIKE '%airport pickup%' OR b.special_requests LIKE '%late check-out%');"}
{"prompt": "What are the special requests for today’s arrivals?", "response": "SELECT g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date = CURDATE() AND b.special_requests IS NOT NULL;"}
{"prompt": "Which bookings have been modified in the last 24 hours?", "response": "-- If modifications are logged in ITSupport: SELECT * FROM ITSupport WHERE issue_type LIKE '%booking modification%' AND created_on >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What is the list of all walk-in bookings made today?", "response": "SELECT b.booking_id, g.first_name, g.last_name, b.room_id, b.booking_date FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_date = CURDATE() AND b.booking_status = 'Confirmed';"}
{"prompt": "Which rooms need to be cleaned before the next check-in?", "response": "SELECT r.room_number FROM Rooms r WHERE r.status = 'Needs Cleaning';"}
{"prompt": "What is the contact information for all current in-house guests?", "response": "SELECT g.first_name, g.last_name, g.phone, g.email FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status = 'Checked-In';"}
{"prompt": "Which guests have requested extra amenities or services?", "response": "SELECT g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests IS NOT NULL;"}
{"prompt": "What is the payment status for today’s check-ins?", "response": "SELECT b.booking_id, g.first_name, g.last_name, b.payment_status FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date = CURDATE();"}
{"prompt": "Which bookings are pending payment?", "response": "SELECT b.booking_id, g.first_name, g.last_name, b.payment_status FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.payment_status != 'Paid';"}
{"prompt": "What is the housekeeping schedule for today?", "response": "SELECT h.schedule_id, r.room_number, h.staff_id, h.scheduled_date, h.status FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE();"}
{"prompt": "Which rooms have maintenance issues that might affect guest check-in?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status != 'Closed';"}
{"prompt": "What is the list of all guests with multiple bookings this month?", "response": "SELECT g.first_name, g.last_name, COUNT(*) AS booking_count FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE MONTH(b.booking_date) = MONTH(CURDATE()) AND YEAR(b.booking_date) = YEAR(CURDATE()) GROUP BY b.guest_id HAVING booking_count > 1;"}
{"prompt": "What are the details of all upcoming bookings for the next week?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which guests have requested early check-in or late check-out?", "response": "SELECT g.first_name, g.last_name, b.booking_id, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests LIKE '%early check-in%' OR b.special_requests LIKE '%late check-out%';"}
{"prompt": "Housekeeping Staff", "response": "nan"}
{"prompt": "NL Question (Meena’s POV)", "response": "SQL Query"}
{"prompt": "Which rooms are scheduled for cleaning today?", "response": "SELECT r.room_number, h.status FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE();"}
{"prompt": "Which rooms are currently vacant and need cleaning?", "response": "SELECT room_number FROM Rooms WHERE status = 'Vacant' OR status = 'Needs Cleaning';"}
{"prompt": "Which rooms are occupied and require cleaning today?", "response": "SELECT r.room_number FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE() AND r.status = 'Occupied';"}
{"prompt": "What are the special requests from guests for today’s cleaning schedule?", "response": "SELECT r.room_number, h.notes FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE() AND h.notes IS NOT NULL;"}
{"prompt": "Which guests have requested extra amenities today?", "response": "SELECT g.first_name, g.last_name, b.room_id, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests IS NOT NULL AND b.booking_status = 'Checked-In';"}
{"prompt": "What is the list of all rooms assigned to Meena for cleaning today?", "response": "SELECT r.room_number FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.staff_id = (SELECT staff_id FROM Receptionists WHERE name = 'Meena') AND h.scheduled_date = CURDATE();"}
{"prompt": "Which rooms have been cleaned and updated in the system today?", "response": "SELECT r.room_number, h.status FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE() AND h.status = 'Cleaned';"}
{"prompt": "What maintenance issues have been reported by Meena today?", "response": "SELECT m.room_id, m.issue_description FROM MaintenanceRequests m WHERE m.assigned_to = 'Meena' AND m.reported_date = CURDATE();"}
{"prompt": "Which rooms have guest complaints reported today?", "response": "-- If complaints are tracked in HousekeepingSchedule notes: SELECT r.room_number, h.notes FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE() AND h.notes LIKE '%complaint%';"}
{"prompt": "Which rooms require late cleaning due to guest requests?", "response": "SELECT r.room_number, h.notes FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE() AND h.notes LIKE '%late cleaning%';"}
{"prompt": "Which rooms are scheduled for cleaning but are still marked as 'Needs Cleaning'?", "response": "SELECT r.room_number FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE() AND r.status = 'Needs Cleaning';"}
{"prompt": "What is the summary of all rooms cleaned by Meena this week?", "response": "SELECT r.room_number, h.scheduled_date FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.staff_id = (SELECT staff_id FROM Receptionists WHERE name = 'Meena') AND h.status = 'Cleaned' AND h.scheduled_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which rooms have been flagged for urgent maintenance?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status = 'Urgent';"}
{"prompt": "What is the list of all occupied rooms for today?", "response": "SELECT room_number FROM Rooms WHERE status = 'Occupied';"}
{"prompt": "Which rooms have guests checking out today and need cleaning afterwards?", "response": "SELECT r.room_number FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE b.check_out_date = CURDATE() AND b.booking_status = 'Checked-In';"}
{"prompt": "Which rooms have been assigned for deep cleaning this month?", "response": "SELECT r.room_number, h.scheduled_date FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.notes LIKE '%deep cleaning%' AND MONTH(h.scheduled_date) = MONTH(CURDATE());"}
{"prompt": "What are the details of all cleaning schedules assigned to Meena this month?", "response": "SELECT r.room_number, h.scheduled_date, h.status, h.notes FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.staff_id = (SELECT staff_id FROM Receptionists WHERE name = 'Meena') AND MONTH(h.scheduled_date) = MONTH(CURDATE());"}
{"prompt": "Which rooms have guests requested additional towels or toiletries?", "response": "SELECT r.room_number, b.special_requests FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE b.special_requests LIKE '%towel%' OR b.special_requests LIKE '%toiletries%';"}
{"prompt": "Which rooms have not been cleaned for more than two days?", "response": "SELECT room_number FROM Rooms WHERE room_id NOT IN (SELECT room_id FROM HousekeepingSchedule WHERE scheduled_date >= DATE_SUB(CURDATE(), INTERVAL 2 DAY) AND status = 'Cleaned');"}
{"prompt": "What is the total number of rooms cleaned by Meena this month?", "response": "SELECT COUNT(*) FROM HousekeepingSchedule WHERE staff_id = (SELECT staff_id FROM Receptionists WHERE name = 'Meena') AND status = 'Cleaned' AND MONTH(scheduled_date) = MONTH(CURDATE());"}
{"prompt": "Hotel Managers", "response": "nan"}
{"prompt": "NL Question (Mr. Rajiv’s POV)", "response": "SQL Query"}
{"prompt": "What is today’s occupancy rate?", "response": "SELECT (SELECT count(*) FROM Bookings WHERE check_in_date <= CURDATE() AND check_out_date >= CURDATE() AND booking_status = 'Checked-In') * 100.0 / (SELECT count(*) FROM Rooms) AS occupancy_rate;"}
{"prompt": "What is the total revenue generated this month?", "response": "SELECT SUM(total_revenue) AS total_revenue FROM FinanceAccounts WHERE MONTH(report_date) = MONTH(CURDATE()) AND YEAR(report_date) = YEAR(CURDATE());"}
{"prompt": "What are the current room rates for all room types?", "response": "SELECT room_type, price_per_night FROM Rooms GROUP BY room_type, price_per_night;"}
{"prompt": "Which rooms are currently occupied and by whom?", "response": "SELECT r.room_number, g.first_name, g.last_name FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status = 'Checked-In';"}
{"prompt": "What is the list of all upcoming bookings for the next week?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which guests have left feedback in the past month?", "response": "-- If feedback is tracked in ITSupport or a feedback system: SELECT submitted_by, issue_type, created_on FROM ITSupport WHERE issue_type = 'Guest Feedback' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most common guest complaints or issues reported recently?", "response": "SELECT issue_type, COUNT(*) AS count FROM ITSupport WHERE created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY issue_type ORDER BY count DESC;"}
{"prompt": "Which rooms are scheduled for maintenance this week?", "response": "SELECT r.room_number, m.issue_description, m.scheduled_date FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.scheduled_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the current status of all housekeeping schedules?", "response": "SELECT r.room_number, h.scheduled_date, h.status FROM HousekeepingSchedule h JOIN Rooms r ON h.room_id = r.room_id WHERE h.scheduled_date = CURDATE();"}
{"prompt": "Which staff are on duty today (reception, housekeeping, maintenance)?", "response": "SELECT staff_id, name, email, phone, shift FROM Receptionists WHERE shift = 'Morning' OR shift = 'Evening'; -- Similar queries for housekeeping and maintenance if staff tables exist."}
{"prompt": "What are the details of all ongoing marketing campaigns?", "response": "SELECT * FROM MarketingCampaigns WHERE status = 'Active';"}
{"prompt": "What are the top 5 sources of bookings (marketing channels) this month?", "response": "SELECT channel, COUNT(*) AS booking_count FROM MarketingCampaigns WHERE start_date <= CURDATE() AND end_date >= CURDATE() GROUP BY channel ORDER BY booking_count DESC LIMIT 5;"}
{"prompt": "What is the breakdown of revenue and expenses by department this month?", "response": "SELECT department, SUM(total_revenue) AS revenue, SUM(expenses) AS expenses FROM FinanceAccounts WHERE MONTH(report_date) = MONTH(CURDATE()) AND YEAR(report_date) = YEAR(CURDATE()) GROUP BY department;"}
{"prompt": "Which rooms have the highest occupancy rate this year?", "response": "SELECT r.room_number, COUNT(*) AS occupied_days FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE b.booking_status = 'Checked-In' AND YEAR(b.check_in_date) = YEAR(CURDATE()) GROUP BY r.room_number ORDER BY occupied_days DESC LIMIT 5;"}
{"prompt": "What is the current availability of all room types?", "response": "SELECT room_type, COUNT(*) AS available_rooms FROM Rooms WHERE status = 'Available' GROUP BY room_type;"}
{"prompt": "Which upcoming dates have the highest number of bookings (for event planning)?", "response": "SELECT check_in_date, COUNT(*) AS booking_count FROM Bookings WHERE check_in_date >= CURDATE() GROUP BY check_in_date ORDER BY booking_count DESC LIMIT 5;"}
{"prompt": "What is the list of all guests with VIP status or special requests?", "response": "SELECT g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests IS NOT NULL;"}
{"prompt": "What is the summary of all analytics reports generated this quarter?", "response": "SELECT report_id, report_name, generated_on FROM Analytics WHERE generated_on >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "Which rooms have unresolved maintenance issues?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status != 'Closed';"}
{"prompt": "What are the contact details for all department managers?", "response": "SELECT name, email, phone, department FROM HotelManagers;"}
{"prompt": "Reservation Agents", "response": "nan"}
{"prompt": "NL Question (Sonal’s POV)", "response": "SQL Query"}
{"prompt": "Which rooms are available for booking today?", "response": "SELECT room_id, room_number, room_type, price_per_night FROM Rooms WHERE status = 'Available';"}
{"prompt": "What is the best available rate for a deluxe room this weekend?", "response": "SELECT MIN(price_per_night) FROM Rooms WHERE room_type = 'Deluxe' AND status = 'Available';"}
{"prompt": "What are the details of all bookings confirmed for today?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date = CURDATE() AND b.booking_status = 'Confirmed';"}
{"prompt": "Which guests have requested special amenities or services?", "response": "SELECT g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests IS NOT NULL;"}
{"prompt": "What are the current package deals or discounts available?", "response": "SELECT * FROM MarketingCampaigns WHERE status = 'Active' AND start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "Which bookings have been modified in the last 24 hours?", "response": "-- If modifications are logged in ITSupport: SELECT * FROM ITSupport WHERE issue_type LIKE '%booking modification%' AND created_on >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What is the list of all cancellations for this month?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status = 'Cancelled' AND MONTH(b.booking_date) = MONTH(CURDATE());"}
{"prompt": "Which rooms are overbooked for any date this week?", "response": "SELECT room_id, COUNT(*) AS booking_count FROM Bookings WHERE check_in_date <= DATE_ADD(CURDATE(), INTERVAL 7 DAY) AND check_out_date >= CURDATE() GROUP BY room_id HAVING booking_count > 1;"}
{"prompt": "What is the contact information for guests checking in tomorrow?", "response": "SELECT g.first_name, g.last_name, g.phone, g.email FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.check_in_date = DATE_ADD(CURDATE(), INTERVAL 1 DAY) AND b.booking_status = 'Confirmed';"}
{"prompt": "Which bookings have pending payments?", "response": "SELECT b.booking_id, g.first_name, g.last_name, b.payment_status FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.payment_status != 'Paid';"}
{"prompt": "What is the list of all upcoming group bookings?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status = 'Confirmed' AND b.special_requests LIKE '%group%';"}
{"prompt": "Which guests have requested airport transfers?", "response": "SELECT g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests LIKE '%airport%';"}
{"prompt": "What is the booking status for a guest named 'Mehta'?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE g.last_name = 'Mehta';"}
{"prompt": "Which rooms are reserved for VIP guests this week?", "response": "SELECT r.room_number, b.check_in_date, b.check_out_date FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE b.special_requests LIKE '%VIP%' AND b.check_in_date <= DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the list of all reservations handled by me (Sonal) this month?", "response": "-- If agent_id is tracked in Bookings: SELECT * FROM Bookings WHERE agent_id = (SELECT agent_id FROM ReservationAgents WHERE name = 'Sonal') AND MONTH(booking_date) = MONTH(CURDATE());"}
{"prompt": "Which bookings have requested late check-out or early check-in?", "response": "SELECT b.booking_id, g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests LIKE '%late check-out%' OR b.special_requests LIKE '%early check-in%';"}
{"prompt": "What is the list of all no-shows for this week?", "response": "SELECT b.*, g.first_name, g.last_name FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_status = 'No-Show' AND b.check_in_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which guests have made multiple bookings in the last 6 months?", "response": "SELECT g.first_name, g.last_name, COUNT(*) AS booking_count FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.booking_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY b.guest_id HAVING booking_count > 1;"}
{"prompt": "What is the average occupancy rate for the hotel this month?", "response": "SELECT (SELECT count(*) FROM Bookings WHERE check_in_date <= CURDATE() AND check_out_date >= CURDATE() AND booking_status = 'Checked-In') * 100.0 / (SELECT count(*) FROM Rooms) AS occupancy_rate;"}
{"prompt": "What are the most common reasons for booking modifications or cancellations?", "response": "-- If tracked in ITSupport or Bookings: SELECT issue_type, COUNT(*) AS count FROM ITSupport WHERE issue_type LIKE '%modification%' OR issue_type LIKE '%cancellation%' GROUP BY issue_type ORDER BY count DESC;"}
{"prompt": "Maintenance Staff", "response": "nan"}
{"prompt": "NL Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "What maintenance requests are assigned to me today?", "response": "SELECT * FROM MaintenanceRequests WHERE assigned_to = 'Arjun' AND reported_date = CURDATE() AND status != 'Closed';"}
{"prompt": "Which rooms have open maintenance issues right now?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status != 'Closed';"}
{"prompt": "What is the list of all urgent maintenance requests?", "response": "SELECT * FROM MaintenanceRequests WHERE status = 'Urgent';"}
{"prompt": "Which maintenance tasks have I completed this week?", "response": "SELECT * FROM MaintenanceRequests WHERE assigned_to = 'Arjun' AND status = 'Closed' AND reported_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What parts or tools are needed for today’s repairs?", "response": "SELECT room_id, issue_description, notes FROM MaintenanceRequests WHERE assigned_to = 'Arjun' AND reported_date = CURDATE() AND notes IS NOT NULL;"}
{"prompt": "Which rooms have had repeated maintenance issues in the last month?", "response": "SELECT room_id, COUNT(*) AS issue_count FROM MaintenanceRequests WHERE reported_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY room_id HAVING issue_count > 1;"}
{"prompt": "What is the maintenance history for room 203?", "response": "SELECT * FROM MaintenanceRequests WHERE room_id = (SELECT room_id FROM Rooms WHERE room_number = '203') ORDER BY reported_date DESC;"}
{"prompt": "Which maintenance requests are pending for public areas (not guest rooms)?", "response": "SELECT * FROM MaintenanceRequests WHERE room_id IS NULL AND status != 'Closed';"}
{"prompt": "What are the most common types of maintenance issues reported this month?", "response": "SELECT issue_description, COUNT(*) AS count FROM MaintenanceRequests WHERE reported_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY issue_description ORDER BY count DESC;"}
{"prompt": "Which maintenance requests require coordination with housekeeping?", "response": "SELECT m.*, r.room_number FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.notes LIKE '%housekeeping%' AND m.status != 'Closed';"}
{"prompt": "What is the status of all electrical-related maintenance requests?", "response": "SELECT * FROM MaintenanceRequests WHERE issue_description LIKE '%electrical%' AND status != 'Closed';"}
{"prompt": "Which rooms have unresolved plumbing issues?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.issue_description LIKE '%plumbing%' AND m.status != 'Closed';"}
{"prompt": "What is the list of all major maintenance issues reported this year?", "response": "SELECT * FROM MaintenanceRequests WHERE status = 'Major' AND reported_date >= '2025-01-01';"}
{"prompt": "Which maintenance requests have been open the longest?", "response": "SELECT * FROM MaintenanceRequests WHERE status != 'Closed' ORDER BY reported_date ASC LIMIT 5;"}
{"prompt": "What is the summary of all maintenance tasks I completed last month?", "response": "SELECT room_id, issue_description, reported_date FROM MaintenanceRequests WHERE assigned_to = 'Arjun' AND status = 'Closed' AND MONTH(reported_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"}
{"prompt": "Which rooms are scheduled for preventive maintenance this week?", "response": "SELECT r.room_number, m.scheduled_date FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status = 'Scheduled' AND m.scheduled_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the total number of maintenance requests I have resolved this year?", "response": "SELECT COUNT(*) FROM MaintenanceRequests WHERE assigned_to = 'Arjun' AND status = 'Closed' AND YEAR(reported_date) = YEAR(CURDATE());"}
{"prompt": "Which requests did I escalate to management for follow-up?", "response": "SELECT * FROM MaintenanceRequests WHERE assigned_to = 'Arjun' AND notes LIKE '%escalate%' AND status != 'Closed';"}
{"prompt": "What is the current status of all maintenance requests in the system?", "response": "SELECT m.request_id, r.room_number, m.issue_description, m.status FROM MaintenanceRequests m LEFT JOIN Rooms r ON m.room_id = r.room_id;"}
{"prompt": "What is the list of all rooms with maintenance issues affecting guest check-in?", "response": "SELECT r.room_number, m.issue_description FROM MaintenanceRequests m JOIN Rooms r ON m.room_id = r.room_id WHERE m.status != 'Closed' AND r.status != 'Available';"}
{"prompt": "Finance/Accounts Department", "response": "nan"}
{"prompt": "NL Question (Anita’s POV)", "response": "SQL Query"}
{"prompt": "What is the total revenue from room bookings today?", "response": "SELECT SUM(amount) AS total_room_revenue FROM Payments WHERE payment_date = CURDATE() AND payment_status = 'Paid';"}
{"prompt": "What are the details of all guest payments received this week?", "response": "SELECT p.*, b.guest_id FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE p.payment_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which bookings have pending or failed payments?", "response": "SELECT b.booking_id, b.guest_id, b.payment_status FROM Bookings b WHERE b.payment_status != 'Paid';"}
{"prompt": "What is the summary of all refunds processed this month?", "response": "SELECT * FROM Payments WHERE amount < 0 AND MONTH(payment_date) = MONTH(CURDATE()) AND payment_status = 'Refunded';"}
{"prompt": "What is the total revenue and expenses for the hotel this month?", "response": "SELECT SUM(total_revenue) AS revenue, SUM(expenses) AS expenses FROM FinanceAccounts WHERE MONTH(report_date) = MONTH(CURDATE()) AND YEAR(report_date) = YEAR(CURDATE());"}
{"prompt": "What is the breakdown of revenue by department for the current month?", "response": "SELECT department, SUM(total_revenue) AS revenue FROM FinanceAccounts WHERE MONTH(report_date) = MONTH(CURDATE()) AND YEAR(report_date) = YEAR(CURDATE()) GROUP BY department;"}
{"prompt": "What is the list of all vendor bills processed this month?", "response": "-- If vendor bills are tracked in FinanceAccounts: SELECT * FROM FinanceAccounts WHERE department = 'Vendors' AND MONTH(report_date) = MONTH(CURDATE());"}
{"prompt": "Which payments were made by credit card today?", "response": "SELECT * FROM Payments WHERE payment_method = 'Credit Card' AND payment_date = CURDATE();"}
{"prompt": "What is the payroll expense for the previous month?", "response": "SELECT SUM(expenses) AS payroll_expense FROM FinanceAccounts WHERE department = 'Payroll' AND MONTH(report_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"}
{"prompt": "Which bookings required deposit payments and their status?", "response": "SELECT b.booking_id, b.guest_id, p.amount, p.payment_status FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE p.description LIKE '%deposit%';"}
{"prompt": "What are the most common payment methods used by guests?", "response": "SELECT payment_method, COUNT(*) AS count FROM Payments GROUP BY payment_method ORDER BY count DESC;"}
{"prompt": "What is the list of all invoices processed in the last month?", "response": "-- If invoices are tracked in FinanceAccounts: SELECT * FROM FinanceAccounts WHERE department = 'Vendors' AND report_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which guests have requested refunds or had payment disputes?", "response": "SELECT DISTINCT b.guest_id, p.payment_id, p.amount, p.payment_status FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE p.payment_status = 'Refunded' OR p.payment_status = 'Disputed';"}
{"prompt": "What is the daily revenue trend for the past 14 days?", "response": "SELECT payment_date, SUM(amount) AS daily_revenue FROM Payments WHERE payment_status = 'Paid' AND payment_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) GROUP BY payment_date ORDER BY payment_date;"}
{"prompt": "What are the details of all payments reconciled with the front desk this week?", "response": "-- If reconciliations are tracked in ITSupport: SELECT * FROM ITSupport WHERE issue_type LIKE '%reconciliation%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the current balance of each finance account?", "response": "SELECT account_id, department, total_revenue - expenses AS balance FROM FinanceAccounts ORDER BY department;"}
{"prompt": "What are the top 5 days with the highest revenue this year?", "response": "SELECT payment_date, SUM(amount) AS revenue FROM Payments WHERE payment_status = 'Paid' AND YEAR(payment_date) = YEAR(CURDATE()) GROUP BY payment_date ORDER BY revenue DESC LIMIT 5;"}
{"prompt": "Which bookings have had payment discrepancies reported?", "response": "-- If discrepancies are tracked in ITSupport: SELECT * FROM ITSupport WHERE issue_type LIKE '%payment discrepancy%';"}
{"prompt": "What is the total amount of deposits currently held by the hotel?", "response": "SELECT SUM(amount) AS total_deposits FROM Payments WHERE description LIKE '%deposit%' AND payment_status = 'Paid';"}
{"prompt": "What is the summary of all financial reports generated in the last quarter?", "response": "SELECT report_id, report_name, generated_on FROM Analytics WHERE generated_on >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "How many users visited the 'Deluxe Room' page in the last week?", "response": "SELECT data->>'$.page_views' AS deluxe_views FROM Analytics WHERE report_name = 'Deluxe Room Page Traffic' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "How many bookings were made for Deluxe Rooms last weekend?", "response": "SELECT COUNT(*) FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Deluxe' AND b.check_in_date BETWEEN DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE())+2 DAY) AND DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE())-1 DAY);"}
{"prompt": "What is the conversion rate for the 'Deluxe Room' page last week?", "response": "SELECT (SELECT COUNT(*) FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Deluxe' AND b.booking_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)) * 100.0 / (SELECT data->>'$.page_views' FROM Analytics WHERE report_name = 'Deluxe Room Page Traffic' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)) AS conversion_rate;"}
{"prompt": "Which promo codes were used for weekend bookings in the last campaign?", "response": "SELECT data->>'$.promo_code' AS promo_code, COUNT(*) AS usage_count FROM Analytics WHERE report_name = 'Promo Code Usage' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY promo_code;"}
{"prompt": "How many bookings used the 20% weekend discount code?", "response": "SELECT COUNT(*) FROM Bookings WHERE booking_status = 'Confirmed' AND payment_status = 'Paid' AND special_requests LIKE '%20% off%';"}
{"prompt": "What is the total revenue generated from the weekend discount campaign?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.special_requests LIKE '%20% off%' AND p.payment_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which marketing channels brought in the most weekend bookings?", "response": "SELECT channel, COUNT(*) AS booking_count FROM MarketingCampaigns WHERE status = 'Active' AND start_date <= CURDATE() AND end_date >= CURDATE() GROUP BY channel ORDER BY booking_count DESC;"}
{"prompt": "How many bookings came from Google Ads vs. Instagram promotions?", "response": "SELECT channel, COUNT(*) AS bookings FROM MarketingCampaigns WHERE (channel = 'Google Ads' OR channel = 'Instagram') AND status = 'Active' AND start_date <= CURDATE() AND end_date >= CURDATE() GROUP BY channel;"}
{"prompt": "What is the list of all email blasts sent to past customers in metro cities?", "response": "SELECT * FROM MarketingCampaigns WHERE channel = 'Email' AND status = 'Active' AND start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "Which customer segments were most responsive to the weekend offer?", "response": "SELECT data->>'$.customer_segment' AS segment, COUNT(*) AS response_count FROM Analytics WHERE report_name = 'Campaign Response' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY segment ORDER BY response_count DESC;"}
{"prompt": "What was the average booking value for weekend stays during the campaign?", "response": "SELECT AVG(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.check_in_date BETWEEN DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE())+2 DAY) AND DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE())-1 DAY);"}
{"prompt": "Which rooms (other than Deluxe) saw an increase in bookings due to the campaign?", "response": "SELECT r.room_type, COUNT(*) AS bookings FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type != 'Deluxe' AND b.booking_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY r.room_type ORDER BY bookings DESC;"}
{"prompt": "What is the click-through rate for Google Ads and Instagram promotions?", "response": "SELECT channel, data->>'$.clicks' AS clicks, data->>'$.impressions' AS impressions, (data->>'$.clicks')*100.0/(data->>'$.impressions') AS ctr FROM Analytics WHERE report_name = 'Ad Performance' AND channel IN ('Google Ads', 'Instagram') AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which marketing campaign had the highest ROI last week?", "response": "SELECT name, (budget/(SELECT SUM(amount) FROM Payments WHERE payment_date >= start_date AND payment_date <= end_date)) AS roi FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY roi DESC LIMIT 1;"}
{"prompt": "What is the list of all guests who used a promo code for their booking?", "response": "SELECT g.first_name, g.last_name, b.special_requests FROM Bookings b JOIN Guests g ON b.guest_id = g.guest_id WHERE b.special_requests LIKE '%promo code%';"}
{"prompt": "How many bookings were made by returning customers during the campaign?", "response": "SELECT count(*) FROM Bookings WHERE guest_id IN (SELECT guest_id FROM Bookings GROUP BY guest_id HAVING count(*) > 1) AND booking_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the performance summary of all active marketing campaigns?", "response": "SELECT name, start_date, end_date, channel, status, budget FROM MarketingCampaigns WHERE status = 'Active';"}
{"prompt": "Which days last week had the highest number of weekend bookings?", "response": "SELECT booking_date, COUNT(*) AS bookings FROM Bookings WHERE WEEKDAY(booking_date) IN (5,6) AND booking_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY booking_date ORDER BY bookings DESC;"}
{"prompt": "What is the total number of bookings generated from Instagram ads?", "response": "SELECT COUNT(*) FROM Analytics WHERE report_name = 'Ad Performance' AND channel = 'Instagram' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which promo code or offer generated the highest revenue?", "response": "SELECT data->>'$.promo_code' AS promo_code, SUM(data->>'$.revenue') AS total_revenue FROM Analytics WHERE report_name = 'Promo Code Usage' GROUP BY promo_code ORDER BY total_revenue DESC LIMIT 1;"}
{"prompt": "IT Support/Admins", "response": "nan"}
{"prompt": "NL Question (Sandeep’s POV)", "response": "SQL Query"}
{"prompt": "What is the server uptime and system status today?", "response": "-- If tracked in Analytics: SELECT report_name, generated_on, data FROM Analytics WHERE report_name = 'Server Uptime' AND DATE(generated_on) = CURDATE();"}
{"prompt": "What are the most recent user access logs for the admin console?", "response": "-- If access logs are tracked in Analytics or ITSupport: SELECT * FROM ITSupport WHERE issue_type = 'User Access' ORDER BY created_on DESC LIMIT 20;"}
{"prompt": "What is the current system performance report?", "response": "SELECT report_name, generated_on, data FROM Analytics WHERE report_name = 'System Performance' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which IT support tickets were submitted by front desk staff today?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Front Desk' AND DATE(created_on) = CURDATE();"}
{"prompt": "What is the status of the room availability dashboard sync task?", "response": "-- If tracked in ITSupport or Analytics: SELECT * FROM ITSupport WHERE issue_type LIKE '%sync%' AND status != 'Closed' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "Which background tasks failed in the last 24 hours?", "response": "SELECT * FROM ITSupport WHERE issue_type LIKE '%background task%' AND status = 'Failed' AND created_on >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What API tokens have been regenerated recently?", "response": "SELECT * FROM ITSupport WHERE issue_type LIKE '%API token%' AND status = 'Resolved' AND created_on >= DATE_SUB(NOW(), INTERVAL 7 DAY);"}
{"prompt": "Which system issues were fixed by Sandeep this week?", "response": "SELECT * FROM ITSupport WHERE submitted_by = 'Sandeep' AND status = 'Resolved' AND created_on >= DATE_SUB(NOW(), INTERVAL 7 DAY);"}
{"prompt": "Who currently has access to booking reports?", "response": "-- If access is tracked in ITSupport: SELECT submitted_by, status FROM ITSupport WHERE issue_type LIKE '%booking report access%' AND status = 'Granted';"}
{"prompt": "Which users have accessed sensitive guest data in the last month?", "response": "-- If access is logged: SELECT submitted_by, created_on FROM ITSupport WHERE issue_type = 'Sensitive Data Access' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the status of the latest security patch update?", "response": "SELECT * FROM ITSupport WHERE issue_type LIKE '%security patch%' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "Were daily backups completed successfully in the last 7 days?", "response": "SELECT * FROM ITSupport WHERE issue_type = 'Backup' AND status = 'Completed' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are all open IT support tickets in the system?", "response": "SELECT * FROM ITSupport WHERE status != 'Closed';"}
{"prompt": "Which system alerts are currently configured for booking sync failures?", "response": "-- If alerts are tracked in ITSupport: SELECT * FROM ITSupport WHERE issue_type LIKE '%system alert%' AND issue_type LIKE '%booking sync%';"}
{"prompt": "What is the history of booking sync failures in the past month?", "response": "SELECT * FROM ITSupport WHERE issue_type LIKE '%booking sync%' AND status = 'Failed' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which users have temporary access to reports and when does it expire?", "response": "-- If expiry is tracked: SELECT submitted_by, data FROM ITSupport WHERE issue_type LIKE '%temporary access%' AND status = 'Granted';"}
{"prompt": "What is the summary of all IT incidents resolved this month?", "response": "SELECT issue_type, COUNT(*) AS resolved_count FROM ITSupport WHERE status = 'Resolved' AND MONTH(created_on) = MONTH(CURDATE()) GROUP BY issue_type;"}
{"prompt": "What are the most common IT issues reported by hotel staff?", "response": "SELECT issue_type, COUNT(*) AS count FROM ITSupport GROUP BY issue_type ORDER BY count DESC;"}
{"prompt": "What is the list of all recent system configuration changes?", "response": "-- If tracked in ITSupport: SELECT * FROM ITSupport WHERE issue_type LIKE '%configuration%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "Which IT support tickets were escalated to management?", "response": "SELECT * FROM ITSupport WHERE status = 'Escalated';"}
{"prompt": "Analysts/Business Intelligence", "response": "nan"}
{"prompt": "NL Question (Nisha’s POV)", "response": "SQL Query"}
{"prompt": "What is the weekly booking trend for premium suites in coastal branches?", "response": "SELECT b.booking_date, COUNT(*) AS bookings FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() GROUP BY b.booking_date ORDER BY b.booking_date;"}
{"prompt": "How did bookings for premium suites in coastal branches change after the last price update?", "response": "SELECT b.booking_date, COUNT(*) AS bookings FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_date >= (SELECT MAX(start_date) FROM MarketingCampaigns WHERE name LIKE '%Price Update%') GROUP BY b.booking_date ORDER BY b.booking_date;"}
{"prompt": "What is the segmentation of bookings by marketing channel for premium suites in coastal branches?", "response": "SELECT mc.channel, COUNT(*) AS bookings FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id JOIN MarketingCampaigns mc ON mc.campaign_id = b.booking_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE() GROUP BY mc.channel ORDER BY bookings DESC;"}
{"prompt": "What is the Customer Lifetime Value (CLV) for loyalty program members in urban regions?", "response": "SELECT g.guest_id, g.first_name, g.last_name, SUM(p.amount) AS total_spent FROM Guests g JOIN Bookings b ON g.guest_id = b.guest_id JOIN Payments p ON b.booking_id = p.booking_id WHERE g.address LIKE '%Urban%' GROUP BY g.guest_id;"}
{"prompt": "How much more do repeat customers in urban regions spend compared to first-time guests?", "response": "SELECT (SELECT AVG(total_spent) FROM (SELECT g.guest_id, SUM(p.amount) AS total_spent FROM Guests g JOIN Bookings b ON g.guest_id = b.guest_id JOIN Payments p ON b.booking_id = p.booking_id WHERE g.address LIKE '%Urban%' GROUP BY g.guest_id HAVING COUNT(b.booking_id) > 1) AS repeat_customers) AS avg_repeat_spend, (SELECT AVG(total_spent) FROM (SELECT g.guest_id, SUM(p.amount) AS total_spent FROM Guests g JOIN Bookings b ON g.guest_id = b.guest_id JOIN Payments p ON b.booking_id = p.booking_id WHERE g.address LIKE '%Urban%' GROUP BY g.guest_id HAVING COUNT(b.booking_id) = 1) AS first_time_customers) AS avg_first_time_spend;"}
{"prompt": "What are the occupancy rates for the last month across all branches?", "response": "SELECT DATE(b.check_in_date) AS date, COUNT(DISTINCT b.room_id) * 100.0 / (SELECT COUNT(*) FROM Rooms) AS occupancy_rate FROM Bookings b WHERE b.check_in_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE() GROUP BY DATE(b.check_in_date) ORDER BY date;"}
{"prompt": "What are the main reasons for booking cancellations in the last month?", "response": "SELECT b.cancellation_reason, COUNT(*) AS count FROM Bookings b WHERE b.booking_status = 'Cancelled' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE() GROUP BY b.cancellation_reason ORDER BY count DESC;"}
{"prompt": "What is the seasonal demand index for the past 6 months?", "response": "SELECT MONTH(b.booking_date) AS month, COUNT(*) AS bookings FROM Bookings b WHERE b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() GROUP BY MONTH(b.booking_date) ORDER BY month;"}
{"prompt": "What is the platform performance comparison between web and mobile for the last month?", "response": "SELECT report_name, data->>'$.average_response_time' AS avg_response_time FROM Analytics WHERE report_name IN ('Web Platform Performance', 'Mobile Platform Performance') AND generated_on BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "Which marketing channels had the highest conversion rates last week?", "response": "SELECT mc.channel, mc.conversion_rate FROM MarketingCampaigns mc WHERE mc.start_date <= CURDATE() AND mc.end_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY mc.conversion_rate DESC;"}
{"prompt": "How many bookings were made last week from email campaigns?", "response": "SELECT COUNT(*) FROM Bookings b JOIN MarketingCampaigns mc ON mc.campaign_id = b.booking_id WHERE mc.channel = 'Email' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE();"}
{"prompt": "What is the average booking value for premium suites in coastal branches?", "response": "SELECT AVG(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "What is the total revenue generated from premium suite bookings in coastal branches in the last month?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "Who are the top 5 guests by total spending in the last year?", "response": "SELECT g.first_name, g.last_name, SUM(p.amount) AS total_spent FROM Guests g JOIN Bookings b ON g.guest_id = b.guest_id JOIN Payments p ON b.booking_id = p.booking_id WHERE b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 365 DAY) AND CURDATE() GROUP BY g.guest_id ORDER BY total_spent DESC LIMIT 5;"}
{"prompt": "What is the average length of stay for premium suite guests in coastal branches?", "response": "SELECT AVG(DATEDIFF(b.check_out_date, b.check_in_date)) AS avg_stay FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "How many repeat bookings were made by loyalty program members in urban regions?", "response": "SELECT COUNT(*) FROM (SELECT g.guest_id FROM Guests g JOIN Bookings b ON g.guest_id = b.guest_id WHERE g.address LIKE '%Urban%' GROUP BY g.guest_id HAVING COUNT(b.booking_id) > 1) AS repeat_loyalty;"}
{"prompt": "What is the cancellation rate for premium suites in coastal branches?", "response": "SELECT count(*) * 100.0 / (SELECT count(*) FROM Bookings b2 JOIN Rooms r2 ON b2.room_id = r2.room_id WHERE r2.room_type = 'Premium Suite' AND r2.room_number LIKE 'Coastal%' AND b2.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE()) AS cancellation_rate FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND r.room_number LIKE 'Coastal%' AND b.booking_status = 'Cancelled' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "What is the monthly executive summary of occupancy, cancellations, seasonal demand, and platform performance?", "response": "SELECT report_name, data FROM Analytics WHERE report_name IN ('Occupancy Rates', 'Cancellation Reasons', 'Seasonal Demand', 'Platform Performance') AND generated_on BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "What is the average lead time between booking date and check-in for premium suites?", "response": "SELECT AVG(DATEDIFF(b.check_in_date, b.booking_date)) AS avg_lead_time FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_type = 'Premium Suite' AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE();"}
{"prompt": "Which metro city branches had the highest weekend booking rates in the last month?", "response": "SELECT r.room_number, COUNT(*) AS weekend_bookings FROM Bookings b JOIN Rooms r ON b.room_id = r.room_id WHERE r.room_number LIKE 'Metro%' AND WEEKDAY(b.check_in_date) IN (5,6) AND b.booking_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE() GROUP BY r.room_number ORDER BY weekend_bookings DESC LIMIT 5;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "RestaurantDB", "response": "nan"}
{"prompt": "NL Question (Anjali’s POV)", "response": "SQL Query"}
{"prompt": "Which menu items are vegetarian-friendly?", "response": "SELECT item_name, category, price FROM Menu WHERE category = 'Vegetarian' AND availability = 'Available';"}
{"prompt": "What are all available menu items with “open terrace” in their description?", "response": "SELECT item_name, category, price FROM Menu WHERE item_name LIKE '%open terrace%' AND availability = 'Available';"}
{"prompt": "What is the menu for today?", "response": "SELECT item_name, category, price FROM Menu WHERE availability = 'Available';"}
{"prompt": "What are the details of Anjali’s most recent order?", "response": "SELECT * FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "What items did Anjali and her friends order in their last dinner?", "response": "SELECT m.item_name, oi.quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE o.customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "What is the status of Anjali’s latest order?", "response": "SELECT status FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "Did Anjali split the bill for her last order?", "response": "SELECT * FROM Payments WHERE payment_id = (SELECT payment_id FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1) AND amount < (SELECT total_amount FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What rating did Anjali give for her last order?", "response": "SELECT rating FROM Feedback WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY submitted_on DESC LIMIT 1;"}
{"prompt": "What comments did Anjali leave in her last review?", "response": "SELECT comments FROM Feedback WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY submitted_on DESC LIMIT 1;"}
{"prompt": "What is the total number of orders Anjali has placed in the last 6 months?", "response": "SELECT COUNT(*) FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') AND order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"}
{"prompt": "What is Anjali’s average feedback rating?", "response": "SELECT AVG(rating) FROM Feedback WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali');"}
{"prompt": "What are the details of all payments Anjali made in her last order?", "response": "SELECT * FROM Payments WHERE payment_id = (SELECT payment_id FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What menu items did Anjali order that are in the “Pasta” category?", "response": "SELECT m.item_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE o.customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') AND m.category = 'Pasta';"}
{"prompt": "What is the total amount Anjali paid for her last dinner?", "response": "SELECT total_amount FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "What is the most recent payment method used by Anjali?", "response": "SELECT payment_method FROM Payments WHERE payment_id = (SELECT payment_id FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What is Anjali’s loyalty points balance?", "response": "SELECT loyalty_points FROM Customers WHERE name = 'Anjali';"}
{"prompt": "Which menu items are currently unavailable?", "response": "SELECT item_name FROM Menu WHERE availability != 'Available';"}
{"prompt": "What feedback did Anjali submit in the last week?", "response": "SELECT rating, comments FROM Feedback WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') AND submitted_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the list of all orders placed at table 4?", "response": "SELECT * FROM Orders WHERE table_number = 4;"}
{"prompt": "What actions did Anjali perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT customer_id FROM Customers WHERE name = 'Anjali') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Waiters/Servers", "response": "nan"}
{"prompt": "NL Question (Ravi’s POV)", "response": "SQL Query"}
{"prompt": "What is my staff ID?", "response": "SELECT staff_id FROM Staff WHERE name = 'Ravi';"}
{"prompt": "What tables am I assigned to today?", "response": "SELECT DISTINCT table_number FROM Orders WHERE DATE(order_date) = CURDATE() AND status IN ('Pending', 'In Progress', 'Completed');"}
{"prompt": "What are all my orders for today?", "response": "SELECT * FROM Orders WHERE DATE(order_date) = CURDATE() AND status IN ('Pending', 'In Progress', 'Completed');"}
{"prompt": "Which orders have special requests like “no onions” or “extra spicy”?", "response": "SELECT order_id, status, table_number FROM Orders WHERE DATE(order_date) = CURDATE() AND (status IN ('Pending', 'In Progress') AND (special_requests LIKE '%no onions%' OR special_requests LIKE '%extra spicy%'));"}
{"prompt": "What is the status of all my tables/orders for today?", "response": "SELECT order_id, table_number, status FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "What menu items have been ordered at my tables today?", "response": "SELECT m.item_name, oi.quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE DATE(o.order_date) = CURDATE();"}
{"prompt": "Which orders are currently pending or in progress at my tables?", "response": "SELECT order_id, table_number FROM Orders WHERE DATE(order_date) = CURDATE() AND status IN ('Pending', 'In Progress');"}
{"prompt": "Which orders have been completed and are ready to mark the table as available?", "response": "SELECT order_id, table_number FROM Orders WHERE DATE(order_date) = CURDATE() AND status = 'Completed';"}
{"prompt": "What are the details of payments (including split bills) for today’s orders?", "response": "SELECT p.payment_id, p.amount, p.payment_method, o.order_id, o.table_number FROM Payments p JOIN Orders o ON p.payment_id = o.payment_id WHERE DATE(o.order_date) = CURDATE();"}
{"prompt": "Which payments were split (amount less than total order) today?", "response": "SELECT p.payment_id, p.amount, o.total_amount, o.order_id FROM Payments p JOIN Orders o ON p.payment_id = o.payment_id WHERE DATE(o.order_date) = CURDATE() AND p.amount < o.total_amount;"}
{"prompt": "What feedback did customers leave today?", "response": "SELECT customer_id, order_id, rating, comments FROM Feedback WHERE DATE(submitted_on) = CURDATE();"}
{"prompt": "What positive comments did customers leave about food or service today?", "response": "SELECT comments FROM Feedback WHERE DATE(submitted_on) = CURDATE() AND (comments LIKE '%food%' OR comments LIKE '%service%') AND rating >= 4;"}
{"prompt": "Which menu items are currently running low, especially paneer tikka?", "response": "SELECT item_name, quantity_available FROM Inventory WHERE quantity_available < 10 OR item_name = 'Paneer Tikka';"}
{"prompt": "What is the current inventory status for all menu items?", "response": "SELECT item_name, quantity_available, unit FROM Inventory;"}
{"prompt": "What inventory items did I (Ravi) report as used today?", "response": "SELECT i.item_name, iu.quantity_used FROM InventoryUsage iu JOIN Inventory i ON iu.item_id = i.item_id WHERE iu.used_by = (SELECT staff_id FROM Staff WHERE name = 'Ravi') AND DATE(iu.usage_date) = CURDATE();"}
{"prompt": "What are my shift details for today?", "response": "SELECT shift_date, shift_start, shift_end FROM Shifts WHERE staff_id = (SELECT staff_id FROM Staff WHERE name = 'Ravi') AND shift_date = CURDATE();"}
{"prompt": "What is the total number of orders I handled today?", "response": "SELECT COUNT(*) FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "What is the average customer feedback rating for my tables today?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN Orders o ON f.order_id = o.order_id WHERE DATE(o.order_date) = CURDATE();"}
{"prompt": "What actions did I perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Ravi') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the details of deliveries assigned to me today (if any)?", "response": "SELECT * FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Ravi') AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "Chefs/Kitchen Staff", "response": "nan"}
{"prompt": "NL Question (Chef Arjun’s POV)", "response": "SQL Query"}
{"prompt": "What are the incoming orders for today, including special dietary notes and priority?", "response": "SELECT order_id, order_date, status, special_requests FROM Orders WHERE DATE(order_date) = CURDATE() ORDER BY order_date ASC;"}
{"prompt": "Which orders are flagged as “high priority”?", "response": "SELECT order_id, order_date, special_requests FROM Orders WHERE DATE(order_date) = CURDATE() AND status = 'High';"}
{"prompt": "What are the special requests for today’s orders (e.g., “no garlic”, “vegan”)?", "response": "SELECT order_id, special_requests FROM Orders WHERE DATE(order_date) = CURDATE() AND special_requests IS NOT NULL;"}
{"prompt": "What is the current inventory status for all ingredients?", "response": "SELECT item_name, quantity_available, unit, last_updated FROM Inventory;"}
{"prompt": "Is garlic available in inventory?", "response": "SELECT quantity_available FROM Inventory WHERE item_name = 'garlic';"}
{"prompt": "Which ingredients are running low (less than 5 units)?", "response": "SELECT item_name, quantity_available FROM Inventory WHERE quantity_available < 5;"}
{"prompt": "Is grilled fish running low in stock?", "response": "SELECT quantity_available FROM Inventory WHERE item_name = 'grilled fish';"}
{"prompt": "What is the prep status of all orders for today?", "response": "SELECT order_id, status FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "Which orders are currently marked as “In Progress”?", "response": "SELECT order_id, order_date FROM Orders WHERE status = 'In Progress' AND DATE(order_date) = CURDATE();"}
{"prompt": "Which orders are ready for pickup?", "response": "SELECT order_id, order_date FROM Orders WHERE status = 'Ready for Pickup' AND DATE(order_date) = CURDATE();"}
{"prompt": "Which orders have not yet started prep (“Pending”)?", "response": "SELECT order_id, order_date FROM Orders WHERE status = 'Pending' AND DATE(order_date) = CURDATE();"}
{"prompt": "What is the list of all menu items ordered today and their quantities?", "response": "SELECT m.item_name, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE DATE(o.order_date) = CURDATE() GROUP BY m.item_name;"}
{"prompt": "What is the most popular dish today?", "response": "SELECT m.item_name, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE DATE(o.order_date) = CURDATE() GROUP BY m.item_name ORDER BY total_quantity DESC LIMIT 1;"}
{"prompt": "What is the total number of vegan curries ordered today?", "response": "SELECT SUM(oi.quantity) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE m.item_name = 'vegan curry' AND DATE(o.order_date) = CURDATE();"}
{"prompt": "What is the total number of grilled fish ordered today?", "response": "SELECT SUM(oi.quantity) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE m.item_name = 'grilled fish' AND DATE(o.order_date) = CURDATE();"}
{"prompt": "What is the total quantity of each inventory item used today?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_used FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE DATE(u.usage_date) = CURDATE() GROUP BY i.item_name;"}
{"prompt": "What feedback did customers leave about today’s dishes?", "response": "SELECT f.rating, f.comments, o.order_id FROM Feedback f JOIN Orders o ON f.order_id = o.order_id WHERE DATE(f.submitted_on) = CURDATE();"}
{"prompt": "What actions did I (Arjun) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Arjun') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are my shift details for today?", "response": "SELECT shift_date, shift_start, shift_end FROM Shifts WHERE staff_id = (SELECT staff_id FROM Staff WHERE name = 'Arjun') AND shift_date = CURDATE();"}
{"prompt": "What are the details of all inventory usage I reported today?", "response": "SELECT i.item_name, iu.quantity_used FROM InventoryUsage iu JOIN Inventory i ON iu.item_id = i.item_id WHERE iu.used_by = (SELECT staff_id FROM Staff WHERE name = 'Arjun') AND DATE(iu.usage_date) = CURDATE();"}
{"prompt": "Restaurant Manager", "response": "nan"}
{"prompt": "NL Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "What are today’s reservations?", "response": "SELECT * FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "Who is on the staff roster today, and what are their roles and departments?", "response": "SELECT s.staff_id, s.name, s.role, s.department FROM Staff s JOIN Shifts sh ON s.staff_id = sh.staff_id WHERE sh.shift_date = CURDATE();"}
{"prompt": "Which menu items are running low in inventory (less than 10 units)?", "response": "SELECT item_name, quantity_available FROM Inventory WHERE quantity_available < 10;"}
{"prompt": "What is the current quantity of prawns and mozzarella in inventory?", "response": "SELECT item_name, quantity_available FROM Inventory WHERE item_name IN ('prawns', 'mozzarella');"}
{"prompt": "What is the daily sales report for vegetarian and non-vegetarian dishes?", "response": "SELECT m.category, SUM(oi.quantity) AS total_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE DATE(o.order_date) = CURDATE() GROUP BY m.category;"}
{"prompt": "What are the top 5 best-selling menu items today?", "response": "SELECT m.item_name, SUM(oi.quantity) AS sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE DATE(o.order_date) = CURDATE() GROUP BY m.item_name ORDER BY sold DESC LIMIT 5;"}
{"prompt": "Which staff members are scheduled for peak (evening) hours today?", "response": "SELECT s.name, sh.shift_start, sh.shift_end FROM Staff s JOIN Shifts sh ON s.staff_id = sh.staff_id WHERE sh.shift_date = CURDATE() AND sh.shift_start <= '19:00:00' AND sh.shift_end >= '21:00:00';"}
{"prompt": "What is the total revenue generated today?", "response": "SELECT SUM(total_amount) AS total_revenue FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "Which orders have special requests today?", "response": "SELECT order_id, table_number, special_requests FROM Orders WHERE DATE(order_date) = CURDATE() AND special_requests IS NOT NULL;"}
{"prompt": "Which orders are delayed or have not been confirmed by the kitchen?", "response": "SELECT order_id, status, order_date FROM Orders WHERE DATE(order_date) = CURDATE() AND status NOT IN ('Completed', 'Ready for Pickup');"}
{"prompt": "What is the feedback rating for today’s orders?", "response": "SELECT AVG(rating) AS avg_rating FROM Feedback WHERE DATE(submitted_on) = CURDATE();"}
{"prompt": "What comments did customers leave today?", "response": "SELECT comments FROM Feedback WHERE DATE(submitted_on) = CURDATE();"}
{"prompt": "What are the details of all payments received today?", "response": "SELECT * FROM Payments WHERE DATE(payment_date) = CURDATE();"}
{"prompt": "Which menu items are currently unavailable?", "response": "SELECT item_name FROM Menu WHERE availability != 'Available';"}
{"prompt": "What actions did I (Meera) log in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Meera') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What inventory items were used today and in what quantities?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_used FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE DATE(u.usage_date) = CURDATE() GROUP BY i.item_name;"}
{"prompt": "What is the list of all orders placed during the evening peak hours?", "response": "SELECT * FROM Orders WHERE DATE(order_date) = CURDATE() AND HOUR(order_date) BETWEEN 19 AND 22;"}
{"prompt": "Which staff member has the most shifts this week?", "response": "SELECT s.name, COUNT(*) AS shift_count FROM Shifts sh JOIN Staff s ON sh.staff_id = s.staff_id WHERE WEEK(sh.shift_date) = WEEK(CURDATE()) GROUP BY s.name ORDER BY shift_count DESC LIMIT 1;"}
{"prompt": "What is the total number of vegetarian vs non-vegetarian orders this week?", "response": "SELECT m.category, COUNT(*) AS order_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE WEEK(o.order_date) = WEEK(CURDATE()) GROUP BY m.category;"}
{"prompt": "What incidents or issues have been logged in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE DATE(timestamp) = CURDATE() AND action LIKE '%incident%';"}
{"prompt": "Cashiers", "response": "nan"}
{"prompt": "NL Question (Anita’s POV)", "response": "SQL Query"}
{"prompt": "What is my (Anita’s) staff ID?", "response": "SELECT staff_id FROM Staff WHERE name = 'Anita';"}
{"prompt": "What are all orders placed today?", "response": "SELECT order_id, customer_id, total_amount, status FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "Which payments have been made by cash, card, or mobile wallet today?", "response": "SELECT payment_id, payment_method, amount, payment_date FROM Payments WHERE DATE(payment_date) = CURDATE() AND payment_method IN ('Cash', 'Card', 'Mobile Wallet');"}
{"prompt": "Which orders today have been paid in full?", "response": "SELECT o.order_id, o.total_amount, p.amount FROM Orders o JOIN Payments p ON o.payment_id = p.payment_id WHERE DATE(o.order_date) = CURDATE() AND p.is_paid = TRUE AND p.amount = o.total_amount;"}
{"prompt": "Which orders today have split payments?", "response": "SELECT o.order_id, COUNT(p.payment_id) AS payment_count FROM Orders o JOIN Payments p ON o.payment_id = p.payment_id WHERE DATE(o.order_date) = CURDATE() GROUP BY o.order_id HAVING payment_count > 1;"}
{"prompt": "What are the details of all split payments for today’s orders?", "response": "SELECT o.order_id, p.payment_id, p.amount, p.payment_method FROM Orders o JOIN Payments p ON o.payment_id = p.payment_id WHERE DATE(o.order_date) = CURDATE() AND p.amount < o.total_amount;"}
{"prompt": "What is the total sales amount processed today?", "response": "SELECT SUM(total_amount) AS total_sales FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "What is the total cash collected today?", "response": "SELECT SUM(amount) AS cash_collected FROM Payments WHERE DATE(payment_date) = CURDATE() AND payment_method = 'Cash';"}
{"prompt": "What is the total amount collected by card today?", "response": "SELECT SUM(amount) AS card_collected FROM Payments WHERE DATE(payment_date) = CURDATE() AND payment_method = 'Card';"}
{"prompt": "What is the total amount collected by mobile wallet today?", "response": "SELECT SUM(amount) AS wallet_collected FROM Payments WHERE DATE(payment_date) = CURDATE() AND payment_method = 'Mobile Wallet';"}
{"prompt": "Which payments today had discount coupons or loyalty points applied?", "response": "SELECT payment_id, amount, payment_method FROM Payments WHERE DATE(payment_date) = CURDATE() AND (amount < (SELECT total_amount FROM Orders WHERE payment_id = Payments.payment_id));"}
{"prompt": "What is the list of all orders where loyalty points were redeemed today?", "response": "SELECT o.order_id, c.name, o.total_amount FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE DATE(o.order_date) = CURDATE() AND c.loyalty_points > 0;"}
{"prompt": "What is the cash drawer balance at the end of my shift?", "response": "SELECT SUM(amount) FROM Payments WHERE DATE(payment_date) = CURDATE() AND payment_method = 'Cash';"}
{"prompt": "What cash mismatch incidents have been reported today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE action LIKE '%cash mismatch%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the end-of-shift cash report for today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%end-of-shift cash report%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What financial reports have been printed today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%financial report printed%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the backup status of today’s sales data?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%backup%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the summary of all payments processed today (by method)?", "response": "SELECT payment_method, COUNT(*) AS count, SUM(amount) AS total FROM Payments WHERE DATE(payment_date) = CURDATE() GROUP BY payment_method;"}
{"prompt": "What are all actions I (Anita) performed in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Anita') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the total number of orders and payments processed during my shift?", "response": "SELECT count(*) AS total_orders FROM Orders WHERE DATE(order_date) = CURDATE(); SELECT count(*) AS total_payments FROM Payments WHERE DATE(payment_date) = CURDATE();"}
{"prompt": "Delivery Staff", "response": "nan"}
{"prompt": "NL Question (Rajesh’s POV)", "response": "SQL Query"}
{"prompt": "What is my staff ID?", "response": "SELECT staff_id FROM Staff WHERE name = 'Rajesh';"}
{"prompt": "What are all the pending delivery orders assigned to me today?", "response": "SELECT * FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE() AND delivery_status = 'Pending';"}
{"prompt": "What are the customer addresses for my assigned deliveries today?", "response": "SELECT delivery_id, delivery_address FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What are the estimated delivery times for my orders today?", "response": "SELECT delivery_id, estimated_delivery_time FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What are the order details for my first assigned delivery today?", "response": "SELECT * FROM Orders WHERE order_id = (SELECT order_id FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE() ORDER BY estimated_delivery_time ASC LIMIT 1);"}
{"prompt": "What items are included in my first delivery order today?", "response": "SELECT m.item_name, oi.quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE o.order_id = (SELECT order_id FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE() ORDER BY estimated_delivery_time ASC LIMIT 1);"}
{"prompt": "What is the current delivery status of all my assigned deliveries today?", "response": "SELECT delivery_id, delivery_status FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "Which deliveries have been marked as “Out for delivery” today?", "response": "SELECT delivery_id, order_id FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status = 'Out for delivery' AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "Which deliveries have been marked as “Delivered” today?", "response": "SELECT delivery_id, order_id FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status = 'Delivered' AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "Which deliveries have had their estimated delivery time rescheduled today?", "response": "SELECT delivery_id, order_id, estimated_delivery_time FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE() AND delivery_status = 'Rescheduled';"}
{"prompt": "What is the list of all delivery status updates I made today?", "response": "SELECT delivery_id, delivery_status, estimated_delivery_time FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What actions did I perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the details of all failed delivery attempts today?", "response": "SELECT * FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status = 'Failed' AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What are the details of all deliveries with wrong addresses reported today?", "response": "SELECT * FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status = 'Wrong Address' AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What are the details of all deliveries with damaged food reported today?", "response": "SELECT * FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status = 'Damaged Food' AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What is the total number of deliveries I completed today?", "response": "SELECT COUNT(*) FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status = 'Delivered' AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What is the average delivery time for my completed deliveries today?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, o.order_date, d.estimated_delivery_time)) AS avg_delivery_time FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE d.assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND d.delivery_status = 'Delivered' AND DATE(d.estimated_delivery_time) = CURDATE();"}
{"prompt": "What is the list of all customer feedback for my deliveries today?", "response": "SELECT f.rating, f.comments FROM Feedback f JOIN Orders o ON f.order_id = o.order_id JOIN Deliveries d ON o.order_id = d.order_id WHERE d.assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(f.submitted_on) = CURDATE();"}
{"prompt": "What is the total number of delivery issues I reported today?", "response": "SELECT COUNT(*) FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND delivery_status IN ('Failed', 'Wrong Address', 'Damaged Food') AND DATE(estimated_delivery_time) = CURDATE();"}
{"prompt": "What is the summary of all deliveries (pending, out for delivery, delivered, failed) assigned to me today?", "response": "SELECT delivery_status, COUNT(*) AS count FROM Deliveries WHERE assigned_to = (SELECT staff_id FROM Staff WHERE name = 'Rajesh') AND DATE(estimated_delivery_time) = CURDATE() GROUP BY delivery_status;"}
{"prompt": "Inventory Manager", "response": "nan"}
{"prompt": "NL Question (Sonal’s POV)", "response": "SQL Query"}
{"prompt": "What are the current stock levels of all ingredients and supplies?", "response": "SELECT item_name, quantity_available, unit, last_updated FROM Inventory;"}
{"prompt": "Which inventory items are currently running low (≤5 units)?", "response": "SELECT item_name, quantity_available, unit FROM Inventory WHERE quantity_available <= 5;"}
{"prompt": "What is the current stock of fresh basil and chicken breasts?", "response": "SELECT item_name, quantity_available, unit FROM Inventory WHERE item_name IN ('fresh basil', 'chicken breasts');"}
{"prompt": "What recent deliveries have been received today?", "response": "SELECT item_id, quantity_received, delivery_date FROM Deliveries WHERE DATE(delivery_date) = CURDATE();"}
{"prompt": "What are the details of all inventory usage recorded today?", "response": "SELECT i.item_name, u.quantity_used, u.usage_date FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE DATE(u.usage_date) = CURDATE();"}
{"prompt": "Which items had spoilage or wastage logged today?", "response": "SELECT i.item_name, u.quantity_used, u.usage_date FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE DATE(u.usage_date) = CURDATE() AND u.quantity_used < 0;"}
{"prompt": "What is the total quantity used for each item in the last 7 days?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_used FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE u.usage_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY i.item_name;"}
{"prompt": "What are the historical consumption trends for all inventory items over the past week?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_used_last_7_days FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE u.usage_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY i.item_name;"}
{"prompt": "What are the details of all deliveries received this week?", "response": "SELECT item_id, quantity_received, delivery_date FROM Deliveries WHERE delivery_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which inventory items have not been used in the last week?", "response": "SELECT i.item_name FROM Inventory i WHERE i.item_id NOT IN (SELECT DISTINCT item_id FROM InventoryUsage WHERE usage_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY));"}
{"prompt": "What are the details of all inventory items that have a mismatch between system and physical count?", "response": "SELECT i.item_name, i.quantity_available, p.physical_count FROM Inventory i JOIN PhysicalStock p ON i.item_id = p.item_id WHERE i.quantity_available != p.physical_count;"}
{"prompt": "What is the summary report of inventory verification for today?", "response": "SELECT COUNT(*) AS total_items, SUM(i.quantity_available = p.physical_count) AS items_matching, SUM(i.quantity_available != p.physical_count) AS items_not_matching FROM Inventory i JOIN PhysicalStock p ON i.item_id = p.item_id;"}
{"prompt": "What are the details of all inventory adjustments made today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%inventory adjustment%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the most used ingredients this month?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_used FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE MONTH(u.usage_date) = MONTH(CURDATE()) GROUP BY i.item_name ORDER BY total_used DESC LIMIT 5;"}
{"prompt": "What are the least used ingredients this month?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_used FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE MONTH(u.usage_date) = MONTH(CURDATE()) GROUP BY i.item_name ORDER BY total_used ASC LIMIT 5;"}
{"prompt": "Which staff member logged the most inventory usage today?", "response": "SELECT s.name, SUM(u.quantity_used) AS total_logged FROM InventoryUsage u JOIN Staff s ON u.used_by = s.staff_id WHERE DATE(u.usage_date) = CURDATE() GROUP BY s.name ORDER BY total_logged DESC LIMIT 1;"}
{"prompt": "What is the list of all inventory items with their last updated time?", "response": "SELECT item_name, last_updated FROM Inventory;"}
{"prompt": "What are the details of all spoilage or wastage incidents this month?", "response": "SELECT i.item_name, u.quantity_used, u.usage_date FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE u.quantity_used < 0 AND MONTH(u.usage_date) = MONTH(CURDATE());"}
{"prompt": "What actions did I (Sonal) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Sonal') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the summary of all inventory received, used, and remaining for today?", "response": "SELECT i.item_name, i.quantity_available, (SELECT SUM(u.quantity_used) FROM InventoryUsage u WHERE u.item_id = i.item_id AND DATE(u.usage_date) = CURDATE()) AS used_today, (SELECT SUM(d.quantity_received) FROM Deliveries d WHERE d.item_id = i.item_id AND DATE(d.delivery_date) = CURDATE()) AS received_today FROM Inventory i;"}
{"prompt": "Admin/IT Support", "response": "nan"}
{"prompt": "NL Question (Riya’s POV)", "response": "SQL Query"}
{"prompt": "What is the current system health status (recent logs, errors, actions)?", "response": "SELECT * FROM SystemLogs WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY) ORDER BY timestamp DESC;"}
{"prompt": "What were the server load and uptime logs for today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%server load%' OR action LIKE '%uptime%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What error logs were recorded in the last 24 hours?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%error%' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What actions did I (Riya) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Riya') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which users have reported issues with order syncing today?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action LIKE '%order sync%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What configuration changes were made to the order processing service today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%configuration%' AND action LIKE '%order processing%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the status of the network connection as per the latest logs?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%network%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What user access permissions were updated today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%access permission%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Who are the new employees added to the system today?", "response": "SELECT * FROM Staff WHERE DATE(shift_start) = CURDATE();"}
{"prompt": "Which users have access to the POS system?", "response": "SELECT staff_id, name FROM Staff WHERE department = 'POS';"}
{"prompt": "Which users have access to financial data?", "response": "SELECT staff_id, name FROM Staff WHERE department = 'Finance';"}
{"prompt": "What security patches were installed this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%security patch%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the status of the latest system backup?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%backup%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What backups were scheduled or completed this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%backup%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What alerts are set for system failures or unusual activity?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%alert%' AND (action LIKE '%failure%' OR action LIKE '%unusual activity%');"}
{"prompt": "What system failures were detected in the last month?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%failure%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What unusual activity has been logged in the past week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%unusual activity%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are all IT support actions performed this week?", "response": "SELECT * FROM SystemLogs WHERE user_id = (SELECT staff_id FROM Staff WHERE name = 'Riya') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the summary of all system configuration changes made this month?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%configuration%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the complete log of order processing service errors this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%order processing%' AND action LIKE '%error%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Ayan’s POV)", "response": "SQL Query"}
{"prompt": "Which customers visited most frequently on weekday evenings?", "response": "SELECT c.customer_id, c.name, COUNT(*) AS visit_count FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE DAYOFWEEK(o.order_date) BETWEEN 2 AND 6 AND HOUR(o.order_date) BETWEEN 18 AND 22 GROUP BY c.customer_id ORDER BY visit_count DESC;"}
{"prompt": "What is the trend in weekday evening orders over the past month?", "response": "SELECT DATE(order_date) AS day, COUNT(*) AS orders FROM Orders WHERE DAYOFWEEK(order_date) BETWEEN 2 AND 6 AND HOUR(order_date) BETWEEN 18 AND 22 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "Which customers are repeat diners?", "response": "SELECT c.customer_id, c.name, COUNT(*) AS order_count FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id GROUP BY c.customer_id HAVING order_count > 1;"}
{"prompt": "What are the most popular meal preferences among repeat customers?", "response": "SELECT m.category, count(*) AS count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE o.customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING count(*) > 1) GROUP BY m.category ORDER BY count DESC;"}
{"prompt": "What is the order history for a specific customer?", "response": "SELECT o.order_id, o.order_date, o.total_amount FROM Orders o WHERE o.customer_id = (SELECT customer_id FROM Customers WHERE name = 'Ayan');"}
{"prompt": "Which customers have ordered signature dishes in the past month?", "response": "SELECT DISTINCT c.customer_id, c.name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id JOIN Customers c ON o.customer_id = c.customer_id WHERE m.category = 'Signature' AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which marketing campaigns are currently active?", "response": "SELECT campaign_id, campaign_name, channel, start_date, end_date FROM MarketingCampaigns WHERE status = 'Active' AND start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "What is the list of customers targeted in the current 'Happy Hour Combo' campaign?", "response": "SELECT c.customer_id, c.name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY c.customer_id HAVING COUNT(*) > 1;"}
{"prompt": "What is the redemption rate for the 'Happy Hour Combo' campaign?", "response": "SELECT COUNT(*) AS redemptions FROM Payments WHERE payment_date >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo') AND payment_date <= (SELECT end_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo') AND amount < (SELECT price FROM Menu WHERE item_name = 'Signature Dish');"}
{"prompt": "What is the click-through rate for SMS and email campaigns this week?", "response": "SELECT channel, COUNT(*) AS clicks FROM MarketingCampaigns WHERE (channel = 'SMS' OR channel = 'Email') AND start_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY channel;"}
{"prompt": "What feedback did customers leave about the 'Happy Hour Combo' campaign?", "response": "SELECT f.rating, f.comments FROM Feedback f JOIN Orders o ON f.order_id = o.order_id WHERE o.order_date >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo');"}
{"prompt": "Which age group had the highest campaign engagement (if age data is in Customers)?", "response": "SELECT c.age_group, COUNT(*) AS engagement FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo') GROUP BY c.age_group ORDER BY engagement DESC;"}
{"prompt": "What is the total number of redemptions for the campaign this week?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND amount < (SELECT price FROM Menu WHERE item_name = 'Signature Dish');"}
{"prompt": "What are the most common comments in campaign-related feedback?", "response": "SELECT comments, COUNT(*) AS freq FROM Feedback WHERE submitted_on >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo') GROUP BY comments ORDER BY freq DESC LIMIT 5;"}
{"prompt": "What is the average rating for orders placed during the campaign?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN Orders o ON f.order_id = o.order_id WHERE o.order_date >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo');"}
{"prompt": "What is the total revenue generated from campaign redemptions?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_date >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo') AND payment_date <= (SELECT end_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo');"}
{"prompt": "Which menu items had the highest increase in orders during the campaign?", "response": "SELECT m.item_name, COUNT(*) AS order_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE o.order_date >= (SELECT start_date FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo') GROUP BY m.item_name ORDER BY order_count DESC LIMIT 5;"}
{"prompt": "What is the list of all campaign performance logs this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%campaign%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the summary of all campaign redemptions by channel?", "response": "SELECT mc.channel, COUNT(*) AS redemptions FROM MarketingCampaigns mc JOIN Payments p ON p.payment_date >= mc.start_date AND p.payment_date <= mc.end_date WHERE mc.status = 'Active' GROUP BY mc.channel;"}
{"prompt": "What is the exported performance report for the 'Happy Hour Combo' campaign?", "response": "SELECT * FROM MarketingCampaigns WHERE campaign_name = 'Happy Hour Combo';"}
{"prompt": "Analysts/Business Intelligence", "response": "nan"}
{"prompt": "NL Question (Naveen’s POV)", "response": "SQL Query"}
{"prompt": "What are the total sales for each day this week across all branches?", "response": "SELECT DATE(order_date) AS day, SUM(total_amount) AS total_sales FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day ORDER BY day;"}
{"prompt": "What was the foot traffic (number of orders) for each day this week?", "response": "SELECT DATE(order_date) AS day, COUNT(*) AS foot_traffic FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day ORDER BY day;"}
{"prompt": "What were the peak hours for orders on each day this week?", "response": "SELECT DATE(order_date) AS day, HOUR(order_date) AS hour, COUNT(*) AS orders FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day, hour ORDER BY day, orders DESC;"}
{"prompt": "What is the average customer feedback rating for each day this week?", "response": "SELECT DATE(submitted_on) AS day, AVG(rating) AS avg_rating FROM Feedback WHERE submitted_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day ORDER BY day;"}
{"prompt": "What are the top 5 most popular dishes this week?", "response": "SELECT m.item_name, SUM(oi.quantity) AS orders FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY m.item_name ORDER BY orders DESC LIMIT 5;"}
{"prompt": "Which weekdays had high foot traffic but low sales?", "response": "SELECT DATE(order_date) AS day, COUNT(*) AS foot_traffic, SUM(total_amount) AS sales FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day HAVING sales < 12000 AND foot_traffic > 300;"}
{"prompt": "What is the average table wait time for each day this week?", "response": "SELECT DATE(timestamp) AS day, AVG(CAST(SUBSTRING_INDEX(action, ' ', -2) AS UNSIGNED)) AS avg_wait_time FROM SystemLogs WHERE action LIKE '%wait time%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day;"}
{"prompt": "What is the average kitchen throughput delay for each day this week?", "response": "SELECT DATE(timestamp) AS day, AVG(CAST(SUBSTRING_INDEX(action, ' ', -2) AS UNSIGNED)) AS avg_kitchen_delay FROM SystemLogs WHERE action LIKE '%kitchen throughput%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day;"}
{"prompt": "Which days this week had the highest average wait times?", "response": "SELECT DATE(timestamp) AS day, AVG(CAST(SUBSTRING_INDEX(action, ' ', -2) AS UNSIGNED)) AS avg_wait_time FROM SystemLogs WHERE action LIKE '%wait time%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day ORDER BY avg_wait_time DESC LIMIT 3;"}
{"prompt": "What is the distribution of order completion times for each weekday?", "response": "SELECT DAYNAME(order_date) AS weekday, AVG(TIMESTAMPDIFF(MINUTE, order_date, payment_date)) AS avg_completion_time FROM Orders o JOIN Payments p ON o.payment_id = p.payment_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY weekday;"}
{"prompt": "What are the feedback ratings and comments for underperforming days?", "response": "SELECT f.rating, f.comments, DATE(o.order_date) AS day FROM Feedback f JOIN Orders o ON f.order_id = o.order_id WHERE o.order_date IN ('2025-06-03','2025-06-04','2025-06-06');"}
{"prompt": "Which menu items are most often ordered on weekends?", "response": "SELECT m.item_name, SUM(oi.quantity) AS orders FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Menu m ON oi.menu_item_id = m.menu_item_id WHERE DAYOFWEEK(o.order_date) IN (6,7) AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY m.item_name ORDER BY orders DESC LIMIT 5;"}
{"prompt": "Which staff members worked during peak hours on underperforming weekdays?", "response": "SELECT s.name, sh.shift_start, sh.shift_end, sh.shift_date FROM Staff s JOIN Shifts sh ON s.staff_id = sh.staff_id WHERE sh.shift_date IN ('2025-06-03','2025-06-04','2025-06-06') AND ((sh.shift_start <= '19:00:00' AND sh.shift_end >= '21:00:00'));"}
{"prompt": "What is the total number of orders delayed by more than 20 minutes this week?", "response": "SELECT COUNT(*) FROM Orders WHERE TIMESTAMPDIFF(MINUTE, order_date, payment_date) > 20 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the summary of kitchen throughput delays this week?", "response": "SELECT DATE(timestamp) AS day, AVG(CAST(SUBSTRING_INDEX(action, ' ', -2) AS UNSIGNED)) AS avg_kitchen_delay FROM SystemLogs WHERE action LIKE '%kitchen throughput%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day;"}
{"prompt": "What are the predicted daily sales for next week based on historical data?", "response": "-- Predictive modeling is not SQL-native, but you can store predictions in a table: SELECT date, predicted_sales FROM SalesForecast WHERE date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 6 DAY);"}
{"prompt": "What is the average ingredient usage per day for the past month?", "response": "SELECT i.item_name, AVG(u.quantity_used) AS avg_daily_used FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE u.usage_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY i.item_name;"}
{"prompt": "What is the total waste/spoilage logged for each ingredient this week?", "response": "SELECT i.item_name, SUM(u.quantity_used) AS total_waste FROM InventoryUsage u JOIN Inventory i ON u.item_id = i.item_id WHERE u.quantity_used < 0 AND u.usage_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY i.item_name;"}
{"prompt": "What is the summary of all staff scheduling changes made this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%staff scheduling%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the overall customer satisfaction score for this week?", "response": "SELECT AVG(rating) AS avg_satisfaction FROM Feedback WHERE submitted_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "nan", "response": "nan"}
{"prompt": "nan", "response": "nan"}
{"prompt": "MovieStreaming", "response": "nan"}
{"prompt": "Viewers/Users", "response": "nan"}
{"prompt": "NL Question (Aarav’s POV)", "response": "SQL Query"}
{"prompt": "What is my user ID?", "response": "SELECT user_id FROM Users WHERE username = 'Aarav';"}
{"prompt": "What are my most recently watched movies?", "response": "SELECT m.title, w.watch_date FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') ORDER BY w.watch_date DESC;"}
{"prompt": "What genres do I watch most often?", "response": "SELECT m.genre, COUNT(*) AS watch_count FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') GROUP BY m.genre ORDER BY watch_count DESC;"}
{"prompt": "What is my current Watchlist?", "response": "SELECT m.title FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') AND w.completed = FALSE;"}
{"prompt": "Which movies did I start but not finish?", "response": "SELECT m.title, w.watch_duration FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') AND w.completed = FALSE;"}
{"prompt": "What is my saved watch progress for the last movie I paused?", "response": "SELECT m.title, w.watch_duration FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') AND w.completed = FALSE ORDER BY w.watch_date DESC LIMIT 1;"}
{"prompt": "What are my most recent movie ratings?", "response": "SELECT m.title, r.rating, r.review_date FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE r.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') ORDER BY r.review_date DESC;"}
{"prompt": "What reviews have I written in the last month?", "response": "SELECT m.title, r.rating, r.comment, r.review_date FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE r.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') AND r.review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the top trending movies right now?", "response": "SELECT title, rating FROM Movies WHERE status = 'active' ORDER BY rating DESC LIMIT 10;"}
{"prompt": "What are the most popular movies in the 'Thriller' genre?", "response": "SELECT title, rating FROM Movies WHERE genre = 'Thriller' AND status = 'active' ORDER BY rating DESC LIMIT 5;"}
{"prompt": "What movies are available in a specific language (e.g., Hindi)?", "response": "SELECT title, genre, release_year FROM Movies WHERE description LIKE '%Hindi%' AND status = 'active';"}
{"prompt": "What are the highest-rated indie dramas?", "response": "SELECT title, rating FROM Movies WHERE genre = 'Drama' AND description LIKE '%indie%' AND status = 'active' ORDER BY rating DESC LIMIT 5;"}
{"prompt": "What is the average rating I give to movies?", "response": "SELECT AVG(rating) FROM Reviews WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav');"}
{"prompt": "What are the most recent movies I shared with friends?", "response": "SELECT m.title FROM SystemLogs l JOIN Movies m ON l.action LIKE CONCAT('%shared movie ', m.title, '%') WHERE l.admin_id = (SELECT user_id FROM Users WHERE username = 'Aarav') ORDER BY l.timestamp DESC;"}
{"prompt": "What are my current profile preferences?", "response": "SELECT * FROM Users WHERE username = 'Aarav';"}
{"prompt": "How do I update my profile to limit suggestions to PG-13 content?", "response": "UPDATE Users SET status = 'PG-13 only' WHERE username = 'Aarav';"}
{"prompt": "How do I enable subtitles by default in my profile?", "response": "UPDATE Users SET status = CONCAT(status, ', subtitles enabled') WHERE username = 'Aarav';"}
{"prompt": "What are the most common genres in my watch history?", "response": "SELECT m.genre, COUNT(*) AS count FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') GROUP BY m.genre ORDER BY count DESC;"}
{"prompt": "What is my subscription status?", "response": "SELECT s.subscription_type, s.is_active, s.end_date FROM Users u JOIN Subscriptions s ON u.subscription_id = s.subscription_id WHERE u.username = 'Aarav';"}
{"prompt": "What customer support tickets have I submitted?", "response": "SELECT ticket_id, issue_description, status, created_at, resolved_at FROM CustomerSupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav');"}
{"prompt": "Content Curators", "response": "nan"}
{"prompt": "NL Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "What newly licensed movies have been added this week?", "response": "SELECT movie_id, title, upload_date FROM Movies WHERE upload_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND status = 'active';"}
{"prompt": "What are the details of all movies pending curation?", "response": "SELECT * FROM Movies WHERE status = 'pending';"}
{"prompt": "Which movies are tagged as 'Feel-Good'?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%Feel-Good%';"}
{"prompt": "Which movies are tagged as 'Based on True Stories'?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%Based on True Stories%';"}
{"prompt": "Which movies are tagged as 'Strong Female Leads'?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%Strong Female Leads%';"}
{"prompt": "What are the most-watched genres in South Asia?", "response": "SELECT m.genre, COUNT(*) AS watch_count FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id IN (SELECT user_id FROM Users WHERE email LIKE '%.in' OR email LIKE '%.pk' OR email LIKE '%.bd' OR email LIKE '%.lk' OR email LIKE '%.np') GROUP BY m.genre ORDER BY watch_count DESC;"}
{"prompt": "Which Korean dramas are trending in South Asia?", "response": "SELECT m.title, COUNT(*) AS watch_count FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.genre = 'Drama' AND m.description LIKE '%Korean%' AND w.user_id IN (SELECT user_id FROM Users WHERE email LIKE '%.in' OR email LIKE '%.pk' OR email LIKE '%.bd' OR email LIKE '%.lk' OR email LIKE '%.np') GROUP BY m.title ORDER BY watch_count DESC LIMIT 10;"}
{"prompt": "What are the top-rated Korean dramas on the platform?", "response": "SELECT title, rating FROM Movies WHERE genre = 'Drama' AND description LIKE '%Korean%' AND status = 'active' ORDER BY rating DESC LIMIT 10;"}
{"prompt": "Which movies are in the 'K-Dramas That Broke the Internet' collection?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%K-Dramas That Broke the Internet%';"}
{"prompt": "Which movies have not yet been localized for South Asia?", "response": "SELECT movie_id, title FROM Movies WHERE (description NOT LIKE '%Hindi%' AND description NOT LIKE '%Tamil%' AND description NOT LIKE '%Bengali%' AND description NOT LIKE '%Urdu%') AND status = 'active';"}
{"prompt": "Which movies have missing or generic thumbnails?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%no thumbnail%' OR description LIKE '%generic thumbnail%';"}
{"prompt": "Which movies have missing or generic descriptions?", "response": "SELECT movie_id, title FROM Movies WHERE description IS NULL OR description LIKE '%TBD%' OR description LIKE '%description%';"}
{"prompt": "What are the most common languages in the movie catalog?", "response": "SELECT SUBSTRING_INDEX(description, ' ', 1) AS language, COUNT(*) AS count FROM Movies GROUP BY language ORDER BY count DESC;"}
{"prompt": "Which movies have age ratings not set or marked as 'Unrated'?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%Unrated%' OR description NOT LIKE '%PG%' AND description NOT LIKE '%R%' AND description NOT LIKE '%G%';"}
{"prompt": "What are the top 5 movies with the highest engagement (watch count)?", "response": "SELECT m.title, COUNT(w.watch_id) AS engagement FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id GROUP BY m.title ORDER BY engagement DESC LIMIT 5;"}
{"prompt": "Which movies have the highest drop-off rates?", "response": "SELECT m.title, (1 - (SUM(CASE WHEN w.completed = TRUE THEN 1 ELSE 0 END) * 1.0 / COUNT(*))) AS dropoff_rate FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id GROUP BY m.title ORDER BY dropoff_rate DESC LIMIT 5;"}
{"prompt": "Which movies have engagement below a threshold (e.g., less than 100 views)?", "response": "SELECT m.title, COUNT(w.watch_id) AS engagement FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id GROUP BY m.title HAVING engagement < 100;"}
{"prompt": "Which movies were rotated or removed from featured collections this month?", "response": "SELECT * FROM Movies WHERE status = 'inactive' AND upload_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most recent reviews for Korean dramas?", "response": "SELECT r.rating, r.comment, m.title, r.review_date FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE m.genre = 'Drama' AND m.description LIKE '%Korean%' ORDER BY r.review_date DESC LIMIT 10;"}
{"prompt": "What actions did I (Meera) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT curator_id FROM ContentCurators WHERE name = 'Meera') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Subscription Managers", "response": "nan"}
{"prompt": "NL Question (Ritika’s POV)", "response": "SQL Query"}
{"prompt": "How many new user signups occurred in the last month?", "response": "SELECT COUNT(*) AS new_signups FROM Users WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many subscription renewals happened in the last month?", "response": "SELECT COUNT(*) AS renewals FROM Subscriptions WHERE is_active = TRUE AND start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many cancellations were there in the last month?", "response": "SELECT COUNT(*) AS cancellations FROM Subscriptions WHERE is_active = FALSE AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many free trial users converted to paid in the last month?", "response": "SELECT COUNT(*) AS conversions FROM Users WHERE subscription_id IN (SELECT subscription_id FROM Subscriptions WHERE subscription_type = 'Free Trial' AND is_active = FALSE AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"}
{"prompt": "How many premium plan users canceled their subscriptions in the last month?", "response": "SELECT COUNT(*) AS premium_cancellations FROM Subscriptions WHERE subscription_type = 'Premium' AND is_active = FALSE AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most common feedback reasons for subscription cancellations?", "response": "SELECT issue_description, COUNT(*) AS count FROM CustomerSupportTickets WHERE status = 'resolved' AND issue_description LIKE '%cancellation%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY issue_description ORDER BY count DESC;"}
{"prompt": "How many auto-renewal failures occurred in the last month?", "response": "SELECT COUNT(*) AS renewal_failures FROM CustomerSupportTickets WHERE issue_description LIKE '%auto-renewal failure%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which users were notified about billing issues in the last month?", "response": "SELECT user_id, issue_description, status FROM CustomerSupportTickets WHERE issue_description LIKE '%billing%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the current price for all active premium subscriptions?", "response": "SELECT subscription_id, price FROM Subscriptions WHERE subscription_type = 'Premium' AND is_active = TRUE;"}
{"prompt": "How do I update the price for all active premium subscriptions by 10% discount?", "response": "UPDATE Subscriptions SET price = price * 0.9 WHERE subscription_type = 'Premium' AND is_active = TRUE;"}
{"prompt": "What are the latest scheduled subscription reports?", "response": "SELECT report_name, generated_on FROM BusinessReports WHERE report_name LIKE '%subscription%' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "Which users are on the student plan and eligible for custom offers?", "response": "SELECT user_id, username, email FROM Users WHERE status = 'active' AND subscription_id IN (SELECT subscription_id FROM Subscriptions WHERE subscription_type = 'Student Plan');"}
{"prompt": "Which users are on the family plan and eligible for custom offers?", "response": "SELECT user_id, username, email FROM Users WHERE status = 'active' AND subscription_id IN (SELECT subscription_id FROM Subscriptions WHERE subscription_type = 'Family Plan');"}
{"prompt": "Which active users are compliant with regional pricing?", "response": "SELECT user_id, username, email, subscription_id FROM Users WHERE status = 'active' AND subscription_id IN (SELECT subscription_id FROM Subscriptions WHERE is_active = TRUE) ORDER BY user_id;"}
{"prompt": "What is the monthly churn rate (cancellations / total users)?", "response": "SELECT (SELECT count(*) FROM Subscriptions WHERE is_active = FALSE AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) * 1.0 / (SELECT count(*) FROM Users) AS churn_rate;"}
{"prompt": "What is the conversion rate from free trial to paid subscription this month?", "response": "SELECT (SELECT count(*) FROM Users WHERE subscription_id IN (SELECT subscription_id FROM Subscriptions WHERE subscription_type = 'Free Trial' AND is_active = FALSE AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH))) * 1.0 / (SELECT count(*) FROM Users WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AS conversion_rate;"}
{"prompt": "Which users have a subscription renewal date in the next 7 days?", "response": "SELECT user_id, username, email FROM Users u JOIN Subscriptions s ON u.subscription_id = s.subscription_id WHERE s.is_active = TRUE AND s.end_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most recent customer support tickets related to subscription issues?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue_description LIKE '%subscription%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "What is the distribution of users by subscription type?", "response": "SELECT s.subscription_type, COUNT(u.user_id) AS user_count FROM Users u JOIN Subscriptions s ON u.subscription_id = s.subscription_id GROUP BY s.subscription_type;"}
{"prompt": "What is the total revenue from active subscriptions this month?", "response": "SELECT SUM(price) FROM Subscriptions WHERE is_active = TRUE AND start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Customer Support", "response": "nan"}
{"prompt": "NL Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "What are all open or in-progress support tickets queued for today?", "response": "SELECT * FROM CustomerSupportTickets WHERE status IN ('open', 'in-progress') AND DATE(created_at) = CURDATE();"}
{"prompt": "Which tickets mention buffering issues in the issue description?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue_description LIKE '%buffering%';"}
{"prompt": "Which tickets mention double charges or billing issues?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue_description LIKE '%charged twice%' OR issue_description LIKE '%billing%';"}
{"prompt": "What is the playback and watch history for a user with a buffering complaint?", "response": "SELECT w.* FROM WatchHistory w WHERE w.user_id = ? ORDER BY w.watch_date DESC;"}
{"prompt": "What is the subscription status and details for a user with a billing complaint?", "response": "SELECT s.* FROM Users u JOIN Subscriptions s ON u.subscription_id = s.subscription_id WHERE u.user_id = ?;"}
{"prompt": "Which tickets have been escalated to the finance department?", "response": "SELECT * FROM CustomerSupportTickets WHERE status = 'escalated' AND issue_description LIKE '%billing%';"}
{"prompt": "What are the most common support issues reported this week?", "response": "SELECT issue_description, COUNT(*) AS count FROM CustomerSupportTickets WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY issue_description ORDER BY count DESC;"}
{"prompt": "Which tickets have been resolved today?", "response": "SELECT * FROM CustomerSupportTickets WHERE status = 'resolved' AND DATE(resolved_at) = CURDATE();"}
{"prompt": "What are the live chat actions I (Priya) performed today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT user_id FROM Users WHERE username = 'Priya') AND action LIKE '%live chat%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which users asked about activating subtitles in live chat today?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action LIKE '%activate subtitles%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which users asked about downloading movies in live chat today?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action LIKE '%download movie%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which users asked about upgrading their plan in live chat today?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action LIKE '%upgrade plan%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which system-wide issues have been flagged for technical investigation this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%flagged%' AND action LIKE '%technical%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the top 5 recurring complaints this month?", "response": "SELECT issue_description, COUNT(*) AS count FROM CustomerSupportTickets WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY issue_description ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which users received follow-up emails after ticket resolution today?", "response": "SELECT user_id, ticket_id FROM CustomerSupportTickets WHERE status = 'resolved' AND DATE(resolved_at) = CURDATE();"}
{"prompt": "What feedback ratings were given for support tickets resolved today?", "response": "SELECT r.rating, r.comment, r.review_date FROM Reviews r WHERE r.user_id IN (SELECT user_id FROM CustomerSupportTickets WHERE status = 'resolved' AND DATE(resolved_at) = CURDATE());"}
{"prompt": "Which tickets have been open for more than 48 hours?", "response": "SELECT * FROM CustomerSupportTickets WHERE status IN ('open', 'in-progress') AND created_at < DATE_SUB(NOW(), INTERVAL 48 HOUR);"}
{"prompt": "What is the average resolution time for tickets resolved this week?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, created_at, resolved_at)) AS avg_resolution_time FROM CustomerSupportTickets WHERE status = 'resolved' AND resolved_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which users have the highest number of support tickets this month?", "response": "SELECT user_id, COUNT(*) AS ticket_count FROM CustomerSupportTickets WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY user_id ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What actions did I (Priya) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT user_id FROM Users WHERE username = 'Priya') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Content Uploaders", "response": "nan"}
{"prompt": "NL Question (Sohail’s POV)", "response": "SQL Query"}
{"prompt": "Which movies have been uploaded in the last 7 days?", "response": "SELECT movie_id, title, description, release_year, genre, rating, upload_date, status FROM Movies WHERE upload_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY upload_date DESC;"}
{"prompt": "What are the details of the four most recently uploaded movies?", "response": "SELECT movie_id, title, description, release_year, genre, rating, upload_date, status FROM Movies ORDER BY upload_date DESC LIMIT 4;"}
{"prompt": "What is the status of a specific movie upload (e.g., 'Solar Winds')?", "response": "SELECT status FROM Movies WHERE title = 'Solar Winds';"}
{"prompt": "Which movies are scheduled for release on the upcoming holiday weekend?", "response": "SELECT movie_id, title, release_year, genre, upload_date FROM Movies WHERE release_year = 2025 AND upload_date BETWEEN '2025-06-07' AND '2025-06-09';"}
{"prompt": "What genres and age ratings are assigned to the latest uploads?", "response": "SELECT title, genre, description FROM Movies WHERE upload_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which movies have regional language tags in their description?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%Hindi%' OR description LIKE '%Tamil%' OR description LIKE '%Bengali%' OR description LIKE '%Malayalam%' OR description LIKE '%Telugu%';"}
{"prompt": "Which movies have subtitles or audio tracks listed in their description?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%subtitles%' OR description LIKE '%audio track%';"}
{"prompt": "Which movies have trailers or poster details in their description?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%trailer%' OR description LIKE '%poster%';"}
{"prompt": "What is the upload date and uploader for each recent movie?", "response": "SELECT movie_id, title, upload_date, content_uploader_id FROM Movies WHERE upload_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which movies have been flagged as having playback issues?", "response": "SELECT movie_id, title, status FROM Movies WHERE status = 'corrupted' OR description LIKE '%playback issue%';"}
{"prompt": "Which movies were replaced or re-uploaded due to file issues?", "response": "SELECT movie_id, title, status FROM Movies WHERE status = 'replaced' OR description LIKE '%re-upload%';"}
{"prompt": "What is the list of all active movies currently available on the platform?", "response": "SELECT movie_id, title, genre, rating FROM Movies WHERE status = 'active';"}
{"prompt": "Which movies have been tagged with 'holiday' in their description?", "response": "SELECT movie_id, title FROM Movies WHERE description LIKE '%holiday%';"}
{"prompt": "What is the average rating of movies uploaded this month?", "response": "SELECT AVG(rating) FROM Movies WHERE MONTH(upload_date) = MONTH(CURDATE()) AND YEAR(upload_date) = YEAR(CURDATE());"}
{"prompt": "Which movies have missing or generic metadata (e.g., no description)?", "response": "SELECT movie_id, title FROM Movies WHERE description IS NULL OR description = '';"}
{"prompt": "What are the most common genres among the last 10 uploads?", "response": "SELECT genre, COUNT(*) AS count FROM Movies ORDER BY upload_date DESC LIMIT 10 GROUP BY genre;"}
{"prompt": "Which movies have been uploaded by a specific content uploader?", "response": "SELECT movie_id, title, upload_date FROM Movies WHERE content_uploader_id = ? ORDER BY upload_date DESC;"}
{"prompt": "What is the release schedule for all movies in June 2025?", "response": "SELECT movie_id, title, release_year, upload_date FROM Movies WHERE MONTH(upload_date) = 6 AND YEAR(upload_date) = 2025;"}
{"prompt": "Which movies have been updated or had their metadata changed in the last week?", "response": "SELECT movie_id, title, upload_date FROM Movies WHERE upload_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY upload_date DESC;"}
{"prompt": "What is the list of all movies with status not equal to 'active'?", "response": "SELECT movie_id, title, status FROM Movies WHERE status != 'active';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Ritika’s POV)", "response": "SQL Query"}
{"prompt": "Which users have watched thriller or sci-fi movies in the last 3 months?", "response": "SELECT DISTINCT w.user_id FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.genre IN ('Thriller', 'Sci-Fi') AND w.watch_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "How many users are there in each region?", "response": "SELECT SUBSTRING_INDEX(email, '.', -1) AS region, COUNT(*) AS user_count FROM Users GROUP BY region;"}
{"prompt": "Which users prefer thrillers based on their watch history?", "response": "SELECT w.user_id FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.genre = 'Thriller' GROUP BY w.user_id HAVING COUNT(*) > 2;"}
{"prompt": "Which users prefer sci-fi based on their watch history?", "response": "SELECT w.user_id FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.genre = 'Sci-Fi' GROUP BY w.user_id HAVING COUNT(*) > 2;"}
{"prompt": "What is the list of all users who registered in the last month?", "response": "SELECT user_id, username, email FROM Users WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which users are first-time users (registered but have no completed watch history)?", "response": "SELECT u.user_id, u.username FROM Users u LEFT JOIN WatchHistory w ON u.user_id = w.user_id WHERE w.user_id IS NULL OR w.completed = FALSE;"}
{"prompt": "What are the details of all active marketing campaigns?", "response": "SELECT * FROM MarketingCampaigns WHERE status = 'Active';"}
{"prompt": "Which users should receive promo codes for first-time users?", "response": "SELECT u.user_id, u.email FROM Users u LEFT JOIN WatchHistory w ON u.user_id = w.user_id WHERE w.user_id IS NULL OR w.completed = FALSE;"}
{"prompt": "What is the engagement (clicks, opens) for the latest campaign?", "response": "SELECT * FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 2 WEEK) ORDER BY start_date DESC;"}
{"prompt": "Which trailers have the highest watch count this week?", "response": "SELECT m.title, COUNT(w.watch_id) AS trailer_views FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.description LIKE '%trailer%' AND w.watch_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY m.title ORDER BY trailer_views DESC LIMIT 5;"}
{"prompt": "Which banners are linked to the best-performing campaigns?", "response": "SELECT campaign_name, channel FROM MarketingCampaigns WHERE status = 'Active' AND channel LIKE '%banner%';"}
{"prompt": "What is the open rate for email campaigns this week?", "response": "SELECT campaign_name, COUNT(*) AS emails_sent FROM MarketingCampaigns WHERE channel = 'Email' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY campaign_name;"}
{"prompt": "What is the click-through rate for push notifications this week?", "response": "SELECT campaign_name, COUNT(*) AS push_sent FROM MarketingCampaigns WHERE channel = 'Push' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY campaign_name;"}
{"prompt": "What is the redemption rate for promo codes issued this week?", "response": "-- If promo code redemption is tracked in a custom field in MarketingCampaigns: SELECT campaign_name, COUNT(*) AS redemptions FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND status = 'Redeemed' GROUP BY campaign_name;"}
{"prompt": "What are the most common genres among users who engaged with the current campaign?", "response": "SELECT m.genre, COUNT(*) AS count FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.user_id IN (SELECT DISTINCT user_id FROM WatchHistory WHERE watch_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)) GROUP BY m.genre ORDER BY count DESC;"}
{"prompt": "Which users have watched the new original web series since its premiere?", "response": "SELECT DISTINCT w.user_id FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.title LIKE '%Original Web Series%' AND w.watch_date >= (SELECT MIN(start_date) FROM MarketingCampaigns WHERE campaign_name LIKE '%Original Web Series%');"}
{"prompt": "What are the most recent reviews for the original web series?", "response": "SELECT r.user_id, r.rating, r.comment, r.review_date FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE m.title LIKE '%Original Web Series%' ORDER BY r.review_date DESC LIMIT 10;"}
{"prompt": "What is the weekly campaign performance summary for the team meeting?", "response": "SELECT campaign_name, start_date, end_date, channel, status, budget FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What actions did I (Ritika) perform in the system this week?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT user_id FROM Users WHERE username = 'Ritika') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the total marketing budget spent on campaigns launched this month?", "response": "SELECT SUM(budget) AS total_spent FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "System Administrators", "response": "nan"}
{"prompt": "NL Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent system health reports?", "response": "SELECT * FROM Analytics WHERE report_date >= '2025-06-08' ORDER BY report_date DESC;"}
{"prompt": "What recent load balancer or server spike events have occurred?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%load balancer%' OR action LIKE '%server spike%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What is the latest status of user authentication servers?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%authentication server%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What is the latest status of payment gateways?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%payment gateway%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What is the latest status of video streaming nodes?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%video streaming node%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "Which security patches were applied recently?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%security patch%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What suspicious activity or intrusion detection events have been logged recently?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%intrusion detection%' OR action LIKE '%suspicious activity%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What support tickets mention DNS or content access issues?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue_description LIKE '%DNS%' OR issue_description LIKE '%content access%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "What backup jobs, log rotations, or access permission changes were performed recently?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%backup job%' OR action LIKE '%log rotation%' OR action LIKE '%access permission%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What are the most recent system actions performed by me (Arjun)?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT developer_id FROM Developers WHERE name = 'Arjun') ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What is the status of the latest backup job?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%backup job%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which developers had their access permissions updated this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%access permission%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most recent log rotation events?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%log rotation%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What was the outcome of the last intrusion detection alert?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%intrusion detection%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which regions experienced content access issues this week?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue_description LIKE '%content access%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the top 5 most frequent system errors logged this month?", "response": "SELECT action, COUNT(*) AS error_count FROM SystemLogs WHERE action LIKE '%error%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY action ORDER BY error_count DESC LIMIT 5;"}
{"prompt": "What is the summary of all system maintenance actions performed this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%maintenance%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most recent updates to developer access for the content tools team?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%access permission%' AND action LIKE '%content tools%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the status of payment gateway errors or outages this month?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%payment gateway%' AND action LIKE '%error%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the most recent system-wide status report?", "response": "SELECT * FROM Analytics ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "App Developers", "response": "nan"}
{"prompt": "NL Question (Nisha’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent bug reports or crash logs from the last app release?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%crash%' OR action LIKE '%bug%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "Which users experienced app crashes when switching profiles?", "response": "SELECT DISTINCT admin_id FROM SystemLogs WHERE action LIKE '%crash%' AND action LIKE '%profile%';"}
{"prompt": "What are the details of all app versions released in the last 3 months?", "response": "SELECT * FROM AppVersions WHERE release_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ORDER BY release_date DESC;"}
{"prompt": "What new features were included in the latest app version?", "response": "SELECT features FROM AppVersions ORDER BY release_date DESC LIMIT 1;"}
{"prompt": "Which developers contributed to the latest app update?", "response": "SELECT d.name, d.email FROM AppVersions a JOIN Developers d ON a.developer_id = d.developer_id ORDER BY a.release_date DESC LIMIT 1;"}
{"prompt": "What are the most recent user reviews mentioning 'crash' or 'bug'?", "response": "SELECT r.user_id, m.title, r.rating, r.comment, r.review_date FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE r.comment LIKE '%crash%' OR r.comment LIKE '%bug%' ORDER BY r.review_date DESC LIMIT 10;"}
{"prompt": "What is the average app rating after the latest update?", "response": "SELECT AVG(rating) FROM Reviews WHERE review_date >= (SELECT release_date FROM AppVersions ORDER BY release_date DESC LIMIT 1);"}
{"prompt": "What are the most common issues reported in user reviews this month?", "response": "SELECT comment, COUNT(*) AS count FROM Reviews WHERE review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY comment ORDER BY count DESC LIMIT 5;"}
{"prompt": "What is the adoption rate of the latest app version?", "response": "SELECT COUNT(DISTINCT user_id) AS users_on_latest FROM SystemLogs WHERE action LIKE '%app version%' AND action LIKE (SELECT version_number FROM AppVersions ORDER BY release_date DESC LIMIT 1);"}
{"prompt": "What is the average API response time logged this week?", "response": "SELECT AVG(CAST(SUBSTRING_INDEX(action, ' ', -1) AS UNSIGNED)) AS avg_response_time FROM SystemLogs WHERE action LIKE '%API response%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which devices or platforms reported streaming lag in the last week?", "response": "SELECT admin_id, action, timestamp FROM SystemLogs WHERE action LIKE '%streaming lag%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most frequent device types in crash logs?", "response": "SELECT SUBSTRING_INDEX(action, 'device:', -1) AS device_type, COUNT(*) AS crash_count FROM SystemLogs WHERE action LIKE '%crash%' GROUP BY device_type ORDER BY crash_count DESC LIMIT 5;"}
{"prompt": "What test cases or QA actions were logged for the latest patch?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%test case%' OR action LIKE '%QA%' AND timestamp >= (SELECT release_date FROM AppVersions ORDER BY release_date DESC LIMIT 1);"}
{"prompt": "What are the most recent updates to the custom watchlist and chat feature?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%watchlist%' OR action LIKE '%chat%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the current status of voice search integration in the app?", "response": "SELECT * FROM AppVersions WHERE features LIKE '%voice search%' ORDER BY release_date DESC LIMIT 1;"}
{"prompt": "What are the most recent API errors or failed calls?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%API error%' OR action LIKE '%API failed%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the distribution of app usage across Android, iOS, Smart TVs, and tablets?", "response": "SELECT SUBSTRING_INDEX(action, 'platform:', -1) AS platform, COUNT(*) AS usage_count FROM SystemLogs WHERE action LIKE '%login%' GROUP BY platform ORDER BY usage_count DESC;"}
{"prompt": "What is the trend in crash frequency over the last month?", "response": "SELECT DATE(timestamp) AS day, COUNT(*) AS crash_count FROM SystemLogs WHERE action LIKE '%crash%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "Which users gave feedback on the new chat or watchlist features?", "response": "SELECT DISTINCT r.user_id FROM Reviews r WHERE r.comment LIKE '%chat%' OR r.comment LIKE '%watchlist%';"}
{"prompt": "What actions did I (Nisha) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT developer_id FROM Developers WHERE name = 'Nisha') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question (Anjali’s POV)", "response": "SQL Query"}
{"prompt": "What are the most-watched original series on the platform?", "response": "SELECT m.title, COUNT(w.watch_id) AS views FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.description LIKE '%original series%' GROUP BY m.title ORDER BY views DESC;"}
{"prompt": "What is the episode-wise drop-off rate for a specific original series?", "response": "SELECT m.title, m.description, AVG(CASE WHEN w.completed = FALSE THEN 1 ELSE 0 END) AS dropoff_rate FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.title = 'SERIES_NAME' GROUP BY m.title, m.description;"}
{"prompt": "Which episodes of original series have the highest drop-off rates among users aged 18-24?", "response": "SELECT m.title, m.description, AVG(CASE WHEN w.completed = FALSE THEN 1 ELSE 0 END) AS dropoff_rate FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id JOIN Users u ON w.user_id = u.user_id WHERE m.description LIKE '%original series%' AND u.status LIKE '%18-24%' GROUP BY m.title, m.description ORDER BY dropoff_rate DESC;"}
{"prompt": "What are the top 5 genres among users aged 18-24?", "response": "SELECT m.genre, COUNT(*) AS views FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id JOIN Users u ON w.user_id = u.user_id WHERE u.status LIKE '%18-24%' GROUP BY m.genre ORDER BY views DESC LIMIT 5;"}
{"prompt": "What is the average watch duration for each genre?", "response": "SELECT m.genre, AVG(w.watch_duration) AS avg_duration FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id GROUP BY m.genre;"}
{"prompt": "What is the weekly trend in new subscriptions and cancellations?", "response": "SELECT report_date, new_subscriptions, cancellations FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 4 WEEK) ORDER BY report_date;"}
{"prompt": "What is the churn rate for the last month?", "response": "SELECT (SUM(cancellations) * 1.0 / SUM(total_users)) AS churn_rate FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most common content preferences among active users?", "response": "SELECT m.genre, COUNT(*) AS count FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id JOIN Users u ON w.user_id = u.user_id WHERE u.status = 'active' GROUP BY m.genre ORDER BY count DESC;"}
{"prompt": "What is the average rating for each original series?", "response": "SELECT m.title, AVG(r.rating) AS avg_rating FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE m.description LIKE '%original series%' GROUP BY m.title ORDER BY avg_rating DESC;"}
{"prompt": "What is the feedback for original series episodes with high drop-off rates?", "response": "SELECT m.title, r.rating, r.comment FROM Reviews r JOIN Movies m ON r.movie_id = m.movie_id WHERE m.description LIKE '%original series%' AND r.rating <= 3 ORDER BY r.review_date DESC;"}
{"prompt": "What are the most successful marketing campaigns by new subscriptions?", "response": "SELECT campaign_name, SUM(new_subscriptions) AS total_new FROM MarketingCampaigns mc JOIN Analytics a ON mc.start_date = a.report_date GROUP BY campaign_name ORDER BY total_new DESC LIMIT 5;"}
{"prompt": "What is the engagement rate for each marketing campaign this month?", "response": "SELECT campaign_name, (SUM(a.active_users) * 1.0 / SUM(a.total_users)) AS engagement_rate FROM MarketingCampaigns mc JOIN Analytics a ON mc.start_date = a.report_date WHERE MONTH(mc.start_date) = MONTH(CURDATE()) GROUP BY campaign_name;"}
{"prompt": "What is the average watch time per user this month?", "response": "SELECT AVG(total_watch_time * 1.0 / active_users) AS avg_watch_time_per_user FROM Analytics WHERE MONTH(report_date) = MONTH(CURDATE());"}
{"prompt": "What is the distribution of subscription types among current users?", "response": "SELECT s.subscription_type, COUNT(u.user_id) AS user_count FROM Users u JOIN Subscriptions s ON u.subscription_id = s.subscription_id WHERE u.status = 'active' GROUP BY s.subscription_type;"}
{"prompt": "Which movies or series have the highest average watch duration?", "response": "SELECT m.title, AVG(w.watch_duration) AS avg_duration FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id GROUP BY m.title ORDER BY avg_duration DESC LIMIT 10;"}
{"prompt": "What are the most recent business reports generated for management?", "response": "SELECT report_name, generated_on FROM BusinessReports ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What is the predicted churn for next month (if predictions are stored in Analytics)?", "response": "SELECT report_date, cancellations FROM Analytics WHERE report_date > CURDATE() ORDER BY report_date ASC LIMIT 4;"}
{"prompt": "What is the average number of completed watches per user?", "response": "SELECT AVG(completed_count) FROM (SELECT user_id, COUNT(*) AS completed_count FROM WatchHistory WHERE completed = TRUE GROUP BY user_id) AS completed_stats;"}
{"prompt": "Which users have the highest number of reviews submitted?", "response": "SELECT u.username, COUNT(r.review_id) AS review_count FROM Reviews r JOIN Users u ON r.user_id = u.user_id GROUP BY u.username ORDER BY review_count DESC LIMIT 5;"}
{"prompt": "What actions did I (Anjali) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT user_id FROM Users WHERE username = 'Anjali') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Business Executives", "response": "nan"}
{"prompt": "NL Question (Rajiv’s POV)", "response": "SQL Query"}
{"prompt": "What is the subscriber growth and ARPU for the last 3 months?", "response": "SELECT report_date, total_users, active_users, total_watch_time, new_subscriptions, cancellations FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What are the details of all active marketing campaigns and their budgets?", "response": "SELECT campaign_id, campaign_name, start_date, end_date, budget, channel, status FROM MarketingCampaigns WHERE status = 'Active';"}
{"prompt": "What is the performance of recent marketing campaigns (new subscriptions, cancellations, engagement)?", "response": "SELECT campaign_id, new_subscriptions, cancellations, engagement_rate FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 2 MONTH);"}
{"prompt": "What are the top 3 competitor strategies and their focus areas?", "response": "-- Not in schema, but if tracked: SELECT * FROM BusinessReports WHERE report_name LIKE '%Competitor Strategy%' ORDER BY generated_on DESC LIMIT 3;"}
{"prompt": "Which regions have the highest growth potential for expansion?", "response": "-- Not in schema, but if tracked: SELECT * FROM BusinessReports WHERE report_name LIKE '%Market Evaluation%' ORDER BY generated_on DESC;"}
{"prompt": "What are the monthly churn rates for the last quarter?", "response": "SELECT report_date, (cancellations * 1.0 / total_users) AS churn_rate FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What is the age group distribution among current users?", "response": "-- If age group is in Users.status or a related field: SELECT status AS age_group, COUNT(*) FROM Users GROUP BY status;"}
{"prompt": "What is the revenue and growth rate by region?", "response": "-- If region is in Users or a related table: SELECT region, SUM(revenue) AS total_revenue, AVG(growth_rate) FROM BusinessReports WHERE report_name LIKE '%Regional Performance%' GROUP BY region;"}
{"prompt": "What are the top genres by watch time or engagement this quarter?", "response": "SELECT genre, SUM(watch_duration) AS total_watch_time FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE w.watch_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY genre ORDER BY total_watch_time DESC LIMIT 5;"}
{"prompt": "What are the quarterly results for revenue, new subscriptions, churn, and content investment?", "response": "SELECT * FROM BusinessReports WHERE report_name LIKE '%Quarterly Results%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the main challenges identified in the last quarter?", "response": "SELECT content FROM BusinessReports WHERE report_name LIKE '%Challenges%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the future roadmap as per the latest board presentation?", "response": "SELECT content FROM BusinessReports WHERE report_name LIKE '%Future Roadmap%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the trend in new subscriptions and cancellations over the last 6 months?", "response": "SELECT report_date, new_subscriptions, cancellations FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"}
{"prompt": "What is the average revenue per user (ARPU) for the last quarter?", "response": "SELECT AVG(total_watch_time * 1.0 / active_users) AS ARPU FROM Analytics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What is the engagement rate for the top 5 campaigns this quarter?", "response": "SELECT campaign_name, engagement_rate FROM MarketingCampaigns WHERE status = 'Active' ORDER BY engagement_rate DESC LIMIT 5;"}
{"prompt": "What is the summary of content investment for the last quarter?", "response": "SELECT content FROM BusinessReports WHERE report_name LIKE '%Content Investment%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the most-watched original series this quarter?", "response": "SELECT m.title, COUNT(w.watch_id) AS views FROM WatchHistory w JOIN Movies m ON w.movie_id = m.movie_id WHERE m.description LIKE '%original series%' AND w.watch_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY m.title ORDER BY views DESC LIMIT 5;"}
{"prompt": "What is the churn rate among users aged 18-24?", "response": "-- If age group is in Users.status: SELECT (count(*) FILTER (WHERE u.status = '18-24' AND s.is_active = FALSE)) * 1.0 / count(*) FROM Users u JOIN Subscriptions s ON u.subscription_id = s.subscription_id;"}
{"prompt": "What are the top 3 regions by subscriber growth this quarter?", "response": "-- If region is in Users: SELECT region, COUNT(*) AS user_growth FROM Users WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY region ORDER BY user_growth DESC LIMIT 3;"}
{"prompt": "What actions did I (Rajiv) perform in the system today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT user_id FROM Users WHERE username = 'Rajiv') AND DATE(timestamp) = CURDATE();"}
{"prompt": "nan", "response": "nan"}
{"prompt": "OnlineBanking", "response": "nan"}
{"prompt": "Account Holders/Customers", "response": "nan"}
{"prompt": "NL Question (Ramesh’s POV)", "response": "SQL Query"}
{"prompt": "Did my salary get credited today?", "response": "SELECT * FROM Transactions WHERE account_id = (SELECT account_id FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh')) AND transaction_type = 'credit' AND description LIKE '%salary%' AND DATE(transaction_date) = CURDATE();"}
{"prompt": "What is my current account balance?", "response": "SELECT balance FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND status = 'active';"}
{"prompt": "What are the details of my last 5 transactions?", "response": "SELECT * FROM Transactions WHERE account_id = (SELECT account_id FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh')) ORDER BY transaction_date DESC LIMIT 5;"}
{"prompt": "Did my UPI transfer to my parents go through today?", "response": "SELECT * FROM Transactions WHERE account_id = (SELECT account_id FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh')) AND transaction_type = 'debit' AND description LIKE '%UPI%' AND DATE(transaction_date) = CURDATE();"}
{"prompt": "What auto-debit mandates are currently active on my account?", "response": "SELECT * FROM Transactions WHERE account_id = (SELECT account_id FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh')) AND description LIKE '%auto-debit%' AND status = 'active';"}
{"prompt": "Which auto-debit mandates have I disabled?", "response": "SELECT * FROM Transactions WHERE account_id = (SELECT account_id FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh')) AND description LIKE '%auto-debit%' AND status = 'disabled';"}
{"prompt": "How do I apply for a new debit card?", "response": "INSERT INTO CustomerSupportTickets (customer_id, issue, status, created_at) VALUES ((SELECT customer_id FROM Customers WHERE first_name = 'Ramesh'), 'Request for new debit card', 'open', NOW());"}
{"prompt": "What is the status of my new debit card request?", "response": "SELECT * FROM CustomerSupportTickets WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND issue LIKE '%debit card%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What fixed deposits do I currently have?", "response": "SELECT * FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND account_type = 'Fixed Deposit' AND status = 'active';"}
{"prompt": "How do I set up a new fixed deposit?", "response": "INSERT INTO Accounts (customer_id, account_type, balance, opened_on, status, branch_id) VALUES ((SELECT customer_id FROM Customers WHERE first_name = 'Ramesh'), 'Fixed Deposit', 0, CURDATE(), 'pending', 1);"}
{"prompt": "What is the current interest rate for fixed deposits?", "response": "SELECT AVG(interest_rate) FROM Loans WHERE loan_type = 'Fixed Deposit';"}
{"prompt": "What support tickets have I raised today?", "response": "SELECT * FROM CustomerSupportTickets WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND DATE(created_at) = CURDATE();"}
{"prompt": "What is the response to my latest support query?", "response": "SELECT response FROM FinancialAdviceRequests WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') ORDER BY request_date DESC LIMIT 1;"}
{"prompt": "Have there been any suspicious logins on my account today?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND action LIKE '%login%' AND description LIKE '%suspicious%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the details of my last password change?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND action LIKE '%password change%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Have I enabled two-factor authentication on my account?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND action LIKE '%two-factor authentication enabled%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What is the status of my accounts (active, pending, closed)?", "response": "SELECT account_id, account_type, status FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh');"}
{"prompt": "What are all unresolved support tickets for my account?", "response": "SELECT * FROM CustomerSupportTickets WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND status != 'resolved';"}
{"prompt": "What are the details of my last five loan payments?", "response": "SELECT lp.* FROM LoanPayments lp JOIN Loans l ON lp.loan_id = l.loan_id WHERE l.customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') ORDER BY lp.payment_date DESC LIMIT 5;"}
{"prompt": "What actions did I perform in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ramesh') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Bank Tellers", "response": "nan"}
{"prompt": "NL Question (Meena’s POV)", "response": "SQL Query"}
{"prompt": "What are today’s customer support tickets assigned to me?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Meena') AND DATE(created_at) = CURDATE();"}
{"prompt": "Which tickets are about failed fund transfers today?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%failed fund transfer%' AND DATE(created_at) = CURDATE();"}
{"prompt": "What are the details of a transaction by transaction ID 500123?", "response": "SELECT * FROM Transactions WHERE transaction_id = 500123;"}
{"prompt": "Which transactions failed for customer_id 201 today?", "response": "SELECT * FROM Transactions WHERE account_id IN (SELECT account_id FROM Accounts WHERE customer_id = 201) AND status = 'failed' AND DATE(transaction_date) = CURDATE();"}
{"prompt": "How do I initiate a refund for a failed transaction for customer_id 201?", "response": "INSERT INTO CustomerSupportTickets (customer_id, issue, status, created_at, handled_by) VALUES (201, 'Refund request for failed transaction', 'open', NOW(), (SELECT employee_id FROM Employees WHERE name = 'Meena'));"}
{"prompt": "What is the status of all refund requests today?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%refund request%' AND DATE(created_at) = CURDATE();"}
{"prompt": "Which customers requested KYC updates today?", "response": "SELECT DISTINCT customer_id FROM CustomerSupportTickets WHERE issue LIKE '%KYC update%' AND DATE(created_at) = CURDATE();"}
{"prompt": "What are the KYC compliance check results for customer_id 201?", "response": "SELECT * FROM ComplianceChecks WHERE customer_id = 201 ORDER BY checked_on DESC;"}
{"prompt": "What is the status of a customer’s KYC update request for customer_id 201?", "response": "SELECT * FROM CustomerSupportTickets WHERE customer_id = 201 AND issue LIKE '%KYC update%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What documents were uploaded for KYC verification today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%KYC document upload%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which customers requested help with mobile banking registration today?", "response": "SELECT DISTINCT customer_id FROM CustomerSupportTickets WHERE issue LIKE '%mobile banking registration%' AND DATE(created_at) = CURDATE();"}
{"prompt": "What is the status of mobile banking registration for customer_id 201?", "response": "SELECT * FROM CustomerSupportTickets WHERE customer_id = 201 AND issue LIKE '%mobile banking registration%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What are the most recent PIN setup requests?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%PIN setup%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which transactions were flagged as suspicious today?", "response": "SELECT * FROM FraudAlerts WHERE status = 'flagged' AND DATE(alert_date) = CURDATE();"}
{"prompt": "What is the status of all fraud alerts escalated today?", "response": "SELECT * FROM FraudAlerts WHERE status = 'escalated' AND DATE(alert_date) = CURDATE();"}
{"prompt": "Which fraud alerts were reviewed by Meena today?", "response": "SELECT * FROM FraudAlerts WHERE reviewed_by = (SELECT employee_id FROM Employees WHERE name = 'Meena') AND DATE(alert_date) = CURDATE();"}
{"prompt": "What are all unresolved fraud alerts for branch_id 3?", "response": "SELECT * FROM FraudAlerts WHERE status != 'resolved' AND account_id IN (SELECT account_id FROM Accounts WHERE branch_id = 3);"}
{"prompt": "What actions did I (Meena) log in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Meena') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are all customer support tickets I handled this week?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Meena') AND WEEK(created_at) = WEEK(CURDATE());"}
{"prompt": "What is the summary of all digital service requests handled by me today?", "response": "SELECT issue, COUNT(*) AS request_count FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Meena') AND DATE(created_at) = CURDATE() GROUP BY issue;"}
{"prompt": "Loan Officers", "response": "nan"}
{"prompt": "NL Question (Sana’s POV)", "response": "SQL Query"}
{"prompt": "What are the new personal loan applications submitted overnight?", "response": "SELECT * FROM Loans WHERE loan_type = 'Personal' AND status = 'New' AND start_date = DATE_SUB(CURDATE(), INTERVAL 1 DAY);"}
{"prompt": "Which applicants have incomplete documents?", "response": "SELECT customer_id, loan_id FROM Loans WHERE status = 'Incomplete Documents';"}
{"prompt": "How to send a request for missing documents to applicant with customer_id 301?", "response": "INSERT INTO CustomerSupportTickets (customer_id, issue, status, created_at, handled_by) VALUES (301, 'Request for missing loan documents', 'open', NOW(), (SELECT employee_id FROM Employees WHERE name = 'Sana'));"}
{"prompt": "Which applicants qualify for a home loan?", "response": "SELECT * FROM Loans WHERE loan_type = 'Home' AND status = 'Qualified';"}
{"prompt": "How to generate a pre-approval letter for a qualified home loan applicant (customer_id 302)?", "response": "INSERT INTO SystemLogs (admin_id, action, timestamp, description) VALUES ((SELECT employee_id FROM Employees WHERE name = 'Sana'), 'Generated pre-approval letter', NOW(), 'Home loan pre-approval for customer_id 302');"}
{"prompt": "How to schedule a video verification for a home loan applicant (customer_id 302)?", "response": "INSERT INTO SystemLogs (admin_id, action, timestamp, description) VALUES ((SELECT employee_id FROM Employees WHERE name = 'Sana'), 'Scheduled video verification', NOW(), 'Home loan video verification for customer_id 302');"}
{"prompt": "What is the current status of approved loan disbursements?", "response": "SELECT loan_id, customer_id, amount, disbursement_date FROM Loans WHERE status = 'Approved' AND disbursement_date IS NOT NULL;"}
{"prompt": "Which loans are nearing the EMI default risk zone?", "response": "SELECT loan_id, customer_id, emi_due_date, emi_amount FROM Loans WHERE emi_due_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY) AND status = 'Active';"}
{"prompt": "How to flag loans for follow-up due to EMI default risk?", "response": "UPDATE Loans SET flagged_for_followup = TRUE WHERE emi_due_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY) AND status = 'Active';"}
{"prompt": "What are the recent updates to automation rules for loan eligibility filters?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Sana') AND action LIKE '%automation rule%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the credit scores of applicants for new personal loans?", "response": "SELECT customer_id, credit_score FROM Customers WHERE customer_id IN (SELECT customer_id FROM Loans WHERE loan_type = 'Personal' AND status = 'New');"}
{"prompt": "What income proofs have been submitted by loan applicants?", "response": "SELECT customer_id, issue AS document_type, status AS document_status FROM CustomerSupportTickets WHERE issue LIKE '%income proof%' AND status = 'Resolved';"}
{"prompt": "What bank statements have been verified for loan applicants?", "response": "SELECT customer_id, issue AS document_type, status AS document_status FROM CustomerSupportTickets WHERE issue LIKE '%bank statement%' AND status = 'Resolved';"}
{"prompt": "What existing liabilities do loan applicants have?", "response": "SELECT customer_id, loan_id, amount, status FROM Loans WHERE status IN ('Active', 'Overdue');"}
{"prompt": "How to log a request for missing documents for customer_id 303?", "response": "INSERT INTO CustomerSupportTickets (customer_id, issue, status, created_at, handled_by) VALUES (303, 'Request for missing documents', 'open', NOW(), (SELECT employee_id FROM Employees WHERE name = 'Sana'));"}
{"prompt": "What training sessions on digital fraud prevention has Sana attended recently?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Sana') AND action LIKE '%digital fraud prevention%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"}
{"prompt": "What are the details of scheduled video verifications?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Sana') AND action LIKE '%video verification%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which loans have been approved in the last 24 hours?", "response": "SELECT * FROM Loans WHERE status = 'Approved' AND disbursement_date >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What are the details of loans flagged for follow-up?", "response": "SELECT loan_id, customer_id, emi_due_date, flagged_for_followup FROM Loans WHERE flagged_for_followup = TRUE;"}
{"prompt": "How to update automation rules for loan eligibility filters?", "response": "INSERT INTO SystemLogs (admin_id, action, timestamp, description) VALUES ((SELECT employee_id FROM Employees WHERE name = 'Sana'), 'Updated automation rules for loan eligibility filters', NOW(), 'Loan eligibility filter update');"}
{"prompt": "Branch Managers", "response": "nan"}
{"prompt": "NL Question (Arun’s POV)", "response": "SQL Query"}
{"prompt": "How many online service requests were received today for my branch?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE DATE(created_at) = CURDATE() AND handled_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5);"}
{"prompt": "How many loan approvals were processed today for my branch?", "response": "SELECT COUNT(*) FROM Loans WHERE status = 'Approved' AND start_date = CURDATE() AND customer_id IN (SELECT customer_id FROM Accounts WHERE branch_id = 5);"}
{"prompt": "How many unresolved complaints are currently open for my branch?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE status != 'resolved' AND handled_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5);"}
{"prompt": "What is the digital transaction volume for my branch today?", "response": "SELECT COUNT(*) FROM Transactions WHERE DATE(transaction_date) = CURDATE() AND account_id IN (SELECT account_id FROM Accounts WHERE branch_id = 5);"}
{"prompt": "How many failed online KYC submissions occurred today for my branch?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE issue LIKE '%KYC%' AND status != 'resolved' AND DATE(created_at) = CURDATE() AND handled_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5);"}
{"prompt": "What are the details of the latest high-value customer ticket about a blocked corporate account?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%blocked corporate account%' AND status != 'resolved' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What are the staff performance reports for my branch this month?", "response": "SELECT * FROM AnalyticsReports WHERE report_type = 'Staff Performance' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND generated_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5);"}
{"prompt": "What is the monthly branch performance summary highlighting digital adoption among senior citizens?", "response": "SELECT * FROM AnalyticsReports WHERE report_type = 'Branch Performance Summary' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND summary LIKE '%digital adoption%' AND summary LIKE '%senior citizens%' AND generated_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5);"}
{"prompt": "What are the top 10 customers by digital transaction volume this month in my branch?", "response": "SELECT a.customer_id, SUM(t.amount) AS total_volume FROM Accounts a JOIN Transactions t ON a.account_id = t.account_id WHERE a.branch_id = 5 AND MONTH(t.transaction_date) = MONTH(CURDATE()) GROUP BY a.customer_id ORDER BY total_volume DESC LIMIT 10;"}
{"prompt": "Which employees at my branch have the highest number of resolved support tickets this month?", "response": "SELECT handled_by, COUNT(*) AS resolved_count FROM CustomerSupportTickets WHERE status = 'resolved' AND handled_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5) AND MONTH(resolved_at) = MONTH(CURDATE()) GROUP BY handled_by ORDER BY resolved_count DESC;"}
{"prompt": "How many new accounts were opened at my branch this month?", "response": "SELECT COUNT(*) FROM Accounts WHERE branch_id = 5 AND MONTH(opened_on) = MONTH(CURDATE());"}
{"prompt": "What is the total value of loans disbursed by my branch this quarter?", "response": "SELECT SUM(amount) FROM Loans WHERE status = 'Approved' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND customer_id IN (SELECT customer_id FROM Accounts WHERE branch_id = 5);"}
{"prompt": "What is the average turnaround time for resolving complaints at my branch this month?", "response": "SELECT AVG(TIMESTAMPDIFF(HOUR, created_at, resolved_at)) AS avg_resolution_time FROM CustomerSupportTickets WHERE status = 'resolved' AND handled_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5) AND MONTH(resolved_at) = MONTH(CURDATE());"}
{"prompt": "What are the most common issues reported by customers at my branch this month?", "response": "SELECT issue, COUNT(*) AS issue_count FROM CustomerSupportTickets WHERE handled_by IN (SELECT employee_id FROM Employees WHERE branch_id = 5) AND MONTH(created_at) = MONTH(CURDATE()) GROUP BY issue ORDER BY issue_count DESC LIMIT 5;"}
{"prompt": "What is the status of all compliance checks for customers at my branch this month?", "response": "SELECT * FROM ComplianceChecks WHERE customer_id IN (SELECT customer_id FROM Accounts WHERE branch_id = 5) AND checked_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many fraud alerts were raised for accounts at my branch this month?", "response": "SELECT COUNT(*) FROM FraudAlerts WHERE account_id IN (SELECT account_id FROM Accounts WHERE branch_id = 5) AND alert_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the total number of fixed deposits opened at my branch this year?", "response": "SELECT COUNT(*) FROM Accounts WHERE branch_id = 5 AND account_type = 'Fixed Deposit' AND YEAR(opened_on) = YEAR(CURDATE());"}
{"prompt": "What are the details of all unresolved fraud alerts for my branch?", "response": "SELECT * FROM FraudAlerts WHERE status != 'resolved' AND account_id IN (SELECT account_id FROM Accounts WHERE branch_id = 5);"}
{"prompt": "Which senior citizen customers registered for digital banking this month at my branch?", "response": "SELECT customer_id, first_name, last_name FROM Customers WHERE dob <= DATE_SUB(CURDATE(), INTERVAL 60 YEAR) AND registered_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND customer_id IN (SELECT customer_id FROM Accounts WHERE branch_id = 5);"}
{"prompt": "What actions did I (Arun) log in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Arun') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "NL Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "What are all open or recently closed support tickets related to password reset?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%password reset%' AND (status = 'open' OR status = 'closed') ORDER BY created_at DESC;"}
{"prompt": "Which tickets mention failed UPI transactions and their current status?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%UPI transaction failed%' ORDER BY created_at DESC;"}
{"prompt": "What are the details of fraud-related tickets, including credit card blocks?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%fraud%' OR issue LIKE '%credit card block%' ORDER BY created_at DESC;"}
{"prompt": "How many customer interactions have been logged today by Priya?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the canned responses used by Priya in support tickets?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND action LIKE '%canned response%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the list of all support tickets handled by Priya today?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(created_at) = CURDATE();"}
{"prompt": "What are the most common issues handled by Priya today?", "response": "SELECT issue, COUNT(*) AS count FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(created_at) = CURDATE() GROUP BY issue ORDER BY count DESC;"}
{"prompt": "What is the average resolution time for tickets handled by Priya today?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, created_at, resolved_at)) AS avg_resolution_time FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(created_at) = CURDATE() AND status = 'resolved';"}
{"prompt": "How many tickets related to account login troubles were resolved by Priya today?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND issue LIKE '%account login%' AND status = 'resolved' AND DATE(resolved_at) = CURDATE();"}
{"prompt": "How many transaction dispute tickets did Priya handle today?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND issue LIKE '%transaction dispute%' AND DATE(created_at) = CURDATE();"}
{"prompt": "What is the status of the last 5 tickets Priya handled?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') ORDER BY created_at DESC LIMIT 5;"}
{"prompt": "Which high-priority tickets were assigned to Priya today?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND issue LIKE '%priority%' AND DATE(created_at) = CURDATE();"}
{"prompt": "What are all unresolved tickets Priya is currently handling?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND status != 'resolved';"}
{"prompt": "Which tickets did Priya escalate to the fraud team today?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND issue LIKE '%fraud%' AND status = 'escalated' AND DATE(created_at) = CURDATE();"}
{"prompt": "What are the details of all service requests Priya raised for transaction reversals today?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND issue LIKE '%transaction reversal%' AND DATE(created_at) = CURDATE();"}
{"prompt": "What notes did Priya log for each customer interaction today?", "response": "SELECT description, created_at FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(timestamp) = CURDATE();"}
{"prompt": "How many customers did Priya help with credit card reissuance today?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND issue LIKE '%credit card reissuance%' AND DATE(created_at) = CURDATE();"}
{"prompt": "Which tickets handled by Priya today were resolved in under 15 minutes?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND status = 'resolved' AND TIMESTAMPDIFF(MINUTE, created_at, resolved_at) <= 15 AND DATE(resolved_at) = CURDATE();"}
{"prompt": "What was the earliest ticket Priya handled today?", "response": "SELECT * FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(created_at) = CURDATE() ORDER BY created_at ASC LIMIT 1;"}
{"prompt": "What actions did Priya log in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Priya') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Fraud Analysts", "response": "nan"}
{"prompt": "NL Question (Ritika’s POV)", "response": "SQL Query"}
{"prompt": "Which new accounts in the last 30 days have made multiple small transactions to the same merchant (possible money laundering)?", "response": "SELECT t.account_id, t.merchant_id, COUNT(*) AS transaction_count, SUM(t.amount) AS total_amount FROM Transactions t JOIN Accounts a ON t.account_id = a.account_id WHERE a.opened_on >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND t.amount < 100 AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY t.merchant_id HAVING transaction_count > 5 ORDER BY transaction_count DESC;"}
{"prompt": "What are the most recent IP addresses and device fingerprints associated with flagged transactions?", "response": "SELECT DISTINCT sl.action, sl.timestamp FROM SystemLogs sl WHERE sl.action LIKE '%IP address%' OR sl.action LIKE '%device fingerprint%' ORDER BY sl.timestamp DESC LIMIT 20;"}
{"prompt": "What is the location history for customer_id 205 (reported unauthorized debit card use)?", "response": "SELECT sl.action, sl.timestamp FROM SystemLogs sl WHERE sl.admin_id = 205 AND sl.action LIKE '%location%' ORDER BY sl.timestamp DESC LIMIT 10;"}
{"prompt": "What are the most recent overseas debit card transactions?", "response": "SELECT t.transaction_id, t.account_id, t.amount, t.transaction_date, t.description FROM Transactions t WHERE t.description LIKE '%overseas%' AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) ORDER BY t.transaction_date DESC LIMIT 10;"}
{"prompt": "Which transactions have been flagged as suspicious in the last 7 days?", "response": "SELECT * FROM FraudAlerts WHERE alert_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND status = 'flagged';"}
{"prompt": "Which accounts have had more than 3 fraud alerts raised this month?", "response": "SELECT account_id, COUNT(*) AS alert_count FROM FraudAlerts WHERE alert_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY account_id HAVING alert_count > 3;"}
{"prompt": "What are the details of all fraud alerts escalated for review this week?", "response": "SELECT * FROM FraudAlerts WHERE status = 'escalated' AND alert_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which customers have reported unauthorized card use in the last month?", "response": "SELECT DISTINCT customer_id FROM CustomerSupportTickets WHERE issue LIKE '%unauthorized card use%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What actions did I (Ritika) log regarding fraud case escalation today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Ritika') AND action LIKE '%fraud%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the most recent updates to fraud rule filters?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%fraud rule update%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) ORDER BY timestamp DESC;"}
{"prompt": "Which fraud alerts have been shared with the communications team this month?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%fraud alert%' AND action LIKE '%communications%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) ORDER BY timestamp DESC;"}
{"prompt": "What are the most common merchant IDs involved in flagged transactions this month?", "response": "SELECT merchant_id, COUNT(*) AS flagged_count FROM Transactions WHERE transaction_id IN (SELECT transaction_id FROM FraudAlerts WHERE alert_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY merchant_id ORDER BY flagged_count DESC LIMIT 5;"}
{"prompt": "Which device fingerprints are associated with multiple flagged accounts?", "response": "SELECT sl.action, COUNT(DISTINCT t.account_id) AS account_count FROM SystemLogs sl JOIN Transactions t ON sl.timestamp = t.transaction_date WHERE sl.action LIKE '%device fingerprint%' GROUP BY sl.action HAVING account_count > 1;"}
{"prompt": "What is the refund status for all confirmed fraud cases this month?", "response": "SELECT f.alert_id, f.account_id, f.status, t.transaction_id, t.amount, t.status AS transaction_status FROM FraudAlerts f JOIN Transactions t ON f.transaction_id = t.transaction_id WHERE f.status = 'confirmed' AND f.alert_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which customers have had their cards blocked due to fraud in the last month?", "response": "SELECT DISTINCT customer_id FROM CustomerSupportTickets WHERE issue LIKE '%card block%' AND issue LIKE '%fraud%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the top 5 most common fraud alert types this month?", "response": "SELECT alert_type, COUNT(*) AS count FROM FraudAlerts WHERE alert_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY alert_type ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which accounts have been reviewed for money laundering risk this quarter?", "response": "SELECT DISTINCT account_id FROM FraudAlerts WHERE alert_type LIKE '%money laundering%' AND alert_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What is the trend in flagged fraud alerts over the past 6 months?", "response": "SELECT MONTH(alert_date) AS month, COUNT(*) AS flagged_count FROM FraudAlerts WHERE status = 'flagged' AND alert_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY MONTH(alert_date) ORDER BY month;"}
{"prompt": "What are the most recent phishing alerts shared with customers?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%phishing%' AND action LIKE '%alert%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) ORDER BY timestamp DESC;"}
{"prompt": "What actions did I (Ritika) perform in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Ritika') AND DATE(timestamp) = CURDATE();"}
{"prompt": "IT/System Administrators", "response": "nan"}
{"prompt": "NL Question (Ravi’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent system alerts related to API load or DDoS attacks?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%API load%' OR action LIKE '%DDoS%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What are the details of all login API requests in the last 24 hours?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%login API%' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What firewall or CDN rule changes were made today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%firewall%' OR action LIKE '%CDN rule%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which admin accounts had their SSH keys or passwords rotated today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%SSH key rotation%' OR action LIKE '%password rotation%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What security patches were applied to internet banking servers this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%security patch%' AND action LIKE '%internet banking%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the status of the latest backups and rollback procedures?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%backup%' OR action LIKE '%rollback%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What audit log entries show access to sensitive admin accounts this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%admin account%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which virtual machines were provisioned for the analytics team today?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%provision VM%' AND description LIKE '%analytics team%' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the details of all open IT incidents?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%IT incident%' AND status != 'resolved';"}
{"prompt": "Which IT incidents were resolved today?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%IT incident%' AND status = 'resolved' AND DATE(resolved_at) = CURDATE();"}
{"prompt": "What is the uptime report for the last 7 days?", "response": "SELECT * FROM AnalyticsReports WHERE report_type = 'Uptime' AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the current status of database replication?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%database replication%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What are the most recent unauthorized access attempts in the audit logs?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%unauthorized access%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What actions did I (Ravi) perform in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Ravi') AND DATE(timestamp) = CURDATE();"}
{"prompt": "What are the details of all resolved IT incidents this week?", "response": "SELECT * FROM CustomerSupportTickets WHERE issue LIKE '%IT incident%' AND status = 'resolved' AND WEEK(resolved_at) = WEEK(CURDATE());"}
{"prompt": "Which servers had security patches applied this month?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%security patch%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most frequent types of IT incidents reported this month?", "response": "SELECT issue, COUNT(*) AS count FROM CustomerSupportTickets WHERE issue LIKE '%IT incident%' AND MONTH(created_at) = MONTH(CURDATE()) GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "What is the summary of all admin actions related to system hardening this week?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%hardening%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which users had failed login attempts in the last 3 days?", "response": "SELECT DISTINCT admin_id FROM SystemLogs WHERE action LIKE '%failed login%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 DAY);"}
{"prompt": "What is the total number of IT support tickets closed by me (Ravi) this month?", "response": "SELECT COUNT(*) FROM CustomerSupportTickets WHERE handled_by = (SELECT employee_id FROM Employees WHERE name = 'Ravi') AND status = 'resolved' AND MONTH(resolved_at) = MONTH(CURDATE());"}
{"prompt": "Financial Advisors", "response": "nan"}
{"prompt": "NL Question (Anika’s POV)", "response": "SQL Query"}
{"prompt": "Which customers have requested personalized investment advice today?", "response": "SELECT * FROM FinancialAdviceRequests WHERE request_date = CURDATE();"}
{"prompt": "What are the details of the 28-year-old customer who wants to save for a home?", "response": "SELECT * FROM Customers WHERE dob = '1997-06-10';"}
{"prompt": "What is the income and spending history for customer_id 221?", "response": "SELECT t.transaction_date, t.amount, t.transaction_type FROM Transactions t JOIN Accounts a ON t.account_id = a.account_id WHERE a.customer_id = 221 ORDER BY t.transaction_date DESC;"}
{"prompt": "What is the account summary for customer_id 221?", "response": "SELECT * FROM Accounts WHERE customer_id = 221;"}
{"prompt": "What are the results of the risk tolerance survey for customer_id 221?", "response": "SELECT * FROM ComplianceChecks WHERE customer_id = 221 AND check_type = 'Risk Tolerance';"}
{"prompt": "What financial advice was given to customer_id 221 in the last month?", "response": "SELECT * FROM FinancialAdviceRequests WHERE customer_id = 221 AND request_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the details of all recurring deposits for customer_id 221?", "response": "SELECT * FROM Accounts WHERE customer_id = 221 AND account_type = 'Recurring Deposit';"}
{"prompt": "What are the details of all mutual fund investments for customer_id 221?", "response": "SELECT * FROM Accounts WHERE customer_id = 221 AND account_type = 'Mutual Fund';"}
{"prompt": "What are the details of all low-risk bond holdings for customer_id 221?", "response": "SELECT * FROM Accounts WHERE customer_id = 221 AND account_type = 'Bond' AND status = 'active';"}
{"prompt": "What is the latest advisory report sent to customer_id 221?", "response": "SELECT * FROM AnalyticsReports WHERE report_type = 'Financial Advice' AND generated_by = (SELECT advisor_id FROM FinancialAdviceRequests WHERE customer_id = 221 ORDER BY request_date DESC LIMIT 1) ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which customers have requested pension planning advice this week?", "response": "SELECT DISTINCT customer_id FROM FinancialAdviceRequests WHERE topic LIKE '%pension%' AND request_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the account and transaction details for customer_id 305 (retiring couple)?", "response": "SELECT * FROM Accounts WHERE customer_id = 305; SELECT * FROM Transactions WHERE account_id IN (SELECT account_id FROM Accounts WHERE customer_id = 305);"}
{"prompt": "What is the summary of all video consultations I hosted this month?", "response": "SELECT * FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Anika') AND action LIKE '%video consultation%' AND MONTH(timestamp) = MONTH(CURDATE());"}
{"prompt": "What automatic investment reminders have been set up for customer_id 221?", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%investment reminder%' AND description LIKE '%customer_id 221%';"}
{"prompt": "What are my latest advisory notes for customer_id 221?", "response": "SELECT description, timestamp FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Anika') AND description LIKE '%customer_id 221%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "Which high-income clients should I flag for wealth management outreach?", "response": "SELECT customer_id, first_name, last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Accounts WHERE balance > 1000000 GROUP BY customer_id);"}
{"prompt": "What is the recent financial behavior of high-income clients (balance > 1,000,000)?", "response": "SELECT t.customer_id, t.transaction_date, t.amount, t.transaction_type FROM Transactions t JOIN Accounts a ON t.account_id = a.account_id WHERE a.balance > 1000000 AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the list of all pending financial advice requests assigned to me?", "response": "SELECT * FROM FinancialAdviceRequests WHERE advisor_id = (SELECT employee_id FROM Employees WHERE name = 'Anika') AND response IS NULL;"}
{"prompt": "What topics are most frequently requested in financial advice this month?", "response": "SELECT topic, COUNT(*) AS request_count FROM FinancialAdviceRequests WHERE request_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY topic ORDER BY request_count DESC LIMIT 5;"}
{"prompt": "What actions did I (Anika) perform in the system today?", "response": "SELECT action, timestamp, description FROM SystemLogs WHERE admin_id = (SELECT employee_id FROM Employees WHERE name = 'Anika') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Compliance Officers", "response": "nan"}
{"prompt": "Natural Language Question (Naveen’s POV)", "response": "SQL Query"}
{"prompt": "Which customers opened accounts in the last 24 hours?", "response": "SELECT c.customer_id, c.first_name, c.last_name, a.account_id, a.opened_on FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.opened_on >= CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "List all accounts opened from the [Flagged Region] in the last week.", "response": "SELECT a.account_id, c.first_name, c.last_name, c.address, a.opened_on FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.address LIKE '%[Flagged Region]%' AND a.opened_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which customers have missing PAN verification?", "response": "SELECT customer_id, first_name, last_name, email FROM Customers WHERE status = 'PAN Verification Pending';"}
{"prompt": "Show accounts currently frozen due to KYC issues.", "response": "SELECT a.account_id, c.first_name, c.last_name, a.status FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE a.status = 'Frozen';"}
{"prompt": "List all compliance checks that failed in the last month.", "response": "SELECT cc.check_id, cc.customer_id, c.first_name, c.last_name, cc.check_type, cc.result, cc.checked_on FROM ComplianceChecks cc JOIN Customers c ON cc.customer_id = c.customer_id WHERE cc.result = 'Failed' AND cc.checked_on >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which accounts had large international transfers in the last week?", "response": "SELECT t.transaction_id, t.account_id, t.amount, t.transaction_date, t.description FROM Transactions t WHERE t.transaction_type = 'International Transfer' AND t.amount > 100000 AND t.transaction_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List all customers with more than three failed compliance checks.", "response": "SELECT c.customer_id, c.first_name, c.last_name, COUNT(cc.check_id) AS failed_checks FROM Customers c JOIN ComplianceChecks cc ON c.customer_id = cc.customer_id WHERE cc.result = 'Failed' GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(cc.check_id) > 3;"}
{"prompt": "Show all unresolved policy violations from compliance checks.", "response": "SELECT cc.check_id, cc.customer_id, c.first_name, c.last_name, cc.check_type, cc.result FROM ComplianceChecks cc JOIN Customers c ON cc.customer_id = c.customer_id WHERE cc.result = 'Violation' AND cc.checked_on >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which accounts were temporarily frozen today?", "response": "SELECT account_id, customer_id, status, opened_on FROM Accounts WHERE status = 'Frozen' AND opened_on = CURRENT_DATE;"}
{"prompt": "List customers with accounts opened but missing KYC compliance checks.", "response": "SELECT c.customer_id, c.first_name, c.last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id LEFT JOIN ComplianceChecks cc ON c.customer_id = cc.customer_id AND cc.check_type = 'KYC' WHERE cc.check_id IS NULL;"}
{"prompt": "Which employees performed compliance checks in the last week?", "response": "SELECT DISTINCT e.employee_id, e.name FROM Employees e JOIN ComplianceChecks cc ON e.employee_id = cc.compliance_officer_id WHERE cc.checked_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the most common reasons for compliance check failures this month?", "response": "SELECT check_type, COUNT(*) AS failure_count FROM ComplianceChecks WHERE result = 'Failed' AND checked_on >= CURRENT_DATE - INTERVAL '1 month' GROUP BY check_type ORDER BY failure_count DESC;"}
{"prompt": "List all accounts with more than five fraud alerts in the last month.", "response": "SELECT account_id, COUNT(alert_id) AS alert_count FROM FraudAlerts WHERE alert_date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY account_id HAVING COUNT(alert_id) > 5;"}
{"prompt": "Show all unresolved fraud alerts.", "response": "SELECT fa.alert_id, fa.account_id, fa.transaction_id, fa.alert_type, fa.alert_date FROM FraudAlerts fa WHERE fa.status = 'Unresolved';"}
{"prompt": "Which customers had their accounts unfreezed after KYC verification this month?", "response": "SELECT DISTINCT a.account_id, c.customer_id, c.first_name, c.last_name FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id JOIN ComplianceChecks cc ON c.customer_id = cc.customer_id WHERE a.status = 'Active' AND cc.check_type = 'KYC' AND cc.result = 'Passed' AND cc.checked_on >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "List all compliance checks performed by me (Naveen) this month.", "response": "SELECT cc.check_id, cc.customer_id, cc.check_type, cc.result, cc.checked_on FROM ComplianceChecks cc JOIN Employees e ON cc.compliance_officer_id = e.employee_id WHERE e.name = 'Naveen' AND cc.checked_on >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which customers have both a loan and a failed compliance check?", "response": "SELECT DISTINCT c.customer_id, c.first_name, c.last_name FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id JOIN ComplianceChecks cc ON c.customer_id = cc.customer_id WHERE cc.result = 'Failed';"}
{"prompt": "List all compliance checks where the result is pending review.", "response": "SELECT cc.check_id, cc.customer_id, cc.check_type, cc.result, cc.checked_on FROM ComplianceChecks cc WHERE cc.result = 'Pending Review';"}
{"prompt": "Show the monthly summary of compliance checks by result type for the last three months.", "response": "SELECT DATE_TRUNC('month', checked_on) AS month, result, COUNT(*) AS count FROM ComplianceChecks WHERE checked_on >= CURRENT_DATE - INTERVAL '3 months' GROUP BY month, result ORDER BY month DESC, result;"}
{"prompt": "Which accounts had transactions flagged as fraudulent in the last month?", "response": "SELECT DISTINCT t.account_id, t.transaction_id FROM Transactions t JOIN FraudAlerts fa ON t.transaction_id = fa.transaction_id WHERE fa.alert_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Sana’s POV)", "response": "SQL Query"}
{"prompt": "How many customers closed their fixed deposit accounts in the last 3 months?", "response": "SELECT COUNT(*) FROM Accounts WHERE account_type = 'Digital Fixed Deposit' AND status = 'Closed' AND opened_on >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "What are the most common issues reported in support tickets mentioning fixed deposits?", "response": "SELECT issue, COUNT(*) AS ticket_count FROM CustomerSupportTickets WHERE issue like '%fixed deposit%' GROUP BY issue ORDER BY ticket_count DESC;"}
{"prompt": "What is the average duration between opening and closing for digital fixed deposit accounts?", "response": "SELECT AVG(DATE_PART('day', CURRENT_DATE - opened_on)) AS avg_duration_days FROM Accounts WHERE account_type = 'Digital Fixed Deposit' AND status = 'Closed';"}
{"prompt": "How many customers closed their digital fixed deposit accounts within 30 days of opening?", "response": "SELECT COUNT(*) FROM Accounts WHERE account_type = 'Digital Fixed Deposit' AND status = 'Closed' AND CURRENT_DATE - opened_on <= 30;"}
{"prompt": "How many digital fixed deposit accounts are currently active?", "response": "SELECT COUNT(*) FROM Accounts WHERE account_type = 'Digital Fixed Deposit' AND status = 'Active';"}
{"prompt": "Which customers have closed more than one digital fixed deposit account in the last year?", "response": "SELECT customer_id, count(*) AS closed_count FROM Accounts WHERE account_type = 'Digital Fixed Deposit' AND status = 'Closed' AND opened_on >= CURRENT_DATE - INTERVAL '1 year' GROUP BY customer_id HAVING count(*) > 1;"}
{"prompt": "Which regions have the highest number of closed digital fixed deposit accounts?", "response": "SELECT c.address, COUNT(*) AS closed_count FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE a.account_type = 'Digital Fixed Deposit' AND a.status = 'Closed' GROUP BY c.address ORDER BY closed_count DESC;"}
{"prompt": "What is the average transaction value this month?", "response": "SELECT AVG(amount) FROM Transactions WHERE transaction_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How many app logins were recorded today?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE action = 'App Login' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "What is the conversion rate of new savings accounts opened this month compared to last month?", "response": "SELECT (SELECT count(*) FROM Accounts WHERE account_type = 'Savings' AND opened_on >= DATE_TRUNC('month', CURRENT_DATE))::decimal / NULLIF((SELECT count(*) FROM Accounts WHERE account_type = 'Savings' AND opened_on >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND opened_on < DATE_TRUNC('month', CURRENT_DATE)),0) AS conversion_rate;"}
{"prompt": "Which branches have the highest average account balance?", "response": "SELECT b.branch_name, AVG(a.balance) AS avg_balance FROM Accounts a JOIN Branches b ON a.branch_id = b.branch_id GROUP BY b.branch_name ORDER BY avg_balance DESC;"}
{"prompt": "What are the top 5 transaction types by volume this month?", "response": "SELECT transaction_type, COUNT(*) AS txn_count FROM Transactions WHERE transaction_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY transaction_type ORDER BY txn_count DESC LIMIT 5;"}
{"prompt": "Who are the top 10 customers by total transaction value this year?", "response": "SELECT c.customer_id, c.first_name, c.last_name, SUM(t.amount) AS total_value FROM Transactions t JOIN Accounts a ON t.account_id = a.account_id JOIN Customers c ON a.customer_id = c.customer_id WHERE t.transaction_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_value DESC LIMIT 10;"}
{"prompt": "Which addresses have the highest number of fraud alerts this month?", "response": "SELECT c.address, COUNT(*) AS fraud_count FROM FraudAlerts fa JOIN Accounts a ON fa.account_id = a.account_id JOIN Customers c ON a.customer_id = c.customer_id WHERE fa.alert_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY c.address ORDER BY fraud_count DESC;"}
{"prompt": "What percentage of customer support tickets were resolved within 24 hours this month?", "response": "SELECT (count(*) FILTER (WHERE resolved_at - created_at <= INTERVAL '24 hours')::decimal / NULLIF(count(*),0)) * 100 AS percent_resolved_24h FROM CustomerSupportTickets WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What is the average response length in customer support tickets resolved this month?", "response": "SELECT AVG(LENGTH(response)) AS avg_response_length FROM CustomerSupportTickets WHERE status = 'Resolved' AND created_at >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How many customers opened savings accounts in the last 30 days?", "response": "SELECT COUNT(DISTINCT customer_id) FROM Accounts WHERE account_type = 'Savings' AND opened_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the average number of transactions per customer this month?", "response": "SELECT AVG(txn_count) FROM (SELECT a.customer_id, COUNT(*) AS txn_count FROM Transactions t JOIN Accounts a ON t.account_id = a.account_id WHERE t.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY a.customer_id) sub;"}
{"prompt": "Which customers have both an active loan and more than 20 transactions this quarter?", "response": "SELECT c.customer_id, c.first_name, c.last_name FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id AND l.status = 'Active' JOIN Accounts a ON c.customer_id = a.customer_id JOIN (SELECT account_id, COUNT(*) AS txn_count FROM Transactions WHERE transaction_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY account_id) t ON a.account_id = t.account_id WHERE t.txn_count > 20;"}
{"prompt": "What are the KPIs for this month: total app logins, average transaction value, churn rate (accounts closed), and ticket count?", "response": "SELECT (SELECT count(*) FROM SystemLogs WHERE action = 'App Login' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE)) AS total_app_logins, (SELECT AVG(amount) FROM Transactions WHERE transaction_date >= DATE_TRUNC('month', CURRENT_DATE)) AS avg_transaction_value, (SELECT count(*) FROM Accounts WHERE status = 'Closed' AND opened_on >= DATE_TRUNC('month', CURRENT_DATE)) AS churn_count, (SELECT COUNT(*) FROM CustomerSupportTickets WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE)) AS ticket_count;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "InventoryDB", "response": "nan"}
{"prompt": "Inventory Managers", "response": "nan"}
{"prompt": "Natural Language Question (Rajesh’s POV)", "response": "SQL Query"}
{"prompt": "Which items are currently below their reorder level?", "response": "SELECT item_id, item_name, quantity, reorder_level FROM Items WHERE quantity < reorder_level;"}
{"prompt": "What is the total quantity of each item in the inventory?", "response": "SELECT item_id, item_name, SUM(quantity) AS total_quantity FROM Items GROUP BY item_id, item_name;"}
{"prompt": "List all warehouses and their locations.", "response": "SELECT warehouse_id, name, location FROM Warehouses;"}
{"prompt": "Who manages each warehouse?", "response": "SELECT w.name AS warehouse_name, e.name AS manager_name FROM Warehouses w JOIN Employees e ON w.manager_id = e.employee_id;"}
{"prompt": "Show all pending purchase orders and their expected delivery dates.", "response": "SELECT po_id, item_id, quantity, expected_delivery FROM PurchaseOrders WHERE status = 'Pending';"}
{"prompt": "What are the recent stock movements for microchips in the central warehouse?", "response": "SELECT movement_id, movement_type, quantity, movement_date FROM StockMovements WHERE item_id = (SELECT item_id FROM Items WHERE item_name = 'microchips') AND warehouse_id = (SELECT warehouse_id FROM Warehouses WHERE name = 'Central Warehouse') ORDER BY movement_date DESC;"}
{"prompt": "Which suppliers provide microchips?", "response": "SELECT s.supplier_id, s.name FROM Suppliers s JOIN Items i ON s.supplier_id = i.supplier_id WHERE i.item_name = 'microchips';"}
{"prompt": "List all items supplied by each supplier.", "response": "SELECT s.name AS supplier_name, i.item_name FROM Suppliers s JOIN Items i ON s.supplier_id = i.supplier_id ORDER BY s.name;"}
{"prompt": "What is the unit price and available quantity of each item?", "response": "SELECT item_id, item_name, unit_price, quantity FROM Items;"}
{"prompt": "Which employees handled stock movements in the last week?", "response": "SELECT DISTINCT e.employee_id, e.name FROM Employees e JOIN StockMovements sm ON e.employee_id = sm.handled_by WHERE sm.movement_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many sales orders have been completed this month?", "response": "SELECT COUNT(*) FROM SalesOrders WHERE status = 'Completed' AND sale_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What is the average delivery time for completed deliveries this month?", "response": "SELECT AVG(delivery_date - (SELECT sale_date FROM SalesOrders WHERE so_id = d.so_id)) AS avg_delivery_days FROM Deliveries d WHERE status = 'Completed' AND delivery_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "List all items that have not been updated in the last 30 days.", "response": "SELECT item_id, item_name FROM Items WHERE last_updated < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which items have had stock adjustments in the last month?", "response": "SELECT DISTINCT i.item_id, i.item_name FROM Items i JOIN StockMovements sm ON i.item_id = sm.item_id WHERE sm.movement_type = 'Adjustment' AND sm.movement_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "What is the total value of items in inventory?", "response": "SELECT SUM(unit_price * quantity) AS total_inventory_value FROM Items;"}
{"prompt": "Which suppliers have pending purchase orders?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id WHERE po.status = 'Pending';"}
{"prompt": "What is the most frequently ordered item in purchase orders?", "response": "SELECT item_id, COUNT(*) AS order_count FROM PurchaseOrders GROUP BY item_id ORDER BY order_count DESC LIMIT 1;"}
{"prompt": "Which deliveries were delayed in the last month?", "response": "SELECT delivery_id, so_id, delivery_date FROM Deliveries WHERE status = 'Delayed' AND delivery_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Who generated analytics reports in the past week?", "response": "SELECT DISTINCT ar.generated_by, e.name FROM AnalyticsReports ar JOIN Employees e ON ar.generated_by = e.employee_id WHERE ar.generated_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What financial records were created for sales orders this month?", "response": "SELECT record_id, amount, related_order, record_date FROM FinancialRecords WHERE type = 'Sales' AND record_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Warehouse Staff", "response": "nan"}
{"prompt": "Natural Language Question (Sunita’s POV)", "response": "SQL Query"}
{"prompt": "What shipments are scheduled for delivery to my warehouse today?", "response": "SELECT po_id, item_id, quantity, expected_delivery FROM PurchaseOrders WHERE expected_delivery = CURRENT_DATE AND status = 'Pending';"}
{"prompt": "Which sales orders are planned for dispatch from my warehouse today?", "response": "SELECT so_id, item_id, quantity, sale_date, customer_name FROM SalesOrders WHERE sale_date = CURRENT_DATE AND status = 'Pending';"}
{"prompt": "List all items received in the warehouse this week.", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity, sm.movement_date FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Received' AND sm.movement_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show the current stock levels for all items in my warehouse.", "response": "SELECT item_id, item_name, quantity FROM Items;"}
{"prompt": "Which items were dispatched from the warehouse today?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Dispatched' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "What are the details of the last 5 shipments received?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity, sm.movement_date FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Received' ORDER BY sm.movement_date DESC LIMIT 5;"}
{"prompt": "Which items have been reported as damaged today?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Damaged' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "What items are missing from today’s incoming shipments?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Missing' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "List all high-value items in the warehouse (unit price > 10000).", "response": "SELECT item_id, item_name, unit_price, quantity FROM Items WHERE unit_price > 10000;"}
{"prompt": "Show the stock count for high-value items today.", "response": "SELECT item_id, item_name, quantity FROM Items WHERE unit_price > 10000;"}
{"prompt": "Which items have discrepancies reported today?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Discrepancy' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "What is the total number of items received in the warehouse this month?", "response": "SELECT SUM(quantity) FROM StockMovements WHERE movement_type = 'Received' AND movement_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which outgoing orders are still pending for dispatch?", "response": "SELECT so_id, item_id, quantity, customer_name FROM SalesOrders WHERE status = 'Pending';"}
{"prompt": "Show all items that were picked for outgoing orders today.", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Picked' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "What is the barcode and quantity of each item received today?", "response": "SELECT item_id, item_name, quantity FROM Items WHERE last_updated::date = CURRENT_DATE;"}
{"prompt": "Which items have low stock and need to be reported to the inventory manager?", "response": "SELECT item_id, item_name, quantity, reorder_level FROM Items WHERE quantity < reorder_level;"}
{"prompt": "List all items stored in the warehouse by category.", "response": "SELECT category, item_id, item_name, quantity FROM Items ORDER BY category, item_name;"}
{"prompt": "What are the details of the last stock count performed on high-value items?", "response": "SELECT item_id, item_name, quantity, last_updated FROM Items WHERE unit_price > 10000 ORDER BY last_updated DESC LIMIT 1;"}
{"prompt": "Which items have been dispatched more than 10 times this month?", "response": "SELECT item_id, count(*) AS dispatch_count FROM StockMovements WHERE movement_type = 'Dispatched' AND movement_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY item_id HAVING count(*) > 10;"}
{"prompt": "What items have been received from each supplier this week?", "response": "SELECT s.name AS supplier_name, i.item_name, sm.quantity, sm.movement_date FROM Suppliers s JOIN Items i ON s.supplier_id = i.supplier_id JOIN StockMovements sm ON i.item_id = sm.item_id WHERE sm.movement_type = 'Received' AND sm.movement_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Procurement Officers", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "What purchase requests for microchips are pending approval?", "response": "SELECT po_id, item_id, quantity, order_date FROM PurchaseOrders WHERE item_id = (SELECT item_id FROM Items WHERE item_name = 'microchips') AND status = 'Pending Approval';"}
{"prompt": "Which suppliers are approved to supply microchips?", "response": "SELECT supplier_id, name, contact FROM Suppliers WHERE supplier_id IN (SELECT supplier_id FROM Items WHERE item_name = 'microchips');"}
{"prompt": "What is the latest price quoted for microchips from each supplier?", "response": "SELECT supplier_id, unit_price FROM Items WHERE item_name = 'microchips';"}
{"prompt": "List all purchase orders placed today.", "response": "SELECT po_id, item_id, supplier_id, quantity, order_date, status FROM PurchaseOrders WHERE order_date = CURRENT_DATE;"}
{"prompt": "Which purchase orders for microchips are marked as urgent?", "response": "SELECT po_id, supplier_id, quantity, status FROM PurchaseOrders WHERE item_id = (SELECT item_id FROM Items WHERE item_name = 'microchips') AND status = 'Urgent';"}
{"prompt": "What is the expected delivery date for each pending purchase order?", "response": "SELECT po_id, item_id, supplier_id, expected_delivery FROM PurchaseOrders WHERE status = 'Pending';"}
{"prompt": "Which suppliers have the most on-time deliveries this month?", "response": "SELECT s.supplier_id, s.name, COUNT(*) AS on_time_deliveries FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN Deliveries d ON po.po_id = d.so_id WHERE d.status = 'Completed' AND d.delivery_date <= po.expected_delivery AND d.delivery_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY s.supplier_id, s.name ORDER BY on_time_deliveries DESC;"}
{"prompt": "What is the total value of purchase orders placed this month?", "response": "SELECT SUM(i.unit_price * po.quantity) AS total_po_value FROM PurchaseOrders po JOIN Items i ON po.item_id = i.item_id WHERE po.order_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "List all suppliers with their contact details.", "response": "SELECT supplier_id, name, contact, email, address FROM Suppliers;"}
{"prompt": "Which purchase orders are overdue for delivery?", "response": "SELECT po_id, item_id, supplier_id, expected_delivery FROM PurchaseOrders WHERE expected_delivery < CURRENT_DATE AND status = 'Pending';"}
{"prompt": "What feedback has been recorded for suppliers this month?", "response": "SELECT supplier_id, summary FROM AnalyticsReports WHERE report_type = 'Supplier Feedback' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which suppliers have the most pending purchase orders?", "response": "SELECT supplier_id, COUNT(*) AS pending_orders FROM PurchaseOrders WHERE status = 'Pending' GROUP BY supplier_id ORDER BY pending_orders DESC;"}
{"prompt": "What are the quantities and items in all open purchase orders?", "response": "SELECT po_id, item_id, quantity FROM PurchaseOrders WHERE status = 'Pending';"}
{"prompt": "Which purchase orders have been completed in the last week?", "response": "SELECT po_id, item_id, supplier_id, quantity, order_date FROM PurchaseOrders WHERE status = 'Completed' AND order_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the average delivery time for suppliers this quarter?", "response": "SELECT s.supplier_id, s.name, AVG(d.delivery_date - po.order_date) AS avg_delivery_days FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN Deliveries d ON po.po_id = d.so_id WHERE po.order_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY s.supplier_id, s.name;"}
{"prompt": "List all invoices processed for payment approval this month.", "response": "SELECT record_id, amount, related_order, record_date FROM FinancialRecords WHERE type = 'Purchase' AND record_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which suppliers have not delivered any orders this month?", "response": "SELECT s.supplier_id, s.name FROM Suppliers s WHERE NOT EXISTS (SELECT 1 FROM PurchaseOrders po JOIN Deliveries d ON po.po_id = d.so_id WHERE po.supplier_id = s.supplier_id AND d.delivery_date >= DATE_TRUNC('month', CURRENT_DATE));"}
{"prompt": "What is the status of all purchase orders for microchips this year?", "response": "SELECT po_id, status, expected_delivery FROM PurchaseOrders WHERE item_id = (SELECT item_id FROM Items WHERE item_name = 'microchips') AND order_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "Show the monthly procurement report with total costs, supplier count, and pending orders.", "response": "SELECT SUM(i.unit_price * po.quantity) AS total_cost, COUNT(DISTINCT po.supplier_id) AS supplier_count, COUNT(*) FILTER (WHERE po.status = 'Pending') AS pending_orders FROM PurchaseOrders po JOIN Items i ON po.item_id = i.item_id WHERE po.order_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which suppliers have delivered all orders on time this year?", "response": "SELECT s.supplier_id, s.name FROM Suppliers s WHERE NOT EXISTS (SELECT 1 FROM PurchaseOrders po JOIN Deliveries d ON po.po_id = d.so_id WHERE po.supplier_id = s.supplier_id AND d.status = 'Completed' AND d.delivery_date > po.expected_delivery AND po.order_date >= DATE_TRUNC('year', CURRENT_DATE));"}
{"prompt": "Sales Team", "response": "nan"}
{"prompt": "Natural Language Question (Anil’s POV)", "response": "SQL Query"}
{"prompt": "What is the current stock level of industrial tools?", "response": "SELECT item_id, item_name, quantity FROM Items WHERE category = 'Industrial Tools';"}
{"prompt": "Which items are available for immediate shipment?", "response": "SELECT item_id, item_name, quantity FROM Items WHERE quantity > 0;"}
{"prompt": "List all sales orders placed by major clients this month.", "response": "SELECT so_id, item_id, quantity, sale_date, customer_name FROM SalesOrders WHERE customer_name = 'Major Client' AND sale_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which sales orders are pending for delivery?", "response": "SELECT so_id, item_id, quantity, customer_name FROM SalesOrders WHERE status = 'Pending';"}
{"prompt": "What are the delivery statuses for all sales orders placed today?", "response": "SELECT so_id, item_id, quantity, customer_name, status FROM SalesOrders WHERE sale_date = CURRENT_DATE;"}
{"prompt": "Who are the top 5 customers by total quantity ordered this quarter?", "response": "SELECT customer_name, SUM(quantity) AS total_ordered FROM SalesOrders WHERE sale_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY customer_name ORDER BY total_ordered DESC LIMIT 5;"}
{"prompt": "What is the total sales value for this month?", "response": "SELECT SUM(i.unit_price * so.quantity) AS total_sales FROM SalesOrders so JOIN Items i ON so.item_id = i.item_id WHERE so.sale_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which products are scheduled for launch this month?", "response": "SELECT item_id, item_name FROM Items WHERE last_updated >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which items are running low in stock and may need to be reordered?", "response": "SELECT item_id, item_name, quantity, reorder_level FROM Items WHERE quantity < reorder_level;"}
{"prompt": "List all completed sales orders for industrial tools.", "response": "SELECT so_id, item_id, quantity, sale_date, customer_name FROM SalesOrders WHERE item_id IN (SELECT item_id FROM Items WHERE category = 'Industrial Tools') AND status = 'Completed';"}
{"prompt": "What is the average quantity per sales order this month?", "response": "SELECT AVG(quantity) FROM SalesOrders WHERE sale_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which sales orders were delivered late in the last month?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date FROM Deliveries d JOIN SalesOrders so ON d.so_id = so.so_id WHERE d.status = 'Delayed' AND d.delivery_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "What are the details of the last 10 sales orders placed?", "response": "SELECT so_id, item_id, quantity, sale_date, customer_name, status FROM SalesOrders ORDER BY sale_date DESC LIMIT 10;"}
{"prompt": "Which products have not been sold in the last 3 months?", "response": "SELECT item_id, item_name FROM Items WHERE item_id NOT IN (SELECT DISTINCT item_id FROM SalesOrders WHERE sale_date >= CURRENT_DATE - INTERVAL '3 months');"}
{"prompt": "List all customers with pending sales orders.", "response": "SELECT DISTINCT customer_name FROM SalesOrders WHERE status = 'Pending';"}
{"prompt": "What is the total value of sales orders for each customer this month?", "response": "SELECT so.customer_name, SUM(i.unit_price * so.quantity) AS total_value FROM SalesOrders so JOIN Items i ON so.item_id = i.item_id WHERE so.sale_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY so.customer_name;"}
{"prompt": "Which items are slow-moving and could be targeted for upselling?", "response": "SELECT i.item_id, i.item_name FROM Items i LEFT JOIN SalesOrders so ON i.item_id = so.item_id AND so.sale_date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY i.item_id, i.item_name HAVING COUNT(so.so_id) < 2;"}
{"prompt": "What are the most popular products sold this year?", "response": "SELECT i.item_id, i.item_name, COUNT(so.so_id) AS sales_count FROM SalesOrders so JOIN Items i ON so.item_id = i.item_id WHERE so.sale_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY i.item_id, i.item_name ORDER BY sales_count DESC;"}
{"prompt": "Which sales orders are scheduled for delivery this week?", "response": "SELECT so_id, item_id, quantity, customer_name FROM SalesOrders WHERE sale_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Who are the customers with the highest number of completed sales orders?", "response": "SELECT customer_name, COUNT(*) AS completed_orders FROM SalesOrders WHERE status = 'Completed' GROUP BY customer_name ORDER BY completed_orders DESC;"}
{"prompt": "Storekeepers", "response": "nan"}
{"prompt": "Natural Language Question (Meena’s POV)", "response": "SQL Query"}
{"prompt": "What shipments are scheduled to arrive at the store today?", "response": "SELECT po_id, item_id, quantity, expected_delivery FROM PurchaseOrders WHERE expected_delivery = CURRENT_DATE AND status = 'Pending';"}
{"prompt": "Which items were received in the store this week?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity, sm.movement_date FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Received' AND sm.movement_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the current stock level of packaging materials?", "response": "SELECT item_id, item_name, quantity FROM Items WHERE category = 'Packaging Materials';"}
{"prompt": "Which items were issued to departments today?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Issued' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "List all items stored in the store by their categories.", "response": "SELECT category, item_id, item_name, quantity FROM Items ORDER BY category, item_name;"}
{"prompt": "What are the details of the last 5 items received at the store?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity, sm.movement_date FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Received' ORDER BY sm.movement_date DESC LIMIT 5;"}
{"prompt": "Which items have low stock and need to be reordered?", "response": "SELECT item_id, item_name, quantity, reorder_level FROM Items WHERE quantity < reorder_level;"}
{"prompt": "What is the total quantity of each item currently in the store?", "response": "SELECT item_id, item_name, quantity FROM Items;"}
{"prompt": "Which items have been labeled and updated today?", "response": "SELECT item_id, item_name, last_updated FROM Items WHERE last_updated::date = CURRENT_DATE;"}
{"prompt": "What are the stock movements recorded for packaging materials this month?", "response": "SELECT sm.movement_id, sm.movement_type, sm.quantity, sm.movement_date FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE i.category = 'Packaging Materials' AND sm.movement_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which items have discrepancies reported during today’s stock count?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Discrepancy' AND sm.movement_date::date = CURRENT_DATE;"}
{"prompt": "What is the total number of items issued to departments this month?", "response": "SELECT SUM(quantity) FROM StockMovements WHERE movement_type = 'Issued' AND movement_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which items have not been received in the last 30 days?", "response": "SELECT item_id, item_name FROM Items WHERE item_id NOT IN (SELECT DISTINCT item_id FROM StockMovements WHERE movement_type = 'Received' AND movement_date >= CURRENT_DATE - INTERVAL '30 days');"}
{"prompt": "What is the most frequently issued item this month?", "response": "SELECT item_id, COUNT(*) AS issue_count FROM StockMovements WHERE movement_type = 'Issued' AND movement_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY item_id ORDER BY issue_count DESC LIMIT 1;"}
{"prompt": "Which suppliers delivered items to the store this week?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id WHERE po.expected_delivery >= CURRENT_DATE - INTERVAL '7 days' AND po.status = 'Completed';"}
{"prompt": "What is the total value of stock currently in the store?", "response": "SELECT SUM(unit_price * quantity) AS total_stock_value FROM Items;"}
{"prompt": "Which items have been updated with new labels in the past week?", "response": "SELECT item_id, item_name, last_updated FROM Items WHERE last_updated >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the details of all stock issued to the Maintenance department this month?", "response": "SELECT sm.movement_id, sm.item_id, i.item_name, sm.quantity, sm.movement_date FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_type = 'Issued' AND sm.movement_date >= DATE_TRUNC('month', CURRENT_DATE) AND sm.handled_by = (SELECT employee_id FROM Employees WHERE role = 'Maintenance');"}
{"prompt": "Which items have the highest unit price in the store?", "response": "SELECT item_id, item_name, unit_price FROM Items ORDER BY unit_price DESC LIMIT 5;"}
{"prompt": "What is the difference between the physical stock count and system records for today?", "response": "SELECT item_id, item_name, quantity AS system_quantity, [physical_count] AS physical_quantity, ([physical_count] - quantity) AS difference FROM Items;"}
{"prompt": "nan", "response": "-- Replace [physical_count] with actual count during reconciliation."}
{"prompt": "Logistics/Delivery Staff", "response": "nan"}
{"prompt": "Natural Language Question (Example Values Used)", "response": "SQL Query"}
{"prompt": "What deliveries are scheduled for Arjun today?", "response": "SELECT delivery_id, so_id, delivery_date, status FROM Deliveries WHERE delivered_by = 7 AND delivery_date = '2025-06-10';"}
{"prompt": "Which shipments does Arjun need to deliver to ABC Manufacturing today?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date, s.customer_name FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE d.delivered_by = 7 AND d.delivery_date = '2025-06-10' AND s.customer_name = 'ABC Manufacturing';"}
{"prompt": "What are the details of all outgoing deliveries assigned to Arjun this week?", "response": "SELECT delivery_id, so_id, delivery_date, status FROM Deliveries WHERE delivered_by = 7 AND delivery_date BETWEEN '2025-06-10' AND '2025-06-17';"}
{"prompt": "Which packages has Arjun scanned and marked as delivered today?", "response": "SELECT delivery_id, so_id, delivery_date, status FROM Deliveries WHERE delivered_by = 7 AND status = 'Completed' AND delivery_date = '2025-06-10';"}
{"prompt": "What is the delivery status of each order Arjun handled this month?", "response": "SELECT delivery_id, so_id, delivery_date, status FROM Deliveries WHERE delivered_by = 7 AND delivery_date >= '2025-06-01';"}
{"prompt": "Which deliveries assigned to Arjun were delayed this week?", "response": "SELECT delivery_id, so_id, delivery_date FROM Deliveries WHERE delivered_by = 7 AND status = 'Delayed' AND delivery_date >= '2025-06-03';"}
{"prompt": "List all orders where Arjun reported damaged goods during delivery this month.", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date FROM Deliveries d JOIN SystemLogs l ON d.delivery_id = l.user_id WHERE d.delivered_by = 7 AND l.action = 'Damaged Goods Reported' AND d.delivery_date >= '2025-06-01';"}
{"prompt": "What is the total number of deliveries Arjun completed this month?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivered_by = 7 AND status = 'Completed' AND delivery_date >= '2025-06-01';"}
{"prompt": "Which delivery routes did Arjun use today?", "response": "SELECT DISTINCT l.description AS route_info FROM SystemLogs l WHERE l.user_id = 7 AND l.action = 'Route Confirmed' AND l.timestamp::date = '2025-06-10';"}
{"prompt": "Which deliveries assigned to Arjun are still pending?", "response": "SELECT delivery_id, so_id, delivery_date FROM Deliveries WHERE delivered_by = 7 AND status = 'Pending';"}
{"prompt": "What feedback did Arjun upload for today’s deliveries?", "response": "SELECT description FROM SystemLogs WHERE user_id = 7 AND action = 'Delivery Feedback' AND timestamp::date = '2025-06-10';"}
{"prompt": "Which clients received deliveries from Arjun this week?", "response": "SELECT DISTINCT s.customer_name FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE d.delivered_by = 7 AND d.delivery_date >= '2025-06-03';"}
{"prompt": "What is the average delivery time for Arjun’s completed deliveries this month?", "response": "SELECT AVG(d.delivery_date - s.sale_date) AS avg_delivery_days FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE d.delivered_by = 7 AND d.status = 'Completed' AND d.delivery_date >= '2025-06-01';"}
{"prompt": "Which deliveries assigned to Arjun had issues reported (traffic, delay, or damage) this month?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date, l.description AS issue FROM Deliveries d JOIN SystemLogs l ON d.delivery_id = l.user_id WHERE d.delivered_by = 7 AND l.action IN ('Delayed', 'Damaged Goods Reported', 'Traffic Issue') AND d.delivery_date >= '2025-06-01';"}
{"prompt": "What is the list of all completed deliveries to warehouses by Arjun this month?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE d.delivered_by = 7 AND d.status = 'Completed' AND s.customer_name LIKE '%Warehouse%' AND d.delivery_date >= '2025-06-01';"}
{"prompt": "Which deliveries assigned to Arjun were completed on time this week?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE d.delivered_by = 7 AND d.status = 'Completed' AND d.delivery_date <= s.sale_date + INTERVAL '3 days' AND d.delivery_date >= '2025-06-03';"}
{"prompt": "What proof of delivery did Arjun upload for today’s shipments?", "response": "SELECT description FROM SystemLogs WHERE user_id = 7 AND action = 'Proof of Delivery Uploaded' AND timestamp::date = '2025-06-10';"}
{"prompt": "What is the total number of deliveries Arjun has pending for this week?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivered_by = 7 AND status = 'Pending' AND delivery_date BETWEEN '2025-06-10' AND '2025-06-17';"}
{"prompt": "Which of Arjun’s deliveries this month received positive customer feedback?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date FROM Deliveries d JOIN SystemLogs l ON d.delivery_id = l.user_id WHERE d.delivered_by = 7 AND l.action = 'Delivery Feedback' AND l.description like '%positive%' AND d.delivery_date >= '2025-06-01';"}
{"prompt": "What are the details of all deliveries Arjun made to the client 'ABC Manufacturing' this year?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date, d.status FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE d.delivered_by = 7 AND s.customer_name = 'ABC Manufacturing' AND d.delivery_date >= '2025-01-01';"}
{"prompt": "Finance/Accounts Department", "response": "nan"}
{"prompt": "Natural Language Question (Riya’s POV)", "response": "SQL Query"}
{"prompt": "What purchase invoices are pending payment approval today?", "response": "SELECT record_id, amount, related_order, record_date FROM FinancialRecords WHERE type = 'Purchase' AND record_date = '2025-06-10' AND amount > 0;"}
{"prompt": "Which suppliers have outstanding payments as of today?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE fr.type = 'Purchase' AND fr.amount > 0 AND fr.record_date <= '2025-06-10' AND po.status != 'Completed';"}
{"prompt": "What is the total value of payments processed for TechParts Ltd. this month?", "response": "SELECT SUM(amount) FROM FinancialRecords WHERE type = 'Purchase' AND related_order IN (SELECT po_id FROM PurchaseOrders WHERE supplier_id = 3) AND record_date >= '2025-06-01';"}
{"prompt": "List all purchase orders and their payment status for Global Packaging Inc.", "response": "SELECT po.po_id, po.quantity, fr.amount, fr.record_date FROM PurchaseOrders po LEFT JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE po.supplier_id = 8;"}
{"prompt": "Which purchase orders have been paid in full this quarter?", "response": "SELECT po.po_id, po.quantity, fr.amount FROM PurchaseOrders po JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE fr.type = 'Purchase' AND fr.amount >= po.quantity * (SELECT unit_price FROM Items WHERE item_id = po.item_id) AND fr.record_date >= '2025-04-01';"}
{"prompt": "What is the total inventory value as of today?", "response": "SELECT SUM(unit_price * quantity) AS total_inventory_value FROM Items;"}
{"prompt": "Which items have been written off due to damage this month?", "response": "SELECT i.item_id, i.item_name, sm.quantity FROM Items i JOIN StockMovements sm ON i.item_id = sm.item_id WHERE sm.movement_type = 'Damaged' AND sm.movement_date >= '2025-06-01';"}
{"prompt": "What is the depreciation expense recorded for inventory this month?", "response": "SELECT SUM(amount) FROM FinancialRecords WHERE type = 'Depreciation' AND record_date >= '2025-06-01';"}
{"prompt": "List all financial records related to obsolete items this year.", "response": "SELECT record_id, amount, related_order, record_date FROM FinancialRecords WHERE type = 'Write-Off' AND record_date >= '2025-01-01';"}
{"prompt": "Which suppliers received payments in the last 7 days?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE fr.type = 'Purchase' AND fr.record_date >= '2025-06-03';"}
{"prompt": "What is the monthly total of inventory-related expenses for May 2025?", "response": "SELECT SUM(amount) FROM FinancialRecords WHERE record_date >= '2025-05-01' AND record_date < '2025-06-01';"}
{"prompt": "Which purchase orders are still outstanding for payment?", "response": "SELECT po.po_id, po.supplier_id, po.quantity FROM PurchaseOrders po LEFT JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE fr.record_id IS NULL OR fr.amount < po.quantity * (SELECT unit_price FROM Items WHERE item_id = po.item_id);"}
{"prompt": "What are the details of all payments processed for SafeEquip Suppliers this year?", "response": "SELECT fr.record_id, fr.amount, fr.related_order, fr.record_date FROM FinancialRecords fr WHERE fr.type = 'Purchase' AND fr.related_order IN (SELECT po_id FROM PurchaseOrders WHERE supplier_id = 12) AND fr.record_date >= '2025-01-01';"}
{"prompt": "What is the total value of inventory write-offs this quarter?", "response": "SELECT SUM(amount) FROM FinancialRecords WHERE type = 'Write-Off' AND record_date >= '2025-04-01';"}
{"prompt": "Which items have the highest write-off amounts this month?", "response": "SELECT i.item_id, i.item_name, SUM(fr.amount) AS writeoff_total FROM Items i JOIN PurchaseOrders po ON i.item_id = po.item_id JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE fr.type = 'Write-Off' AND fr.record_date >= '2025-06-01' GROUP BY i.item_id, i.item_name ORDER BY writeoff_total DESC LIMIT 5;"}
{"prompt": "List all financial records created by Riya today.", "response": "SELECT record_id, type, amount, related_order, record_date FROM FinancialRecords WHERE record_date = '2025-06-10';"}
{"prompt": "Which approved purchase orders have not yet been paid?", "response": "SELECT po.po_id, po.supplier_id, po.quantity FROM PurchaseOrders po LEFT JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE po.status = 'Approved' AND (fr.record_id IS NULL OR fr.amount = 0);"}
{"prompt": "What is the variance between budgeted and actual inventory expenses for May 2025? (Assume budgeted = 150,000)", "response": "SELECT 150000 - SUM(amount) AS budget_variance FROM FinancialRecords WHERE record_date >= '2025-05-01' AND record_date < '2025-06-01';"}
{"prompt": "What is the breakdown of inventory expenses by type for this month?", "response": "SELECT type, SUM(amount) AS total FROM FinancialRecords WHERE record_date >= '2025-06-01' GROUP BY type;"}
{"prompt": "Which suppliers have the highest total payments received this year?", "response": "SELECT s.supplier_id, s.name, SUM(fr.amount) AS total_paid FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN FinancialRecords fr ON po.po_id = fr.related_order WHERE fr.type = 'Purchase' AND fr.record_date >= '2025-01-01' GROUP BY s.supplier_id, s.name ORDER BY total_paid DESC LIMIT 5;"}
{"prompt": "Supply Chain Managers", "response": "nan"}
{"prompt": "Natural Language Question (Kavita’s POV)", "response": "SQL Query"}
{"prompt": "What are the current stock levels for all items across warehouses?", "response": "SELECT item_id, item_name, quantity FROM Items;"}
{"prompt": "Which suppliers have delayed shipments this month?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id WHERE po.status = 'Delayed' AND po.order_date >= '2025-06-01';"}
{"prompt": "What is the average lead time for deliveries from TechParts Ltd.?", "response": "SELECT AVG(d.delivery_date - po.order_date) AS avg_lead_time FROM PurchaseOrders po JOIN Deliveries d ON po.po_id = d.so_id WHERE po.supplier_id = 3;"}
{"prompt": "Which items are at risk of stockout (below reorder level) in the Central Warehouse?", "response": "SELECT item_id, item_name, quantity, reorder_level FROM Items WHERE quantity < reorder_level;"}
{"prompt": "What is the total value of inventory currently in the North Depot?", "response": "SELECT SUM(unit_price * quantity) AS total_value FROM Items WHERE supplier_id = 5;"}
{"prompt": "List all purchase orders from SafeEquip Suppliers that are still pending.", "response": "SELECT po_id, item_id, quantity, expected_delivery FROM PurchaseOrders WHERE supplier_id = 12 AND status = 'Pending';"}
{"prompt": "Which sales orders are scheduled for delivery this week?", "response": "SELECT so_id, item_id, quantity, customer_name FROM SalesOrders WHERE sale_date BETWEEN '2025-06-10' AND '2025-06-17';"}
{"prompt": "What is the order fulfillment rate for the last month?", "response": "SELECT (SELECT count(*) FROM SalesOrders WHERE status = 'Completed' AND sale_date >= '2025-05-10')::decimal / NULLIF((SELECT count(*) FROM SalesOrders WHERE sale_date >= '2025-05-10'), 0) AS fulfillment_rate;"}
{"prompt": "Which items have the highest inventory turnover in the past quarter?", "response": "SELECT i.item_id, i.item_name, COUNT(sm.movement_id) AS turnover FROM Items i JOIN StockMovements sm ON i.item_id = sm.item_id WHERE sm.movement_date >= '2025-03-10' GROUP BY i.item_id, i.item_name ORDER BY turnover DESC LIMIT 5;"}
{"prompt": "What are the transportation costs recorded this month?", "response": "SELECT SUM(amount) AS total_transportation_cost FROM FinancialRecords WHERE type = 'Transportation' AND record_date >= '2025-06-01';"}
{"prompt": "Which suppliers have the shortest average delivery times this year?", "response": "SELECT s.supplier_id, s.name, AVG(d.delivery_date - po.order_date) AS avg_delivery_time FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN Deliveries d ON po.po_id = d.so_id WHERE po.order_date >= '2025-01-01' GROUP BY s.supplier_id, s.name ORDER BY avg_delivery_time ASC LIMIT 5;"}
{"prompt": "What is the current status of all shipments from Global Packaging Inc.?", "response": "SELECT po_id, item_id, quantity, status, expected_delivery FROM PurchaseOrders WHERE supplier_id = 8;"}
{"prompt": "Which customers have the most completed orders this quarter?", "response": "SELECT customer_name, COUNT(*) AS completed_orders FROM SalesOrders WHERE status = 'Completed' AND sale_date >= '2025-04-01' GROUP BY customer_name ORDER BY completed_orders DESC LIMIT 5;"}
{"prompt": "What is the average inventory holding period for microchips?", "response": "SELECT AVG(sm.movement_date - po.order_date) AS avg_holding_days FROM StockMovements sm JOIN PurchaseOrders po ON sm.item_id = po.item_id WHERE sm.item_id = 101 AND sm.movement_type = 'Dispatched';"}
{"prompt": "Which items have been moved between warehouses this month?", "response": "SELECT DISTINCT sm.item_id, i.item_name FROM StockMovements sm JOIN Items i ON sm.item_id = i.item_id WHERE sm.movement_date >= '2025-06-01' AND sm.movement_type = 'Transferred';"}
{"prompt": "What is the value of obsolete inventory written off this month?", "response": "SELECT SUM(amount) FROM FinancialRecords WHERE type = 'Write-Off' AND record_date >= '2025-06-01';"}
{"prompt": "Which purchase orders are overdue for delivery as of today?", "response": "SELECT po_id, item_id, supplier_id, expected_delivery FROM PurchaseOrders WHERE expected_delivery < '2025-06-10' AND status = 'Pending';"}
{"prompt": "What are the details of all deliveries made to ABC Manufacturing this year?", "response": "SELECT d.delivery_id, d.so_id, d.delivery_date, d.status FROM Deliveries d JOIN SalesOrders s ON d.so_id = s.so_id WHERE s.customer_name = 'ABC Manufacturing' AND d.delivery_date >= '2025-01-01';"}
{"prompt": "Which warehouses have the highest total stock value?", "response": "SELECT supplier_id AS warehouse_id, SUM(unit_price * quantity) AS stock_value FROM Items GROUP BY supplier_id ORDER BY stock_value DESC LIMIT 3;"}
{"prompt": "What are the main causes of shipment delays reported this quarter?", "response": "SELECT l.description, COUNT(*) AS delay_count FROM SystemLogs l WHERE l.action = 'Delayed' AND l.timestamp >= '2025-04-01' GROUP BY l.description ORDER BY delay_count DESC;"}
{"prompt": "IT/System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query"}
{"prompt": "What were the most recent login attempts in the system today?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE action = 'Login Attempt' AND timestamp::date = '2025-06-10' ORDER BY timestamp DESC;"}
{"prompt": "Which users had failed login attempts in the last 24 hours?", "response": "SELECT user_id, COUNT(*) AS failed_attempts FROM SystemLogs WHERE action = 'Login Failed' AND timestamp >= '2025-06-09 14:44:00' GROUP BY user_id;"}
{"prompt": "List all system backups performed this week.", "response": "SELECT log_id, user_id, action, timestamp, description FROM SystemLogs WHERE action = 'Backup Completed' AND timestamp >= '2025-06-03';"}
{"prompt": "Which users have admin privileges?", "response": "SELECT employee_id, name, role FROM Employees WHERE role = 'Admin';"}
{"prompt": "What are the details of all software updates applied this month?", "response": "SELECT log_id, user_id, action, timestamp, description FROM SystemLogs WHERE action = 'Software Update' AND timestamp >= '2025-06-01';"}
{"prompt": "Who accessed sensitive inventory data today?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action = 'Accessed Sensitive Data' AND timestamp::date = '2025-06-10';"}
{"prompt": "Which users have not logged in during the past 30 days?", "response": "SELECT employee_id, name FROM Employees WHERE employee_id NOT IN (SELECT DISTINCT user_id FROM SystemLogs WHERE action = 'Login Success' AND timestamp >= '2025-05-11');"}
{"prompt": "List all security incidents reported this year.", "response": "SELECT log_id, user_id, timestamp, description FROM SystemLogs WHERE action = 'Security Incident' AND timestamp >= '2025-01-01';"}
{"prompt": "What patches are pending installation as of today?", "response": "SELECT log_id, description, timestamp FROM SystemLogs WHERE action = 'Patch Pending' AND timestamp::date = '2025-06-10';"}
{"prompt": "Which users had their roles or permissions changed this week?", "response": "SELECT log_id, user_id, description, timestamp FROM SystemLogs WHERE action = 'Role Changed' AND timestamp >= '2025-06-03';"}
{"prompt": "What technical issues were reported by staff today?", "response": "SELECT log_id, user_id, description, timestamp FROM SystemLogs WHERE action = 'Issue Reported' AND timestamp::date = '2025-06-10';"}
{"prompt": "Who performed the last successful system backup?", "response": "SELECT user_id, timestamp FROM SystemLogs WHERE action = 'Backup Completed' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which users have the highest number of login attempts this month?", "response": "SELECT user_id, COUNT(*) AS login_attempts FROM SystemLogs WHERE action = 'Login Attempt' AND timestamp >= '2025-06-01' GROUP BY user_id ORDER BY login_attempts DESC LIMIT 5;"}
{"prompt": "What errors occurred during data synchronization this week?", "response": "SELECT log_id, user_id, description, timestamp FROM SystemLogs WHERE action = 'Sync Error' AND timestamp >= '2025-06-03';"}
{"prompt": "List all maintenance activities performed in the last 7 days.", "response": "SELECT log_id, user_id, action, description, timestamp FROM SystemLogs WHERE action IN ('Backup Completed', 'Software Update', 'Patch Installed', 'Maintenance') AND timestamp >= '2025-06-03';"}
{"prompt": "Which users accessed the system outside of business hours (before 8 AM or after 8 PM) this week?", "response": "SELECT user_id, timestamp FROM SystemLogs WHERE action = 'Login Success' AND (EXTRACT(HOUR FROM timestamp) < 8 OR EXTRACT(HOUR FROM timestamp) > 20) AND timestamp >= '2025-06-03';"}
{"prompt": "What are the details of all incidents documented today?", "response": "SELECT log_id, user_id, action, description, timestamp FROM SystemLogs WHERE action IN ('Security Incident', 'Issue Reported', 'Patch Pending') AND timestamp::date = '2025-06-10';"}
{"prompt": "Which employees reported login problems this month?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action = 'Login Failed' AND timestamp >= '2025-06-01';"}
{"prompt": "What is the summary of all system activities Rahul performed today?", "response": "SELECT action, description, timestamp FROM SystemLogs WHERE user_id = 18 AND timestamp::date = '2025-06-10';"}
{"prompt": "Which system logs mention 'unauthorized' access this year?", "response": "SELECT log_id, user_id, action, description, timestamp FROM SystemLogs WHERE description like '%unauthorized%' AND timestamp >= '2025-01-01';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Sneha’s POV)", "response": "SQL Query"}
{"prompt": "What are the current stock levels for all items?", "response": "SELECT item_id, item_name, quantity FROM Items;"}
{"prompt": "Which items are at risk of stock shortage (quantity below reorder level)?", "response": "SELECT item_id, item_name, quantity, reorder_level FROM Items WHERE quantity < reorder_level;"}
{"prompt": "What are the top 5 best-selling items this year?", "response": "SELECT i.item_id, i.item_name, SUM(so.quantity) AS total_sold FROM SalesOrders so JOIN Items i ON so.item_id = i.item_id WHERE so.sale_date >= '2025-01-01' GROUP BY i.item_id, i.item_name ORDER BY total_sold DESC LIMIT 5;"}
{"prompt": "Which items have not been sold in the last 3 months?", "response": "SELECT item_id, item_name FROM Items WHERE item_id NOT IN (SELECT DISTINCT item_id FROM SalesOrders WHERE sale_date >= '2025-03-10');"}
{"prompt": "What is the inventory turnover rate for the last quarter?", "response": "SELECT (SELECT count(*) FROM StockMovements WHERE movement_type = 'Dispatched' AND movement_date >= '2025-03-10')::decimal / NULLIF((SELECT count(*) FROM Items),0) AS turnover_rate;"}
{"prompt": "What is the order fulfillment rate for May 2025?", "response": "SELECT (SELECT count(*) FROM SalesOrders WHERE status = 'Completed' AND sale_date >= '2025-05-01' AND sale_date < '2025-06-01')::decimal / NULLIF((SELECT count(*) FROM SalesOrders WHERE sale_date >= '2025-05-01' AND sale_date < '2025-06-01'),0) AS fulfillment_rate;"}
{"prompt": "Which suppliers have the shortest average lead time this year?", "response": "SELECT s.supplier_id, s.name, AVG(d.delivery_date - po.order_date) AS avg_lead_time FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN Deliveries d ON po.po_id = d.so_id WHERE po.order_date >= '2025-01-01' GROUP BY s.supplier_id, s.name ORDER BY avg_lead_time ASC LIMIT 5;"}
{"prompt": "What is the monthly sales trend for industrial drills in 2025?", "response": "SELECT DATE_TRUNC('month', so.sale_date) AS month, SUM(so.quantity) AS total_sold FROM SalesOrders so JOIN Items i ON so.item_id = i.item_id WHERE i.item_name = 'industrial drill' AND so.sale_date >= '2025-01-01' GROUP BY month ORDER BY month;"}
{"prompt": "Which items have the highest average unit price?", "response": "SELECT item_id, item_name, unit_price FROM Items ORDER BY unit_price DESC LIMIT 5;"}
{"prompt": "What is the average quantity per sales order for packaging tape this month?", "response": "SELECT AVG(quantity) FROM SalesOrders WHERE item_id = 202 AND sale_date >= '2025-06-01';"}
{"prompt": "Which customers placed the most orders this quarter?", "response": "SELECT customer_name, COUNT(*) AS order_count FROM SalesOrders WHERE sale_date >= '2025-04-01' GROUP BY customer_name ORDER BY order_count DESC LIMIT 5;"}
{"prompt": "What is the total value of inventory currently in stock?", "response": "SELECT SUM(unit_price * quantity) AS total_inventory_value FROM Items;"}
{"prompt": "Which items have the highest number of stock movements this month?", "response": "SELECT i.item_id, i.item_name, COUNT(sm.movement_id) AS movement_count FROM Items i JOIN StockMovements sm ON i.item_id = sm.item_id WHERE sm.movement_date >= '2025-06-01' GROUP BY i.item_id, i.item_name ORDER BY movement_count DESC LIMIT 5;"}
{"prompt": "What is the average delivery time for completed purchase orders in June 2025?", "response": "SELECT AVG(d.delivery_date - po.order_date) AS avg_delivery_days FROM PurchaseOrders po JOIN Deliveries d ON po.po_id = d.so_id WHERE po.status = 'Completed' AND d.delivery_date >= '2025-06-01';"}
{"prompt": "Which suppliers have the most late deliveries this year?", "response": "SELECT s.supplier_id, s.name, COUNT(*) AS late_deliveries FROM Suppliers s JOIN PurchaseOrders po ON s.supplier_id = po.supplier_id JOIN Deliveries d ON po.po_id = d.so_id WHERE d.status = 'Delayed' AND d.delivery_date >= '2025-01-01' GROUP BY s.supplier_id, s.name ORDER BY late_deliveries DESC LIMIT 5;"}
{"prompt": "What is the breakdown of sales by item category for this month?", "response": "SELECT i.category, SUM(so.quantity) AS total_sold FROM SalesOrders so JOIN Items i ON so.item_id = i.item_id WHERE so.sale_date >= '2025-06-01' GROUP BY i.category ORDER BY total_sold DESC;"}
{"prompt": "Which items are slow-moving (less than 2 sales orders in the last 3 months)?", "response": "SELECT i.item_id, i.item_name FROM Items i LEFT JOIN SalesOrders so ON i.item_id = so.item_id AND so.sale_date >= '2025-03-10' GROUP BY i.item_id, i.item_name HAVING COUNT(so.so_id) < 2;"}
{"prompt": "What is the average unit price for electronic components in stock?", "response": "SELECT AVG(unit_price) FROM Items WHERE category = 'electronic components';"}
{"prompt": "What is the trend of supplier performance scores recorded in analytics reports this year?", "response": "SELECT generated_on, summary FROM AnalyticsReports WHERE report_type = 'Supplier Performance' AND generated_on >= '2025-01-01' ORDER BY generated_on;"}
{"prompt": "What is the percentage of orders fulfilled on time this quarter?", "response": "SELECT (SELECT count(*) FROM Deliveries d JOIN SalesOrders so ON d.so_id = so.so_id WHERE d.status = 'Completed' AND d.delivery_date <= so.sale_date + INTERVAL '3 days' AND d.delivery_date >= '2025-04-01')::decimal / NULLIF((SELECT count(*) FROM SalesOrders WHERE sale_date >= '2025-04-01'),0) * 100 AS on_time_fulfillment_rate;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "SocialMediaApp", "response": "nan"}
{"prompt": "Regular Users", "response": "nan"}
{"prompt": "Natural Language Question (Aarav’s POV)", "response": "SQL Query"}
{"prompt": "What are the latest posts from users I follow?", "response": "SELECT p.post_id, p.content, p.media_url, p.posted_on FROM Posts p JOIN Follows f ON p.user_id = f.followed_id WHERE f.follower_id = 101 ORDER BY p.posted_on DESC;"}
{"prompt": "How many likes did my recent event photo post receive?", "response": "SELECT COUNT(*) FROM Likes WHERE post_id = 501;"}
{"prompt": "Who commented on my latest post?", "response": "SELECT u.username, c.content, c.commented_on FROM Comments c JOIN Users u ON c.user_id = u.user_id WHERE c.post_id = 501 ORDER BY c.commented_on DESC;"}
{"prompt": "What are the most recent comments on my posts?", "response": "SELECT c.comment_id, c.content, c.commented_on, p.post_id FROM Comments c JOIN Posts p ON c.post_id = p.post_id WHERE p.user_id = 101 ORDER BY c.commented_on DESC LIMIT 10;"}
{"prompt": "Which of my posts have the highest number of likes?", "response": "SELECT p.post_id, p.content, COUNT(l.like_id) AS like_count FROM Posts p LEFT JOIN Likes l ON p.post_id = l.post_id WHERE p.user_id = 101 GROUP BY p.post_id, p.content ORDER BY like_count DESC LIMIT 1;"}
{"prompt": "Who sent me follow requests today?", "response": "SELECT u.username FROM Users u JOIN FollowRequests fr ON u.user_id = fr.sender_id WHERE fr.receiver_id = 101 AND fr.status = 'Pending' AND fr.requested_on = '2025-06-10';"}
{"prompt": "What trending topics are being discussed today?", "response": "SELECT DISTINCT pf.feature_name FROM ProductFeatures pf WHERE pf.created_on = '2025-06-10';"}
{"prompt": "Which new influencers did I follow today?", "response": "SELECT u.username FROM Users u JOIN Follows f ON u.user_id = f.followed_id WHERE f.follower_id = 101 AND f.followed_on = '2025-06-10' AND u.status = 'Influencer';"}
{"prompt": "What are the details of the post I reported as inappropriate today?", "response": "SELECT p.post_id, p.content, p.media_url FROM Posts p JOIN ModerationLogs m ON m.target_id = p.post_id WHERE m.action_by = 101 AND m.action_type = 'Report' AND m.timestamp::date = '2025-06-10';"}
{"prompt": "What is my current profile visibility setting?", "response": "SELECT visibility FROM Users WHERE user_id = 101;"}
{"prompt": "Which users have I blocked?", "response": "SELECT u.username FROM Users u JOIN Blocks b ON u.user_id = b.blocked_id WHERE b.blocker_id = 101;"}
{"prompt": "What are the most popular hashtags in posts from my college friends?", "response": "SELECT pf.feature_name, COUNT(*) AS usage_count FROM ProductFeatures pf JOIN Posts p ON p.content like '%'"}
{"prompt": "Which of my posts are public and which are private?", "response": "SELECT post_id, content, visibility FROM Posts WHERE user_id = 101;"}
{"prompt": "What are the latest ads displayed to me?", "response": "SELECT ad_id, content FROM Ads WHERE status = 'Active' AND start_date <= '2025-06-10' AND end_date >= '2025-06-10' ORDER BY start_date DESC;"}
{"prompt": "What support tickets have I raised and what is their status?", "response": "SELECT ticket_id, issue, status, created_at, resolved_at FROM SupportTickets WHERE user_id = 101;"}
{"prompt": "Which of my posts have received the most comments?", "response": "SELECT p.post_id, p.content, COUNT(c.comment_id) AS comment_count FROM Posts p LEFT JOIN Comments c ON p.post_id = c.post_id WHERE p.user_id = 101 GROUP BY p.post_id, p.content ORDER BY comment_count DESC LIMIT 1;"}
{"prompt": "What is my account status and when did I join ChatterBox?", "response": "SELECT status, join_date FROM Users WHERE user_id = 101;"}
{"prompt": "Which posts did I like today?", "response": "SELECT p.post_id, p.content FROM Likes l JOIN Posts p ON l.post_id = p.post_id WHERE l.user_id = 101 AND l.liked_on::date = '2025-06-10';"}
{"prompt": "What notifications have I received about new followers or comments today?", "response": "SELECT * FROM Notifications WHERE user_id = 101 AND created_on = '2025-06-10';"}
{"prompt": "What is the summary of my activity for the past week?", "response": "SELECT (SELECT count(*) FROM Posts WHERE user_id = 101 AND posted_on >= '2025-06-03'), (SELECT count(*) FROM Comments WHERE user_id = 101 AND commented_on >= '2025-06-03'), (SELECT COUNT(*) FROM Likes WHERE user_id = 101 AND liked_on >= '2025-06-03');"}
{"prompt": "Content Creators", "response": "nan"}
{"prompt": "Natural Language Question (Nisha’s POV)", "response": "SQL Query"}
{"prompt": "What are the latest posts I have shared on InstaBuzz?", "response": "SELECT post_id, content, media_url, posted_on, visibility FROM Posts WHERE user_id = 201 ORDER BY posted_on DESC;"}
{"prompt": "How many likes did my last travel vlog receive?", "response": "SELECT COUNT(*) FROM Likes WHERE post_id = 601;"}
{"prompt": "What comments did I receive on my latest video post?", "response": "SELECT u.username, c.content, c.commented_on FROM Comments c JOIN Users u ON c.user_id = u.user_id WHERE c.post_id = 601 ORDER BY c.commented_on DESC;"}
{"prompt": "Which of my posts have the highest engagement rate this month?", "response": "SELECT p.post_id, p.content, (COUNT(DISTINCT l.like_id) + COUNT(DISTINCT c.comment_id))::decimal / NULLIF(p_reach.reach,0) AS engagement_rate FROM Posts p LEFT JOIN Likes l ON p.post_id = l.post_id LEFT JOIN Comments c ON p.post_id = c.post_id LEFT JOIN (SELECT post_id, COUNT(DISTINCT user_id) AS reach FROM Likes GROUP BY post_id) p_reach ON p.post_id = p_reach.post_id WHERE p.user_id = 201 AND p.posted_on >= '2025-06-01' GROUP BY p.post_id, p.content, p_reach.reach ORDER BY engagement_rate DESC LIMIT 1;"}
{"prompt": "How many new followers did I gain this week?", "response": "SELECT COUNT(*) FROM Follows WHERE followed_id = 201 AND followed_on >= '2025-06-03';"}
{"prompt": "What is the reach of my last tutorial video?", "response": "SELECT COUNT(DISTINCT user_id) AS reach FROM Likes WHERE post_id = 602;"}
{"prompt": "Which posts are scheduled for future release?", "response": "SELECT post_id, content, posted_on FROM Posts WHERE user_id = 201 AND posted_on > '2025-06-10';"}
{"prompt": "What captions and tags did I add to my latest post?", "response": "SELECT content FROM Posts WHERE post_id = 601;"}
{"prompt": "Which of my posts are currently monetized?", "response": "SELECT post_id, content FROM Posts WHERE user_id = 201 AND visibility = 'Monetized';"}
{"prompt": "What are the insights for my last three video posts (reach, likes, comments)?", "response": "SELECT p.post_id, p.content, (SELECT COUNT(DISTINCT user_id) FROM Likes WHERE post_id = p.post_id) AS reach, (SELECT count(*) FROM Likes WHERE post_id = p.post_id) AS likes, (SELECT count(*) FROM Comments WHERE post_id = p.post_id) AS comments FROM Posts p WHERE p.user_id = 201 ORDER BY p.posted_on DESC LIMIT 3;"}
{"prompt": "Who are my most engaged followers this month?", "response": "SELECT u.username, COUNT(l.like_id) + COUNT(c.comment_id) AS engagement FROM Users u LEFT JOIN Likes l ON u.user_id = l.user_id AND l.liked_on >= '2025-06-01' LEFT JOIN Comments c ON u.user_id = c.user_id AND c.commented_on >= '2025-06-01' WHERE u.user_id IN (SELECT follower_id FROM Follows WHERE followed_id = 201) GROUP BY u.username ORDER BY engagement DESC LIMIT 5;"}
{"prompt": "Which brands did I tag in my posts this month?", "response": "SELECT DISTINCT pf.feature_name FROM ProductFeatures pf JOIN Posts p ON p.content like '%'"}
{"prompt": "What is the status of my support tickets regarding copyright issues?", "response": "SELECT ticket_id, issue, status, created_at, resolved_at FROM SupportTickets WHERE user_id = 201 AND issue like '%copyright%';"}
{"prompt": "Which users commented on my posts this week?", "response": "SELECT DISTINCT u.username FROM Comments c JOIN Users u ON c.user_id = u.user_id WHERE c.post_id IN (SELECT post_id FROM Posts WHERE user_id = 201) AND c.commented_on >= '2025-06-03';"}
{"prompt": "What are the details of the copycat profiles I flagged today?", "response": "SELECT u.user_id, u.username, m.timestamp FROM Users u JOIN ModerationLogs m ON u.user_id = m.target_id WHERE m.action_by = 201 AND m.action_type = 'Report' AND m.target_type = 'User' AND m.timestamp::date = '2025-06-10';"}
{"prompt": "Which posts did I collaborate on with other creators this month?", "response": "SELECT post_id, content FROM Posts WHERE user_id = 201 AND content like '%collab%' AND posted_on >= '2025-06-01';"}
{"prompt": "What are the most recent ads shown to my account?", "response": "SELECT ad_id, content FROM Ads WHERE status = 'Active' AND start_date <= '2025-06-10' AND end_date >= '2025-06-10' ORDER BY start_date DESC;"}
{"prompt": "What is my account status and when did I join InstaBuzz?", "response": "SELECT status, join_date FROM Users WHERE user_id = 201;"}
{"prompt": "What are the latest app features available to creators like me?", "response": "SELECT feature_name, description FROM ProductFeatures WHERE created_on >= '2025-06-01';"}
{"prompt": "What is the summary of my content performance for the past week?", "response": "SELECT (SELECT count(*) FROM Posts WHERE user_id = 201 AND posted_on >= '2025-06-03'), (SELECT count(*) FROM Likes WHERE post_id IN (SELECT post_id FROM Posts WHERE user_id = 201) AND liked_on >= '2025-06-03'), (SELECT COUNT(*) FROM Comments WHERE post_id IN (SELECT post_id FROM Posts WHERE user_id = 201) AND commented_on >= '2025-06-03');"}
{"prompt": "Content Creators", "response": "nan"}
{"prompt": "Natural Language Question (Nisha’s POV)", "response": "SQL Query"}
{"prompt": "What are my most recent posts on InstaBuzz?", "response": "SELECT post_id, content, media_url, posted_on, visibility FROM Posts WHERE user_id = 201 ORDER BY posted_on DESC;"}
{"prompt": "How many likes did my latest travel vlog receive?", "response": "SELECT COUNT(*) FROM Likes WHERE post_id = 601;"}
{"prompt": "What comments did I receive on my latest video post?", "response": "SELECT u.username, c.content, c.commented_on FROM Comments c JOIN Users u ON c.user_id = u.user_id WHERE c.post_id = 601 ORDER BY c.commented_on DESC;"}
{"prompt": "Which of my posts have the highest engagement this month?", "response": "SELECT p.post_id, p.content, (SELECT count(*) FROM Likes l WHERE l.post_id = p.post_id) + (SELECT count(*) FROM Comments c WHERE c.post_id = p.post_id) AS engagement FROM Posts p WHERE p.user_id = 201 AND p.posted_on >= '2025-06-01' ORDER BY engagement DESC LIMIT 1;"}
{"prompt": "How many new followers did I gain this week?", "response": "SELECT COUNT(*) FROM Follows WHERE followed_id = 201 AND followed_on >= '2025-06-03';"}
{"prompt": "What is the reach of my last tutorial video?", "response": "SELECT COUNT(DISTINCT user_id) AS reach FROM Likes WHERE post_id = 602;"}
{"prompt": "Which posts are scheduled for future release?", "response": "SELECT post_id, content, posted_on FROM Posts WHERE user_id = 201 AND posted_on > '2025-06-10';"}
{"prompt": "What captions and tags did I add to my latest post?", "response": "SELECT content FROM Posts WHERE post_id = 601;"}
{"prompt": "Which of my posts are currently monetized?", "response": "SELECT post_id, content FROM Posts WHERE user_id = 201 AND visibility = 'Monetized';"}
{"prompt": "What are the insights for my last three video posts (reach, likes, comments)?", "response": "SELECT p.post_id, p.content, (SELECT COUNT(DISTINCT user_id) FROM Likes WHERE post_id = p.post_id) AS reach, (SELECT count(*) FROM Likes WHERE post_id = p.post_id) AS likes, (SELECT count(*) FROM Comments WHERE post_id = p.post_id) AS comments FROM Posts p WHERE p.user_id = 201 ORDER BY p.posted_on DESC LIMIT 3;"}
{"prompt": "Who are my most engaged followers this month?", "response": "SELECT u.username, COUNT(l.like_id) + COUNT(c.comment_id) AS engagement FROM Users u LEFT JOIN Likes l ON u.user_id = l.user_id AND l.liked_on >= '2025-06-01' LEFT JOIN Comments c ON u.user_id = c.user_id AND c.commented_on >= '2025-06-01' WHERE u.user_id IN (SELECT follower_id FROM Follows WHERE followed_id = 201) GROUP BY u.username ORDER BY engagement DESC LIMIT 5;"}
{"prompt": "Which brands did I tag in my posts this month?", "response": "SELECT DISTINCT pf.feature_name FROM ProductFeatures pf JOIN Posts p ON p.content like '%'"}
{"prompt": "What is the status of my support tickets regarding copyright issues?", "response": "SELECT ticket_id, issue, status, created_at, resolved_at FROM SupportTickets WHERE user_id = 201 AND issue like '%copyright%';"}
{"prompt": "Which users commented on my posts this week?", "response": "SELECT DISTINCT u.username FROM Comments c JOIN Users u ON c.user_id = u.user_id WHERE c.post_id IN (SELECT post_id FROM Posts WHERE user_id = 201) AND c.commented_on >= '2025-06-03';"}
{"prompt": "What are the details of the copycat profiles I flagged today?", "response": "SELECT u.user_id, u.username, m.timestamp FROM Users u JOIN ModerationLogs m ON u.user_id = m.target_id WHERE m.action_by = 201 AND m.action_type = 'Report' AND m.target_type = 'User' AND m.timestamp::date = '2025-06-10';"}
{"prompt": "Which posts did I collaborate on with other creators this month?", "response": "SELECT post_id, content FROM Posts WHERE user_id = 201 AND content like '%collab%' AND posted_on >= '2025-06-01';"}
{"prompt": "What are the most recent ads shown to my account?", "response": "SELECT ad_id, content FROM Ads WHERE status = 'Active' AND start_date <= '2025-06-10' AND end_date >= '2025-06-10' ORDER BY start_date DESC;"}
{"prompt": "What is my account status and when did I join InstaBuzz?", "response": "SELECT status, join_date FROM Users WHERE user_id = 201;"}
{"prompt": "What are the latest app features available to creators like me?", "response": "SELECT feature_name, description FROM ProductFeatures WHERE created_on >= '2025-06-01';"}
{"prompt": "What is the summary of my content performance for the past week?", "response": "SELECT (SELECT count(*) FROM Posts WHERE user_id = 201 AND posted_on >= '2025-06-03') AS posts, (SELECT count(*) FROM Likes WHERE post_id IN (SELECT post_id FROM Posts WHERE user_id = 201) AND liked_on >= '2025-06-03') AS likes, (SELECT COUNT(*) FROM Comments WHERE post_id IN (SELECT post_id FROM Posts WHERE user_id = 201) AND commented_on >= '2025-06-03') AS comments;"}
{"prompt": "Community Moderators", "response": "nan"}
{"prompt": "Natural Language Question (Ravi’s POV)", "response": "SQL Query"}
{"prompt": "What posts have been reported for misinformation today?", "response": "SELECT p.post_id, p.content, m.timestamp FROM Posts p JOIN ModerationLogs m ON m.target_id = p.post_id WHERE m.action_type = 'Report' AND m.timestamp::date = '2025-06-10' AND m.target_type = 'Post' AND m.description like '%misinformation%';"}
{"prompt": "What is the user history for the person whose post was removed for violation?", "response": "SELECT u.user_id, u.username, u.status, u.join_date FROM Users u WHERE u.user_id = 302; -- Replace 302 with the actual user_id"}
{"prompt": "Which posts did I remove today for guideline violations?", "response": "SELECT p.post_id, p.content, m.timestamp FROM Posts p JOIN ModerationLogs m ON m.target_id = p.post_id WHERE m.action_by = 401 AND m.action_type = 'Remove' AND m.timestamp::date = '2025-06-10';"}
{"prompt": "Which users received a warning from me today?", "response": "SELECT u.user_id, u.username, m.timestamp FROM Users u JOIN ModerationLogs m ON m.target_id = u.user_id WHERE m.action_by = 401 AND m.action_type = 'Warn' AND m.timestamp::date = '2025-06-10';"}
{"prompt": "What incidents did I log today as a moderator?", "response": "SELECT mod_id, action_type, target_id, target_type, timestamp FROM ModerationLogs WHERE action_by = 401 AND timestamp::date = '2025-06-10';"}
{"prompt": "Which posts are pending approval in the discussion group?", "response": "SELECT post_id, content, posted_on FROM Posts WHERE visibility = 'Pending';"}
{"prompt": "What are the most recent spam comments flagged today?", "response": "SELECT c.comment_id, c.content, c.commented_on FROM Comments c JOIN ModerationLogs m ON m.target_id = c.comment_id WHERE m.action_type = 'Flag' AND m.timestamp::date = '2025-06-10' AND m.target_type = 'Comment' AND m.description like '%spam%';"}
{"prompt": "Which accounts have been flagged for suspected bot activity this week?", "response": "SELECT u.user_id, u.username, m.timestamp FROM Users u JOIN ModerationLogs m ON m.target_id = u.user_id WHERE m.action_type = 'Flag' AND m.timestamp >= '2025-06-03' AND m.description like '%bot%';"}
{"prompt": "What are the details of the post I reviewed for misinformation today?", "response": "SELECT p.post_id, p.content, p.media_url, p.posted_on FROM Posts p WHERE p.post_id = 701; -- Replace 701 with the actual post_id"}
{"prompt": "Which users have multiple policy violations this month?", "response": "SELECT m.target_id AS user_id, count(*) AS violation_count FROM ModerationLogs m WHERE m.target_type = 'User' AND m.action_type IN ('Warn','Ban') AND m.timestamp >= '2025-06-01' GROUP BY m.target_id HAVING count(*) > 1;"}
{"prompt": "What is the summary of all moderation actions I performed today?", "response": "SELECT action_type, COUNT(*) FROM ModerationLogs WHERE action_by = 401 AND timestamp::date = '2025-06-10' GROUP BY action_type;"}
{"prompt": "Which posts have been approved by me this week?", "response": "SELECT p.post_id, p.content, m.timestamp FROM Posts p JOIN ModerationLogs m ON m.target_id = p.post_id WHERE m.action_by = 401 AND m.action_type = 'Approve' AND m.timestamp >= '2025-06-03';"}
{"prompt": "What are the most common reasons for content removal this quarter?", "response": "SELECT description, COUNT(*) AS removal_count FROM ModerationLogs WHERE action_type = 'Remove' AND timestamp >= '2025-04-01' GROUP BY description ORDER BY removal_count DESC;"}
{"prompt": "Which topics or hashtags have the most recurring policy violations this month?", "response": "SELECT pf.feature_name, COUNT(*) AS violation_count FROM ProductFeatures pf JOIN Posts p ON p.content like '%'"}
{"prompt": "Which users have been banned this year?", "response": "SELECT u.user_id, u.username, m.timestamp FROM Users u JOIN ModerationLogs m ON m.target_id = u.user_id WHERE m.action_type = 'Ban' AND m.timestamp >= '2025-01-01';"}
{"prompt": "What are the details of moderation actions taken on comments today?", "response": "SELECT m.mod_id, m.action_type, m.target_id, c.content, m.timestamp FROM ModerationLogs m JOIN Comments c ON m.target_id = c.comment_id WHERE m.target_type = 'Comment' AND m.timestamp::date = '2025-06-10';"}
{"prompt": "Which posts have been reported the most times this month?", "response": "SELECT m.target_id AS post_id, COUNT(*) AS report_count FROM ModerationLogs m WHERE m.action_type = 'Report' AND m.target_type = 'Post' AND m.timestamp >= '2025-06-01' GROUP BY m.target_id ORDER BY report_count DESC LIMIT 5;"}
{"prompt": "What is the status of all support tickets related to moderation issues this week?", "response": "SELECT ticket_id, issue, status, created_at, resolved_at FROM SupportTickets WHERE issue like '%moderation%' AND created_at >= '2025-06-03';"}
{"prompt": "Which users have appealed moderation actions this month?", "response": "SELECT DISTINCT u.user_id, u.username FROM Users u JOIN SupportTickets st ON u.user_id = st.user_id WHERE st.issue like '%appeal%' AND st.created_at >= '2025-06-01';"}
{"prompt": "What is the trend of policy violations in the 'Health' topic area this quarter?", "response": "SELECT DATE_TRUNC('week', m.timestamp) AS week, COUNT(*) AS violation_count FROM ModerationLogs m JOIN Posts p ON m.target_id = p.post_id WHERE m.action_type IN ('Warn','Remove') AND p.content like '%#Health%' AND m.timestamp >= '2025-04-01' GROUP BY week ORDER BY week;"}
{"prompt": "Customer Support Agents", "response": "nan"}
{"prompt": "Natural Language Question (Aisha’s POV)", "response": "SQL Query"}
{"prompt": "What support tickets are currently open and need my attention?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE status = 'Open';"}
{"prompt": "Which users reported login issues today?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE issue like '%login%' AND created_at::date = '2025-06-10';"}
{"prompt": "What are the details of tickets about hacked accounts this month?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE issue like '%hacked%' AND created_at >= '2025-06-01';"}
{"prompt": "Which tickets have been resolved today?", "response": "SELECT ticket_id, user_id, issue, resolved_at FROM SupportTickets WHERE status = 'Resolved' AND resolved_at::date = '2025-06-10';"}
{"prompt": "What is the average resolution time for tickets resolved this week?", "response": "SELECT AVG(resolved_at - created_at) AS avg_resolution_time FROM SupportTickets WHERE status = 'Resolved' AND resolved_at >= '2025-06-03';"}
{"prompt": "Which users had their accounts recovered this week?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE issue like '%recover%' AND status = 'Resolved' AND resolved_at >= '2025-06-03';"}
{"prompt": "What content removal complaints have been submitted this month?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE issue like '%content removal%' AND created_at >= '2025-06-01';"}
{"prompt": "Which users have appealed content removal decisions this year?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE issue like '%appeal%' AND created_at >= '2025-01-01';"}
{"prompt": "What is the status of all tickets submitted by user_id 123 this month?", "response": "SELECT ticket_id, issue, status, created_at, resolved_at FROM SupportTickets WHERE user_id = 123 AND created_at >= '2025-06-01';"}
{"prompt": "Which unresolved tickets have been open for more than 3 days?", "response": "SELECT ticket_id, user_id, issue, created_at FROM SupportTickets WHERE status != 'Resolved' AND created_at <= '2025-06-07';"}
{"prompt": "What are the most common issues reported this week?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE created_at >= '2025-06-03' GROUP BY issue ORDER BY count DESC;"}
{"prompt": "How many tickets did I resolve today?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'Resolved' AND resolved_at::date = '2025-06-10' AND handled_by = 501; -- Assume handled_by is Aisha's user_id"}
{"prompt": "What are the details of the last 10 tickets I handled?", "response": "SELECT ticket_id, user_id, issue, status, created_at, resolved_at FROM SupportTickets WHERE handled_by = 501 ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which users have submitted multiple tickets this month?", "response": "SELECT user_id, count(*) AS ticket_count FROM SupportTickets WHERE created_at >= '2025-06-01' GROUP BY user_id HAVING count(*) > 1;"}
{"prompt": "What is the status of all tickets escalated for further review?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE status = 'Escalated';"}
{"prompt": "Which tickets were submitted via in-app support today?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE issue like '%in-app%' AND created_at::date = '2025-06-10';"}
{"prompt": "What is the average number of tickets handled per day this month?", "response": "SELECT AVG(ticket_count) FROM (SELECT created_at::date AS day, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= '2025-06-01' GROUP BY day) sub;"}
{"prompt": "Which tickets are still pending for more than a week?", "response": "SELECT ticket_id, user_id, issue, created_at FROM SupportTickets WHERE status = 'Pending' AND created_at <= '2025-06-03';"}
{"prompt": "What are the details of all resolved tickets about account security this month?", "response": "SELECT ticket_id, user_id, issue, resolved_at FROM SupportTickets WHERE issue like '%security%' AND status = 'Resolved' AND resolved_at >= '2025-06-01';"}
{"prompt": "What is the summary of my ticket handling performance for the past week?", "response": "SELECT (SELECT count(*) FROM SupportTickets WHERE handled_by = 501 AND created_at >= '2025-06-03') AS tickets_handled, (SELECT count(*) FROM SupportTickets WHERE handled_by = 501 AND status = 'Resolved' AND resolved_at >= '2025-06-03') AS tickets_resolved;"}
{"prompt": "Advertisers/Marketing Partners", "response": "nan"}
{"prompt": "What active ad campaigns are currently running for my brand?", "response": "SELECT ad_id, content, start_date, end_date, budget, status FROM Ads WHERE advertiser_id = 301 AND status = 'Active' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Which ads are scheduled to start in the next 7 days?", "response": "SELECT ad_id, content, start_date FROM Ads WHERE advertiser_id = 301 AND start_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "What is the total budget allocated for all campaigns started in the last 7 days?", "response": "SELECT SUM(budget) FROM Ads WHERE advertiser_id = 301 AND start_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "How many impressions did my latest video ad receive today?", "response": "SELECT impressions FROM AnalyticsReports WHERE report_type = 'Ad Performance' AND generated_by = 301 AND generated_on = CURRENT_DATE AND summary like '%video%';"}
{"prompt": "What is the click-through rate (CTR) for my current image ad campaign today?", "response": "SELECT (clicks::decimal / NULLIF(impressions,0)) AS ctr FROM AnalyticsReports WHERE report_type = 'Ad Performance' AND generated_by = 301 AND generated_on = CURRENT_DATE AND summary like '%image%';"}
{"prompt": "Which of my ads have the highest conversion rate in the last 7 days?", "response": "SELECT ad_id, summary FROM AnalyticsReports WHERE report_type = 'Ad Performance' AND generated_by = 301 AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE ORDER BY summary DESC LIMIT 1;"}
{"prompt": "What are the start and end dates for all my scheduled ad campaigns?", "response": "SELECT ad_id, start_date, end_date FROM Ads WHERE advertiser_id = 301;"}
{"prompt": "Which ads are currently under review or pending approval?", "response": "SELECT ad_id, content, status FROM Ads WHERE advertiser_id = 301 AND status IN ('Pending', 'Under Review');"}
{"prompt": "What is the performance summary for my last A/B test campaign in the past week?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'A/B Test' AND generated_by = 301 AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which audience segments have the highest engagement with my ads in the past 7 days?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Audience Insights' AND generated_by = 301 AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the details of my current video ad creatives?", "response": "SELECT ad_id, content, start_date, end_date FROM Ads WHERE advertiser_id = 301 AND content like '%video%' AND status = 'Active';"}
{"prompt": "Which days and times were my audience most active this week according to platform insights?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Audience Activity' AND generated_by = 301 AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the status of all ads run by my brand this year?", "response": "SELECT ad_id, content, status FROM Ads WHERE advertiser_id = 301 AND start_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "How many conversions did my latest campaign generate today?", "response": "SELECT conversions FROM AnalyticsReports WHERE report_type = 'Ad Performance' AND generated_by = 301 AND generated_on = CURRENT_DATE ORDER BY report_id DESC LIMIT 1;"}
{"prompt": "What is the average daily spend on ads started in the last 7 days?", "response": "SELECT AVG(budget / (end_date - start_date + 1)) AS avg_daily_spend FROM Ads WHERE advertiser_id = 301 AND start_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Which of my ads have the highest impressions in the last 7 days?", "response": "SELECT ad_id, summary FROM AnalyticsReports WHERE report_type = 'Ad Performance' AND generated_by = 301 AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE ORDER BY summary DESC LIMIT 1;"}
{"prompt": "What ads are expiring in the next 7 days?", "response": "SELECT ad_id, content, end_date FROM Ads WHERE advertiser_id = 301 AND end_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "What are the contact details of my advertiser account?", "response": "SELECT name, email, company FROM Advertisers WHERE advertiser_id = 301;"}
{"prompt": "Which campaigns had budget overruns in the last 7 days?", "response": "SELECT ad_id, content, budget FROM Ads WHERE advertiser_id = 301 AND status = 'Active' AND budget > 10000 AND start_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "What is the downloadable report for my client review meeting today?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = 301 AND generated_on = CURRENT_DATE;"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "Natural Language Question (Karan’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recently released features on BuzzStream?", "response": "SELECT feature_id, feature_name, description, created_on FROM ProductFeatures ORDER BY created_on DESC LIMIT 5;"}
{"prompt": "Which features have been created in the last 7 days?", "response": "SELECT feature_id, feature_name, created_on FROM ProductFeatures WHERE created_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Who created the 'Reactions' feature and when was it added?", "response": "SELECT created_by, created_on FROM ProductFeatures WHERE feature_name = 'Reactions';"}
{"prompt": "What is the current status and summary of the latest analytics report on feature usage?", "response": "SELECT report_type, summary, generated_on FROM AnalyticsReports WHERE report_type = 'Feature Usage' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which features are currently being A/B tested?", "response": "SELECT feature_id, feature_name FROM ProductFeatures WHERE description like '%A/B test%';"}
{"prompt": "What feedback have community moderators submitted about new features this month?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Moderator Feedback' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What are the top 5 most requested features by users?", "response": "SELECT feature_name, COUNT(*) AS request_count FROM ProductFeatures WHERE description like '%user request%' GROUP BY feature_name ORDER BY request_count DESC LIMIT 5;"}
{"prompt": "Which features are scheduled for release in the next 7 days?", "response": "SELECT feature_id, feature_name, created_on FROM ProductFeatures WHERE created_on BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "What is the performance of the 'Reactions' feature in terms of user engagement this week?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Feature Engagement' AND summary like '%Reactions%' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "What are the main pain points reported by users in the last 7 days?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'User Feedback' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Which features were developed by the engineering team in the last month?", "response": "SELECT feature_id, feature_name, created_on FROM ProductFeatures WHERE created_by IN (SELECT employee_id FROM Employees WHERE role = 'Engineer') AND created_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What are the most common issues flagged by moderators regarding new features?", "response": "SELECT summary, generated_on FROM AnalyticsReports WHERE report_type = 'Moderator Feedback' AND summary like '%issue%' ORDER BY generated_on DESC;"}
{"prompt": "Which features have received the most positive feedback in user surveys this quarter?", "response": "SELECT feature_name, COUNT(*) AS positive_feedback FROM ProductFeatures WHERE description like '%positive%' AND created_on >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY feature_name ORDER BY positive_feedback DESC LIMIT 3;"}
{"prompt": "What is the timeline for all feature releases this year?", "response": "SELECT feature_name, created_on FROM ProductFeatures WHERE created_on >= DATE_TRUNC('year', CURRENT_DATE) ORDER BY created_on;"}
{"prompt": "Which features are currently in the product roadmap for the next quarter?", "response": "SELECT feature_id, feature_name, description FROM ProductFeatures WHERE description like '%roadmap%' AND created_on >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What is the result of the most recent compliance check on new features?", "response": "SELECT check_id, check_type, result, checked_on FROM ComplianceChecks WHERE check_type = 'Feature' ORDER BY checked_on DESC LIMIT 1;"}
{"prompt": "Which features have been updated or enhanced in the last 7 days?", "response": "SELECT feature_id, feature_name, description, created_on FROM ProductFeatures WHERE description like '%update%' AND created_on BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Who are the top contributors to feature development this year?", "response": "SELECT created_by, COUNT(*) AS features_created FROM ProductFeatures WHERE created_on >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY created_by ORDER BY features_created DESC LIMIT 5;"}
{"prompt": "What are the most recent system logs related to feature deployment?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action like '%feature deploy%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "What is the overall user adoption rate for new features released this month?", "response": "SELECT report_type, summary FROM AnalyticsReports WHERE report_type = 'Feature Adoption' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE) ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "App Developers", "response": "nan"}
{"prompt": "Natural Language Question (Sahil’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent error logs related to the chat module?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action like '%chat%' AND description like '%error%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users reported issues with unresponsive chat today?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE issue like '%chat%' AND created_at::date = CURRENT_DATE;"}
{"prompt": "What server response time issues have been logged in the last 7 days?", "response": "SELECT log_id, timestamp, description FROM SystemLogs WHERE description like '%response time%' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What API-related errors have occurred this week?", "response": "SELECT log_id, action, timestamp, description FROM SystemLogs WHERE action like '%API%' AND description like '%error%' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which support tickets are open for chat module problems?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE issue like '%chat%' AND status = 'Open';"}
{"prompt": "What is the status of the latest patch I pushed to production?", "response": "SELECT log_id, action, timestamp, description FROM SystemLogs WHERE action like '%patch%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which system logs mention the Stories module in the last 7 days?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE description like '%Stories%' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What feedback did the product team provide on the latest build demo?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Product Feedback' AND generated_on = CURRENT_DATE;"}
{"prompt": "Which support tickets have been resolved for Stories module issues this week?", "response": "SELECT ticket_id, user_id, issue, resolved_at FROM SupportTickets WHERE issue like '%Stories%' AND status = 'Resolved' AND resolved_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the most recent compliance checks for new features?", "response": "SELECT check_id, content_id, check_type, result, checked_on FROM ComplianceChecks WHERE check_type = 'Feature' ORDER BY checked_on DESC LIMIT 5;"}
{"prompt": "Which users reported bugs in the voice filter feature?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE issue like '%voice filter%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the release date and features of the latest app version?", "response": "SELECT version, release_date, features FROM AppVersions ORDER BY release_date DESC LIMIT 1;"}
{"prompt": "Which system logs mention UI feedback from the product team?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE description like '%UI feedback%' ORDER BY timestamp DESC;"}
{"prompt": "What is the timeline of all patches applied in the last month?", "response": "SELECT log_id, action, timestamp, description FROM SystemLogs WHERE action like '%patch%' AND timestamp >= CURRENT_DATE - INTERVAL '1 month' ORDER BY timestamp;"}
{"prompt": "Which support tickets are still pending for Android users?", "response": "SELECT ticket_id, user_id, issue, status FROM SupportTickets WHERE issue like '%Android%' AND status = 'Pending';"}
{"prompt": "What are the details of all unit tests written for the next release?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Unit Test' AND generated_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which app versions included updates to the Stories module?", "response": "SELECT version, release_date, features FROM AppVersions WHERE features like '%Stories%';"}
{"prompt": "What are the most common technical issues reported by users this week?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which compliance checks failed for the voice filter feature?", "response": "SELECT check_id, result, checked_on FROM ComplianceChecks WHERE check_type = 'Feature' AND content_id = (SELECT feature_id FROM ProductFeatures WHERE feature_name = 'Voice Filter') AND result = 'Failed';"}
{"prompt": "What is the summary of all development activities logged today?", "response": "SELECT action, description, timestamp FROM SystemLogs WHERE timestamp::date = CURRENT_DATE;"}
{"prompt": "System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent system logs related to database latency issues?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action like '%latency%' OR description like '%latency%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which servers had security patches applied today?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action = 'Security Patch Applied' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "What are the details of the last 5 traffic rerouting actions?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action like '%reroute%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "Which user access permissions were updated this week?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action = 'Permission Updated' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Who are the new developers added to the system this week?", "response": "SELECT user_id, username, join_date FROM Users WHERE join_date >= CURRENT_DATE - INTERVAL '7 days' AND status = 'Active';"}
{"prompt": "Which users had unusual login patterns in the last 7 days?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action = 'Login Attempt' AND (description like '%unusual%' OR description like '%failed%') AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the details of all completed backups this week?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action = 'Backup Completed' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which database clusters have experienced high latency this month?", "response": "SELECT log_id, description, timestamp FROM SystemLogs WHERE description like '%database cluster%' AND description like '%latency%' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What critical patches have been applied to Linux servers this month?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action = 'Security Patch Applied' AND description like '%Linux%' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which users were granted new access permissions today?", "response": "SELECT log_id, admin_id, description, timestamp FROM SystemLogs WHERE action = 'Permission Granted' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "What system logs show failed login attempts this week?", "response": "SELECT log_id, user_id, action, timestamp, description FROM SystemLogs WHERE action = 'Login Failed' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which backup actions failed in the last 7 days?", "response": "SELECT log_id, admin_id, action, timestamp, description FROM SystemLogs WHERE action = 'Backup Failed' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the details of all changes documented today?", "response": "SELECT log_id, admin_id, action, description, timestamp FROM SystemLogs WHERE action IN ('Permission Updated', 'Patch Applied', 'Backup Completed', 'Traffic Rerouted') AND timestamp::date = CURRENT_DATE;"}
{"prompt": "Which users have admin privileges as of today?", "response": "SELECT user_id, username, status FROM Users WHERE status = 'Admin';"}
{"prompt": "What are the upcoming scheduled maintenance tasks for this week?", "response": "SELECT log_id, admin_id, action, description, timestamp FROM SystemLogs WHERE action = 'Maintenance Scheduled' AND timestamp BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Which users accessed sensitive data in the last 7 days?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action = 'Accessed Sensitive Data' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the summary of all system activities logged today?", "response": "SELECT action, description, timestamp FROM SystemLogs WHERE timestamp::date = CURRENT_DATE;"}
{"prompt": "Which users had their accounts locked due to security reasons this week?", "response": "SELECT user_id, username FROM Users WHERE status = 'Locked' AND join_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the most common types of system actions performed this month?", "response": "SELECT action, COUNT(*) AS action_count FROM SystemLogs WHERE timestamp >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY action ORDER BY action_count DESC;"}
{"prompt": "What is the log of all actions I performed as admin today?", "response": "SELECT log_id, action, description, timestamp FROM SystemLogs WHERE admin_id = 601 AND timestamp::date = CURRENT_DATE;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Neha’s POV)", "response": "SQL Query"}
{"prompt": "How many daily active users engaged with the short-video feature today?", "response": "SELECT COUNT(DISTINCT user_id) FROM SystemLogs WHERE action = 'Short Video Played' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "What is the average watch time for short videos this week?", "response": "SELECT AVG(duration) FROM SystemLogs WHERE action = 'Short Video Played' AND timestamp >= CURRENT_DATE - INTERVAL '7 days'; -- Assume duration column or use summary field if present"}
{"prompt": "What is the adoption rate of the short-video feature among all users this month?", "response": "SELECT (SELECT COUNT(DISTINCT user_id) FROM SystemLogs WHERE action = 'Short Video Played' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE))::decimal / NULLIF((SELECT COUNT(*) FROM Users WHERE status = 'Active'), 0) AS adoption_rate;"}
{"prompt": "Which age group has the highest engagement with the short-video feature this month?", "response": "SELECT age_group, COUNT(*) AS engagement FROM (SELECT u.user_id, CASE WHEN EXTRACT(YEAR FROM AGE(u.join_date)) BETWEEN 18 AND 24 THEN '18-24' WHEN EXTRACT(YEAR FROM AGE(u.join_date)) BETWEEN 25 AND 34 THEN '25-34' ELSE 'Other' END AS age_group FROM Users u JOIN SystemLogs sl ON u.user_id = sl.user_id WHERE sl.action = 'Short Video Played' AND sl.timestamp >= DATE_TRUNC('month', CURRENT_DATE)) sub GROUP BY age_group ORDER BY engagement DESC LIMIT 1;"}
{"prompt": "During which hours is short-video engagement highest today?", "response": "SELECT EXTRACT(HOUR FROM timestamp) AS hour, COUNT(*) AS plays FROM SystemLogs WHERE action = 'Short Video Played' AND timestamp::date = CURRENT_DATE GROUP BY hour ORDER BY plays DESC LIMIT 1;"}
{"prompt": "What is the trend of daily active users for the past 7 days?", "response": "SELECT timestamp::date AS day, COUNT(DISTINCT user_id) AS dau FROM SystemLogs WHERE action = 'Login Success' AND timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY day ORDER BY day;"}
{"prompt": "Which users have the highest average watch time for short videos this month?", "response": "SELECT user_id, AVG(duration) AS avg_watch_time FROM SystemLogs WHERE action = 'Short Video Played' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY user_id ORDER BY avg_watch_time DESC LIMIT 5;"}
{"prompt": "What is the total number of posts created since the short-video feature launched?", "response": "SELECT COUNT(*) FROM Posts WHERE posted_on >= (SELECT MIN(timestamp) FROM SystemLogs WHERE action = 'Short Video Played');"}
{"prompt": "Which posts with short videos have the highest number of likes this week?", "response": "SELECT p.post_id, p.content, COUNT(l.like_id) AS like_count FROM Posts p JOIN Likes l ON p.post_id = l.post_id WHERE p.content like '%short video%' AND l.liked_on >= CURRENT_DATE - INTERVAL '7 days' GROUP BY p.post_id, p.content ORDER BY like_count DESC LIMIT 5;"}
{"prompt": "What is the average number of comments per short-video post this month?", "response": "SELECT AVG(comment_count) FROM (SELECT p.post_id, COUNT(c.comment_id) AS comment_count FROM Posts p LEFT JOIN Comments c ON p.post_id = c.post_id WHERE p.content like '%short video%' AND p.posted_on >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY p.post_id) sub;"}
{"prompt": "Which users are at risk of churning based on no activity in the last 30 days?", "response": "SELECT user_id, username FROM Users WHERE status = 'Active' AND user_id NOT IN (SELECT DISTINCT user_id FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '30 days');"}
{"prompt": "What is the trend of new user signups since the short-video feature launch?", "response": "SELECT join_date, COUNT(*) AS signups FROM Users WHERE join_date >= (SELECT MIN(timestamp)::date FROM SystemLogs WHERE action = 'Short Video Played') GROUP BY join_date ORDER BY join_date;"}
{"prompt": "Which posts tagged with #trending have the highest engagement this week?", "response": "SELECT p.post_id, p.content, (SELECT count(*) FROM Likes l WHERE l.post_id = p.post_id) + (SELECT count(*) FROM Comments c WHERE c.post_id = p.post_id) AS engagement FROM Posts p WHERE p.content like '%#trending%' AND posted_on >= CURRENT_DATE - INTERVAL '7 days' ORDER BY engagement DESC LIMIT 3;"}
{"prompt": "What is the average session length for users engaging with short videos this month?", "response": "SELECT AVG(session_length) FROM AnalyticsReports WHERE report_type = 'Short Video Session' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which days had the highest conversion rates from short-video viewers to new followers this month?", "response": "SELECT generated_on, summary FROM AnalyticsReports WHERE report_type = 'Conversion Rate' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE) ORDER BY summary DESC LIMIT 3;"}
{"prompt": "What is the geographic distribution of short-video feature users this month?", "response": "SELECT u.location, COUNT(DISTINCT sl.user_id) AS users FROM Users u JOIN SystemLogs sl ON u.user_id = sl.user_id WHERE sl.action = 'Short Video Played' AND sl.timestamp >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY u.location ORDER BY users DESC;"}
{"prompt": "Which posts with short videos have been reported most frequently this week?", "response": "SELECT p.post_id, COUNT(m.mod_id) AS report_count FROM Posts p JOIN ModerationLogs m ON m.target_id = p.post_id WHERE p.content like '%short video%' AND m.timestamp >= CURRENT_DATE - INTERVAL '7 days' AND m.action_type = 'Report' GROUP BY p.post_id ORDER BY report_count DESC LIMIT 3;"}
{"prompt": "What is the average engagement rate for short-video posts this month?", "response": "SELECT AVG(engagement_rate) FROM AnalyticsReports WHERE report_type = 'Short Video Engagement' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which age group is most likely to churn based on last activity date?", "response": "SELECT age_group, COUNT(*) AS churn_count FROM (SELECT user_id, CASE WHEN EXTRACT(YEAR FROM AGE(join_date)) BETWEEN 18 AND 24 THEN '18-24' WHEN EXTRACT(YEAR FROM AGE(join_date)) BETWEEN 25 AND 34 THEN '25-34' ELSE 'Other' END AS age_group FROM Users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '30 days')) sub GROUP BY age_group ORDER BY churn_count DESC LIMIT 1;"}
{"prompt": "What are the main reasons users gave for leaving the platform in the last 30 days?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Churn Feedback' AND generated_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Legal/Compliance Officers", "response": "nan"}
{"prompt": "Natural Language Question (Divya’s POV)", "response": "SQL Query"}
{"prompt": "Which user complaints about copyright infringement were flagged today?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE issue like '%copyright%' AND created_at::date = CURRENT_DATE;"}
{"prompt": "What are the details of the posts removed due to copyright infringement today?", "response": "SELECT p.post_id, p.content, p.media_url FROM Posts p JOIN ModerationLogs m ON p.post_id = m.target_id WHERE m.action_type = 'Remove' AND m.timestamp::date = CURRENT_DATE AND m.target_type = 'Post' AND m.description like '%copyright%';"}
{"prompt": "Which users have been warned for copyright violations this month?", "response": "SELECT DISTINCT u.user_id, u.username FROM Users u JOIN ModerationLogs m ON u.user_id = m.target_id WHERE m.action_type = 'Warn' AND m.timestamp >= DATE_TRUNC('month', CURRENT_DATE) AND m.target_type = 'User' AND m.description like '%copyright%';"}
{"prompt": "What is the current status of data retention compliance checks in the EU region?", "response": "SELECT check_id, content_id, check_type, result, checked_on FROM ComplianceChecks WHERE check_type = 'Data Retention' AND checked_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "List all compliance checks related to GDPR and CCPA regulations performed in the last month.", "response": "SELECT check_id, content_id, check_type, result, checked_on FROM ComplianceChecks WHERE check_type IN ('GDPR', 'CCPA') AND checked_on >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which posts have been flagged for policy violations in the last week?", "response": "SELECT p.post_id, p.content, m.timestamp FROM Posts p JOIN ModerationLogs m ON p.post_id = m.target_id WHERE m.action_type = 'Flag' AND m.timestamp >= CURRENT_DATE - INTERVAL '7 days' AND m.target_type = 'Post';"}
{"prompt": "What are the details of the latest feature updates audited for compliance?", "response": "SELECT feature_id, feature_name, description, created_on FROM ProductFeatures WHERE created_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which compliance officers performed audits on new features this month?", "response": "SELECT DISTINCT officer_id FROM ComplianceChecks WHERE checked_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What are the results of the latest compliance checks on user consent flows?", "response": "SELECT check_id, content_id, check_type, result, checked_on FROM ComplianceChecks WHERE check_type = 'User Consent' ORDER BY checked_on DESC LIMIT 5;"}
{"prompt": "List all marketing disclaimers reviewed for compliance in the last quarter.", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Marketing Disclaimer' AND generated_on >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which users have pending complaints related to data privacy?", "response": "SELECT ticket_id, user_id, issue, status FROM SupportTickets WHERE issue like '%data privacy%' AND status = 'Pending';"}
{"prompt": "What are the details of posts removed for intellectual property violations this year?", "response": "SELECT p.post_id, p.content, p.media_url FROM Posts p JOIN ModerationLogs m ON p.post_id = m.target_id WHERE m.action_type = 'Remove' AND m.target_type = 'Post' AND m.description like '%intellectual property%' AND m.timestamp >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "Which compliance checks failed in the last 3 months?", "response": "SELECT check_id, content_id, check_type, result, checked_on FROM ComplianceChecks WHERE result = 'Failed' AND checked_on >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "What is the summary of compliance reports generated for leadership this month?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Compliance Report' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which posts have been reported for copyright infringement more than 3 times this month?", "response": "SELECT m.target_id AS post_id, count(*) AS report_count FROM ModerationLogs m WHERE m.action_type = 'Report' AND m.target_type = 'Post' AND m.description like '%copyright%' AND m.timestamp >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY m.target_id HAVING count(*) > 3;"}
{"prompt": "List all user complaints escalated to legal for review in the last 7 days.", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE status = 'Escalated' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the details of the latest moderation actions taken on flagged content?", "response": "SELECT mod_id, action_type, target_id, target_type, timestamp FROM ModerationLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which marketing campaigns have disclaimers flagged for compliance issues this quarter?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Marketing Disclaimer' AND summary like '%flagged%' AND generated_on >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What are the recent user complaints related to data processing and consent?", "response": "SELECT ticket_id, user_id, issue, status, created_at FROM SupportTickets WHERE issue like '%data processing%' OR issue like '%consent%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which compliance checks were performed on new influencer campaigns this month?", "response": "SELECT check_id, content_id, check_type, result, checked_on FROM ComplianceChecks WHERE check_type = 'Influencer Campaign' AND checked_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "nan", "response": "nan"}
{"prompt": "FitnessApp", "response": "nan"}
{"prompt": "Users/Athletes", "response": "nan"}
{"prompt": "Natural Language Question (Ananya’s POV)", "response": "SQL Query"}
{"prompt": "What is my user ID and email registered on FitTrack?", "response": "sql SELECT user_id, email FROM Users WHERE name = 'Ananya';"}
{"prompt": "What is my current fitness goal and when did I join FitTrack?", "response": "sql SELECT goal, join_date FROM Users WHERE name = 'Ananya';"}
{"prompt": "What workouts have I logged today?", "response": "sql SELECT wl.log_id, w.type, w.level, wl.duration, wl.calories_burned FROM WorkoutLogs wl JOIN Workouts w ON wl.workout_id = w.workout_id WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') AND wl.date = CURRENT_DATE;"}
{"prompt": "What is the total duration of my workouts this week?", "response": "sql SELECT SUM(wl.duration) AS total_duration FROM WorkoutLogs wl WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') AND wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "How many calories have I burned through workouts this month?", "response": "sql SELECT SUM(wl.calories_burned) AS total_calories FROM WorkoutLogs wl WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') AND wl.date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which workout types have I done most often?", "response": "sql SELECT w.type, COUNT(*) AS count FROM WorkoutLogs wl JOIN Workouts w ON wl.workout_id = w.workout_id WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') GROUP BY w.type ORDER BY count DESC;"}
{"prompt": "What are the details of the last workout I logged?", "response": "sql SELECT wl.log_id, w.type, w.level, wl.duration, wl.calories_burned, wl.date FROM WorkoutLogs wl JOIN Workouts w ON wl.workout_id = w.workout_id WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') ORDER BY wl.date DESC, wl.log_id DESC LIMIT 1;"}
{"prompt": "What diet plan am I currently following?", "response": "sql SELECT d.plan_id, d.goal, d.calories, d.description FROM DietLogs dl JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') ORDER BY dl.date DESC, dl.log_id DESC LIMIT 1;"}
{"prompt": "How many calories have I consumed from my diet logs this week?", "response": "sql SELECT SUM(dl.calories_consumed) AS total_calories FROM DietLogs dl WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') AND dl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "Which trainers are available and what are their specialties?", "response": "sql SELECT trainer_id, name, specialty, certified FROM Trainers;"}
{"prompt": "Who created my current workout plan?", "response": "sql SELECT w.created_by FROM WorkoutLogs wl JOIN Workouts w ON wl.workout_id = w.workout_id WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') ORDER BY wl.date DESC, wl.log_id DESC LIMIT 1;"}
{"prompt": "What is the summary of my latest analytics report?", "response": "sql SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Ananya') ORDER BY generated_on DESC, report_id DESC LIMIT 1;"}
{"prompt": "What support tickets have I raised and what is their status?", "response": "sql SELECT ticket_id, issue, status, created_on, resolved_on FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Ananya');"}
{"prompt": "What is the description of my latest diet plan?", "response": "sql SELECT d.description FROM DietLogs dl JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') ORDER BY dl.date DESC, dl.log_id DESC LIMIT 1;"}
{"prompt": "What is my date of birth and gender on record?", "response": "sql SELECT dob, gender FROM Users WHERE name = 'Ananya';"}
{"prompt": "Which nutritionists are available and are they certified?", "response": "sql SELECT nutritionist_id, name, certified FROM Nutritionists;"}
{"prompt": "What fitness centers are registered in the app and who manages them?", "response": "sql SELECT center_id, name, location, manager_id FROM FitnessCenters;"}
{"prompt": "What is my most recent support ticket and its status?", "response": "sql SELECT ticket_id, issue, status, created_on, resolved_on FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Ananya') ORDER BY created_on DESC, ticket_id DESC LIMIT 1;"}
{"prompt": "What is the total number of workouts I have logged?", "response": "sql SELECT COUNT(*) AS total_workouts FROM WorkoutLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Ananya');"}
{"prompt": "What is the total number of diet logs I have entered?", "response": "sql SELECT COUNT(*) AS total_diet_logs FROM DietLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Ananya');"}
{"prompt": "Personal Trainers", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query"}
{"prompt": "What is my trainer ID and email registered on FitProConnect?", "response": "sql SELECT trainer_id, email FROM Trainers WHERE name = 'Rahul';"}
{"prompt": "Am I certified as a trainer on the platform?", "response": "sql SELECT certified FROM Trainers WHERE name = 'Rahul';"}
{"prompt": "Which clients have I created workout plans for?", "response": "sql SELECT DISTINCT u.user_id, u.name, u.email FROM Workouts w JOIN Users u ON w.created_by = u.user_id WHERE w.created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul');"}
{"prompt": "Which clients missed their workouts yesterday?", "response": "sql SELECT u.user_id, u.name FROM Users u WHERE NOT EXISTS (SELECT 1 FROM WorkoutLogs wl WHERE wl.user_id = u.user_id AND wl.date = CURRENT_DATE - INTERVAL '1 day');"}
{"prompt": "What are the details of Priya’s missed workout yesterday?", "response": "sql SELECT wl.log_id, w.type, w.level, wl.duration, wl.calories_burned FROM WorkoutLogs wl JOIN Workouts w ON wl.workout_id = w.workout_id WHERE wl.user_id = (SELECT user_id FROM Users WHERE name = 'Priya') AND wl.date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "What is Priya’s current weekly workout plan?", "response": "sql SELECT w.workout_id, w.type, w.level, w.duration_min, w.description FROM Workouts w JOIN Users u ON w.created_by = u.user_id WHERE u.name = 'Priya' ORDER BY w.workout_id DESC LIMIT 7;"}
{"prompt": "What workout plans have I created for beginners aiming to lose weight?", "response": "sql SELECT workout_id, type, level, duration_min, description FROM Workouts WHERE created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul') AND level = 'Beginner';"}
{"prompt": "How can I view all workouts I have created?", "response": "sql SELECT workout_id, type, level, duration_min, description FROM Workouts WHERE created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul');"}
{"prompt": "Which of my clients have logged workouts this week?", "response": "sql SELECT DISTINCT u.user_id, u.name FROM WorkoutLogs wl JOIN Users u ON wl.user_id = u.user_id WHERE wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE AND wl.workout_id IN (SELECT workout_id FROM Workouts WHERE created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul'));"}
{"prompt": "Who are my clients that have not logged any workouts this week?", "response": "sql SELECT u.user_id, u.name FROM Users u WHERE u.user_id NOT IN (SELECT wl.user_id FROM WorkoutLogs wl WHERE wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE);"}
{"prompt": "What is the average duration of workouts my clients completed this week?", "response": "sql SELECT AVG(wl.duration) AS avg_duration FROM WorkoutLogs wl WHERE wl.workout_id IN (SELECT workout_id FROM Workouts WHERE created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul')) AND wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "Which of my clients are hitting their fitness goals?", "response": "sql SELECT u.user_id, u.name, u.goal FROM Users u WHERE EXISTS (SELECT 1 FROM WorkoutLogs wl WHERE wl.user_id = u.user_id AND wl.calories_burned >= 500);"}
{"prompt": "Who among my clients might need a check-in based on low activity this week?", "response": "sql SELECT u.user_id, u.name FROM Users u WHERE u.user_id IN (SELECT wl.user_id FROM WorkoutLogs wl WHERE wl.workout_id IN (SELECT workout_id FROM Workouts WHERE created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul')) GROUP BY wl.user_id HAVING COUNT(*) < 2);"}
{"prompt": "What analytics reports have I generated for my clients?", "response": "sql SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul');"}
{"prompt": "What is the summary of my latest analytics report?", "response": "sql SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul') ORDER BY generated_on DESC, report_id DESC LIMIT 1;"}
{"prompt": "What support tickets have my clients raised?", "response": "sql SELECT s.ticket_id, u.name AS client_name, s.issue, s.status, s.created_on, s.resolved_on FROM SupportTickets s JOIN Users u ON s.user_id = u.user_id WHERE s.user_id IN (SELECT DISTINCT u.user_id FROM Workouts w JOIN Users u ON w.created_by = u.user_id WHERE w.created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul'));"}
{"prompt": "What is my specialty as a trainer?", "response": "sql SELECT specialty FROM Trainers WHERE name = 'Rahul';"}
{"prompt": "What is the list of all fitness centers and their managers?", "response": "sql SELECT center_id, name, location, manager_id FROM FitnessCenters;"}
{"prompt": "What is the total number of custom workout plans I have created?", "response": "sql SELECT COUNT(*) AS total_workouts FROM Workouts WHERE created_by = (SELECT trainer_id FROM Trainers WHERE name = 'Rahul');"}
{"prompt": "What is my name and role on the app developer team (if applicable)?", "response": "sql SELECT name, role FROM AppDevelopers WHERE email = (SELECT email FROM Trainers WHERE name = 'Rahul');"}
{"prompt": "Nutritionists", "response": "nan"}
{"prompt": "Natural Language Question (Dr. Meera’s POV)", "response": "SQL Query"}
{"prompt": "What is my nutritionist ID and email registered in NutriFitPro?", "response": "SELECT nutritionist_id, email FROM Nutritionists WHERE name = 'Dr. Meera';"}
{"prompt": "Am I certified as a nutritionist on the platform?", "response": "SELECT certified FROM Nutritionists WHERE name = 'Dr. Meera';"}
{"prompt": "Which clients am I currently managing diet plans for?", "response": "SELECT DISTINCT u.user_id, u.name, u.email FROM DietPlans d JOIN Users u ON d.created_by = u.user_id WHERE d.created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera');"}
{"prompt": "Which of my clients have not logged meals in the last three days?", "response": "SELECT u.user_id, u.name FROM Users u WHERE NOT EXISTS (SELECT 1 FROM DietLogs dl WHERE dl.user_id = u.user_id AND dl.date >= CURRENT_DATE - INTERVAL '2 days');"}
{"prompt": "What are the details of Aarav’s previous diet logs?", "response": "SELECT dl.log_id, d.goal, d.calories, dl.calories_consumed, dl.date FROM DietLogs dl JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY dl.date DESC;"}
{"prompt": "Which post-workout meals has Aarav been skipping?", "response": "SELECT dl.log_id, d.description, dl.date FROM DietLogs dl JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND d.goal LIKE '%post-workout%' ORDER BY dl.date DESC;"}
{"prompt": "What high-protein diet plans have I created?", "response": "SELECT plan_id, goal, calories, description FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera') AND goal LIKE '%High Protein%';"}
{"prompt": "What are the details of the latest diet plan I created for Aarav?", "response": "SELECT d.plan_id, d.goal, d.calories, d.description FROM DietPlans d JOIN DietLogs dl ON d.plan_id = dl.plan_id WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY dl.date DESC, dl.log_id DESC LIMIT 1;"}
{"prompt": "Which clients had a virtual consultation with me today?", "response": "-- No direct schema support; skip or use AnalyticsReports if tracked as 'Consultation'"}
{"prompt": "What initial dietary assessments have I set up for new clients?", "response": "-- No direct schema support; skip or use AnalyticsReports if tracked as 'Assessment'"}
{"prompt": "Which of my clients are on a muscle gain diet plan?", "response": "SELECT DISTINCT u.user_id, u.name FROM DietPlans d JOIN Users u ON d.created_by = u.user_id WHERE d.goal = 'Muscle Gain' AND d.created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera');"}
{"prompt": "How many calories did Aarav consume last week?", "response": "SELECT SUM(dl.calories_consumed) AS total_calories FROM DietLogs dl WHERE dl.user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND dl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "How many of my clients are following a weight loss diet plan?", "response": "SELECT COUNT(DISTINCT dl.user_id) AS client_count FROM DietLogs dl JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE d.goal = 'Weight Loss' AND d.created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera');"}
{"prompt": "What is the summary of my latest analytics report on client meal compliance?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera') AND report_type = 'Meal Compliance' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What diet plans have I created this month?", "response": "SELECT plan_id, goal, calories, description FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera') AND plan_id IN (SELECT plan_id FROM DietLogs WHERE date >= date_trunc('month', CURRENT_DATE));"}
{"prompt": "Which of my clients have improved stamina as their goal?", "response": "SELECT user_id, name FROM Users WHERE goal = 'Improved Stamina';"}
{"prompt": "What support tickets have my clients raised about diet plans?", "response": "SELECT s.ticket_id, u.name AS client_name, s.issue, s.status, s.created_on, s.resolved_on FROM SupportTickets s JOIN Users u ON s.user_id = u.user_id WHERE s.issue LIKE '%diet%';"}
{"prompt": "What is my name and certification status?", "response": "SELECT name, certified FROM Nutritionists WHERE name = 'Dr. Meera';"}
{"prompt": "What is the total number of diet logs I have managed for all clients?", "response": "SELECT COUNT(*) AS total_diet_logs FROM DietLogs WHERE plan_id IN (SELECT plan_id FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Dr. Meera'));"}
{"prompt": "What is the list of all users and their current diet plan goals?", "response": "SELECT u.user_id, u.name, d.goal FROM Users u JOIN DietLogs dl ON u.user_id = dl.user_id JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE dl.date = (SELECT MAX(dl2.date) FROM DietLogs dl2 WHERE dl2.user_id = u.user_id);"}
{"prompt": "Gym/Fitness Center Managers", "response": "nan"}
{"prompt": "Natural Language Question (Vikram’s POV)", "response": "SQL Query"}
{"prompt": "What is the center ID for IronPulse Gym?", "response": "SELECT center_id FROM FitnessCenters WHERE name = 'IronPulse Gym';"}
{"prompt": "What analytics reports were generated today for IronPulse Gym?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_on = '2025-06-11' AND generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym');"}
{"prompt": "Which trainers are linked to IronPulse Gym and what are their specialties?", "response": "SELECT t.trainer_id, t.name, t.specialty, t.certified FROM Trainers t JOIN FitnessCenters fc ON fc.manager_id = t.trainer_id WHERE fc.name = 'IronPulse Gym';"}
{"prompt": "Which trainers have logged workouts today for IronPulse Gym?", "response": "SELECT wl.user_id, wl.workout_id, wl.date, wl.duration FROM WorkoutLogs wl WHERE wl.date = '2025-06-11' AND wl.workout_id IN (SELECT workout_id FROM Workouts WHERE created_by IN (SELECT trainer_id FROM Trainers WHERE trainer_id IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym')));"}
{"prompt": "What are the latest customer feedback tickets mentioning weekend yoga sessions?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%weekend yoga%' AND created_on >= '2025-06-01';"}
{"prompt": "What are the latest equipment usage analytics for IronPulse Gym?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Equipment Usage' AND generated_on >= '2025-06-01' AND generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym') ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What marketing campaigns or referral discounts have been run this month for IronPulse Gym?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type LIKE '%Marketing%' AND generated_on >= '2025-06-01' AND generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym') ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "Who is the manager of IronPulse Gym?", "response": "SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym';"}
{"prompt": "What is the location of IronPulse Gym?", "response": "SELECT location FROM FitnessCenters WHERE name = 'IronPulse Gym';"}
{"prompt": "What is the most recent analytics report generated for IronPulse Gym?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the specialties and certification statuses of all trainers?", "response": "SELECT name, specialty, certified FROM Trainers;"}
{"prompt": "What are the unresolved support tickets for IronPulse Gym members?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE status != 'Resolved' AND user_id IN (SELECT user_id FROM Users);"}
{"prompt": "What are the details of the last five equipment usage reports for IronPulse Gym?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Equipment Usage' AND generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym') ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What support tickets have been created in June 2025 mentioning yoga?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%yoga%' AND created_on >= '2025-06-01';"}
{"prompt": "Which trainers are certified at IronPulse Gym?", "response": "SELECT t.trainer_id, t.name FROM Trainers t JOIN FitnessCenters fc ON fc.manager_id = t.trainer_id WHERE fc.name = 'IronPulse Gym' AND t.certified = TRUE;"}
{"prompt": "What are the last five marketing analytics reports for IronPulse Gym?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type LIKE '%Marketing%' AND generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym') ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What are the current open support issues for IronPulse Gym?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE status = 'Open';"}
{"prompt": "What is the summary of all analytics reports generated by IronPulse Gym’s manager this month?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym') AND generated_on >= '2025-06-01';"}
{"prompt": "What is the total number of trainers managed by IronPulse Gym?", "response": "SELECT COUNT(*) FROM Trainers WHERE trainer_id IN (SELECT manager_id FROM FitnessCenters WHERE name = 'IronPulse Gym');"}
{"prompt": "What is the summary of all support tickets related to equipment issues this month?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%equipment%' AND created_on >= '2025-06-01';"}
{"prompt": "Content Creators (Workouts, Diets)", "response": "nan"}
{"prompt": "Natural Language Question (Alina’s POV)", "response": "SQL Query"}
{"prompt": "What is my nutritionist ID and certification status?", "response": "SELECT nutritionist_id, certified FROM Nutritionists WHERE name = 'Alina';"}
{"prompt": "What is my email registered on ActiveStream?", "response": "SELECT email FROM Nutritionists WHERE name = 'Alina';"}
{"prompt": "What is my user ID and email as a fitness coach?", "response": "SELECT user_id, email FROM Users WHERE name = 'Alina';"}
{"prompt": "What HIIT workout routines have I created for beginners?", "response": "SELECT workout_id, type, level, duration_min, description FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina') AND type = 'HIIT' AND level = 'Beginner';"}
{"prompt": "What plant-based diet plans have I created?", "response": "SELECT plan_id, goal, calories, description FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina') AND goal LIKE '%plant-based%';"}
{"prompt": "What is the calorie breakdown for my latest uploaded meal plan?", "response": "SELECT calories, description FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina') ORDER BY plan_id DESC LIMIT 1;"}
{"prompt": "What are the details of my most recent 15-minute workout upload?", "response": "SELECT workout_id, type, level, duration_min, description FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina') AND duration_min = 15 ORDER BY workout_id DESC LIMIT 1;"}
{"prompt": "Which of my workout routines have I created this week?", "response": "SELECT workout_id, type, level, duration_min, description FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina') AND DATE(workout_id) BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What are the difficulty levels of all my uploaded workouts?", "response": "SELECT DISTINCT level FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina');"}
{"prompt": "How many users have logged my workout routines this week?", "response": "SELECT COUNT(DISTINCT wl.user_id) FROM WorkoutLogs wl WHERE wl.workout_id IN (SELECT workout_id FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina')) AND wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "How many users have logged my diet plans this week?", "response": "SELECT COUNT(DISTINCT dl.user_id) FROM DietLogs dl WHERE dl.plan_id IN (SELECT plan_id FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina')) AND dl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What is the average calories consumed by users following my diet plans this month?", "response": "SELECT AVG(dl.calories_consumed) FROM DietLogs dl WHERE dl.plan_id IN (SELECT plan_id FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina')) AND dl.date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What are the details of my most recent diet plan log by any user?", "response": "SELECT dl.log_id, dl.user_id, dl.plan_id, dl.date, dl.calories_consumed FROM DietLogs dl WHERE dl.plan_id IN (SELECT plan_id FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina')) ORDER BY dl.date DESC, dl.log_id DESC LIMIT 1;"}
{"prompt": "What support tickets have been raised about my workout routines?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%workout%' AND user_id IN (SELECT user_id FROM Users);"}
{"prompt": "What is the summary of my latest analytics report on user engagement?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Alina') AND report_type = 'Engagement' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is my most popular workout type based on user logs?", "response": "SELECT w.type, COUNT(*) AS log_count FROM WorkoutLogs wl JOIN Workouts w ON wl.workout_id = w.workout_id WHERE w.created_by = (SELECT user_id FROM Users WHERE name = 'Alina') GROUP BY w.type ORDER BY log_count DESC LIMIT 1;"}
{"prompt": "What is the average duration of my workouts logged by users?", "response": "SELECT AVG(wl.duration) FROM WorkoutLogs wl WHERE wl.workout_id IN (SELECT workout_id FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina'));"}
{"prompt": "What are the latest support tickets related to my content?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%Alina%';"}
{"prompt": "What is the total number of diet plans and workout routines I have created?", "response": "SELECT (SELECT count(*) FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina')) AS diet_plans, (SELECT count(*) FROM Workouts WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Alina')) AS workout_routines;"}
{"prompt": "Who are the users that have most frequently logged my plant-based diet plans?", "response": "SELECT dl.user_id, COUNT(*) AS log_count FROM DietLogs dl WHERE dl.plan_id IN (SELECT plan_id FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Alina') AND goal LIKE '%plant-based%') GROUP BY dl.user_id ORDER BY log_count DESC;"}
{"prompt": "Customer Support", "response": "nan"}
{"prompt": "Natural Language Question (Sara’s POV)", "response": "SQL Query"}
{"prompt": "What is my email and role as a customer support agent?", "response": "SELECT email, role FROM AppDevelopers WHERE name = 'Sara';"}
{"prompt": "What support tickets are currently open and need my attention?", "response": "SELECT ticket_id, user_id, issue, created_on, status FROM SupportTickets WHERE status = 'Open';"}
{"prompt": "How many support tickets have been raised today?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_on) = CURRENT_DATE;"}
{"prompt": "Which users have reported lost progress after reinstalling the app?", "response": "SELECT user_id, issue, created_on FROM SupportTickets WHERE issue LIKE '%lost progress%';"}
{"prompt": "What is the backup and account information for a user who lost progress?", "response": "SELECT * FROM Users WHERE user_id = (SELECT user_id FROM SupportTickets WHERE issue LIKE '%lost progress%' ORDER BY created_on DESC LIMIT 1);"}
{"prompt": "Which tickets are related to billing issues?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%billing%';"}
{"prompt": "Which tickets are related to technical problems?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%technical%';"}
{"prompt": "Which tickets are about account recovery?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%account recovery%';"}
{"prompt": "Which tickets are about app usage queries?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%app usage%';"}
{"prompt": "What is the status of the latest ticket from a premium member?", "response": "SELECT ticket_id, status FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE goal = 'Premium') ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "Which tickets have been escalated to the technical team?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE status = 'Escalated';"}
{"prompt": "What is the resolution date for tickets that have been resolved today?", "response": "SELECT ticket_id, resolved_on FROM SupportTickets WHERE DATE(resolved_on) = CURRENT_DATE;"}
{"prompt": "Which users have reported smartwatch syncing issues?", "response": "SELECT user_id, issue, created_on FROM SupportTickets WHERE issue LIKE '%smartwatch%';"}
{"prompt": "What are the most recent FAQ updates? (Assuming FAQ updates are tracked in AnalyticsReports)", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'FAQ Update' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "Which issues have been reported repeatedly about push notification delays?", "response": "SELECT count(*), issue FROM SupportTickets WHERE issue LIKE '%push notification%' GROUP BY issue HAVING count(*) > 1;"}
{"prompt": "Which users have received a feedback form recently?", "response": "SELECT user_id FROM AnalyticsReports WHERE report_type = 'Feedback Form' AND generated_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the summary of the latest user satisfaction report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'User Satisfaction' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the total number of support tickets handled this month?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_on) >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What are the most common types of support issues reported this week?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE DATE(created_on) >= CURRENT_DATE - INTERVAL '6 days' GROUP BY issue ORDER BY count DESC;"}
{"prompt": "What is the list of all users who have raised support tickets in the last 24 hours?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE created_on >= CURRENT_TIMESTAMP - INTERVAL '24 hours';"}
{"prompt": "Health Coaches", "response": "nan"}
{"prompt": "Natural Language Question (Nisha’s POV)", "response": "SQL Query"}
{"prompt": "What is my coach/nutritionist ID and certification status on WellSync?", "response": "SELECT nutritionist_id, certified FROM Nutritionists WHERE name = 'Nisha';"}
{"prompt": "What is my email registered on WellSync?", "response": "SELECT email FROM Nutritionists WHERE name = 'Nisha';"}
{"prompt": "Who are my top clients based on activity logs this month?", "response": "SELECT u.user_id, u.name, COUNT(wl.log_id) AS workout_count FROM Users u JOIN WorkoutLogs wl ON u.user_id = wl.user_id WHERE u.user_id IN (SELECT created_by FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha')) AND wl.date >= date_trunc('month', CURRENT_DATE) GROUP BY u.user_id, u.name ORDER BY workout_count DESC LIMIT 5;"}
{"prompt": "What is Ramesh’s sleep log for the past 7 days?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Ramesh') AND report_type = 'Sleep Log' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What is Ramesh’s current stress level?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Ramesh') AND report_type = 'Stress Level' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the details of my latest workout plan recommended to Ramesh?", "response": "SELECT w.workout_id, w.type, w.level, w.duration_min, w.description FROM Workouts w JOIN Users u ON w.created_by = u.user_id WHERE u.name = 'Nisha' AND w.workout_id IN (SELECT workout_id FROM WorkoutLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Ramesh')) ORDER BY w.workout_id DESC LIMIT 1;"}
{"prompt": "Which of my clients have high stress levels this week?", "response": "SELECT DISTINCT u.user_id, u.name FROM Users u JOIN AnalyticsReports ar ON u.user_id = ar.generated_by WHERE ar.report_type = 'Stress Level' AND ar.summary = 'High' AND ar.generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What group webinars have I scheduled for my clients?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha') AND report_type = 'Webinar';"}
{"prompt": "What are the details of my latest published challenge?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha') AND report_type = 'Challenge' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which clients have joined my 'Mind-Body Reset' challenge?", "response": "SELECT DISTINCT user_id FROM AnalyticsReports WHERE report_type = 'Challenge' AND summary LIKE '%Mind-Body Reset%';"}
{"prompt": "What are the water intake logs for my clients this week?", "response": "SELECT dl.user_id, dl.date, dl.calories_consumed FROM DietLogs dl JOIN DietPlans d ON dl.plan_id = d.plan_id WHERE d.created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha') AND d.goal LIKE '%water%' AND dl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "Which of my clients have logged sleep data this month?", "response": "SELECT DISTINCT ar.generated_by FROM AnalyticsReports ar WHERE ar.report_type = 'Sleep Log' AND ar.generated_on >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What mood updates have my clients submitted this week?", "response": "SELECT ar.generated_by, ar.generated_on, ar.summary FROM AnalyticsReports ar WHERE ar.report_type = 'Mood Update' AND ar.generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What is the average sleep duration for my clients this week?", "response": "SELECT AVG(CAST(summary AS FLOAT)) AS avg_sleep FROM AnalyticsReports WHERE report_type = 'Sleep Log' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE AND generated_by IN (SELECT user_id FROM Users WHERE user_id IN (SELECT created_by FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha')));"}
{"prompt": "What are the most common lifestyle habits reported by my clients?", "response": "SELECT summary, COUNT(*) AS count FROM AnalyticsReports WHERE report_type = 'Lifestyle Habit' AND generated_by IN (SELECT user_id FROM Users WHERE user_id IN (SELECT created_by FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha'))) GROUP BY summary ORDER BY count DESC;"}
{"prompt": "What is the summary of my latest analytics report on client wellness?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha') AND report_type = 'Wellness' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which clients have received a wellness check-in from me this month?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE issue LIKE '%wellness check-in%' AND created_on >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What are the unresolved support tickets from my clients?", "response": "SELECT ticket_id, user_id, issue, created_on, status FROM SupportTickets WHERE status != 'Resolved' AND user_id IN (SELECT user_id FROM Users);"}
{"prompt": "What is the total number of group webinars and challenges I have published?", "response": "SELECT (SELECT count(*) FROM AnalyticsReports WHERE generated_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha') AND report_type = 'Webinar') AS webinars, (SELECT count(*) FROM AnalyticsReports WHERE generated_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha') AND report_type = 'Challenge') AS challenges;"}
{"prompt": "What is the list of all my clients and their current wellness goals?", "response": "SELECT u.user_id, u.name, u.goal FROM Users u WHERE u.user_id IN (SELECT created_by FROM DietPlans WHERE created_by = (SELECT nutritionist_id FROM Nutritionists WHERE name = 'Nisha'));"}
{"prompt": "App Developers", "response": "nan"}
{"prompt": "Natural Language Question (Ravi’s POV)", "response": "SQL Query"}
{"prompt": "What is my developer ID and email registered on the FitBoost team?", "response": "SELECT dev_id, email FROM AppDevelopers WHERE name = 'Ravi';"}
{"prompt": "What is my role on the development team?", "response": "SELECT role FROM AppDevelopers WHERE name = 'Ravi';"}
{"prompt": "What bug reports have been submitted by users this week?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE created_on >= CURRENT_DATE - INTERVAL '6 days';"}
{"prompt": "Which bug reports relate to smartwatch syncing issues?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%smartwatch%';"}
{"prompt": "What is the status of bug reports related to Bluetooth syncing?", "response": "SELECT ticket_id, status FROM SupportTickets WHERE issue LIKE '%Bluetooth%';"}
{"prompt": "How many bug reports are currently open?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'Open';"}
{"prompt": "What are the latest telemetry logs recorded in the system?", "response": "SELECT log_id, admin_id, action, timestamp FROM SystemLogs ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What actions have been logged by me today in the system logs?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE admin_id = (SELECT dev_id FROM AppDevelopers WHERE name = 'Ravi') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What automated tests have been run recently?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type LIKE '%Test%' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What is the summary of the latest analytics report on app performance?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Performance' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many users have reported issues with onboarding flow?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE issue LIKE '%onboarding%';"}
{"prompt": "What are the details of the latest support ticket related to app crashes?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%crash%' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "What is the total number of support tickets submitted in the last 30 days?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE created_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What are the top 5 most frequent issues reported by users?", "response": "SELECT issue, COUNT(*) as count FROM SupportTickets GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "What are the latest updates or patches I have deployed?", "response": "SELECT action, timestamp FROM SystemLogs WHERE admin_id = (SELECT dev_id FROM AppDevelopers WHERE name = 'Ravi') AND action LIKE '%deploy%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "What is the list of beta releases scheduled?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type LIKE '%Beta Release%' ORDER BY generated_on DESC;"}
{"prompt": "How many support tickets have been resolved this week?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'Resolved' AND resolved_on >= CURRENT_DATE - INTERVAL '6 days';"}
{"prompt": "What is the average time taken to resolve support tickets?", "response": "SELECT AVG(EXTRACT(EPOCH FROM (resolved_on - created_on))/3600) AS avg_resolution_hours FROM SupportTickets WHERE resolved_on IS NOT NULL;"}
{"prompt": "What are the recent feedback or comments from users about app stability?", "response": "SELECT issue, created_on FROM SupportTickets WHERE issue LIKE '%stability%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "What is the list of all developers and their roles on the FitBoost team?", "response": "SELECT name, email, role FROM AppDevelopers;"}
{"prompt": "System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "What is my admin/developer ID and email on the system?", "response": "SELECT dev_id, email FROM AppDevelopers WHERE name = 'Priya';"}
{"prompt": "What actions have I taken today regarding CPU usage spikes and load balancing?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE admin_id = (SELECT dev_id FROM AppDevelopers WHERE name = 'Priya') AND (action LIKE '%CPU usage%' OR action LIKE '%Load balanced%' OR action LIKE '%autoscaling%') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What are the latest system log entries related to CPU usage spikes or autoscaling?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%CPU usage%' OR action LIKE '%autoscaling%';"}
{"prompt": "What system logs show load balancing actions in the database cluster?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%Load balanced%';"}
{"prompt": "What unauthorized access attempts have been logged today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE (action LIKE '%unauthorized%' OR action LIKE '%failed login%') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What are the most recent failed login attempts in the system?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%failed login%';"}
{"prompt": "What firewall rule updates have I made today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%firewall%' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What are the details of the latest firewall rules audit?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%firewall rules audit%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What traffic analysis actions have I performed today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%traffic analysis%' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What logs show provisioning of new virtual machines for updates?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%provisioned%';"}
{"prompt": "What logs show scheduled maintenance windows?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE action LIKE '%maintenance window%';"}
{"prompt": "What is the timestamp of the last scheduled maintenance window?", "response": "SELECT timestamp FROM SystemLogs WHERE action LIKE '%maintenance window%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What system actions have I performed in the last 24 hours?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE admin_id = (SELECT dev_id FROM AppDevelopers WHERE name = 'Priya') AND timestamp >= NOW() - INTERVAL '24 hours';"}
{"prompt": "What backup integrity reports have been generated today?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Backup Integrity' AND generated_on = CURRENT_DATE;"}
{"prompt": "What is the summary of the latest backup integrity report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Backup Integrity' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What security compliance scans have been completed today?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Security Compliance' AND generated_on = CURRENT_DATE;"}
{"prompt": "What is the summary of the latest security compliance scan?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Security Compliance' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the most recent system logs for all admins?", "response": "SELECT log_id, admin_id, action, timestamp FROM SystemLogs ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which admins have performed firewall updates in the last week?", "response": "SELECT DISTINCT admin_id FROM SystemLogs WHERE action LIKE '%firewall%' AND timestamp >= CURRENT_DATE - INTERVAL '6 days';"}
{"prompt": "What is the total number of unauthorized access attempts logged this month?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE (action LIKE '%unauthorized%' OR action LIKE '%failed login%') AND DATE(timestamp) >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "Which users downloaded the app in the last 30 days?", "response": "SELECT user_id, name, join_date FROM Users WHERE join_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which of these new users completed onboarding (i.e., have logged at least one workout)?", "response": "SELECT DISTINCT user_id FROM WorkoutLogs WHERE date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the churn status of new users based on onboarding completion and recent activity?", "response": "WITH NewUsers AS (SELECT user_id FROM Users WHERE join_date >= CURRENT_DATE - INTERVAL '30 days'), OnboardedUsers AS (SELECT DISTINCT user_id FROM WorkoutLogs WHERE date >= CURRENT_DATE - INTERVAL '30 days'), RecentActivity AS (SELECT DISTINCT user_id FROM WorkoutLogs WHERE date >= CURRENT_DATE - INTERVAL '7 days' UNION SELECT DISTINCT user_id FROM DietLogs WHERE date >= CURRENT_DATE - INTERVAL '7 days') SELECT nu.user_id, CASE WHEN ou.user_id IS NOT NULL THEN 'Completed Onboarding' ELSE 'Did Not Complete Onboarding' END AS onboarding_status, CASE WHEN ra.user_id IS NOT NULL THEN 'Active' ELSE 'Churned' END AS churn_status FROM NewUsers nu LEFT JOIN OnboardedUsers ou ON nu.user_id = ou.user_id LEFT JOIN RecentActivity ra ON nu.user_id = ra.user_id;"}
{"prompt": "How does engagement compare between users who completed onboarding and those who didn’t?", "response": "(See query above; compare onboarding_status and churn_status columns for analysis.)"}
{"prompt": "What are the weekly user interactions with the hydration tracker and mental health tips features?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type IN ('Hydration Tracker', 'Mental Health Tips') AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE ORDER BY generated_on DESC;"}
{"prompt": "How many users interacted with the hydration tracker this week?", "response": "SELECT COUNT(*) FROM AnalyticsReports WHERE report_type = 'Hydration Tracker' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "How many users interacted with mental health tips this week?", "response": "SELECT COUNT(*) FROM AnalyticsReports WHERE report_type = 'Mental Health Tips' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What are the summaries of user feedback on new features this week?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE (report_type = 'Hydration Tracker' OR report_type = 'Mental Health Tips') AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What are the most recent analytics reports about user engagement with new features?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type IN ('Hydration Tracker', 'Mental Health Tips') ORDER BY generated_on DESC LIMIT 10;"}
{"prompt": "What are the top 5 most recent A/B test reports on workout summary screen variations?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type LIKE '%A/B Test%' OR report_type LIKE '%Workout Summary%' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What is the latest retention result from the workout summary screen A/B test?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type LIKE '%A/B Test%' OR report_type LIKE '%Workout Summary%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many users were included in the latest A/B test?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type LIKE '%A/B Test%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the average number of workouts logged per user this week?", "response": "SELECT AVG(workout_count) FROM (SELECT COUNT(*) AS workout_count FROM WorkoutLogs WHERE date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE GROUP BY user_id) AS sub;"}
{"prompt": "How many users set a fitness goal in the last month?", "response": "SELECT COUNT(*) FROM Users WHERE goal IS NOT NULL AND join_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What are the most common fitness goals among new users this month?", "response": "SELECT goal, COUNT(*) AS count FROM Users WHERE join_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY goal ORDER BY count DESC;"}
{"prompt": "How many users have logged a hydration-related activity this week?", "response": "SELECT COUNT(DISTINCT generated_by) FROM AnalyticsReports WHERE report_type = 'Hydration Tracker' AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What is the average calories consumed by users this week?", "response": "SELECT AVG(calories_consumed) FROM DietLogs WHERE date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "How many users have logged both a workout and a diet entry this week?", "response": "SELECT COUNT(DISTINCT wl.user_id) FROM WorkoutLogs wl JOIN DietLogs dl ON wl.user_id = dl.user_id WHERE wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE AND dl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What is the trend in daily active users over the past week?", "response": "SELECT wl.date, COUNT(DISTINCT wl.user_id) AS daily_active_users FROM WorkoutLogs wl WHERE wl.date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE GROUP BY wl.date ORDER BY wl.date;"}
{"prompt": "What is the total number of unique users who interacted with any new feature this week?", "response": "SELECT COUNT(DISTINCT generated_by) FROM AnalyticsReports WHERE report_type IN ('Hydration Tracker', 'Mental Health Tips') AND generated_on BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "EmployeeManagement", "response": "nan"}
{"prompt": "Employees", "response": "nan"}
{"prompt": "Natural Language Question (Anjali’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Anjali';"}
{"prompt": "What is my current leave balance?", "response": "SELECT SUM(end_date - start_date + 1) AS leave_days FROM Leaves WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND status = 'Approved' AND start_date >= CURRENT_DATE;"}
{"prompt": "What is the status of my upcoming leave requests?", "response": "SELECT leave_type, start_date, end_date, status FROM Leaves WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND start_date >= CURRENT_DATE;"}
{"prompt": "How do I apply for two vacation days next month?", "response": "INSERT INTO Leaves (employee_id, leave_type, start_date, end_date, status) VALUES ((SELECT employee_id FROM Employees WHERE first_name = 'Anjali'), 'Vacation', '2025-07-10', '2025-07-11', 'Pending');"}
{"prompt": "What is the summary of my most recent performance review?", "response": "SELECT review_date, score, comments FROM PerformanceReviews WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "Has my manager recommended me for any training programs?", "response": "SELECT t.title, t.scheduled_date FROM Trainings t JOIN Employees e ON t.conducted_by = e.employee_id WHERE t.training_id IN (SELECT training_id FROM TrainingParticipants WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali')) AND t.title LIKE '%cloud infrastructure%';"}
{"prompt": "What are the details of the next training program I am recommended for?", "response": "SELECT t.title, t.description, t.scheduled_date FROM Trainings t JOIN TrainingParticipants tp ON t.training_id = tp.training_id WHERE tp.employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND t.scheduled_date >= CURRENT_DATE ORDER BY t.scheduled_date ASC LIMIT 1;"}
{"prompt": "What is my current position and department?", "response": "SELECT position, department_id FROM Employees WHERE first_name = 'Anjali';"}
{"prompt": "Who is my manager?", "response": "SELECT e2.first_name, e2.last_name FROM Employees e1 JOIN Employees e2 ON e1.manager_id = e2.employee_id WHERE e1.first_name = 'Anjali';"}
{"prompt": "How do I update my skill profile with a new certification?", "response": "UPDATE Employees SET position = CONCAT(position, ', Cloud Infrastructure Certified') WHERE first_name = 'Anjali';"}
{"prompt": "What events or trainings am I scheduled to attend next week?", "response": "SELECT t.title, t.scheduled_date FROM Trainings t JOIN TrainingParticipants tp ON t.training_id = tp.training_id WHERE tp.employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND t.scheduled_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Have I confirmed my attendance for the upcoming team-building event?", "response": "SELECT status FROM TrainingParticipants WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND training_id = (SELECT training_id FROM Trainings WHERE title LIKE '%team-building%' AND scheduled_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days');"}
{"prompt": "What reminders have I received about quarterly feedback?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Reminder' AND summary LIKE '%quarterly feedback%' AND generated_by = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali');"}
{"prompt": "How do I submit my quarterly feedback for peers?", "response": "INSERT INTO AnalyticsReports (generated_by, report_type, generated_on, summary) VALUES ((SELECT employee_id FROM Employees WHERE first_name = 'Anjali'), 'Quarterly Feedback', CURRENT_DATE, 'Submitted peer feedback for Q2 2025');"}
{"prompt": "What is my salary and payroll status for this month?", "response": "SELECT base_salary, bonus, deductions, net_pay, status FROM Payroll WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What is my attendance record for the last 7 days?", "response": "SELECT date, status, check_in, check_out FROM Attendance WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND date BETWEEN CURRENT_DATE - INTERVAL '6 days' AND CURRENT_DATE;"}
{"prompt": "What is the status of my most recent leave application?", "response": "SELECT leave_type, start_date, end_date, status FROM Leaves WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "What is the average score of my performance reviews?", "response": "SELECT AVG(score) FROM PerformanceReviews WHERE employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali');"}
{"prompt": "What trainings have I completed in the past year?", "response": "SELECT t.title, t.scheduled_date FROM Trainings t JOIN TrainingParticipants tp ON t.training_id = tp.training_id WHERE tp.employee_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND t.scheduled_date BETWEEN CURRENT_DATE - INTERVAL '1 year' AND CURRENT_DATE AND tp.status = 'Completed';"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anjali') AND timestamp >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "HR Managers", "response": "nan"}
{"prompt": "Natural Language Question (Ravi’s POV)", "response": "SQL Query"}
{"prompt": "What are the details of all candidates who applied for the software engineer position?", "response": "SELECT candidate_id, name, email, status FROM Candidates WHERE applied_position = 'Software Engineer';"}
{"prompt": "Which candidates for the software engineer position are shortlisted?", "response": "SELECT candidate_id, name, email FROM Candidates WHERE applied_position = 'Software Engineer' AND status = 'Shortlisted';"}
{"prompt": "How do I schedule an interview for a shortlisted candidate?", "response": "INSERT INTO AnalyticsReports (report_type, generated_by, generated_on, summary) VALUES ('Interview Scheduled', (SELECT employee_id FROM Employees WHERE first_name = 'Ravi'), CURRENT_DATE, 'Interview scheduled for candidate_id X');"}
{"prompt": "What is the attendance report for all employees for the last month?", "response": "SELECT employee_id, date, status FROM Attendance WHERE date BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day';"}
{"prompt": "Which employees had more than 3 absences last month?", "response": "SELECT employee_id, count(*) AS absence_count FROM Attendance WHERE status = 'Absent' AND date BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day' GROUP BY employee_id HAVING count(*) > 3;"}
{"prompt": "What are the average performance scores for each department?", "response": "SELECT e.department_id, d.name, AVG(pr.score) AS avg_score FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id GROUP BY e.department_id, d.name;"}
{"prompt": "What is the performance review history for employee 101?", "response": "SELECT review_date, score, comments FROM PerformanceReviews WHERE employee_id = 101 ORDER BY review_date DESC;"}
{"prompt": "Which employees are due for performance appraisal this month?", "response": "SELECT DISTINCT employee_id FROM PerformanceReviews WHERE review_date BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE;"}
{"prompt": "What are the details of the latest training program on leadership skills?", "response": "SELECT title, description, scheduled_date FROM Trainings WHERE title LIKE '%leadership%' ORDER BY scheduled_date DESC LIMIT 1;"}
{"prompt": "Which employees are enrolled in the upcoming leadership skills training?", "response": "SELECT tp.employee_id, e.first_name, e.last_name FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id JOIN Employees e ON tp.employee_id = e.employee_id WHERE t.title LIKE '%leadership%' AND t.scheduled_date >= CURRENT_DATE;"}
{"prompt": "What are the most recent employee queries about benefits?", "response": "SELECT ticket_id, user_id, issue, created_on FROM SupportTickets WHERE issue LIKE '%benefit%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "How do I update the company’s leave policies in the system?", "response": "INSERT INTO AnalyticsReports (report_type, generated_by, generated_on, summary) VALUES ('Policy Update', (SELECT employee_id FROM Employees WHERE first_name = 'Ravi'), CURRENT_DATE, 'Leave policy updated');"}
{"prompt": "What is the attrition rate for the last month?", "response": "SELECT (SELECT count(*) FROM Employees WHERE status = 'Resigned' AND date_of_joining BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')::float / (SELECT count(*) FROM Employees WHERE date_of_joining <= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day') AS attrition_rate;"}
{"prompt": "How many new employees joined in the last month?", "response": "SELECT COUNT(*) FROM Employees WHERE date_of_joining BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day';"}
{"prompt": "What is the summary of the latest monthly HR report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'HR Report' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which departments have ongoing recruitments?", "response": "SELECT d.name FROM Departments d JOIN Recruitments r ON d.department_id = r.department_id WHERE r.status = 'Open';"}
{"prompt": "What is the status of payroll processing for this month?", "response": "SELECT employee_id, status FROM Payroll WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "Which employees have not completed their quarterly feedback?", "response": "SELECT employee_id FROM Employees WHERE employee_id NOT IN (SELECT generated_by FROM AnalyticsReports WHERE report_type = 'Quarterly Feedback' AND generated_on >= DATE_TRUNC('quarter', CURRENT_DATE));"}
{"prompt": "What is the list of all employees with their current department and position?", "response": "SELECT e.employee_id, e.first_name, e.last_name, d.name AS department, e.position FROM Employees e JOIN Departments d ON e.department_id = d.department_id;"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Ravi') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Team Leads/Project Managers", "response": "nan"}
{"prompt": "Natural Language Question (Sonia’s POV)", "response": "SQL Query"}
{"prompt": "What are the details of all projects I am managing?", "response": "SELECT project_id, name, start_date, end_date, status FROM Projects WHERE department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia');"}
{"prompt": "What is the task list (project assignments) for my team on the 'Alpha' project?", "response": "SELECT ep.employee_id, e.first_name, e.last_name, ep.role, ep.assigned_on FROM EmployeeProjects ep JOIN Employees e ON ep.employee_id = e.employee_id JOIN Projects p ON ep.project_id = p.project_id WHERE p.name = 'Alpha';"}
{"prompt": "Which of my team members are currently available (not on leave today)?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND e.employee_id NOT IN (SELECT employee_id FROM Leaves WHERE status = 'Approved' AND CURRENT_DATE BETWEEN start_date AND end_date);"}
{"prompt": "Which team members are scheduled for leave in the next two weeks?", "response": "SELECT e.employee_id, e.first_name, e.last_name, l.start_date, l.end_date FROM Employees e JOIN Leaves l ON e.employee_id = l.employee_id WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND l.status = 'Approved' AND l.start_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '14 days';"}
{"prompt": "What are the performance review scores for my team members this quarter?", "response": "SELECT e.employee_id, e.first_name, e.last_name, pr.review_date, pr.score FROM Employees e JOIN PerformanceReviews pr ON e.employee_id = pr.employee_id WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which team members have low performance scores (below 3) this quarter?", "response": "SELECT e.employee_id, e.first_name, e.last_name, pr.score FROM Employees e JOIN PerformanceReviews pr ON e.employee_id = pr.employee_id WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE) AND pr.score < 3;"}
{"prompt": "Who in my team has not attended any training in the past 6 months?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND e.employee_id NOT IN (SELECT tp.employee_id FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id WHERE t.scheduled_date >= CURRENT_DATE - INTERVAL '6 months');"}
{"prompt": "What are the upcoming project deadlines for my department?", "response": "SELECT name, end_date FROM Projects WHERE department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND end_date >= CURRENT_DATE ORDER BY end_date;"}
{"prompt": "What reminders have I sent for project milestones this month?", "response": "SELECT summary, generated_on FROM AnalyticsReports WHERE report_type = 'Reminder' AND generated_by = (SELECT employee_id FROM Employees WHERE first_name = 'Sonia') AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How do I update the deadline for the 'Beta' project to July 31, 2025?", "response": "UPDATE Projects SET end_date = '2025-07-31' WHERE name = 'Beta';"}
{"prompt": "How do I send a reminder for the 'Alpha' project milestone?", "response": "INSERT INTO AnalyticsReports (report_type, generated_by, generated_on, summary) VALUES ('Reminder', (SELECT employee_id FROM Employees WHERE first_name = 'Sonia'), CURRENT_DATE, 'Milestone reminder for Alpha project');"}
{"prompt": "How do I submit feedback for my team members’ performance appraisals?", "response": "INSERT INTO PerformanceReviews (employee_id, review_date, reviewer_id, score, comments) VALUES (TEAM_MEMBER_ID, CURRENT_DATE, (SELECT employee_id FROM Employees WHERE first_name = 'Sonia'), SCORE, 'Feedback comments');"}
{"prompt": "What are the latest staffing or resource issues reported to HR?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE issue LIKE '%resource%' OR issue LIKE '%staffing%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "Which of my team members have open support tickets?", "response": "SELECT DISTINCT e.employee_id, e.first_name, e.last_name FROM Employees e JOIN SupportTickets s ON e.employee_id = s.user_id WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND s.status != 'Resolved';"}
{"prompt": "What is the productivity score for each team member this month? (Assuming 'score' in PerformanceReviews is productivity)", "response": "SELECT e.employee_id, e.first_name, e.last_name, AVG(pr.score) AS avg_score FROM Employees e JOIN PerformanceReviews pr ON e.employee_id = pr.employee_id WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND pr.review_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY e.employee_id, e.first_name, e.last_name;"}
{"prompt": "What is the summary of the latest team productivity report I generated?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Productivity Report' AND generated_by = (SELECT employee_id FROM Employees WHERE first_name = 'Sonia') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the list of all employees in my department, with their positions?", "response": "SELECT employee_id, first_name, last_name, position FROM Employees WHERE department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia');"}
{"prompt": "Which of my team members have upcoming birthdays this month?", "response": "SELECT employee_id, first_name, last_name FROM Employees WHERE department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND EXTRACT(MONTH FROM date_of_joining) = EXTRACT(MONTH FROM CURRENT_DATE);"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Sonia') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which team members have not submitted their quarterly feedback?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE e.department_id = (SELECT department_id FROM Employees WHERE first_name = 'Sonia') AND e.employee_id NOT IN (SELECT generated_by FROM AnalyticsReports WHERE report_type = 'Quarterly Feedback' AND generated_on >= DATE_TRUNC('quarter', CURRENT_DATE));"}
{"prompt": "Department Heads", "response": "nan"}
{"prompt": "Natural Language Question (Rajesh’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as the head of Marketing?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Rajesh' AND position = 'Head' AND department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing');"}
{"prompt": "Who are all the employees in the Marketing department?", "response": "SELECT employee_id, first_name, last_name, position FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing');"}
{"prompt": "What are the current projects managed by the Marketing department?", "response": "SELECT project_id, name, start_date, end_date, status FROM Projects WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing');"}
{"prompt": "What are the performance review scores for Marketing team members this quarter?", "response": "SELECT e.employee_id, e.first_name, e.last_name, pr.review_date, pr.score FROM Employees e JOIN PerformanceReviews pr ON e.employee_id = pr.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which Marketing employees have performance review scores below 3 this quarter?", "response": "SELECT e.employee_id, e.first_name, e.last_name, pr.score FROM Employees e JOIN PerformanceReviews pr ON e.employee_id = pr.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE) AND pr.score < 3;"}
{"prompt": "What are the skill gaps in my team based on recent performance reviews?", "response": "SELECT e.employee_id, e.first_name, e.last_name, pr.comments FROM Employees e JOIN PerformanceReviews pr ON e.employee_id = pr.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND pr.comments LIKE '%skill gap%';"}
{"prompt": "Which roles are currently open for recruitment in the Marketing department?", "response": "SELECT job_title, status FROM Recruitments WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND status = 'Open';"}
{"prompt": "Which candidates have applied for open roles in the Marketing department?", "response": "SELECT c.candidate_id, c.name, c.applied_position, c.status FROM Candidates c JOIN Recruitments r ON c.applied_position = r.job_title WHERE r.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND r.status = 'Open';"}
{"prompt": "Which leave requests in the Marketing department are pending my approval?", "response": "SELECT l.leave_id, e.first_name, e.last_name, l.leave_type, l.start_date, l.end_date, l.status FROM Leaves l JOIN Employees e ON l.employee_id = e.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND l.status = 'Pending' AND l.approved_by = (SELECT employee_id FROM Employees WHERE first_name = 'Rajesh');"}
{"prompt": "Which approved leave requests overlap with ongoing Marketing projects?", "response": "SELECT l.leave_id, e.first_name, e.last_name, l.start_date, l.end_date, p.name AS project_name FROM Leaves l JOIN Employees e ON l.employee_id = e.employee_id JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id JOIN Projects p ON ep.project_id = p.project_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND l.status = 'Approved' AND (l.start_date BETWEEN p.start_date AND p.end_date OR l.end_date BETWEEN p.start_date AND p.end_date);"}
{"prompt": "What is the budget utilization for Marketing department training and development this year?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type LIKE '%Training%' OR report_type LIKE '%Development%' AND generated_by IN (SELECT employee_id FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing')) AND generated_on >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "Which Marketing employees have attended training programs in the last 6 months?", "response": "SELECT DISTINCT e.employee_id, e.first_name, e.last_name FROM Employees e JOIN TrainingParticipants tp ON e.employee_id = tp.employee_id JOIN Trainings t ON tp.training_id = t.training_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND t.scheduled_date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "What are the upcoming project deadlines for the Marketing department?", "response": "SELECT name, end_date FROM Projects WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND end_date >= CURRENT_DATE ORDER BY end_date;"}
{"prompt": "What is the average performance review score for the Marketing department this year?", "response": "SELECT AVG(pr.score) FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND pr.review_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "What are the main achievements, challenges, and plans for improvement for the Marketing department this month?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Department Summary' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE) AND generated_by IN (SELECT employee_id FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing'));"}
{"prompt": "Which Marketing employees have more than 3 absences in the last month?", "response": "SELECT e.employee_id, e.first_name, e.last_name, COUNT(a.status) AS absences FROM Employees e JOIN Attendance a ON e.employee_id = a.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND a.status = 'Absent' AND a.date BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day' GROUP BY e.employee_id, e.first_name, e.last_name HAVING COUNT(a.status) > 3;"}
{"prompt": "What is the list of all Marketing employees with their current position and manager?", "response": "SELECT e.employee_id, e.first_name, e.last_name, e.position, m.first_name AS manager_first, m.last_name AS manager_last FROM Employees e LEFT JOIN Employees m ON e.manager_id = m.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing');"}
{"prompt": "What is the status of payroll processing for Marketing employees this month?", "response": "SELECT e.employee_id, e.first_name, e.last_name, p.status FROM Employees e JOIN Payroll p ON e.employee_id = p.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') AND p.month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What are the most recent support tickets from Marketing employees?", "response": "SELECT s.ticket_id, s.issue, s.status, s.created_on FROM SupportTickets s JOIN Employees e ON s.user_id = e.employee_id WHERE e.department_id = (SELECT department_id FROM Departments WHERE name = 'Marketing') ORDER BY s.created_on DESC LIMIT 10;"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Rajesh') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Payroll Officers", "response": "nan"}
{"prompt": "Natural Language Question (Suresh’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as a payroll officer?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Suresh' AND position = 'Payroll Officer';"}
{"prompt": "What are the monthly timesheet (attendance) records for all employees for the current month?", "response": "SELECT employee_id, date, status, check_in, check_out FROM Attendance WHERE date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which employees have missing attendance records this month?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE NOT EXISTS (SELECT 1 FROM Attendance a WHERE a.employee_id = e.employee_id AND a.date >= DATE_TRUNC('month', CURRENT_DATE));"}
{"prompt": "What are the total working days and absences for each employee this month?", "response": "SELECT employee_id, COUNT(*) AS total_days, SUM(CASE WHEN status = 'Absent' THEN 1 ELSE 0 END) AS absences FROM Attendance WHERE date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY employee_id;"}
{"prompt": "What are the payroll details for all employees for the current month?", "response": "SELECT employee_id, base_salary, bonus, deductions, net_pay, status FROM Payroll WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "Which employees received a bonus this month?", "response": "SELECT employee_id, bonus FROM Payroll WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM') AND bonus > 0;"}
{"prompt": "How do I update the bonus payout for employee 101?", "response": "UPDATE Payroll SET bonus = NEW_BONUS_AMOUNT WHERE employee_id = 101 AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "How do I update the tax deduction for employee 102?", "response": "UPDATE Payroll SET deductions = NEW_DEDUCTION_AMOUNT WHERE employee_id = 102 AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What is the salary slip for employee 103 for this month?", "response": "SELECT base_salary, bonus, deductions, net_pay, status FROM Payroll WHERE employee_id = 103 AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What are the reasons for salary deductions for employee 104 this month? (Assuming reasons are in Payroll 'deductions' or comments)", "response": "SELECT deductions FROM Payroll WHERE employee_id = 104 AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What is the total compensation cost for the company this month?", "response": "SELECT SUM(net_pay) AS total_compensation FROM Payroll WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What is the payroll status for all employees this month?", "response": "SELECT employee_id, status FROM Payroll WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "Which employees have not received their salary for this month?", "response": "SELECT employee_id FROM Payroll WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM') AND status != 'Paid';"}
{"prompt": "What are the approved leaves for employees this month that may affect payroll?", "response": "SELECT employee_id, leave_type, start_date, end_date FROM Leaves WHERE status = 'Approved' AND (start_date <= CURRENT_DATE AND end_date >= DATE_TRUNC('month', CURRENT_DATE));"}
{"prompt": "What is the net pay trend for employee 105 over the last 6 months?", "response": "SELECT month, net_pay FROM Payroll WHERE employee_id = 105 ORDER BY month DESC LIMIT 6;"}
{"prompt": "What is the list of all employees with their current salary and department?", "response": "SELECT e.employee_id, e.first_name, e.last_name, e.salary, d.name AS department FROM Employees e JOIN Departments d ON e.department_id = d.department_id;"}
{"prompt": "How do I archive payroll records for this month? (Assume archiving means marking as 'Archived')", "response": "UPDATE Payroll SET status = 'Archived' WHERE month = TO_CHAR(CURRENT_DATE, 'YYYY-MM');"}
{"prompt": "What is the summary of the latest payroll compliance report? (Assuming summary in AnalyticsReports)", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Payroll Compliance' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Suresh') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How do I schedule salary disbursement for this month? (Assume this is an action log entry)", "response": "INSERT INTO SystemLogs (user_id, role, action, timestamp) VALUES ((SELECT employee_id FROM Employees WHERE first_name = 'Suresh'), 'Payroll Officer', 'Scheduled salary disbursement for '"}
{"prompt": "Recruitment Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Neha’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as a recruitment specialist?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Neha' AND position = 'Recruitment Specialist';"}
{"prompt": "What are the current open job postings for software developers and marketing executives?", "response": "SELECT recruitment_id, job_title, posted_on, status FROM Recruitments WHERE job_title IN ('Software Developer', 'Marketing Executive') AND status = 'Open';"}
{"prompt": "How do I post a new job opening for a software developer?", "response": "INSERT INTO Recruitments (job_title, department_id, posted_on, status) VALUES ('Software Developer', (SELECT department_id FROM Departments WHERE name = 'IT'), CURRENT_DATE, 'Open');"}
{"prompt": "How do I post a new job opening for a marketing executive?", "response": "INSERT INTO Recruitments (job_title, department_id, posted_on, status) VALUES ('Marketing Executive', (SELECT department_id FROM Departments WHERE name = 'Marketing'), CURRENT_DATE, 'Open');"}
{"prompt": "Which candidates have applied for the software developer position?", "response": "SELECT candidate_id, name, email, status FROM Candidates WHERE applied_position = 'Software Developer';"}
{"prompt": "Which candidates have applied for the marketing executive position?", "response": "SELECT candidate_id, name, email, status FROM Candidates WHERE applied_position = 'Marketing Executive';"}
{"prompt": "Which candidates are shortlisted for the software developer position?", "response": "SELECT candidate_id, name, email FROM Candidates WHERE applied_position = 'Software Developer' AND status = 'Shortlisted';"}
{"prompt": "Which candidates are shortlisted for the marketing executive position?", "response": "SELECT candidate_id, name, email FROM Candidates WHERE applied_position = 'Marketing Executive' AND status = 'Shortlisted';"}
{"prompt": "How do I update the status of candidate 101 to 'Shortlisted'?", "response": "UPDATE Candidates SET status = 'Shortlisted' WHERE candidate_id = 101;"}
{"prompt": "How do I schedule an interview for candidate 102?", "response": "INSERT INTO AnalyticsReports (report_type, generated_by, generated_on, summary) VALUES ('Interview Scheduled', (SELECT employee_id FROM Employees WHERE first_name = 'Neha'), CURRENT_DATE, 'Interview scheduled for candidate 102');"}
{"prompt": "Which hiring managers are available for interviews this week?", "response": "SELECT employee_id, first_name, last_name FROM Employees WHERE position LIKE '%Manager%' AND employee_id NOT IN (SELECT employee_id FROM Leaves WHERE status = 'Approved' AND start_date <= CURRENT_DATE + INTERVAL '7 days' AND end_date >= CURRENT_DATE);"}
{"prompt": "Which candidates have been sent interview notifications this week?", "response": "SELECT summary, generated_on FROM AnalyticsReports WHERE report_type = 'Interview Scheduled' AND generated_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the status of all candidates in the recruitment pipeline for software developers?", "response": "SELECT candidate_id, name, status FROM Candidates WHERE applied_position = 'Software Developer';"}
{"prompt": "What is the status of all candidates in the recruitment pipeline for marketing executives?", "response": "SELECT candidate_id, name, status FROM Candidates WHERE applied_position = 'Marketing Executive';"}
{"prompt": "How many candidates have been hired for the software developer position this year?", "response": "SELECT COUNT(*) FROM Candidates WHERE applied_position = 'Software Developer' AND status = 'Hired' AND EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "What is the weekly report on hiring progress for all open positions?", "response": "SELECT job_title, COUNT(*) AS total_applications, SUM(CASE WHEN status = 'Hired' THEN 1 ELSE 0 END) AS total_hired FROM Candidates WHERE applied_position IN (SELECT job_title FROM Recruitments WHERE status = 'Open') AND EXTRACT(WEEK FROM CURRENT_DATE) = EXTRACT(WEEK FROM CURRENT_DATE) GROUP BY job_title;"}
{"prompt": "What is the recruitment source for each candidate? (Assuming source is tracked in summary in AnalyticsReports)", "response": "SELECT c.candidate_id, c.name, ar.summary AS source FROM Candidates c LEFT JOIN AnalyticsReports ar ON ar.report_type = 'Recruitment Source' AND ar.generated_by = c.candidate_id;"}
{"prompt": "How do I update a candidate’s status to ‘Interviewed’?", "response": "UPDATE Candidates SET status = 'Interviewed' WHERE candidate_id = CANDIDATE_ID;"}
{"prompt": "What is the list of all open recruitments with their department names?", "response": "SELECT r.recruitment_id, r.job_title, d.name AS department, r.posted_on, r.status FROM Recruitments r JOIN Departments d ON r.department_id = d.department_id WHERE r.status = 'Open';"}
{"prompt": "What actions have I performed in the system logs this week?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Neha') AND timestamp >= CURRENT_DATE - INTERVAL '6 days';"}
{"prompt": "Training and Development Officers", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as a Training and Development Officer?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Priya' AND position = 'Training and Development Officer';"}
{"prompt": "What are all scheduled trainings for the next month?", "response": "SELECT training_id, title, scheduled_date FROM Trainings WHERE scheduled_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '1 month';"}
{"prompt": "Which employees have not attended any training in the last 6 months?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE e.employee_id NOT IN (SELECT tp.employee_id FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id WHERE t.scheduled_date >= CURRENT_DATE - INTERVAL '6 months');"}
{"prompt": "What are the details of the latest leadership training course?", "response": "SELECT training_id, title, description, scheduled_date FROM Trainings WHERE title LIKE '%leadership%' ORDER BY scheduled_date DESC LIMIT 1;"}
{"prompt": "How do I schedule a new leadership training session?", "response": "INSERT INTO Trainings (title, description, scheduled_date, conducted_by) VALUES ('Leadership Essentials', 'Leadership skills for managers', '2025-07-10', (SELECT employee_id FROM Employees WHERE first_name = 'Priya'));"}
{"prompt": "How do I send invitations to employees for training 101?", "response": "INSERT INTO TrainingParticipants (training_id, employee_id, status) SELECT 101, employee_id, 'Invited' FROM Employees WHERE department_id = (SELECT department_id FROM Employees WHERE first_name = 'Priya');"}
{"prompt": "Which employees have confirmed attendance for training 101?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM TrainingParticipants tp JOIN Employees e ON tp.employee_id = e.employee_id WHERE tp.training_id = 101 AND tp.status = 'Confirmed';"}
{"prompt": "What is the attendance record for the last 3 training sessions?", "response": "SELECT tp.training_id, t.title, tp.employee_id, tp.status FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id ORDER BY t.scheduled_date DESC LIMIT 3;"}
{"prompt": "What feedback was received for the last leadership training?", "response": "SELECT ar.summary FROM AnalyticsReports ar JOIN Trainings t ON ar.generated_by = t.training_id WHERE t.title LIKE '%leadership%' AND ar.report_type = 'Training Feedback' ORDER BY t.scheduled_date DESC LIMIT 1;"}
{"prompt": "Which department heads have collaborated with me on training programs?", "response": "SELECT DISTINCT d.head_id, e.first_name, e.last_name FROM Departments d JOIN Trainings t ON d.department_id = t.conducted_by JOIN Employees e ON d.head_id = e.employee_id WHERE t.conducted_by = (SELECT employee_id FROM Employees WHERE first_name = 'Priya');"}
{"prompt": "What are the training programs aligned with business goals this quarter?", "response": "SELECT training_id, title, scheduled_date FROM Trainings WHERE description LIKE '%business goal%' AND scheduled_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What is the completion rate for each training program this year?", "response": "SELECT t.training_id, t.title, COUNT(tp.employee_id) FILTER (WHERE tp.status = 'Completed')::float / COUNT(tp.employee_id) AS completion_rate FROM Trainings t LEFT JOIN TrainingParticipants tp ON t.training_id = tp.training_id WHERE t.scheduled_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY t.training_id, t.title;"}
{"prompt": "What is the average feedback score for each training program? (Assuming score in AnalyticsReports summary)", "response": "SELECT t.training_id, t.title, AVG(CAST(ar.summary AS FLOAT)) AS avg_score FROM Trainings t JOIN AnalyticsReports ar ON ar.generated_by = t.training_id WHERE ar.report_type = 'Training Feedback' GROUP BY t.training_id, t.title;"}
{"prompt": "Which employees have completed all mandatory training sessions this year?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE NOT EXISTS (SELECT 1 FROM Trainings t WHERE t.description LIKE '%mandatory%' AND t.scheduled_date >= DATE_TRUNC('year', CURRENT_DATE) AND NOT EXISTS (SELECT 1 FROM TrainingParticipants tp WHERE tp.employee_id = e.employee_id AND tp.training_id = t.training_id AND tp.status = 'Completed'));"}
{"prompt": "What is the list of all training programs with their scheduled dates and trainers?", "response": "SELECT t.training_id, t.title, t.scheduled_date, e.first_name AS trainer_first, e.last_name AS trainer_last FROM Trainings t JOIN Employees e ON t.conducted_by = e.employee_id;"}
{"prompt": "What is the summary of the latest training effectiveness report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Training Effectiveness' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the most common skill gaps identified across departments? (Assuming in AnalyticsReports summary)", "response": "SELECT summary, COUNT(*) AS count FROM AnalyticsReports WHERE report_type = 'Skill Gap' GROUP BY summary ORDER BY count DESC;"}
{"prompt": "What is the progress of employees in the current leadership training program?", "response": "SELECT tp.employee_id, e.first_name, e.last_name, tp.status FROM TrainingParticipants tp JOIN Employees e ON tp.employee_id = e.employee_id WHERE tp.training_id = (SELECT training_id FROM Trainings WHERE title LIKE '%leadership%' ORDER BY scheduled_date DESC LIMIT 1);"}
{"prompt": "Which employees have overdue training assignments?", "response": "SELECT tp.employee_id, e.first_name, e.last_name, t.title FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id JOIN Employees e ON tp.employee_id = e.employee_id WHERE tp.status = 'Assigned' AND t.scheduled_date < CURRENT_DATE;"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Priya') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as a system administrator?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Arjun' AND position = 'System Administrator';"}
{"prompt": "What actions have I performed in the system logs today?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Arjun') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What are the latest system log entries for all admins?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'System Administrator' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users have admin access in the system?", "response": "SELECT employee_id, first_name, last_name, position FROM Employees WHERE position LIKE '%Admin%';"}
{"prompt": "What are the most recent software updates applied to the system?", "response": "SELECT action, timestamp FROM SystemLogs WHERE action LIKE '%update%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "What security patches have been applied this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE action LIKE '%security patch%' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which users have had their access permissions changed this week?", "response": "SELECT user_id, action, timestamp FROM SystemLogs WHERE action LIKE '%access%' AND timestamp >= CURRENT_DATE - INTERVAL '6 days';"}
{"prompt": "What are the details of the last 5 backup operations?", "response": "SELECT action, timestamp FROM SystemLogs WHERE action LIKE '%backup%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "What is the summary of the latest backup integrity report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Backup Integrity' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which users have reported system issues in the last 7 days?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action LIKE '%issue%' AND timestamp >= CURRENT_DATE - INTERVAL '6 days';"}
{"prompt": "What are the most recent compliance audit reports?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Compliance Audit' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "Which employees have logged in to the system today?", "response": "SELECT DISTINCT employee_id FROM Attendance WHERE date = CURRENT_DATE;"}
{"prompt": "What are the most recent failed login attempts?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE action LIKE '%failed login%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How do I schedule a system maintenance window for tonight at 2 AM?", "response": "INSERT INTO SystemLogs (user_id, role, action, timestamp) VALUES ((SELECT employee_id FROM Employees WHERE first_name = 'Arjun'), 'System Administrator', 'Scheduled maintenance window for 2 AM', CURRENT_DATE + INTERVAL '2 hours');"}
{"prompt": "What is the list of all employees and their current system roles?", "response": "SELECT employee_id, first_name, last_name, position FROM Employees;"}
{"prompt": "Which users have been assigned new roles this month?", "response": "SELECT user_id, action, timestamp FROM SystemLogs WHERE action LIKE '%assigned role%' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What are the most common types of system actions performed this week?", "response": "SELECT action, COUNT(*) AS count FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '6 days' GROUP BY action ORDER BY count DESC;"}
{"prompt": "What is the summary of the latest disaster recovery test?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Disaster Recovery Test' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the details of all compliance-related actions I have performed this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Arjun') AND action LIKE '%compliance%' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which employees have not logged in for more than 30 days?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE NOT EXISTS (SELECT 1 FROM Attendance a WHERE a.employee_id = e.employee_id AND a.date >= CURRENT_DATE - INTERVAL '30 days');"}
{"prompt": "Executives/Directors", "response": "nan"}
{"prompt": "Natural Language Question (Anita’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as a director?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Anita' AND position = 'Director';"}
{"prompt": "What is the quarterly attrition rate for the company?", "response": "SELECT (SELECT count(*) FROM Employees WHERE status = 'Resigned' AND date_of_joining >= DATE_TRUNC('quarter', CURRENT_DATE) AND date_of_joining < CURRENT_DATE)::float / (SELECT count(*) FROM Employees WHERE date_of_joining < CURRENT_DATE) AS attrition_rate;"}
{"prompt": "What is the average productivity score for each department this quarter?", "response": "SELECT d.name, AVG(pr.score) AS avg_score FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id WHERE pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY d.name;"}
{"prompt": "What are the productivity metrics for all departments this quarter?", "response": "SELECT d.name AS department, AVG(pr.score) AS avg_score, COUNT(pr.review_id) AS review_count FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id WHERE pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY d.name;"}
{"prompt": "Which departments have the highest and lowest average performance scores this quarter?", "response": "SELECT d.name, AVG(pr.score) AS avg_score FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id WHERE pr.review_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY d.name ORDER BY avg_score DESC;"}
{"prompt": "What is the current headcount in each department?", "response": "SELECT d.name, COUNT(e.employee_id) AS headcount FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.name;"}
{"prompt": "What is the summary of the latest leadership pipeline report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Leadership Pipeline' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which employees are identified as future leaders in the latest leadership pipeline report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Leadership Pipeline' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the approved budgets for new hiring this year? (Assuming in AnalyticsReports summary)", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Hiring Budget' AND generated_on >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "What are the approved budgets for training programs this year? (Assuming in AnalyticsReports summary)", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Training Budget' AND generated_on >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "What are the most recent critical HR issues reported?", "response": "SELECT summary, generated_on FROM AnalyticsReports WHERE report_type = 'Critical HR Issue' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What is the list of all senior managers and their departments?", "response": "SELECT employee_id, first_name, last_name, department_id FROM Employees WHERE position LIKE '%Manager%';"}
{"prompt": "How do I communicate a strategic goal to all senior managers?", "response": "INSERT INTO AnalyticsReports (report_type, generated_by, generated_on, summary) VALUES ('Strategic Goal', (SELECT employee_id FROM Employees WHERE first_name = 'Anita'), CURRENT_DATE, 'Communicated strategic goal to senior managers');"}
{"prompt": "What is the trend in company-wide employee engagement scores this year? (Assuming in AnalyticsReports summary)", "response": "SELECT generated_on, summary FROM AnalyticsReports WHERE report_type = 'Engagement Score' AND generated_on >= DATE_TRUNC('year', CURRENT_DATE) ORDER BY generated_on;"}
{"prompt": "What are the top risk areas identified in the latest workforce report? (Assuming in AnalyticsReports summary)", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Workforce Risk' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the main opportunities for improvement in the latest workforce report? (Assuming in AnalyticsReports summary)", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Improvement Opportunity' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the company’s overall headcount and average tenure?", "response": "SELECT COUNT(*) AS headcount, AVG(CURRENT_DATE - date_of_joining) AS avg_tenure_days FROM Employees;"}
{"prompt": "What is the monthly hiring trend for this year?", "response": "SELECT TO_CHAR(date_of_joining, 'YYYY-MM') AS month, COUNT(*) AS hires FROM Employees WHERE date_of_joining >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY month ORDER BY month;"}
{"prompt": "What are the most recent compliance audit reports?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE report_type = 'Compliance Audit' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Anita') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Kavita’s POV)", "response": "SQL Query"}
{"prompt": "What is my employee ID and email as a data analyst?", "response": "SELECT employee_id, email FROM Employees WHERE first_name = 'Kavita' AND position = 'Data Analyst';"}
{"prompt": "What is the average performance review score for each department this year?", "response": "SELECT d.name, AVG(pr.score) AS avg_score FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id WHERE pr.review_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY d.name;"}
{"prompt": "What is the attendance rate for each department this month?", "response": "SELECT d.name, 1.0 * SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) / COUNT(a.record_id) AS attendance_rate FROM Attendance a JOIN Employees e ON a.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id WHERE a.date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY d.name;"}
{"prompt": "What is the attrition rate for each department this quarter?", "response": "SELECT d.name, (SELECT count(*) FROM Employees e2 WHERE e2.department_id = d.department_id AND e2.status = 'Resigned' AND e2.date_of_joining >= DATE_TRUNC('quarter', CURRENT_DATE) AND e2.date_of_joining < CURRENT_DATE)::float / (SELECT count(*) FROM Employees e3 WHERE e3.department_id = d.department_id AND e3.date_of_joining < CURRENT_DATE) AS attrition_rate FROM Departments d;"}
{"prompt": "Which departments have the highest attrition rates this year?", "response": "SELECT d.name, (SELECT count(*) FROM Employees e2 WHERE e2.department_id = d.department_id AND e2.status = 'Resigned' AND e2.date_of_joining >= DATE_TRUNC('year', CURRENT_DATE) AND e2.date_of_joining < CURRENT_DATE)::float / (SELECT count(*) FROM Employees e3 WHERE e3.department_id = d.department_id AND e3.date_of_joining < CURRENT_DATE) AS attrition_rate FROM Departments d ORDER BY attrition_rate DESC;"}
{"prompt": "Which employees have the highest average performance review scores this year?", "response": "SELECT e.employee_id, e.first_name, e.last_name, AVG(pr.score) AS avg_score FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id WHERE pr.review_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY avg_score DESC LIMIT 10;"}
{"prompt": "Which employees have the lowest attendance rates this month?", "response": "SELECT e.employee_id, e.first_name, e.last_name, 1.0 * SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) / COUNT(a.record_id) AS attendance_rate FROM Attendance a JOIN Employees e ON a.employee_id = e.employee_id WHERE a.date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY attendance_rate ASC LIMIT 10;"}
{"prompt": "Which departments have had more than 2 employees resign this quarter?", "response": "SELECT d.name, COUNT(e.employee_id) AS resignations FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE e.status = 'Resigned' AND e.date_of_joining >= DATE_TRUNC('quarter', CURRENT_DATE) AND e.date_of_joining < CURRENT_DATE GROUP BY d.name HAVING COUNT(e.employee_id) > 2;"}
{"prompt": "What is the trend in monthly employee turnover for the past year?", "response": "SELECT TO_CHAR(date_of_joining, 'YYYY-MM') AS month, COUNT(*) AS resignations FROM Employees WHERE status = 'Resigned' AND date_of_joining >= CURRENT_DATE - INTERVAL '1 year' GROUP BY month ORDER BY month;"}
{"prompt": "What is the average tenure of employees in each department?", "response": "SELECT d.name, AVG(CURRENT_DATE - e.date_of_joining) AS avg_tenure_days FROM Employees e JOIN Departments d ON e.department_id = d.department_id GROUP BY d.name;"}
{"prompt": "Which employees have not had a performance review in the last year?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE NOT EXISTS (SELECT 1 FROM PerformanceReviews pr WHERE pr.employee_id = e.employee_id AND pr.review_date >= CURRENT_DATE - INTERVAL '1 year');"}
{"prompt": "What is the overall company attendance rate this month?", "response": "SELECT 1.0 * SUM(CASE WHEN status = 'Present' THEN 1 ELSE 0 END) / COUNT(record_id) AS attendance_rate FROM Attendance WHERE date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What is the distribution of employee statuses (Active, Resigned, On Leave) company-wide?", "response": "SELECT status, COUNT(*) AS count FROM Employees GROUP BY status;"}
{"prompt": "Which departments have the most employees on leave today?", "response": "SELECT d.name, COUNT(l.employee_id) AS on_leave FROM Leaves l JOIN Employees e ON l.employee_id = e.employee_id JOIN Departments d ON e.department_id = d.department_id WHERE l.status = 'Approved' AND CURRENT_DATE BETWEEN l.start_date AND l.end_date GROUP BY d.name ORDER BY on_leave DESC;"}
{"prompt": "What is the average number of training sessions attended by employees this year?", "response": "SELECT AVG(training_count) FROM (SELECT COUNT(tp.training_id) AS training_count FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id WHERE t.scheduled_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY tp.employee_id) AS sub;"}
{"prompt": "Which employees have not attended any training in the last year?", "response": "SELECT e.employee_id, e.first_name, e.last_name FROM Employees e WHERE e.employee_id NOT IN (SELECT tp.employee_id FROM TrainingParticipants tp JOIN Trainings t ON tp.training_id = t.training_id WHERE t.scheduled_date >= CURRENT_DATE - INTERVAL '1 year');"}
{"prompt": "What is the average performance review score for employees who joined in the last year?", "response": "SELECT AVG(pr.score) FROM PerformanceReviews pr JOIN Employees e ON pr.employee_id = e.employee_id WHERE e.date_of_joining >= CURRENT_DATE - INTERVAL '1 year';"}
{"prompt": "Which employees have the highest number of absences this year?", "response": "SELECT e.employee_id, e.first_name, e.last_name, COUNT(a.record_id) AS absences FROM Attendance a JOIN Employees e ON a.employee_id = e.employee_id WHERE a.status = 'Absent' AND a.date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY absences DESC LIMIT 10;"}
{"prompt": "What is the gender distribution of employees in each department? (Assuming gender column exists; if not, skip/replace)", "response": "-- No gender column in schema; skip or replace this question."}
{"prompt": "What actions have I performed in the system logs this month?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT employee_id FROM Employees WHERE first_name = 'Kavita') AND timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "nan", "response": "nan"}
{"prompt": "FreelanceMarketplace", "response": "nan"}
{"prompt": "Freelancers", "response": "nan"}
{"prompt": "Natural Language Question (Aarav’s POV)", "response": "SQL Query"}
{"prompt": "What is my current profile bio and skill set?", "response": "SELECT bio, skills FROM Profiles WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aarav');"}
{"prompt": "Which design projects have I applied for recently?", "response": "SELECT P.title, P.description, Pr.proposal_date, Pr.status FROM Proposals Pr JOIN Projects P ON Pr.project_id = P.project_id WHERE Pr.freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY Pr.proposal_date DESC;"}
{"prompt": "What is the status of my latest proposal?", "response": "SELECT P.title, Pr.status, Pr.proposal_date FROM Proposals Pr JOIN Projects P ON Pr.project_id = P.project_id WHERE Pr.freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY Pr.proposal_date DESC LIMIT 1;"}
{"prompt": "Which contracts am I currently working on?", "response": "SELECT C.contract_id, P.title, C.start_date, C.status FROM Contracts C JOIN Projects P ON C.project_id = P.project_id WHERE C.freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND C.status = 'Active';"}
{"prompt": "What are the milestones for my active contracts?", "response": "SELECT M.milestone_id, M.title, M.amount, M.due_date, M.status FROM Milestones M JOIN Contracts C ON M.contract_id = C.contract_id WHERE C.freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND C.status = 'Active';"}
{"prompt": "How much have I earned from completed contracts?", "response": "SELECT SUM(amount) AS total_earned FROM Contracts WHERE freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND status = 'Completed';"}
{"prompt": "What payments have I received recently?", "response": "SELECT amount, paid_on, status FROM Payments WHERE contract_id IN (SELECT contract_id FROM Contracts WHERE freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav')) ORDER BY paid_on DESC;"}
{"prompt": "What is my current profile rating?", "response": "SELECT rating FROM Profiles WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aarav');"}
{"prompt": "What feedback or ratings did I give to my latest client?", "response": "SELECT rating FROM Profiles WHERE user_id = (SELECT client_id FROM Projects WHERE project_id = (SELECT project_id FROM Contracts WHERE freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY end_date DESC LIMIT 1));"}
{"prompt": "What analytics reports have I generated to improve my visibility?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY generated_on DESC;"}
{"prompt": "What support tickets have I raised recently?", "response": "SELECT issue, created_on, status, resolved_on FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY created_on DESC;"}
{"prompt": "Have I been involved in any disputes?", "response": "SELECT dispute_id, reason, status, resolution FROM Disputes WHERE raised_by = (SELECT user_id FROM Users WHERE name = 'Aarav') OR contract_id IN (SELECT contract_id FROM Contracts WHERE freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav'));"}
{"prompt": "What actions have I performed on the platform recently?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY timestamp DESC;"}
{"prompt": "What marketing campaigns am I targeted by?", "response": "SELECT name, start_date, end_date, target_audience FROM MarketingCampaigns WHERE target_audience LIKE '%graphic designer%';"}
{"prompt": "What projects have I completed in the past?", "response": "SELECT P.title, P.description, C.end_date FROM Contracts C JOIN Projects P ON C.project_id = P.project_id WHERE C.freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND C.status = 'Completed';"}
{"prompt": "What is the budget and status of the logo design job I just got?", "response": "SELECT P.title, P.budget, P.status FROM Projects P WHERE P.project_id = (SELECT project_id FROM Contracts WHERE freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY start_date DESC LIMIT 1);"}
{"prompt": "What milestones are pending approval for my latest contract?", "response": "SELECT M.title, M.amount, M.due_date, M.status FROM Milestones M WHERE contract_id = (SELECT contract_id FROM Contracts WHERE freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') ORDER BY start_date DESC LIMIT 1) AND status = 'Pending';"}
{"prompt": "What is the total amount pending payment for my active contracts?", "response": "SELECT SUM(M.amount) AS pending_amount FROM Milestones M JOIN Contracts C ON M.contract_id = C.contract_id WHERE C.freelancer_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND C.status = 'Active' AND M.status = 'Pending';"}
{"prompt": "What webinars or campaigns can I join to improve my skills?", "response": "SELECT name, start_date, end_date FROM MarketingCampaigns WHERE name LIKE '%webinar%' OR name LIKE '%Branding Trends%';"}
{"prompt": "How has my profile changed over time (recent updates)?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Aarav') AND action LIKE '%profile%' ORDER BY timestamp DESC;"}
{"prompt": "Clients/Employers", "response": "nan"}
{"prompt": "Natural Language Question (Nisha’s POV)", "response": "SQL Query"}
{"prompt": "What is my current profile information?", "response": "SELECT bio, skills, experience_level, rating FROM Profiles WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Nisha');"}
{"prompt": "What projects have I posted so far?", "response": "SELECT project_id, title, description, budget, status, posted_on FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC;"}
{"prompt": "What is the status of my latest project?", "response": "SELECT title, status, posted_on FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1;"}
{"prompt": "How many proposals did I receive for my latest project?", "response": "SELECT COUNT(*) FROM Proposals WHERE project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1);"}
{"prompt": "Who are the freelancers that submitted proposals for my latest project?", "response": "SELECT U.name, U.email, Pr.bid_amount, Pr.proposal_date, Pr.status FROM Proposals Pr JOIN Users U ON Pr.freelancer_id = U.user_id WHERE Pr.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1);"}
{"prompt": "Which freelancers did I shortlist for interviews?", "response": "SELECT U.name, Pr.status FROM Proposals Pr JOIN Users U ON Pr.freelancer_id = U.user_id WHERE Pr.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1) AND Pr.status = 'Shortlisted';"}
{"prompt": "What is the profile and rating of the freelancer I selected?", "response": "SELECT U.name, P.bio, P.skills, P.rating FROM Contracts C JOIN Users U ON C.freelancer_id = U.user_id JOIN Profiles P ON U.user_id = P.user_id WHERE C.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1) ORDER BY C.start_date DESC LIMIT 1;"}
{"prompt": "What milestones have I set for the current project?", "response": "SELECT M.milestone_id, M.title, M.amount, M.due_date, M.status FROM Milestones M JOIN Contracts C ON M.contract_id = C.contract_id WHERE C.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1);"}
{"prompt": "What is the progress status of each milestone?", "response": "SELECT M.title, M.status, M.due_date FROM Milestones M JOIN Contracts C ON M.contract_id = C.contract_id WHERE C.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1);"}
{"prompt": "How much have I paid for the current project so far?", "response": "SELECT SUM(P.amount) AS total_paid FROM Payments P JOIN Contracts C ON P.contract_id = C.contract_id WHERE C.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1) AND P.status = 'Paid';"}
{"prompt": "What is the payment status for the current contract?", "response": "SELECT P.amount, P.paid_on, P.status FROM Payments P JOIN Contracts C ON P.contract_id = C.contract_id WHERE C.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1);"}
{"prompt": "What support tickets have I raised?", "response": "SELECT issue, created_on, status, resolved_on FROM SupportTickets WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY created_on DESC;"}
{"prompt": "Have there been any disputes on my projects?", "response": "SELECT D.dispute_id, D.reason, D.status, D.resolution FROM Disputes D JOIN Contracts C ON D.contract_id = C.contract_id WHERE C.project_id IN (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha'));"}
{"prompt": "What actions have I performed on the platform recently?", "response": "SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY timestamp DESC;"}
{"prompt": "What are the details of the freelancer I saved to favorites?", "response": "(Assuming 'favorites' is not in schema, so list last hired freelancer)"}
{"prompt": "nan", "response": "SELECT U.name, U.email, P.skills, P.rating FROM Contracts C JOIN Users U ON C.freelancer_id = U.user_id JOIN Profiles P ON U.user_id = P.user_id WHERE C.project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1) ORDER BY C.start_date DESC LIMIT 1;"}
{"prompt": "What is the total budget allocated across all my projects?", "response": "SELECT SUM(budget) AS total_budget FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha');"}
{"prompt": "What analytics reports have I generated as a client?", "response": "SELECT report_type, generated_on, summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY generated_on DESC;"}
{"prompt": "What marketing campaigns are targeting startup founders like me?", "response": "SELECT name, start_date, end_date, target_audience FROM MarketingCampaigns WHERE target_audience LIKE '%startup founder%';"}
{"prompt": "What is the status of all contracts for my latest project?", "response": "SELECT contract_id, freelancer_id, start_date, end_date, status FROM Contracts WHERE project_id = (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha') ORDER BY posted_on DESC LIMIT 1);"}
{"prompt": "What reviews or ratings have I given to freelancers?", "response": "SELECT P.rating FROM Profiles P WHERE P.user_id IN (SELECT freelancer_id FROM Contracts WHERE project_id IN (SELECT project_id FROM Projects WHERE client_id = (SELECT user_id FROM Users WHERE name = 'Nisha')));"}
{"prompt": "Project Managers", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the status of the ongoing mobile app design project?", "response": "Select status, budget, posted_on from Projects where title like '%mobile app design%' order by posted_on desc limit 1;"}
{"prompt": "Who are the freelancers working on the mobile app design project?", "response": "Select U.name, U.email, Pr.user_type from Contracts C join Users U on C.freelancer_id = U.user_id join Profiles Pr on U.user_id = Pr.user_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1);"}
{"prompt": "What milestones are set for the mobile app design project and their current status?", "response": "Select M.title, M.amount, M.due_date, M.status from Milestones M join Contracts C on M.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1);"}
{"prompt": "What tasks or deliverables are pending for the UI designer?", "response": "Select M.title, M.amount, M.due_date, M.status from Milestones M join Contracts C on M.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1) and C.freelancer_id = (Select user_id from Users where name like '%UI designer%');"}
{"prompt": "What copy has been submitted by the freelance content writer?", "response": "Select M.title, M.status, M.due_date from Milestones M join Contracts C on M.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1) and C.freelancer_id = (Select user_id from Users where name like '%content writer%');"}
{"prompt": "What are the upcoming deadlines for the mobile app design project?", "response": "Select M.title, M.due_date from Milestones M join Contracts C on M.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1) and M.status != 'Completed' order by M.due_date asc;"}
{"prompt": "What is the overall progress of all milestones in the mobile app design project?", "response": "Select count(*) as total_milestones, sum(case when M.status = 'Completed' then 1 else 0 end) as completed_milestones from Milestones M join Contracts C on M.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1);"}
{"prompt": "What payments have been made for the mobile app design project?", "response": "Select P.amount, P.paid_on, P.status from Payments P join Contracts C on P.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1);"}
{"prompt": "What is the total amount paid to freelancers for the mobile app design project?", "response": "Select sum(P.amount) as total_paid from Payments P join Contracts C on P.contract_id = C.contract_id where C.project_id = (Select project_id from Projects where title like '%mobile app design%' order by posted_on desc limit 1) and P.status = 'Paid';"}
{"prompt": "What is the schedule for all ongoing projects I am managing?", "response": "Select title, posted_on, status from Projects where status = 'Active' order by posted_on desc;"}
{"prompt": "What updates have I made to project schedules recently?", "response": "Select action, timestamp from SystemLogs where user_id = (Select user_id from Users where name = 'Rahul') and action like '%schedule%' order by timestamp desc;"}
{"prompt": "What is the feedback from clients on recent deliverables?", "response": "Select rating from Profiles where user_id in (Select client_id from Projects where project_id in (Select project_id from Contracts where freelancer_id in (Select user_id from Users where name = 'Rahul')));"}
{"prompt": "What support tickets have I raised or responded to?", "response": "Select issue, created_on, status, resolved_on from SupportTickets where user_id = (Select user_id from Users where name = 'Rahul') order by created_on desc;"}
{"prompt": "Are there any disputes on my managed projects?", "response": "Select D.dispute_id, D.reason, D.status, D.resolution from Disputes D join Contracts C on D.contract_id = C.contract_id where C.project_id in (Select project_id from Projects where client_id = (Select user_id from Users where name = 'Rahul'));"}
{"prompt": "What is the status of the new QA tester job I posted?", "response": "Select title, status, posted_on from Projects where title like '%QA tester%' and client_id = (Select user_id from Users where name = 'Rahul') order by posted_on desc limit 1;"}
{"prompt": "Who are the freelancers that applied for the QA tester job?", "response": "Select U.name, U.email, Pr.bid_amount, Pr.proposal_date, Pr.status from Proposals Pr join Users U on Pr.freelancer_id = U.user_id where Pr.project_id = (Select project_id from Projects where title like '%QA tester%' and client_id = (Select user_id from Users where name = 'Rahul') order by posted_on desc limit 1);"}
{"prompt": "Which QA tester proposals have I shortlisted?", "response": "Select U.name, Pr.status from Proposals Pr join Users U on Pr.freelancer_id = U.user_id where Pr.project_id = (Select project_id from Projects where title like '%QA tester%' and client_id = (Select user_id from Users where name = 'Rahul') order by posted_on desc limit 1) and Pr.status = 'Shortlisted';"}
{"prompt": "What analytics reports have I generated for project tracking?", "response": "Select report_type, generated_on, summary from AnalyticsReports where generated_by = (Select user_id from Users where name = 'Rahul') order by generated_on desc;"}
{"prompt": "What marketing campaigns target digital agencies like mine?", "response": "Select name, start_date, end_date, target_audience from MarketingCampaigns where target_audience like '%digital agency%';"}
{"prompt": "What actions have I performed on the platform recently?", "response": "Select action, timestamp from SystemLogs where user_id = (Select user_id from Users where name = 'Rahul') order by timestamp desc;"}
{"prompt": "Platform Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Sana’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which users have the status 'Suspended'?", "response": "Select user_id, name, email from Users where status = 'Suspended';"}
{"prompt": "Which users signed up today?", "response": "Select user_id, name, email, user_type, status from Users where signup_date = current_date;"}
{"prompt": "What is the status of all freelancers on the platform?", "response": "Select user_id, name, status from Users where user_type = 'Freelancer';"}
{"prompt": "What actions have I performed on the platform today?", "response": "Select action, timestamp from SystemLogs where user_id = (Select user_id from Users where name = 'Sana') and date(timestamp) = current_date;"}
{"prompt": "What system actions were performed in the last 24 hours?", "response": "Select user_id, action, timestamp from SystemLogs where timestamp >= now() - interval '1 day';"}
{"prompt": "Which users have the status 'Active'?", "response": "Select user_id, name, email from Users where status = 'Active';"}
{"prompt": "What support tickets are currently open?", "response": "Select ticket_id, user_id, issue, created_on from SupportTickets where status = 'Open';"}
{"prompt": "Which support tickets were resolved today?", "response": "Select ticket_id, user_id, issue, resolved_on from SupportTickets where date(resolved_on) = current_date;"}
{"prompt": "What are the details of all disputes currently open?", "response": "Select dispute_id, contract_id, raised_by, reason, status from Disputes where status = 'Open';"}
{"prompt": "What are the most recent analytics reports generated?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports order by generated_on desc limit 5;"}
{"prompt": "What system logs are associated with a specific user?", "response": "Select action, timestamp from SystemLogs where user_id = (Select user_id from Users where name = 'Sana');"}
{"prompt": "Which marketing campaigns are currently active?", "response": "Select campaign_id, name, start_date, end_date from MarketingCampaigns where start_date <= current_date and end_date >= current_date;"}
{"prompt": "What payments have been made today?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where paid_on = current_date;"}
{"prompt": "Which contracts are currently active?", "response": "Select contract_id, project_id, freelancer_id, start_date, end_date, amount from Contracts where status = 'Active';"}
{"prompt": "What milestones are pending for all contracts?", "response": "Select milestone_id, contract_id, title, amount, due_date from Milestones where status = 'Pending';"}
{"prompt": "Which users have submitted support tickets in the last week?", "response": "Select distinct user_id from SupportTickets where created_on >= now() - interval '7 days';"}
{"prompt": "What is the summary of the latest analytics report?", "response": "Select summary from AnalyticsReports order by generated_on desc limit 1;"}
{"prompt": "Which users have the status 'Pending'?", "response": "Select user_id, name, email from Users where status = 'Pending';"}
{"prompt": "What are the details of all completed payments?", "response": "Select payment_id, contract_id, amount, paid_on from Payments where status = 'Completed';"}
{"prompt": "What are the most recent actions recorded in the system?", "response": "Select user_id, action, timestamp from SystemLogs order by timestamp desc limit 10;"}
{"prompt": "Customer Support Agents", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What support tickets are currently open?", "response": "Select ticket_id, user_id, issue, created_on from SupportTickets where status = 'Open';"}
{"prompt": "Which support tickets have been resolved today?", "response": "Select ticket_id, user_id, issue, resolved_on from SupportTickets where status = 'Resolved' and date(resolved_on) = current_date;"}
{"prompt": "What is the status of a specific freelancer’s payment ticket?", "response": "Select ticket_id, issue, status from SupportTickets where user_id = (Select user_id from Users where name = 'Freelancer Name') and issue like '%payment%';"}
{"prompt": "What are the details of all tickets related to payment issues?", "response": "Select ticket_id, user_id, issue, created_on, status from SupportTickets where issue like '%payment%';"}
{"prompt": "Which tickets are related to disputes?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%dispute%';"}
{"prompt": "What is the status of all tickets related to account access?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%account access%';"}
{"prompt": "What are the details of all tickets related to project delays?", "response": "Select ticket_id, user_id, issue, created_on, status from SupportTickets where issue like '%project delay%';"}
{"prompt": "Which users have submitted tickets more than once this week?", "response": "Select user_id, count(*) as ticket_count from SupportTickets where created_on >= now() - interval '7 days' group by user_id having count(*) > 1;"}
{"prompt": "What is the current status of a specific contract?", "response": "Select contract_id, project_id, freelancer_id, start_date, end_date, amount, status from Contracts where contract_id = [CONTRACT_ID];"}
{"prompt": "What milestones are associated with a specific contract?", "response": "Select milestone_id, title, amount, due_date, status from Milestones where contract_id = [CONTRACT_ID];"}
{"prompt": "What is the payment status for a specific contract?", "response": "Select payment_id, amount, paid_on, status from Payments where contract_id = [CONTRACT_ID];"}
{"prompt": "Which payments are pending for a specific freelancer?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where freelancer_id = (Select user_id from Users where name = 'Freelancer Name')) and status != 'Completed';"}
{"prompt": "Which tickets have been escalated to the finance team?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%finance%';"}
{"prompt": "What are the most common issues reported in the last month?", "response": "Select issue, count(*) as count from SupportTickets where created_on >= now() - interval '30 days' group by issue order by count desc;"}
{"prompt": "Which tickets have been flagged as system bugs?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%system bug%';"}
{"prompt": "What actions have I performed on the platform today?", "response": "Select action, timestamp from SystemLogs where user_id = (Select user_id from Users where name = 'Priya') and date(timestamp) = current_date;"}
{"prompt": "Which disputes are currently unresolved?", "response": "Select dispute_id, contract_id, raised_by, reason, status from Disputes where status != 'Resolved';"}
{"prompt": "Which users have open tickets on payment issues?", "response": "Select distinct user_id from SupportTickets where status = 'Open' and issue like '%payment%';"}
{"prompt": "What are the details of all tickets created today?", "response": "Select ticket_id, user_id, issue, created_on, status from SupportTickets where date(created_on) = current_date;"}
{"prompt": "What is the status of all support tickets submitted by a specific client?", "response": "Select ticket_id, issue, status from SupportTickets where user_id = (Select user_id from Users where name = 'Client Name');"}
{"prompt": "Dispute Resolution Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Imran’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which disputes are currently open?", "response": "Select dispute_id, contract_id, raised_by, reason, status from Disputes where status = 'Open';"}
{"prompt": "What is the resolution for dispute 1005?", "response": "Select resolution from Disputes where dispute_id = 1005;"}
{"prompt": "List all disputes related to contract 2012.", "response": "Select dispute_id, reason, status, resolution from Disputes where contract_id = 2012;"}
{"prompt": "Which disputes were raised by user 309?", "response": "Select dispute_id, contract_id, reason, status from Disputes where raised_by = 309;"}
{"prompt": "What is the status of all disputes resolved this month?", "response": "Select dispute_id, contract_id, reason, status, resolution from Disputes where status = 'Resolved' and extract(month from current_date) = extract(month from now());"}
{"prompt": "For contract 2012, what is the payment status?", "response": "Select payment_id, amount, paid_on, status from Payments where contract_id = 2012;"}
{"prompt": "What are the milestone details for contract 2012?", "response": "Select milestone_id, title, amount, due_date, status from Milestones where contract_id = 2012;"}
{"prompt": "Show all contracts with open disputes.", "response": "Select contract_id, amount, status from Contracts where contract_id in (Select contract_id from Disputes where status = 'Open');"}
{"prompt": "Which payments are pending for contracts with disputes?", "response": "Select payment_id, contract_id, amount, status from Payments where status != 'Completed' and contract_id in (Select contract_id from Disputes);"}
{"prompt": "What actions have I (user_id 501) performed today?", "response": "Select action, timestamp from SystemLogs where user_id = 501 and date(timestamp) = current_date;"}
{"prompt": "What is the profile of the freelancer in contract 2012?", "response": "Select user_id, bio, skills, experience_level, rating from Profiles where user_id = (Select freelancer_id from Contracts where contract_id = 2012);"}
{"prompt": "What is the profile of the client in contract 2012?", "response": "Select user_id, bio, skills, experience_level, rating from Profiles where user_id = (Select client_id from Projects where project_id = (Select project_id from Contracts where contract_id = 2012));"}
{"prompt": "List all payments made for contract 2012.", "response": "Select payment_id, amount, paid_on, status from Payments where contract_id = 2012;"}
{"prompt": "Which disputes have the reason 'missed deadline'?", "response": "Select dispute_id, contract_id, status from Disputes where reason like '%missed deadline%';"}
{"prompt": "Show the latest 5 disputes raised on the platform.", "response": "Select dispute_id, contract_id, reason, status from Disputes order by dispute_id desc limit 5;"}
{"prompt": "For dispute 1005, what is the status of its associated milestones?", "response": "Select milestone_id, title, status from Milestones where contract_id = (Select contract_id from Disputes where dispute_id = 1005);"}
{"prompt": "Which contracts have more than one dispute raised?", "response": "Select contract_id, count(*) as dispute_count from Disputes group by contract_id having count(*) > 1;"}
{"prompt": "What is the total amount of payments pending for contracts with unresolved disputes?", "response": "Select sum(amount) from Payments where status != 'Completed' and contract_id in (Select contract_id from Disputes where status != 'Resolved');"}
{"prompt": "Which users have raised disputes in the last 7 days?", "response": "Select distinct raised_by from Disputes where status = 'Open' and contract_id in (Select contract_id from Contracts where start_date >= current_date - interval '7 days');"}
{"prompt": "What are the details of all disputes with the resolution 'refund issued'?", "response": "Select dispute_id, contract_id, reason, status from Disputes where resolution like '%refund issued%';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Aarushi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the details of the latest marketing campaign?", "response": "Select campaign_id, name, start_date, end_date, budget, target_audience from MarketingCampaigns order by start_date desc limit 1;"}
{"prompt": "Which campaigns targeted small business owners?", "response": "Select campaign_id, name, start_date, end_date from MarketingCampaigns where target_audience like '%small business%';"}
{"prompt": "What is the total budget spent on campaigns this quarter?", "response": "Select sum(budget) from MarketingCampaigns where start_date >= date_trunc('quarter', current_date);"}
{"prompt": "Which campaigns are currently active?", "response": "Select campaign_id, name, start_date, end_date from MarketingCampaigns where start_date <= current_date and end_date >= current_date;"}
{"prompt": "What are the names and budgets of all Instagram ad campaigns?", "response": "Select name, budget from MarketingCampaigns where name like '%Instagram%';"}
{"prompt": "What was the target audience for the 'Spring Email Blast' campaign?", "response": "Select target_audience from MarketingCampaigns where name = 'Spring Email Blast';"}
{"prompt": "Which campaigns ended in May 2025?", "response": "Select campaign_id, name, end_date from MarketingCampaigns where extract(month from end_date) = 5 and extract(year from end_date) = 2025;"}
{"prompt": "What is the average budget of campaigns run in 2025?", "response": "Select avg(budget) from MarketingCampaigns where extract(year from start_date) = 2025;"}
{"prompt": "What are the details of the campaign with the highest budget?", "response": "Select campaign_id, name, budget from MarketingCampaigns order by budget desc limit 1;"}
{"prompt": "Which campaigns targeted both freelancers and clients?", "response": "Select campaign_id, name, target_audience from MarketingCampaigns where target_audience like '%freelancer%' and target_audience like '%client%';"}
{"prompt": "What analytics reports have I (user_id 707) generated this month?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where generated_by = 707 and extract(month from generated_on) = extract(month from current_date);"}
{"prompt": "What is the summary of the latest performance report?", "response": "Select summary from AnalyticsReports where report_type = 'Performance' order by generated_on desc limit 1;"}
{"prompt": "Which reports were generated for campaign performance in 2025?", "response": "Select report_id, generated_on, summary from AnalyticsReports where report_type = 'Campaign Performance' and extract(year from generated_on) = 2025;"}
{"prompt": "How many campaigns have a budget greater than 20,000?", "response": "Select count(*) from MarketingCampaigns where budget > 20000;"}
{"prompt": "List all campaigns and their start dates that targeted startups.", "response": "Select name, start_date from MarketingCampaigns where target_audience like '%startup%';"}
{"prompt": "What is the earliest campaign ever launched on SkillHub?", "response": "Select campaign_id, name, start_date from MarketingCampaigns order by start_date asc limit 1;"}
{"prompt": "What are the details of all campaigns I managed (user_id 707) in April 2025?", "response": "Select campaign_id, name, start_date, end_date, budget from MarketingCampaigns where campaign_id in (Select campaign_id from AnalyticsReports where generated_by = 707 and extract(month from generated_on) = 4 and extract(year from generated_on) = 2025);"}
{"prompt": "Which campaigns are scheduled to start next month?", "response": "Select campaign_id, name, start_date from MarketingCampaigns where extract(month from start_date) = extract(month from current_date + interval '1 month') and extract(year from start_date) = extract(year from current_date + interval '1 month');"}
{"prompt": "What is the total number of campaigns run so far?", "response": "Select count(*) from MarketingCampaigns;"}
{"prompt": "What are the names and summaries of all analytics reports I generated about conversion rates?", "response": "Select report_type, summary from AnalyticsReports where generated_by = 707 and report_type like '%conversion rate%';"}
{"prompt": "Finance/Payment Team", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which payments are currently pending?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where status = 'Pending';"}
{"prompt": "List all payments made to freelancer user_id 1207 this month.", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where freelancer_id = 1207) and extract(month from paid_on) = extract(month from current_date) and extract(year from paid_on) = extract(year from current_date);"}
{"prompt": "What is the total amount paid out to freelancers this month?", "response": "Select sum(amount) from Payments where status = 'Completed' and extract(month from paid_on) = extract(month from current_date) and extract(year from paid_on) = extract(year from current_date);"}
{"prompt": "Which payments failed this week?", "response": "Select payment_id, contract_id, amount, paid_on from Payments where status = 'Failed' and paid_on >= current_date - interval '7 days';"}
{"prompt": "What are the details of all payments for contract 3050?", "response": "Select payment_id, amount, paid_on, status from Payments where contract_id = 3050;"}
{"prompt": "Which contracts have pending payments?", "response": "Select contract_id, amount, status from Contracts where contract_id in (Select contract_id from Payments where status = 'Pending');"}
{"prompt": "What is the total amount of refunds processed this month?", "response": "Select sum(amount) from Payments where status = 'Refunded' and extract(month from paid_on) = extract(month from current_date) and extract(year from paid_on) = extract(year from current_date);"}
{"prompt": "Which users have received payments greater than 5000 this month?", "response": "Select distinct freelancer_id from Contracts where contract_id in (Select contract_id from Payments where amount > 5000 and extract(month from paid_on) = extract(month from current_date) and extract(year from paid_on) = extract(year from current_date));"}
{"prompt": "What is the status of all payments related to project_id 220?", "response": "Select payment_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where project_id = 220);"}
{"prompt": "List all payments processed today.", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where paid_on = current_date;"}
{"prompt": "Which payments are associated with disputes?", "response": "Select payment_id, contract_id, amount, status from Payments where contract_id in (Select contract_id from Disputes);"}
{"prompt": "What is the total amount of all completed payments for contract 3050?", "response": "Select sum(amount) from Payments where contract_id = 3050 and status = 'Completed';"}
{"prompt": "Which contracts had payments refunded in the last 30 days?", "response": "Select distinct contract_id from Payments where status = 'Refunded' and paid_on >= current_date - interval '30 days';"}
{"prompt": "What are the details of all payments flagged for review?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where status = 'Flagged';"}
{"prompt": "What is the total number of payments processed this week?", "response": "Select count(*) from Payments where paid_on >= current_date - interval '7 days';"}
{"prompt": "What are the details of all payments for international freelancers (user_id in 2000-2999)?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where freelancer_id between 2000 and 2999);"}
{"prompt": "What is the total earnings for all freelancers this month?", "response": "Select sum(amount) from Payments where status = 'Completed' and extract(month from paid_on) = extract(month from current_date) and extract(year from paid_on) = extract(year from current_date);"}
{"prompt": "What is the total number of refunds pending?", "response": "Select count(*) from Payments where status = 'Refunded' and paid_on is null;"}
{"prompt": "What is the payment history for client user_id 150?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where project_id in (Select project_id from Projects where client_id = 150));"}
{"prompt": "What are the details of all payments processed for contracts started in 2025?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where extract(year from start_date) = 2025);"}
{"prompt": "System Developers/IT Staff", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What recent API errors have been logged?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%API error%' order by timestamp desc limit 10;"}
{"prompt": "What system actions have I (user_id 601) performed today?", "response": "Select action, timestamp from SystemLogs where user_id = 601 and date(timestamp) = current_date;"}
{"prompt": "Which users have reported bugs related to portfolio uploads?", "response": "Select distinct user_id from SupportTickets where issue like '%portfolio upload%';"}
{"prompt": "What support tickets related to portfolio upload bugs are currently open?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%portfolio upload%' and status = 'Open';"}
{"prompt": "What are the details of all system logs related to code review activities?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%code review%' order by timestamp desc;"}
{"prompt": "What recent feature updates have been merged to the staging branch?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%merge%' and action like '%staging branch%' order by timestamp desc;"}
{"prompt": "What deployment activities have been logged recently?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%deploy%' order by timestamp desc;"}
{"prompt": "What are the details of all support tickets escalated to the IT team?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%bug%' or issue like '%error%' order by created_on desc;"}
{"prompt": "What are the most recent changelog entries documented by the IT team?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%changelog%' order by generated_on desc limit 5;"}
{"prompt": "Which users have performed system actions related to platform stability improvements?", "response": "Select distinct user_id from SystemLogs where action like '%stability%' or action like '%optimize%';"}
{"prompt": "What are the details of all contracts related to projects involving backend development?", "response": "Select contract_id, project_id, freelancer_id, start_date, end_date, amount, status from Contracts where project_id in (Select project_id from Projects where description like '%backend%');"}
{"prompt": "What are the milestones for contracts related to backend development projects?", "response": "Select milestone_id, contract_id, title, amount, due_date, status from Milestones where contract_id in (Select contract_id from Contracts where project_id in (Select project_id from Projects where description like '%backend%'));"}
{"prompt": "What payments have been made for backend development contracts?", "response": "Select payment_id, contract_id, amount, paid_on, status from Payments where contract_id in (Select contract_id from Contracts where project_id in (Select project_id from Projects where description like '%backend%'));"}
{"prompt": "What are the details of all support tickets assigned to the IT team?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%IT%' or issue like '%backend%' order by created_on desc;"}
{"prompt": "What system logs indicate coordination with DevOps for deployment?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%DevOps%' or action like '%deployment%' order by timestamp desc;"}
{"prompt": "What are the recent bug reports related to browser compatibility issues?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%browser%' and issue like '%upload%' order by created_on desc;"}
{"prompt": "What are the details of all system logs related to API monitoring?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%API%' order by timestamp desc;"}
{"prompt": "What are the details of all support tickets created in the last 7 days?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where created_on >= now() - interval '7 days' order by created_on desc;"}
{"prompt": "What are the details of all system logs recorded in the last 24 hours?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where timestamp >= now() - interval '1 day' order by timestamp desc;"}
{"prompt": "What are the details of all analytics reports related to platform performance?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%performance%' order by generated_on desc limit 5;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Ayesha’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "How many job postings have clients created this quarter?", "response": "Select count(*) from Projects where extract(quarter from posted_on) = extract(quarter from current_date) and extract(year from posted_on) = extract(year from current_date);"}
{"prompt": "What is the trend of job postings by month for 2025?", "response": "Select extract(month from posted_on) as month, count(*) as job_count from Projects where extract(year from posted_on) = 2025 group by month order by month;"}
{"prompt": "Which clients have not posted any projects in the last 90 days?", "response": "Select user_id, name from Users where user_type = 'Client' and user_id not in (Select client_id from Projects where posted_on >= current_date - interval '90 days');"}
{"prompt": "What is the average budget of projects posted this quarter?", "response": "Select avg(budget) from Projects where extract(quarter from posted_on) = extract(quarter from current_date) and extract(year from posted_on) = extract(year from current_date);"}
{"prompt": "Which step in the job posting process has the highest drop-off, based on system logs?", "response": "Select action, count(*) as drop_count from SystemLogs where action like '%job post dropoff%' and timestamp >= date_trunc('quarter', current_date) group by action order by drop_count desc limit 1;"}
{"prompt": "What is the conversion rate of proposals to contracts this quarter?", "response": "Select (select count(*) from Contracts where extract(quarter from start_date) = extract(quarter from current_date))::float / nullif((select count(*) from Proposals where extract(quarter from proposal_date) = extract(quarter from current_date)),0) as conversion_rate;"}
{"prompt": "Which marketing campaigns had the highest number of analytics reports generated?", "response": "Select campaign_id, count(*) as report_count from AnalyticsReports group by campaign_id order by report_count desc limit 1;"}
{"prompt": "What is the average freelancer rating by region (assuming region in user name for demo)?", "response": "Select substr(U.name, 1, 3) as region, avg(P.rating) from Users U join Profiles P on U.user_id = P.user_id where U.user_type = 'Freelancer' group by region;"}
{"prompt": "Which regions have freelancers with ratings above 4.5 but conversion rates below 20%?", "response": "Select substr(U.name, 1, 3) as region, avg(P.rating) as avg_rating, (select count(*) from Contracts C where C.freelancer_id = U.user_id)::float / nullif((select count(*) from Proposals Pr where Pr.freelancer_id = U.user_id),0) as conversion_rate from Users U join Profiles P on U.user_id = P.user_id where U.user_type = 'Freelancer' group by region having avg(P.rating) > 4.5 and (select count(*) from Contracts C where C.freelancer_id = U.user_id)::float / nullif((select count(*) from Proposals Pr where Pr.freelancer_id = U.user_id),0) < 0.2;"}
{"prompt": "What is the total payment amount processed this quarter?", "response": "Select sum(amount) from Payments where extract(quarter from paid_on) = extract(quarter from current_date) and extract(year from paid_on) = extract(year from current_date);"}
{"prompt": "Which campaigns had the highest budget but lowest engagement (using report summaries)?", "response": "Select M.name, M.budget, A.summary from MarketingCampaigns M join AnalyticsReports A on M.campaign_id = A.report_id where M.budget = (select max(budget) from MarketingCampaigns) and A.summary like '%low engagement%';"}
{"prompt": "What are the top 5 reasons for support tickets this quarter?", "response": "Select issue, count(*) as count from SupportTickets where extract(quarter from created_on) = extract(quarter from current_date) group by issue order by count desc limit 5;"}
{"prompt": "What is the average time to resolve disputes this year?", "response": "Select avg(extract(epoch from (resolved_on - created_on))/3600) as avg_hours from (select created_on, resolved_on from SupportTickets where status = 'Resolved' and extract(year from resolved_on) = extract(year from current_date)) as t;"}
{"prompt": "How many freelancers have been active (submitted proposals) this month?", "response": "Select count(distinct freelancer_id) from Proposals where extract(month from proposal_date) = extract(month from current_date) and extract(year from proposal_date) = extract(year from current_date);"}
{"prompt": "What is the distribution of project statuses this quarter?", "response": "Select status, count(*) from Projects where extract(quarter from posted_on) = extract(quarter from current_date) group by status;"}
{"prompt": "Which users have the highest number of system actions this quarter?", "response": "Select user_id, count(*) as action_count from SystemLogs where extract(quarter from timestamp) = extract(quarter from current_date) group by user_id order by action_count desc limit 5;"}
{"prompt": "How many disputes were raised and resolved this quarter?", "response": "Select count(*) filter (where status = 'Open') as open_disputes, count(*) filter (where status = 'Resolved') as resolved_disputes from Disputes where extract(quarter from (select min(timestamp) from SystemLogs)) = extract(quarter from current_date);"}
{"prompt": "What is the average number of proposals per project this quarter?", "response": "Select avg(proposal_count) from (select count(*) as proposal_count from Proposals where extract(quarter from proposal_date) = extract(quarter from current_date) group by project_id) as sub;"}
{"prompt": "What is the client retention rate this year?", "response": "Select (select count(distinct client_id) from Projects where extract(year from posted_on) = extract(year from current_date) and client_id in (select client_id from Projects where extract(year from posted_on) = extract(year from current_date) - 1))::float / nullif((select count(distinct client_id) from Projects where extract(year from posted_on) = extract(year from current_date) - 1),0) as retention_rate;"}
{"prompt": "What is the summary of the most recent analytics report I generated (user_id 808)?", "response": "Select summary from AnalyticsReports where generated_by = 808 order by generated_on desc limit 1;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "RideSharingApp", "response": "nan"}
{"prompt": "Riders/Passengers", "response": "nan"}
{"prompt": "Natural Language Question (Ananya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is my ride history for the past month?", "response": "Select ride_id, pickup_location, dropoff_location, pickup_time, dropoff_time, fare, status from Rides where rider_id = (Select user_id from Users where name = 'Ananya') and dropoff_time >= current_date - interval '30 days' order by dropoff_time desc;"}
{"prompt": "What is the status of my most recent ride?", "response": "Select status from Rides where rider_id = (Select user_id from Users where name = 'Ananya') order by request_time desc limit 1;"}
{"prompt": "What was the fare for my last ride?", "response": "Select fare from Rides where rider_id = (Select user_id from Users where name = 'Ananya') order by dropoff_time desc limit 1;"}
{"prompt": "Who was my driver for the last ride?", "response": "Select U.name, U.phone from Users U join Rides R on U.user_id = R.driver_id where R.rider_id = (Select user_id from Users where name = 'Ananya') order by R.dropoff_time desc limit 1;"}
{"prompt": "What type of vehicle was assigned for my last ride?", "response": "Select V.vehicle_type, V.plate_number from Vehicles V join Rides R on V.driver_id = R.driver_id where R.rider_id = (Select user_id from Users where name = 'Ananya') order by R.dropoff_time desc limit 1;"}
{"prompt": "What is the payment status for my last ride?", "response": "Select status from Payments where ride_id = (Select ride_id from Rides where rider_id = (Select user_id from Users where name = 'Ananya') order by dropoff_time desc limit 1);"}
{"prompt": "How much have I spent on rides this month?", "response": "Select sum(fare) from Rides where rider_id = (Select user_id from Users where name = 'Ananya') and extract(month from dropoff_time) = extract(month from current_date) and extract(year from dropoff_time) = extract(year from current_date);"}
{"prompt": "How many rides have I completed this year?", "response": "Select count(*) from Rides where rider_id = (Select user_id from Users where name = 'Ananya') and extract(year from dropoff_time) = extract(year from current_date) and status = 'Completed';"}
{"prompt": "What are the details of all payments I made last week?", "response": "Select payment_id, amount, method, status, paid_on from Payments where ride_id in (Select ride_id from Rides where rider_id = (Select user_id from Users where name = 'Ananya') and dropoff_time >= current_date - interval '7 days');"}
{"prompt": "What is my average ride fare?", "response": "Select avg(fare) from Rides where rider_id = (Select user_id from Users where name = 'Ananya');"}
{"prompt": "Which support tickets have I raised?", "response": "Select ticket_id, issue, status, created_on from SupportTickets where user_id = (Select user_id from Users where name = 'Ananya') order by created_on desc;"}
{"prompt": "What is the status of my most recent support ticket?", "response": "Select status from SupportTickets where user_id = (Select user_id from Users where name = 'Ananya') order by created_on desc limit 1;"}
{"prompt": "Which drivers have I ridden with more than once?", "response": "Select U.name, count(*) as ride_count from Users U join Rides R on U.user_id = R.driver_id where R.rider_id = (Select user_id from Users where name = 'Ananya') group by U.name having count(*) > 1;"}
{"prompt": "What is my average rating as a rider?", "response": "Select rating from Users where name = 'Ananya';"}
{"prompt": "What are the details of my last 5 rides?", "response": "Select ride_id, pickup_location, dropoff_location, pickup_time, dropoff_time, fare, status from Rides where rider_id = (Select user_id from Users where name = 'Ananya') order by dropoff_time desc limit 5;"}
{"prompt": "What is the most expensive ride I have taken?", "response": "Select ride_id, pickup_location, dropoff_location, fare from Rides where rider_id = (Select user_id from Users where name = 'Ananya') order by fare desc limit 1;"}
{"prompt": "Which payment methods have I used?", "response": "Select distinct method from Payments where ride_id in (Select ride_id from Rides where rider_id = (Select user_id from Users where name = 'Ananya'));"}
{"prompt": "What is the total number of support tickets I have submitted this year?", "response": "Select count(*) from SupportTickets where user_id = (Select user_id from Users where name = 'Ananya') and extract(year from created_on) = extract(year from current_date);"}
{"prompt": "What are the details of my most recent completed ride?", "response": "Select ride_id, pickup_location, dropoff_location, pickup_time, dropoff_time, fare from Rides where rider_id = (Select user_id from Users where name = 'Ananya') and status = 'Completed' order by dropoff_time desc limit 1;"}
{"prompt": "For my last ride, what was the payment amount and method?", "response": "Select amount, method from Payments where ride_id = (Select ride_id from Rides where rider_id = (Select user_id from Users where name = 'Ananya') order by dropoff_time desc limit 1);"}
{"prompt": "Drivers", "response": "nan"}
{"prompt": "Natural Language Question (Ravi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What were my total earnings from rides completed yesterday?", "response": "Select sum(fare) from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(dropoff_time) = current_date - interval '1 day' and status = 'Completed';"}
{"prompt": "What payments did I receive yesterday?", "response": "Select payment_id, amount, method, status, paid_on from Payments where ride_id in (Select ride_id from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(dropoff_time) = current_date - interval '1 day');"}
{"prompt": "What feedback did I receive from riders yesterday?", "response": "Select ticket_id, issue, created_on from SupportTickets where user_id in (Select rider_id from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(dropoff_time) = current_date - interval '1 day') and role = 'Rider' and issue like '%feedback%';"}
{"prompt": "What is my average rider rating?", "response": "Select rating from Users where name = 'Ravi';"}
{"prompt": "What is my current vehicle and its status?", "response": "Select vehicle_id, vehicle_type, plate_number, status from Vehicles where driver_id = (Select user_id from Users where name = 'Ravi');"}
{"prompt": "What are my upcoming ride bookings for today?", "response": "Select ride_id, pickup_location, dropoff_location, pickup_time, status from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(pickup_time) = current_date and status = 'Booked';"}
{"prompt": "What rides have I completed this week?", "response": "Select ride_id, pickup_location, dropoff_location, pickup_time, dropoff_time, fare from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(dropoff_time) >= current_date - interval '7 days' and status = 'Completed';"}
{"prompt": "Which rides did I decline today?", "response": "Select ride_id, pickup_location, dropoff_location, request_time from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(request_time) = current_date and status = 'Declined';"}
{"prompt": "Which rides were cancelled by riders today?", "response": "Select ride_id, pickup_location, dropoff_location, request_time from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(request_time) = current_date and status = 'Cancelled';"}
{"prompt": "What compensation payments have I received for cancelled rides this month?", "response": "Select payment_id, amount, method, paid_on from Payments where ride_id in (Select ride_id from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and status = 'Cancelled') and extract(month from paid_on) = extract(month from current_date);"}
{"prompt": "What is my performance summary for this week (total rides, total earnings)?", "response": "Select count(*) as total_rides, sum(fare) as total_earnings from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(dropoff_time) >= current_date - interval '7 days';"}
{"prompt": "Am I eligible for a bonus this week (if I completed at least 40 rides)?", "response": "Select case when count(*) >= 40 then 'Eligible' else 'Not Eligible' end as bonus_eligibility from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and date(dropoff_time) >= current_date - interval '7 days' and status = 'Completed';"}
{"prompt": "What is the total number of rides I have completed this month?", "response": "Select count(*) from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and extract(month from dropoff_time) = extract(month from current_date) and status = 'Completed';"}
{"prompt": "What is the total distance covered in all rides this week?", "response": "-- Not available, as distance is not in schema."}
{"prompt": "What are the details of my last 5 completed rides?", "response": "Select ride_id, pickup_location, dropoff_location, pickup_time, dropoff_time, fare from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and status = 'Completed' order by dropoff_time desc limit 5;"}
{"prompt": "What are the details of my pending payout requests?", "response": "Select payment_id, amount, method, status, paid_on from Payments where ride_id in (Select ride_id from Rides where driver_id = (Select user_id from Users where name = 'Ravi')) and status = 'Pending';"}
{"prompt": "What support tickets have I submitted as a driver?", "response": "Select ticket_id, issue, status, created_on from SupportTickets where user_id = (Select user_id from Users where name = 'Ravi') and role = 'Driver';"}
{"prompt": "What is the status of my most recent payout?", "response": "Select status from Payments where ride_id in (Select ride_id from Rides where driver_id = (Select user_id from Users where name = 'Ravi')) order by paid_on desc limit 1;"}
{"prompt": "What is the total amount received in payments this year?", "response": "Select sum(amount) from Payments where ride_id in (Select ride_id from Rides where driver_id = (Select user_id from Users where name = 'Ravi')) and extract(year from paid_on) = extract(year from current_date);"}
{"prompt": "What are the details of all rides where I received a cancellation fee?", "response": "Select ride_id, pickup_location, dropoff_location, request_time from Rides where driver_id = (Select user_id from Users where name = 'Ravi') and status = 'Cancelled';"}
{"prompt": "Customer Support Agents", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which open support tickets are related to fare disputes?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where status = 'Open' and issue like '%fare dispute%';"}
{"prompt": "Which open support tickets are about driver login issues?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where status = 'Open' and issue like '%login issue%';"}
{"prompt": "What are the ride details for ticket 3012 (fare dispute)?", "response": "Select R.ride_id, R.rider_id, R.driver_id, R.pickup_location, R.dropoff_location, R.request_time, R.pickup_time, R.dropoff_time, R.fare, R.status from Rides R where R.ride_id = 1058;"}
{"prompt": "What are the payment logs for ride 1058?", "response": "Select payment_id, ride_id, amount, method, status, paid_on from Payments where ride_id = 1058;"}
{"prompt": "Which users have more than one complaint about driver behavior?", "response": "Select user_id, issue, count(*) as complaint_count from SupportTickets where issue like '%driver behavior%' group by user_id, issue having count(*) > 1 order by complaint_count desc;"}
{"prompt": "Which recent support tickets are about chat inquiries or app glitches?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%chat inquiry%' or issue like '%app glitch%' order by created_on desc;"}
{"prompt": "What are the most recent FAQ article updates?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%FAQ%' order by timestamp desc;"}
{"prompt": "What is the status of my most recent support ticket?", "response": "Select status from SupportTickets where user_id = 2003 order by created_on desc limit 1;"}
{"prompt": "What are the details of all open support tickets I am handling?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where status = 'Open' and user_id = 2003;"}
{"prompt": "What are the payment details for ride 1058 related to a fare dispute?", "response": "Select payment_id, amount, method, status, paid_on from Payments where ride_id = 1058;"}
{"prompt": "What is the history of support tickets for user 1507?", "response": "Select ticket_id, issue, status, created_on from SupportTickets where user_id = 1507 order by created_on desc;"}
{"prompt": "Which support tickets have been escalated to the quality assurance team?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where status = 'Escalated' and issue like '%driver behavior%';"}
{"prompt": "What are the details of all resolved support tickets this week?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where status = 'Resolved' and created_on >= current_date - interval '7 days';"}
{"prompt": "Which drivers have the most complaints against them?", "response": "Select driver_id, count(*) as complaint_count from Rides where ride_id in (Select ride_id from SupportTickets where issue like '%driver behavior%') group by driver_id order by complaint_count desc;"}
{"prompt": "What are the details of all partial refunds issued this month?", "response": "Select payment_id, ride_id, amount, method, status, paid_on from Payments where status = 'Refunded' and extract(month from paid_on) = 6 and extract(year from paid_on) = 2025;"}
{"prompt": "What are the most common support ticket issues this month?", "response": "Select issue, count(*) as issue_count from SupportTickets where extract(month from created_on) = 6 and extract(year from created_on) = 2025 group by issue order by issue_count desc;"}
{"prompt": "What are the details of all support tickets related to app glitches?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where issue like '%app glitch%';"}
{"prompt": "What is the total number of fare dispute tickets resolved this year?", "response": "Select count(*) from SupportTickets where issue like '%fare dispute%' and status = 'Resolved' and extract(year from created_on) = 2025;"}
{"prompt": "What are the details of the last 5 support tickets I handled?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where user_id = 2003 order by created_on desc limit 5;"}
{"prompt": "What are the details of all open support tickets about payment issues?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where status = 'Open' and issue like '%payment%';"}
{"prompt": "Fleet Managers", "response": "nan"}
{"prompt": "Natural Language Question (Arun’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which drivers are assigned to my fleet vehicles (vehicle_id 1-50)?", "response": "Select driver_id, vehicle_id from Vehicles where vehicle_id between 1 and 50;"}
{"prompt": "Which drivers (IDs: 101, 102, 103, 104, 105) have not logged in today?", "response": "Select driver_id from SystemLogs where action = 'Login' and date(timestamp) = '2025-06-11' and driver_id in (101,102,103,104,105);"}
{"prompt": "Which vehicles in my fleet are due for maintenance?", "response": "Select vehicle_id, status from Vehicles where vehicle_id between 1 and 50 and status = 'Maintenance Due';"}
{"prompt": "What is the current status of vehicle 3?", "response": "Select vehicle_id, status from Vehicles where vehicle_id = 3;"}
{"prompt": "What is the assignment status for ride 5001?", "response": "Select ride_id, driver_id, status from Rides where ride_id = 5001;"}
{"prompt": "Which drivers are available for reassignment (IDs: 101, 102)?", "response": "Select driver_id from Vehicles where driver_id in (101,102) and status = 'Active';"}
{"prompt": "What are the details of the trip reassigned to driver 101?", "response": "Select ride_id, driver_id, status from Rides where ride_id = 5001;"}
{"prompt": "What are the earnings reports I generated this week?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where generated_by = 3001 and report_type = 'Fleet Earnings' and generated_on >= '2025-06-09';"}
{"prompt": "What is the summary of yesterday’s fleet earnings report?", "response": "Select summary from AnalyticsReports where generated_by = 3001 and report_type = 'Fleet Earnings' and generated_on = '2025-06-10';"}
{"prompt": "What is the summary of today’s fleet earnings report?", "response": "Select summary from AnalyticsReports where generated_by = 3001 and report_type = 'Fleet Earnings' and generated_on = '2025-06-11';"}
{"prompt": "Which drivers in my fleet have a rating below 4.0?", "response": "Select user_id, rating from Users where user_type = 'Driver' and user_id in (Select driver_id from Vehicles where vehicle_id between 1 and 50) and rating < 4.0;"}
{"prompt": "What are the details of all rides assigned to vehicle 3 today?", "response": "Select ride_id, driver_id, pickup_location, dropoff_location, status from Rides where pickup_time::date = '2025-06-11' and driver_id = (Select driver_id from Vehicles where vehicle_id = 3);"}
{"prompt": "What are the total earnings for my fleet this month?", "response": "Select sum(fare) from Rides where driver_id in (Select driver_id from Vehicles where vehicle_id between 1 and 50) and extract(month from dropoff_time) = 6 and extract(year from dropoff_time) = 2025;"}
{"prompt": "Which drivers have not completed any rides this week?", "response": "Select driver_id from Vehicles where vehicle_id between 1 and 50 and driver_id not in (Select driver_id from Rides where dropoff_time >= '2025-06-09');"}
{"prompt": "What are the details of all vehicles currently marked as 'Active'?", "response": "Select vehicle_id, plate_number, status from Vehicles where vehicle_id between 1 and 50 and status = 'Active';"}
{"prompt": "What are the details of all rides cancelled by drivers in my fleet today?", "response": "Select ride_id, driver_id, status from Rides where driver_id in (Select driver_id from Vehicles where vehicle_id between 1 and 50) and status = 'Cancelled' and pickup_time::date = '2025-06-11';"}
{"prompt": "What are the details of all support tickets submitted by my drivers today?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where user_id in (Select driver_id from Vehicles where vehicle_id between 1 and 50) and created_on::date = '2025-06-11';"}
{"prompt": "Which vehicles are scheduled for service appointments this week?", "response": "Select vehicle_id, status from Vehicles where vehicle_id between 1 and 50 and status = 'Scheduled for Service';"}
{"prompt": "What is the summary of the latest fleet performance report?", "response": "Select summary from AnalyticsReports where generated_by = 3001 and report_type = 'Fleet Performance' order by generated_on desc limit 1;"}
{"prompt": "What are the details of all underperforming drivers (rating < 4.0) in my fleet?", "response": "Select user_id, name, rating from Users where user_type = 'Driver' and user_id in (Select driver_id from Vehicles where vehicle_id between 1 and 50) and rating < 4.0;"}
{"prompt": "Dispatchers", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What ride requests are currently pending in Downtown?", "response": "Select ride_id, rider_id, driver_id, pickup_location, dropoff_location, request_time, status from Rides where pickup_location like '%Downtown%' and status in ('Requested', 'Booked') order by request_time desc;"}
{"prompt": "Which drivers are currently active and available for assignment?", "response": "Select user_id, name, rating, status from Users where user_type = 'Driver' and status = 'Active';"}
{"prompt": "Which idle drivers in Downtown can receive a priority broadcast?", "response": "Select user_id, name, rating, status from Users where user_type = 'Driver' and status = 'Active' and user_id not in (Select driver_id from Rides where status in ('Requested', 'Booked') and pickup_location like '%Downtown%');"}
{"prompt": "Who is the top-rated active driver available for a VIP client in Downtown Central?", "response": "Select user_id, name, rating from Users where user_type = 'Driver' and status = 'Active' order by rating desc limit 1;"}
{"prompt": "What are the details of backup vehicles available for diversion?", "response": "Select vehicle_id, driver_id, plate_number, vehicle_type, status from Vehicles where status in ('Available', 'Active');"}
{"prompt": "What recent traffic disruptions could delay pickups?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%traffic disruption%' or action like '%road closure%' order by timestamp desc;"}
{"prompt": "What dispatch logs show ride assignments during my shift on 2025-06-11?", "response": "Select log_id, dispatcher_id, ride_id, assigned_on from DispatchLogs where dispatcher_id = 1001 and date(assigned_on) = '2025-06-11';"}
{"prompt": "Which rides were manually assigned to drivers during my shift?", "response": "Select ride_id, driver_id, status from Rides where ride_id in (Select ride_id from DispatchLogs where dispatcher_id = 1001 and date(assigned_on) = '2025-06-11');"}
{"prompt": "Which drivers have completed the most rides in Downtown this evening?", "response": "Select driver_id, count(*) as ride_count from Rides where pickup_location like '%Downtown%' and date(request_time) = '2025-06-11' group by driver_id order by ride_count desc;"}
{"prompt": "What is the status of all unassigned ride requests in Downtown?", "response": "Select ride_id, pickup_location, status from Rides where pickup_location like '%Downtown%' and driver_id is null and status = 'Requested';"}
{"prompt": "Which drivers have been flagged for slow response in high-demand zones?", "response": "Select user_id, name from Users where user_id in (Select driver_id from Rides where pickup_location like '%Downtown%' and status = 'Requested' and request_time < now() - interval '10 minutes');"}
{"prompt": "What are the details of all rides canceled in Downtown today?", "response": "Select ride_id, rider_id, driver_id, pickup_location, request_time, status from Rides where pickup_location like '%Downtown%' and status = 'Cancelled' and date(request_time) = '2025-06-11';"}
{"prompt": "Which drivers are currently assigned to backup vehicles?", "response": "Select driver_id, vehicle_id from Vehicles where status in ('Available', 'Active') and driver_id is not null;"}
{"prompt": "What is the average response time for ride assignments in Downtown today?", "response": "Select avg(extract(epoch from (pickup_time - request_time))/60) as avg_response_minutes from Rides where pickup_location like '%Downtown%' and date(request_time) = '2025-06-11' and pickup_time is not null;"}
{"prompt": "What are the details of all VIP rides assigned today?", "response": "Select ride_id, rider_id, driver_id, pickup_location, dropoff_location, status from Rides where rider_id in (Select user_id from Users where user_type = 'VIP Client') and date(request_time) = '2025-06-11';"}
{"prompt": "Which drivers have the highest ratings in the city?", "response": "Select user_id, name, rating from Users where user_type = 'Driver' order by rating desc limit 5;"}
{"prompt": "What is the status of all rides assigned by me during my shift?", "response": "Select R.ride_id, R.status from Rides R join DispatchLogs D on R.ride_id = D.ride_id where D.dispatcher_id = 1001 and date(D.assigned_on) = '2025-06-11';"}
{"prompt": "Which vehicles have been diverted to Downtown this evening?", "response": "Select vehicle_id, driver_id, status from Vehicles where vehicle_id in (Select vehicle_id from Rides where pickup_location like '%Downtown%' and date(request_time) = '2025-06-11');"}
{"prompt": "What are the details of all rides delayed due to traffic disruptions today?", "response": "Select ride_id, pickup_location, request_time, status from Rides where pickup_location like '%Downtown%' and status = 'Delayed' and date(request_time) = '2025-06-11';"}
{"prompt": "What are the details of the last 5 ride assignments I made?", "response": "Select ride_id, assigned_on from DispatchLogs where dispatcher_id = 1001 order by assigned_on desc limit 5;"}
{"prompt": "Operations Managers", "response": "nan"}
{"prompt": "Natural Language Question (Anita’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the ride completion rate and status distribution for the past week?", "response": "SELECT status, COUNT(*) as count FROM Rides WHERE dropoff_time >= '2025-06-04' AND dropoff_time < '2025-06-11' GROUP BY status;"}
{"prompt": "How many trip cancellations occurred in each pickup location this week?", "response": "SELECT pickup_location, COUNT(*) as cancellations FROM Rides WHERE status = 'Cancelled' AND request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY pickup_location;"}
{"prompt": "What was the average wait time for rides this week?", "response": "SELECT AVG(EXTRACT(EPOCH FROM (pickup_time - request_time))/60) as avg_wait_minutes FROM Rides WHERE pickup_time IS NOT NULL AND request_time >= '2025-06-04' AND request_time < '2025-06-11';"}
{"prompt": "How many unique drivers were active for each ride status this week?", "response": "SELECT status, COUNT(DISTINCT driver_id) as driver_count FROM Rides WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY status;"}
{"prompt": "How many cancellations happened in suburban pickup locations this week?", "response": "SELECT pickup_location, COUNT(*) as cancellations FROM Rides WHERE status = 'Cancelled' AND pickup_location like '%suburban%' AND request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY pickup_location;"}
{"prompt": "What was driver activity by hour during peak hours (5-8pm) this week?", "response": "SELECT date_trunc('hour', request_time) as hour, COUNT(DISTINCT driver_id) as active_drivers FROM Rides WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11' AND EXTRACT(HOUR FROM request_time) BETWEEN 17 AND 20 GROUP BY hour ORDER BY hour;"}
{"prompt": "What are the weekly ride status statistics?", "response": "SELECT status, COUNT(*) as count FROM Rides WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY status;"}
{"prompt": "Which drivers completed the most rides this week?", "response": "SELECT driver_id, COUNT(*) as rides_completed FROM Rides WHERE status = 'Completed' AND dropoff_time >= '2025-06-04' AND dropoff_time < '2025-06-11' GROUP BY driver_id ORDER BY rides_completed DESC LIMIT 10;"}
{"prompt": "Which drivers had no completed rides this week?", "response": "SELECT driver_id FROM Users WHERE user_type = 'Driver' AND user_id NOT IN (SELECT driver_id FROM Rides WHERE status = 'Completed' AND dropoff_time >= '2025-06-04' AND dropoff_time < '2025-06-11');"}
{"prompt": "What is the total number of rides requested this week?", "response": "SELECT COUNT(*) FROM Rides WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11';"}
{"prompt": "What is the total number of rides completed this week?", "response": "SELECT COUNT(*) FROM Rides WHERE status = 'Completed' AND dropoff_time >= '2025-06-04' AND dropoff_time < '2025-06-11';"}
{"prompt": "What is the cancellation rate for the week?", "response": "SELECT (SELECT count(*) FROM Rides WHERE status = 'Cancelled' AND request_time >= '2025-06-04' AND request_time < '2025-06-11')::float / NULLIF((SELECT count(*) FROM Rides WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11'),0) as cancellation_rate;"}
{"prompt": "Which fleet partners have the lowest ride completion rates this week?", "response": "SELECT manager_id, count(*) FILTER (WHERE status = 'Completed')::float / NULLIF(count(*),0) as completion_rate FROM Rides R JOIN Vehicles V ON R.driver_id = V.driver_id JOIN FleetManagers F ON F.manager_id = V.driver_id WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY manager_id ORDER BY completion_rate ASC LIMIT 5;"}
{"prompt": "What is the average driver rating for the week?", "response": "SELECT AVG(rating) FROM Users WHERE user_type = 'Driver';"}
{"prompt": "Which pickup locations had the highest cancellation rates this week?", "response": "SELECT pickup_location, COUNT(*) as cancellations FROM Rides WHERE status = 'Cancelled' AND request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY pickup_location ORDER BY cancellations DESC LIMIT 5;"}
{"prompt": "What is the average fare for completed rides this week?", "response": "SELECT AVG(fare) FROM Rides WHERE status = 'Completed' AND dropoff_time >= '2025-06-04' AND dropoff_time < '2025-06-11';"}
{"prompt": "What is the average number of rides per driver this week?", "response": "SELECT AVG(ride_count) FROM (SELECT driver_id, COUNT(*) as ride_count FROM Rides WHERE request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY driver_id) as sub;"}
{"prompt": "What is the average wait time in suburban zones this week?", "response": "SELECT AVG(EXTRACT(EPOCH FROM (pickup_time - request_time))/60) as avg_wait_minutes FROM Rides WHERE pickup_location like '%suburban%' AND pickup_time IS NOT NULL AND request_time >= '2025-06-04' AND request_time < '2025-06-11';"}
{"prompt": "Which drivers had the highest cancellation counts this week?", "response": "SELECT driver_id, COUNT(*) as cancellations FROM Rides WHERE status = 'Cancelled' AND request_time >= '2025-06-04' AND request_time < '2025-06-11' GROUP BY driver_id ORDER BY cancellations DESC LIMIT 5;"}
{"prompt": "What is the summary of the latest weekly operational analytics report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'Weekly Operations' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Ravi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "How is the 'Refer a Friend' campaign performing?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%Refer a Friend%' order by generated_on desc limit 5;"}
{"prompt": "What are the latest engagement and signup trends for 'Refer a Friend'?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%Refer a Friend%' order by generated_on desc limit 5;"}
{"prompt": "What social media posts or push notifications have been scheduled for the campaign?", "response": "Select action, timestamp from SystemLogs where action like '%Refer a Friend%' and (action like '%social media%' or action like '%push notification%') order by timestamp desc limit 5;"}
{"prompt": "What is the summary of the most recent 'Refer a Friend' campaign report?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' order by generated_on desc limit 1;"}
{"prompt": "What are the latest email campaigns targeting inactive users?", "response": "Select report_type, generated_on, summary from AnalyticsReports where report_type like '%email campaign%' and summary like '%inactive users%' order by generated_on desc limit 3;"}
{"prompt": "What regional promotions or upcoming events have been logged?", "response": "Select action, timestamp from SystemLogs where action like '%regional promotion%' or action like '%upcoming event%' order by timestamp desc limit 5;"}
{"prompt": "What is the most recent campaign engagement summary?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' order by generated_on desc limit 1;"}
{"prompt": "Which urban centers had the highest sign-ups from the campaign?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' and summary like '%urban%';"}
{"prompt": "What is the trend of sign-ups in suburban areas?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' and summary like '%suburban%';"}
{"prompt": "What actions have I logged in the system related to campaign outreach?", "response": "Select action, timestamp from SystemLogs where action like '%Refer a Friend%' order by timestamp desc limit 5;"}
{"prompt": "What is the latest summary of driver signups from the campaign?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' and summary like '%driver signup%' order by generated_on desc limit 1;"}
{"prompt": "What is the click-through rate for the campaign’s social media posts?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' and summary like '%click-through%' order by generated_on desc limit 1;"}
{"prompt": "Which push notifications for first-time riders have been sent?", "response": "Select action, timestamp from SystemLogs where action like '%push notification%' and action like '%first-time rider%' order by timestamp desc limit 5;"}
{"prompt": "What is the summary of the last three campaign performance reports?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' order by generated_on desc limit 3;"}
{"prompt": "What are the most recent actions related to regional promotions?", "response": "Select action, timestamp from SystemLogs where action like '%regional promotion%' order by timestamp desc limit 5;"}
{"prompt": "What are the details of the last email campaign sent to inactive users?", "response": "Select report_type, generated_on, summary from AnalyticsReports where report_type like '%email campaign%' and summary like '%inactive users%' order by generated_on desc limit 1;"}
{"prompt": "What are the most recent system logs for upcoming events?", "response": "Select action, timestamp from SystemLogs where action like '%upcoming event%' order by timestamp desc limit 5;"}
{"prompt": "What’s the latest feedback summary for the 'Refer a Friend' campaign?", "response": "Select summary from AnalyticsReports where report_type like '%Refer a Friend%' and summary like '%feedback%' order by generated_on desc limit 1;"}
{"prompt": "What are the most recent campaign performance analytics?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%campaign performance%' order by generated_on desc limit 5;"}
{"prompt": "What is the summary of the most recent analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = 2002 order by generated_on desc limit 1;"}
{"prompt": "Finance and Payments Team", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the total driver earnings for the last week?", "response": "Select sum(fare) as total_earnings, driver_id from Rides where dropoff_time >= '2025-06-04' and dropoff_time <= '2025-06-11' and status = 'Completed' group by driver_id order by total_earnings desc;"}
{"prompt": "Which driver payments failed in the last week?", "response": "Select payment_id, ride_id, amount, status, paid_on from Payments where status = 'Failed' and paid_on >= '2025-06-04' and paid_on <= '2025-06-11' order by paid_on desc;"}
{"prompt": "Which refund requests mention surge pricing errors this month?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%refund%' and issue like '%surge pricing%' and created_on >= '2025-06-01' order by created_on desc;"}
{"prompt": "Which payout transactions are duplicates and need manual review?", "response": "Select payment_id, ride_id, amount, status, paid_on, count(*) over (partition by ride_id, amount) as duplicate_count from Payments where paid_on >= '2025-06-01' having count(*) over (partition by ride_id, amount) > 1 order by paid_on desc;"}
{"prompt": "Which refund requests have been approved by customer support this month?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%refund%' and status = 'Approved' and created_on >= '2025-06-01' order by created_on desc;"}
{"prompt": "What is the monthly summary of completed payments, refunds, and total rides for June 2025?", "response": "Select sum(case when status = 'Completed' then amount else 0 end) as total_payments_completed, sum(case when status = 'Refunded' then amount else 0 end) as total_refunds, count(distinct ride_id) as total_rides_processed from Payments where paid_on >= '2025-06-01' and paid_on <= '2025-06-30';"}
{"prompt": "What is the total number of refunds processed this month?", "response": "Select count(*) from Payments where status = 'Refunded' and paid_on >= '2025-06-01' and paid_on <= '2025-06-30';"}
{"prompt": "What is the total payout amount to drivers this month?", "response": "Select sum(amount) from Payments where status = 'Completed' and paid_on >= '2025-06-01' and paid_on <= '2025-06-30';"}
{"prompt": "Which drivers received the highest payouts this month?", "response": "Select driver_id, sum(amount) as total_paid from Payments join Rides on Payments.ride_id = Rides.ride_id where Payments.status = 'Completed' and Payments.paid_on >= '2025-06-01' and Payments.paid_on <= '2025-06-30' group by driver_id order by total_paid desc limit 10;"}
{"prompt": "What is the total amount of failed payments this year?", "response": "Select sum(amount) from Payments where status = 'Failed' and extract(year from paid_on) = 2025;"}
{"prompt": "What are the details of all pending payments for drivers?", "response": "Select payment_id, ride_id, amount, status, paid_on from Payments where status = 'Pending' order by paid_on desc;"}
{"prompt": "Which users have requested refunds more than once this month?", "response": "Select user_id, count(*) as refund_count from SupportTickets where issue like '%refund%' and created_on >= '2025-06-01' group by user_id having count(*) > 1;"}
{"prompt": "What is the total number of rides that resulted in refunds this month?", "response": "Select count(distinct ride_id) from Payments where status = 'Refunded' and paid_on >= '2025-06-01' and paid_on <= '2025-06-30';"}
{"prompt": "What is the average payout per driver this month?", "response": "Select avg(total_paid) from (select driver_id, sum(amount) as total_paid from Payments join Rides on Payments.ride_id = Rides.ride_id where Payments.status = 'Completed' and Payments.paid_on >= '2025-06-01' and Payments.paid_on <= '2025-06-30' group by driver_id) as driver_totals;"}
{"prompt": "What are the details of all payments processed today?", "response": "Select payment_id, ride_id, amount, status, paid_on from Payments where paid_on = '2025-06-11';"}
{"prompt": "What is the total service fee collected this month (assuming 10% fee)?", "response": "Select sum(amount)*0.10 as service_fee from Payments where status = 'Completed' and paid_on >= '2025-06-01' and paid_on <= '2025-06-30';"}
{"prompt": "Which rides had both a completed payment and a subsequent refund?", "response": "Select ride_id from Payments group by ride_id having sum(case when status = 'Completed' then 1 else 0 end) > 0 and sum(case when status = 'Refunded' then 1 else 0 end) > 0;"}
{"prompt": "Which support tickets about payment issues are still open?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%payment%' and status = 'Open';"}
{"prompt": "What is the total number of unique drivers paid this month?", "response": "Select count(distinct driver_id) from Payments join Rides on Payments.ride_id = Rides.ride_id where Payments.status = 'Completed' and Payments.paid_on >= '2025-06-01' and Payments.paid_on <= '2025-06-30';"}
{"prompt": "What is the summary of the latest monthly financial analytics report?", "response": "Select summary from AnalyticsReports where report_type = 'Monthly Financials' order by generated_on desc limit 1;"}
{"prompt": "System Administrators/IT Staff", "response": "nan"}
{"prompt": "Natural Language Question (Arjun’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What API errors affecting ride requests have been logged today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%API error%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What system logs show server misconfiguration, patch deployments, or timeouts today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where (action like '%server misconfig%' or action like '%patch deployment%' or action like '%timeout%') and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What access control management actions have I performed today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where admin_id = (Select user_id from Users where name = 'Arjun') and action like '%access control%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What backup or routine maintenance actions have I performed today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where admin_id = (Select user_id from Users where name = 'Arjun') and (action like '%backup%' or action like '%maintenance%') and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What IT support tickets are currently assigned to me today?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where user_id = (Select user_id from Users where name = 'Arjun') and role = 'IT' and date(created_on) = current_date order by created_on desc;"}
{"prompt": "What are the most recent critical system actions logged today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%critical%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Which system logs indicate failed database connections today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%database connection failed%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What are the details of all patch deployments performed today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%patch deployment%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What are the most recent successful backup actions today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%backup successful%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What is the summary of today’s infrastructure analytics report?", "response": "Select summary from AnalyticsReports where report_type = 'Daily Infrastructure' and generated_on = current_date order by generated_on desc limit 1;"}
{"prompt": "What are the details of all routine maintenance actions performed today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%maintenance%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What are the most recent user access changes in the system today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%user access%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What system logs show high memory or CPU usage alerts today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where (action like '%high memory%' or action like '%CPU usage%') and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Which IT support tickets have been resolved today?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where role = 'IT' and status = 'Resolved' and date(created_on) = current_date order by created_on desc;"}
{"prompt": "What are the details of all failed login attempts by admins today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%failed login%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What are the most recent system logs for network security events today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%network security%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What is the status of all open IT support tickets created today?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where role = 'IT' and status = 'Open' and date(created_on) = current_date order by created_on desc;"}
{"prompt": "What are the details of all routine server health checks performed today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%server health check%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What are the most recent logs related to SSL certificate updates today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%SSL certificate%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What are the details of all system logs I generated today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where admin_id = (Select user_id from Users where name = 'Arjun') and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Neha’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "How many completed rides took place today?", "response": "Select count(*) as daily_rides from Rides where dropoff_time::date = current_date and status = 'Completed';"}
{"prompt": "How many rides were cancelled today?", "response": "Select count(*) as cancellations from Rides where request_time::date = current_date and status = 'Cancelled';"}
{"prompt": "What are the peak usage times (hourly ride counts) for today?", "response": "Select extract(hour from request_time) as hour, count(*) as ride_count from Rides where request_time::date = current_date group by hour order by hour;"}
{"prompt": "What is the average customer satisfaction score for today?", "response": "Select avg(rating) from Users where user_type = 'Rider' and signup_date = current_date;"}
{"prompt": "How many unique riders booked their first ride today?", "response": "Select count(distinct rider_id) from Rides where dropoff_time::date = current_date group by rider_id having count(*) = 1;"}
{"prompt": "Which pickup zones have the highest rider drop-off after the first ride today?", "response": "-- See query 7 for details; this is covered by the drop-off rate query below."}
{"prompt": "What is the drop-off rate by pickup zone for first-time vs repeat riders today?", "response": "WITH RiderRideCounts AS (SELECT rider_id, COUNT(*) AS ride_count FROM Rides WHERE dropoff_time::date <= current_date GROUP BY rider_id), FirstRideZones AS (SELECT R.rider_id, R.pickup_location FROM Rides R JOIN RiderRideCounts RC ON R.rider_id = RC.rider_id WHERE RC.ride_count = 1 AND R.dropoff_time::date = current_date), RepeatRideZones AS (SELECT R.rider_id, R.pickup_location FROM Rides R JOIN RiderRideCounts RC ON R.rider_id = RC.rider_id WHERE RC.ride_count > 1 AND R.dropoff_time::date = current_date), ZoneDropOff AS (SELECT pickup_location, COUNT(DISTINCT CASE WHEN rider_id IN (SELECT rider_id FROM FirstRideZones) THEN rider_id END) AS first_ride_riders, COUNT(DISTINCT CASE WHEN rider_id IN (SELECT rider_id FROM RepeatRideZones) THEN rider_id END) AS repeat_ride_riders FROM Rides WHERE dropoff_time::date = current_date GROUP BY pickup_location) SELECT pickup_location, first_ride_riders, repeat_ride_riders, CASE WHEN first_ride_riders = 0 THEN 0 ELSE (first_ride_riders - repeat_ride_riders)::float / first_ride_riders END AS drop_off_rate FROM ZoneDropOff ORDER BY drop_off_rate DESC;"}
{"prompt": "Which zones have the lowest repeat usage today?", "response": "WITH RiderRideCounts AS (SELECT rider_id, COUNT(*) AS ride_count FROM Rides WHERE dropoff_time::date <= current_date GROUP BY rider_id), RepeatRideZones AS (SELECT R.rider_id, R.pickup_location FROM Rides R JOIN RiderRideCounts RC ON R.rider_id = RC.rider_id WHERE RC.ride_count > 1 AND R.dropoff_time::date = current_date) SELECT pickup_location, count(distinct rider_id) as repeat_riders from RepeatRideZones group by pickup_location order by repeat_riders asc;"}
{"prompt": "What is the total number of rides in the last 30 days?", "response": "Select count(*) from Rides where dropoff_time::date >= current_date - interval '30 days';"}
{"prompt": "What is the cancellation rate for the last 7 days?", "response": "Select (select count(*) from Rides where status = 'Cancelled' and request_time::date >= current_date - interval '7 days')::float / nullif((select count(*) from Rides where request_time::date >= current_date - interval '7 days'),0) as cancellation_rate;"}
{"prompt": "What is the average fare for rides completed today?", "response": "Select avg(fare) from Rides where dropoff_time::date = current_date and status = 'Completed';"}
{"prompt": "What is the distribution of ride requests by hour today?", "response": "Select extract(hour from request_time) as hour, count(*) as ride_count from Rides where request_time::date = current_date group by hour order by hour;"}
{"prompt": "How many riders had only one ride in the last 30 days?", "response": "Select count(*) from (select rider_id from Rides where dropoff_time::date >= current_date - interval '30 days' group by rider_id having count(*) = 1) as single_ride_riders;"}
{"prompt": "What is the average number of rides per user this month?", "response": "Select avg(ride_count) from (select rider_id, count(*) as ride_count from Rides where dropoff_time::date >= date_trunc('month', current_date) group by rider_id) as user_rides;"}
{"prompt": "What is the average cancellation rate by zone today?", "response": "Select pickup_location, (count(*) filter (where status = 'Cancelled')::float / count(*)) as cancellation_rate from Rides where request_time::date = current_date group by pickup_location;"}
{"prompt": "What is the result of the A/B test on ride frequency for the new pricing model?", "response": "Select case when (rider_id % 2) = 0 then 'Group A' else 'Group B' end as test_group, count(*) as ride_count, avg(fare) as avg_fare from Rides where dropoff_time::date >= current_date - interval '30 days' group by test_group;"}
{"prompt": "What is the average customer rating for today’s completed rides?", "response": "Select avg(U.rating) from Users U join Rides R on U.user_id = R.rider_id where R.dropoff_time::date = current_date and R.status = 'Completed';"}
{"prompt": "What is the most common pickup location for first-time riders today?", "response": "Select pickup_location, count(*) as cnt from Rides where dropoff_time::date = current_date group by pickup_location order by cnt desc limit 1;"}
{"prompt": "What is the trend in daily completed rides for the past 7 days?", "response": "Select dropoff_time::date as day, count(*) as rides from Rides where status = 'Completed' and dropoff_time::date >= current_date - interval '7 days' group by day order by day;"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select user_id from Users where name = 'Neha') order by generated_on desc limit 1;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "nan", "response": "nan"}
{"prompt": "JobPortal", "response": "nan"}
{"prompt": "Job Seekers", "response": "nan"}
{"prompt": "Natural Language Question (Aarav’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is my current profile information?", "response": "Select name, email, phone, resume, skills, experience_years, preferred_location from JobSeekers where name = 'Aarav';"}
{"prompt": "Which remote-friendly junior developer jobs are currently open?", "response": "Select job_id, title, company_name, location, salary_range from JobPosts join Employers on JobPosts.employer_id = Employers.employer_id where (JobPosts.title like '%junior developer%' or JobPosts.description like '%junior developer%') and JobPosts.location like '%remote%' and JobPosts.status = 'Open';"}
{"prompt": "What jobs have I applied to so far?", "response": "Select JobPosts.job_id, JobPosts.title, JobPosts.location, Applications.status, Applications.applied_on from Applications join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav');"}
{"prompt": "What is the status of each of my applications?", "response": "Select Applications.application_id, JobPosts.title, Applications.status from Applications join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav');"}
{"prompt": "What are the details of the five jobs I applied to today?", "response": "Select JobPosts.title, JobPosts.company_name, Applications.status, Applications.applied_on from Applications join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') and Applications.applied_on = current_date limit 5;"}
{"prompt": "What is the feedback from my latest interview?", "response": "Select Interviews.feedback from Interviews join Applications on Interviews.application_id = Applications.application_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') order by Interviews.scheduled_date desc limit 1;"}
{"prompt": "What interviews have I scheduled?", "response": "Select Interviews.interview_id, JobPosts.title, Interviews.scheduled_date, Interviews.status from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav');"}
{"prompt": "What is the status of my upcoming interviews?", "response": "Select Interviews.interview_id, JobPosts.title, Interviews.scheduled_date, Interviews.status from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') and Interviews.scheduled_date >= now();"}
{"prompt": "What are the details of the coding assessment I completed?", "response": "Select action, timestamp from SystemLogs where user_id = (Select seeker_id from JobSeekers where name = 'Aarav') and action like '%coding assessment%';"}
{"prompt": "What support tickets have I raised?", "response": "Select ticket_id, issue, status, created_on from SupportTickets where user_id = (Select seeker_id from JobSeekers where name = 'Aarav') and role = 'JobSeeker';"}
{"prompt": "What is the result of my last coding assessment?", "response": "Select action, timestamp from SystemLogs where user_id = (Select seeker_id from JobSeekers where name = 'Aarav') and action like '%coding assessment result%' order by timestamp desc limit 1;"}
{"prompt": "What job alerts have been set up for my account?", "response": "Select action, timestamp from SystemLogs where user_id = (Select seeker_id from JobSeekers where name = 'Aarav') and action like '%job alert%';"}
{"prompt": "What is the summary of the latest analytics report relevant to job seekers?", "response": "Select summary from AnalyticsReports where report_type like '%job seeker%' order by generated_on desc limit 1;"}
{"prompt": "What are the details of all interviews I have completed?", "response": "Select Interviews.interview_id, JobPosts.title, Interviews.scheduled_date, Interviews.status, Interviews.feedback from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') and Interviews.status = 'Completed';"}
{"prompt": "What is my application history for the last 30 days?", "response": "Select JobPosts.title, Applications.status, Applications.applied_on from Applications join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') and Applications.applied_on >= current_date - interval '30 days';"}
{"prompt": "Which employers have viewed my resume?", "response": "Select distinct Employers.company_name from Applications join JobPosts on Applications.job_id = JobPosts.job_id join Employers on JobPosts.employer_id = Employers.employer_id where Applications.resume_reviewed_by is not null and Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav');"}
{"prompt": "What is the status of my most recent application?", "response": "Select Applications.status from Applications where seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') order by applied_on desc limit 1;"}
{"prompt": "What are the details of the last job post I applied to?", "response": "Select JobPosts.title, JobPosts.company_name, JobPosts.location, JobPosts.salary_range from JobPosts join Applications on JobPosts.job_id = Applications.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') order by Applications.applied_on desc limit 1;"}
{"prompt": "What is my total number of applications submitted?", "response": "Select count(*) from Applications where seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav');"}
{"prompt": "What is the status of all jobs I have applied to that are still open?", "response": "Select JobPosts.title, Applications.status from Applications join JobPosts on Applications.job_id = JobPosts.job_id where Applications.seeker_id = (Select seeker_id from JobSeekers where name = 'Aarav') and JobPosts.status = 'Open';"}
{"prompt": "Employers/Recruiters", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "How do I post a new job opening for a Backend Developer?", "response": "Insert into JobPosts (employer_id, title, description, location, type, salary_range, experience_required, posted_on, status) values ((Select employer_id from Employers where company_name = 'Fintech Startup'), 'Backend Developer', 'Job description here', 'Remote', 'Full-time', '12-18 LPA', 2, current_date, 'Open');"}
{"prompt": "What are the details of the job opening I posted today?", "response": "Select job_id, title, description, location, type, salary_range, experience_required, posted_on, status from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and posted_on = current_date;"}
{"prompt": "Who has applied to my Backend Developer job opening?", "response": "Select JobSeekers.name, JobSeekers.skills, Applications.status, Applications.applied_on from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "How can I filter applicants by Node.js and PostgreSQL skills?", "response": "Select JobSeekers.name, JobSeekers.skills, JobSeekers.experience_years from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1) and JobSeekers.skills like '%Node.js%' and JobSeekers.skills like '%PostgreSQL%';"}
{"prompt": "Which candidates have I shortlisted for interviews?", "response": "Select JobSeekers.name, Applications.status from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.status = 'Shortlisted' and Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "How do I send interview invites to shortlisted candidates?", "response": "Insert into Interviews (application_id, scheduled_date, interviewer_id, status) values ([APPLICATION_ID], '2025-06-15 10:00:00', (Select employer_id from Employers where company_name = 'Fintech Startup'), 'Scheduled');"}
{"prompt": "Which candidates have I messaged for clarification on their experience?", "response": "Select JobSeekers.name, Applications.status from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.status = 'Contacted' and Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "How can I track the hiring progress for all my job posts?", "response": "Select Applications.status, count(*) from Applications join JobPosts on Applications.job_id = JobPosts.job_id where JobPosts.employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') group by Applications.status;"}
{"prompt": "How do I export a hiring progress report for my HR manager?", "response": "Select Applications.application_id, JobSeekers.name, JobPosts.title, Applications.status, Applications.applied_on from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id join JobPosts on Applications.job_id = JobPosts.job_id where JobPosts.employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup');"}
{"prompt": "What are the details of all open job posts I have created?", "response": "Select job_id, title, description, location, type, salary_range, experience_required, posted_on, status from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and status = 'Open';"}
{"prompt": "Which candidates have been rejected for my Backend Developer job?", "response": "Select JobSeekers.name, Applications.status from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.status = 'Rejected' and Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "What is the average experience level of applicants for my Backend Developer job?", "response": "Select avg(JobSeekers.experience_years) from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "How many applications have I received for my Backend Developer job?", "response": "Select count(*) from Applications where job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "What are the scheduled interview dates for my Backend Developer candidates?", "response": "Select Interviews.scheduled_date, JobSeekers.name from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1) order by Interviews.scheduled_date;"}
{"prompt": "Which candidates have completed their interviews?", "response": "Select JobSeekers.name, Interviews.status from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Interviews.status = 'Completed' and Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "How do I update the status of an application?", "response": "Update Applications set status = 'Shortlisted' where application_id = [APPLICATION_ID];"}
{"prompt": "What are the details of candidates I have shortlisted?", "response": "Select JobSeekers.name, JobSeekers.skills, Applications.status from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.status = 'Shortlisted' and Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "How can I view the feedback from interviews for my candidates?", "response": "Select JobSeekers.name, Interviews.feedback from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Applications.job_id = (Select job_id from JobPosts where employer_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and title like '%Backend Developer%' order by posted_on desc limit 1);"}
{"prompt": "What support tickets have I raised as an employer?", "response": "Select ticket_id, issue, status, created_on from SupportTickets where user_id = (Select employer_id from Employers where company_name = 'Fintech Startup') and role = 'Employer';"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select employer_id from Employers where company_name = 'Fintech Startup') order by generated_on desc limit 1;"}
{"prompt": "HR Managers", "response": "nan"}
{"prompt": "Natural Language Question (Ritika’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the details of all active job posts across departments?", "response": "Select job_id, title, description, location, type, salary_range, experience_required, posted_on, status from JobPosts where status = 'Open';"}
{"prompt": "How many applications has each job post received?", "response": "Select job_id, count(*) as application_count from Applications group by job_id;"}
{"prompt": "Which job posts have received the most applications this month?", "response": "Select job_id, count(*) as application_count from Applications where applied_on >= date_trunc('month', current_date) group by job_id order by application_count desc limit 5;"}
{"prompt": "What is the status of all applications for the QA Engineer role?", "response": "Select Applications.application_id, JobSeekers.name, Applications.status from Applications join JobPosts on Applications.job_id = JobPosts.job_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where JobPosts.title like '%QA Engineer%';"}
{"prompt": "What is the trend of applications for the QA Engineer role over the past month?", "response": "Select applied_on, count(*) as daily_applications from Applications where job_id in (Select job_id from JobPosts where title like '%QA Engineer%') and applied_on >= current_date - interval '30 days' group by applied_on order by applied_on;"}
{"prompt": "Which job posts have not received any applications this week?", "response": "Select job_id, title from JobPosts where job_id not in (Select job_id from Applications where applied_on >= current_date - interval '7 days');"}
{"prompt": "Which job posts are using premium listing features?", "response": "Select job_id, title, status from JobPosts where status = 'Premium';"}
{"prompt": "How can I boost the visibility of the QA Engineer job post?", "response": "Update JobPosts set status = 'Premium' where title like '%QA Engineer%';"}
{"prompt": "What is the summary of the latest analytics report for job post visibility?", "response": "Select summary from AnalyticsReports where report_type like '%job post visibility%' order by generated_on desc limit 1;"}
{"prompt": "Which job posts have descriptions that need review (e.g., missing or too short)?", "response": "Select job_id, title from JobPosts where description is null or length(description) < 50;"}
{"prompt": "What are the details of all selected candidates for onboarding?", "response": "Select JobSeekers.name, JobPosts.title, Applications.status from Applications join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id join JobPosts on Applications.job_id = JobPosts.job_id where Applications.status = 'Selected';"}
{"prompt": "What is the status of onboarding documents for selected candidates?", "response": "Select action, timestamp from SystemLogs where action like '%onboarding document%' order by timestamp desc;"}
{"prompt": "Which job posts are expiring soon (within 7 days)?", "response": "Select job_id, title, posted_on from JobPosts where posted_on <= current_date - interval '23 days';"}
{"prompt": "What is the average number of applications per job post this month?", "response": "Select avg(app_count) from (Select count(*) as app_count from Applications where applied_on >= date_trunc('month', current_date) group by job_id) as sub;"}
{"prompt": "Which departments have the most active job posts?", "response": "Select location, count(*) as open_positions from JobPosts where status = 'Open' group by location order by open_positions desc;"}
{"prompt": "What is the application-to-interview conversion rate for each job post?", "response": "Select job_id, (Select count(*) from Interviews where application_id in (Select application_id from Applications where job_id = JP.job_id))::float / nullif(count(*),0) as conversion_rate from Applications as A join JobPosts as JP on A.job_id = JP.job_id group by JP.job_id;"}
{"prompt": "Which job posts have had no applications in the last 30 days?", "response": "Select job_id, title from JobPosts where job_id not in (Select job_id from Applications where applied_on >= current_date - interval '30 days');"}
{"prompt": "What is the total number of job posts created this quarter?", "response": "Select count(*) from JobPosts where posted_on >= date_trunc('quarter', current_date);"}
{"prompt": "What is the status of compliance-related support tickets?", "response": "Select ticket_id, issue, status, created_on from SupportTickets where issue like '%compliance%';"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select employer_id from Employers where company_name = 'Mid-Sized Tech Firm') order by generated_on desc limit 1;"}
{"prompt": "Resume Reviewers", "response": "nan"}
{"prompt": "Natural Language Question (Anand’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which candidate resumes are pending manual review due to formatting issues?", "response": "Select seeker_id, name, resume from JobSeekers where resume like '%formatting issue%' or resume like '%manual review%';"}
{"prompt": "Which resumes have low clarity in experience descriptions?", "response": "Select seeker_id, name, resume from JobSeekers where resume like '%low clarity%' or resume like '%unclear experience%';"}
{"prompt": "Which resumes are in my current review queue?", "response": "Select seeker_id, name, resume from JobSeekers where seeker_id in (Select resume_reviewed_by from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand'));"}
{"prompt": "Which candidates are missing education details in their resume?", "response": "Select seeker_id, name from JobSeekers where resume not like '%education%' or resume like '%missing education%';"}
{"prompt": "Which resumes have been flagged for layout changes?", "response": "Select seeker_id, name, resume from JobSeekers where resume like '%layout issue%' or resume like '%layout change%';"}
{"prompt": "What feedback have I provided to candidates today?", "response": "Select action, timestamp from SystemLogs where user_id = (Select seeker_id from JobSeekers where name = 'Anand') and action like '%resume feedback%' and date(timestamp) = current_date;"}
{"prompt": "Which resumes have I tagged as 'Top Talent' today?", "response": "Select seeker_id, name from JobSeekers where seeker_id in (Select user_id from SystemLogs where action like '%Top Talent%' and date(timestamp) = current_date);"}
{"prompt": "Which candidates have received feedback on their resume wording?", "response": "Select seeker_id, name from JobSeekers where resume like '%improve wording%' or resume like '%better wording%';"}
{"prompt": "Which resumes have been reviewed by me in the past week?", "response": "Select seeker_id, name, resume from JobSeekers where seeker_id in (Select resume_reviewed_by from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand')) and registration_date >= current_date - interval '7 days';"}
{"prompt": "What is the total number of resumes I have reviewed this month?", "response": "Select count(*) from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand') and applied_on >= date_trunc('month', current_date);"}
{"prompt": "Which candidates have been recommended for layout improvements?", "response": "Select seeker_id, name from JobSeekers where resume like '%layout%' and seeker_id in (Select resume_reviewed_by from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand'));"}
{"prompt": "Which resumes did I flag for missing education details this week?", "response": "Select seeker_id, name from JobSeekers where resume like '%missing education%' and registration_date >= current_date - interval '7 days';"}
{"prompt": "Which resumes have received multiple rounds of feedback?", "response": "Select seeker_id, name from JobSeekers where seeker_id in (Select user_id from SystemLogs where action like '%resume feedback%' group by user_id having count(*) > 1);"}
{"prompt": "What is the average experience of candidates whose resumes I reviewed this month?", "response": "Select avg(experience_years) from JobSeekers where seeker_id in (Select resume_reviewed_by from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand')) and registration_date >= date_trunc('month', current_date);"}
{"prompt": "Which resumes were tagged as 'Top Talent' this month?", "response": "Select seeker_id, name from JobSeekers where seeker_id in (Select user_id from SystemLogs where action like '%Top Talent%' and timestamp >= date_trunc('month', current_date));"}
{"prompt": "What are the details of the last 5 resumes I reviewed?", "response": "Select seeker_id, name, resume from JobSeekers where seeker_id in (Select resume_reviewed_by from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand')) order by registration_date desc limit 5;"}
{"prompt": "Which candidates have received resume feedback from me more than once?", "response": "Select seeker_id, name from JobSeekers where seeker_id in (Select user_id from SystemLogs where action like '%resume feedback%' group by user_id having count(*) > 1);"}
{"prompt": "Which resumes have been flagged for both formatting and layout issues?", "response": "Select seeker_id, name from JobSeekers where resume like '%formatting issue%' and resume like '%layout issue%';"}
{"prompt": "What is the summary of my resume review activity today?", "response": "Select count(*) as resumes_reviewed from Applications where resume_reviewed_by = (Select seeker_id from JobSeekers where name = 'Anand') and applied_on = current_date;"}
{"prompt": "What is the summary of the latest analytics report on resume quality?", "response": "Select summary from AnalyticsReports where report_type like '%resume quality%' order by generated_on desc limit 1;"}
{"prompt": "Interview Coordinators", "response": "nan"}
{"prompt": "Natural Language Question (Tanvi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which interviews are scheduled this week for the marketing role?", "response": "Select Interviews.interview_id, Interviews.scheduled_date, Interviews.status, JobSeekers.name from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where JobPosts.title like '%marketing%' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "Who are the interviewers assigned to these interviews?", "response": "Select distinct Interviews.interviewer_id from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id where JobPosts.title like '%marketing%' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "What is the availability of interviewers for the marketing role this week?", "response": "Select interviewer_id, scheduled_date from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id where JobPosts.title like '%marketing%' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "Which five candidates have been shortlisted for the marketing role?", "response": "Select JobSeekers.name, Applications.status from Applications join JobPosts on Applications.job_id = JobPosts.job_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where JobPosts.title like '%marketing%' and Applications.status = 'Shortlisted' limit 5;"}
{"prompt": "What are the scheduled interview slots for each shortlisted candidate?", "response": "Select JobSeekers.name, Interviews.scheduled_date, Interviews.status from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where JobPosts.title like '%marketing%' and Applications.status = 'Shortlisted';"}
{"prompt": "How do I update the interview slot for a candidate who requested rescheduling?", "response": "Update Interviews set scheduled_date = '[NEW_DATE_TIME]' where interview_id = [INTERVIEW_ID];"}
{"prompt": "How do I notify the interviewer about the updated slot?", "response": "Insert into SystemLogs (user_id, role, action, timestamp) values ([INTERVIEWER_ID], 'Employer', 'Interview slot updated for candidate', current_timestamp);"}
{"prompt": "Which interviews are pending (not yet completed) for the marketing role this week?", "response": "Select Interviews.interview_id, Interviews.scheduled_date, JobSeekers.name from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where JobPosts.title like '%marketing%' and Interviews.status != 'Completed' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "What is the attendance status for each interview this week?", "response": "Select Interviews.interview_id, Interviews.scheduled_date, Interviews.status from Interviews where Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "Which interviews have feedback submitted and which are pending?", "response": "Select Interviews.interview_id, Interviews.status, Interviews.feedback from Interviews where Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "What is the summary of interview attendance for this week?", "response": "Select status, count(*) from Interviews where scheduled_date::date between current_date and current_date + interval '6 days' group by status;"}
{"prompt": "What is the feedback submission rate for interviews this week?", "response": "Select (count(*) filter (where feedback is not null))::float / nullif(count(*),0) as feedback_rate from Interviews where scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "Which candidates have requested to reschedule their interview?", "response": "Select JobSeekers.name, Interviews.interview_id from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Interviews.status = 'Reschedule Requested' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "Which interviews are scheduled for today?", "response": "Select Interviews.interview_id, Interviews.scheduled_date, JobSeekers.name from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Interviews.scheduled_date::date = current_date;"}
{"prompt": "How do I set up a video call link for an interview?", "response": "Update Interviews set feedback = 'Video call link: [LINK]' where interview_id = [INTERVIEW_ID];"}
{"prompt": "Which interviews have been completed this week?", "response": "Select Interviews.interview_id, Interviews.scheduled_date, JobSeekers.name from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Interviews.status = 'Completed' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "Which interviews are still pending feedback submission?", "response": "Select Interviews.interview_id, Interviews.scheduled_date, JobSeekers.name from Interviews join Applications on Interviews.application_id = Applications.application_id join JobSeekers on Applications.seeker_id = JobSeekers.seeker_id where Interviews.feedback is null and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "What is the total number of interviews scheduled for the marketing role this week?", "response": "Select count(*) from Interviews join Applications on Interviews.application_id = Applications.application_id join JobPosts on Applications.job_id = JobPosts.job_id where JobPosts.title like '%marketing%' and Interviews.scheduled_date::date between current_date and current_date + interval '6 days';"}
{"prompt": "What is the summary of today’s interview activity?", "response": "Select status, count(*) from Interviews where scheduled_date::date = current_date group by status;"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select employer_id from Employers where company_name = 'HireConnect') order by generated_on desc limit 1;"}
{"prompt": "Platform Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Ramesh’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What system health logs were recorded overnight?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where timestamp >= '2025-06-11 00:00:00' and timestamp <= '2025-06-11 06:00:00' order by timestamp desc;"}
{"prompt": "Which scheduled background jobs (resume parsing, job alert emails, analytics updates) ran successfully overnight?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where (action like '%resume parsing%' or action like '%job alert email%' or action like '%analytics update%') and timestamp >= '2025-06-11 00:00:00' and timestamp <= '2025-06-11 06:00:00' order by timestamp desc;"}
{"prompt": "Which new recruiter accounts are pending approval?", "response": "Select employer_id, company_name, email, phone, location, registration_date from Employers where status = 'Pending Approval' order by registration_date asc;"}
{"prompt": "What role permission updates have been made for HR managers?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%role permission update%' and role = 'HR Manager' order by timestamp desc;"}
{"prompt": "What open technical queries have been submitted by customer support?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where role = 'Customer Support' and status = 'Open' order by created_on desc;"}
{"prompt": "What recent system logs indicate suspicious activity or flagged events?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%suspicious%' or action like '%flagged%' order by timestamp desc;"}
{"prompt": "What compliance enforcement actions related to data protection have been logged?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%compliance%' or action like '%data protection%' order by timestamp desc;"}
{"prompt": "Which employers registered today?", "response": "Select employer_id, company_name, email, phone, location, registration_date from Employers where registration_date = current_date;"}
{"prompt": "What is the status of all open support tickets?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where status = 'Open' order by created_on desc;"}
{"prompt": "Which background jobs failed overnight?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where (action like '%failed%' or action like '%error%') and timestamp >= '2025-06-11 00:00:00' and timestamp <= '2025-06-11 06:00:00' order by timestamp desc;"}
{"prompt": "What are the most recent actions I performed as admin today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where admin_id = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Which recruiter accounts were approved today?", "response": "Select employer_id, company_name, email, phone, location, registration_date from Employers where status = 'Active' and registration_date = current_date;"}
{"prompt": "What are the details of the latest analytics report on system usage trends?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%system usage%' order by generated_on desc limit 1;"}
{"prompt": "What system logs show login attempts by admins today?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where action like '%login%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "What is the status of all pending support tickets related to compliance?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%compliance%' and status = 'Open' order by created_on desc;"}
{"prompt": "Which users have been flagged for suspicious activity today?", "response": "Select user_id, action, timestamp from SystemLogs where action like '%flagged%' and date(timestamp) = current_date;"}
{"prompt": "What is the summary of the latest data protection compliance report?", "response": "Select summary from AnalyticsReports where report_type like '%data protection%' order by generated_on desc limit 1;"}
{"prompt": "Which scheduled jobs are planned for tonight?", "response": "Select log_id, admin_id, action, timestamp from SystemLogs where (action like '%scheduled%' or action like '%background job%') and timestamp >= '2025-06-11 18:00:00' and timestamp < '2025-06-12 06:00:00' order by timestamp asc;"}
{"prompt": "What are the details of all support tickets I handled today?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where user_id = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) and date(created_on) = current_date;"}
{"prompt": "What is the summary of the latest system health analytics report?", "response": "Select summary from AnalyticsReports where report_type like '%system health%' order by generated_on desc limit 1;"}
{"prompt": "Compliance / Legal Team", "response": "nan"}
{"prompt": "Natural Language Question (Neha’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which job posts have been flagged for discriminatory content?", "response": "Select job_id, title, description from JobPosts where description like '%discriminat%' or description like '%age%' or description like '%gender%' or description like '%race%' or description like '%ethnic%' or description like '%religion%' or description like '%disability%' or description like '%sexual orientation%' or description like '%flagged%';"}
{"prompt": "Which job posts are missing required employer disclosures?", "response": "Select job_id, title, employer_id from JobPosts where description like '%missing disclosure%' or description like '%incomplete employer info%' or description is null;"}
{"prompt": "Which flagged job posts are still active?", "response": "Select job_id, title, status from JobPosts where (description like '%flagged%' or description like '%discriminat%') and status = 'Open';"}
{"prompt": "What are the details of all flagged employers for compliance review?", "response": "Select employer_id, company_name, industry, email, location from Employers where company_name like '%flagged%' or industry like '%flagged%' or location like '%flagged%';"}
{"prompt": "Which support tickets relate to discrimination or compliance issues?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%discriminat%' or issue like '%compliance%' or issue like '%data protection%';"}
{"prompt": "Which users have requested account and data deletion?", "response": "Select user_id from SupportTickets where issue like '%account deletion%' or issue like '%delete my data%';"}
{"prompt": "What is the status of all open data deletion requests?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%delete%' and status = 'Open';"}
{"prompt": "Which candidates have incomplete data disclosures?", "response": "Select seeker_id, name, email from JobSeekers where resume like '%missing disclosure%' or resume is null;"}
{"prompt": "What are the details of the latest audit of data retention practices?", "response": "Select summary from AnalyticsReports where report_type like '%data retention%' order by generated_on desc limit 1;"}
{"prompt": "Which users have been sent compliance notices this month?", "response": "Select user_id, action, timestamp from SystemLogs where action like '%compliance notice%' and extract(month from timestamp) = extract(month from current_date);"}
{"prompt": "Which recruiters have violated platform terms?", "response": "Select employer_id, company_name from Employers where company_name like '%violation%' or company_name like '%flagged%';"}
{"prompt": "What is the status of all compliance-related support tickets?", "response": "Select ticket_id, user_id, issue, status from SupportTickets where issue like '%compliance%';"}
{"prompt": "What actions have I taken today regarding compliance enforcement?", "response": "Select action, timestamp from SystemLogs where user_id = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) and action like '%compliance%' and date(timestamp) = current_date;"}
{"prompt": "Which job posts have been updated for compliance reasons today?", "response": "Select job_id, title, status from JobPosts where description like '%compliance update%' and posted_on = current_date;"}
{"prompt": "What is the summary of the latest GDPR compliance audit?", "response": "Select summary from AnalyticsReports where report_type like '%GDPR%' order by generated_on desc limit 1;"}
{"prompt": "Which users have been flagged for suspicious or non-compliant activity?", "response": "Select user_id, action, timestamp from SystemLogs where action like '%flagged%' or action like '%non-compliant%' order by timestamp desc;"}
{"prompt": "Which employers are missing required legal disclosures?", "response": "Select employer_id, company_name from Employers where company_name like '%missing disclosure%' or email is null or location is null;"}
{"prompt": "What are the details of all data deletion actions performed this week?", "response": "Select action, timestamp from SystemLogs where action like '%data deletion%' and timestamp >= current_date - interval '7 days';"}
{"prompt": "What is the total number of flagged job posts this month?", "response": "Select count(*) from JobPosts where (description like '%flagged%' or description like '%discriminat%') and posted_on >= date_trunc('month', current_date);"}
{"prompt": "What is the summary of the latest compliance analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) and report_type like '%compliance%' order by generated_on desc limit 1;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Ritika’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the details of the campaign targeting recent college graduates?", "response": "Select campaign_id, name, target_audience, budget, start_date, end_date from MarketingCampaigns where target_audience like '%college graduate%' order by start_date desc limit 1;"}
{"prompt": "What is the performance summary of the premium recruiter accounts campaign?", "response": "Select summary from AnalyticsReports where report_type like '%premium recruiter%' order by generated_on desc limit 1;"}
{"prompt": "What are the latest analytics reports for campaigns run this month?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where generated_on >= date_trunc('month', current_date) order by generated_on desc;"}
{"prompt": "What is the total budget spent on campaigns this quarter?", "response": "Select sum(budget) from MarketingCampaigns where start_date >= date_trunc('quarter', current_date);"}
{"prompt": "Which campaigns are currently active?", "response": "Select campaign_id, name, start_date, end_date from MarketingCampaigns where start_date <= current_date and end_date >= current_date;"}
{"prompt": "Which campaigns have targeted job seekers in the last 30 days?", "response": "Select campaign_id, name, target_audience from MarketingCampaigns where target_audience like '%job seeker%' and start_date >= current_date - interval '30 days';"}
{"prompt": "What is the click-through rate summary for the latest campaign?", "response": "Select summary from AnalyticsReports where report_type like '%click-through%' order by generated_on desc limit 1;"}
{"prompt": "What are the details of A/B test analytics for landing page versions?", "response": "Select report_id, summary from AnalyticsReports where report_type like '%A/B test%' order by generated_on desc;"}
{"prompt": "Which campaigns included social media ads?", "response": "Select campaign_id, name from MarketingCampaigns where name like '%social media%' or target_audience like '%social media%';"}
{"prompt": "What are the most recent push notifications about job fairs and webinars?", "response": "Select action, timestamp from SystemLogs where action like '%push notification%' and (action like '%job fair%' or action like '%webinar%') order by timestamp desc;"}
{"prompt": "What is the performance of email newsletter campaigns this month?", "response": "Select summary from AnalyticsReports where report_type like '%email newsletter%' and generated_on >= date_trunc('month', current_date) order by generated_on desc;"}
{"prompt": "Which campaigns promoted on-portal banners?", "response": "Select campaign_id, name from MarketingCampaigns where name like '%banner%' or target_audience like '%banner%';"}
{"prompt": "What is the summary of the latest blog post campaign about interview tips?", "response": "Select summary from AnalyticsReports where report_type like '%blog post%' and summary like '%interview tip%' order by generated_on desc limit 1;"}
{"prompt": "What are the details of all campaigns created by me this quarter?", "response": "Select campaign_id, name, start_date, end_date, budget from MarketingCampaigns where campaign_id in (Select campaign_id from AnalyticsReports where generated_by = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1)) and start_date >= date_trunc('quarter', current_date);"}
{"prompt": "Which campaigns are ending this week?", "response": "Select campaign_id, name, end_date from MarketingCampaigns where end_date between current_date and current_date + interval '6 days';"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) order by generated_on desc limit 1;"}
{"prompt": "What are the details of all campaigns targeting employers?", "response": "Select campaign_id, name, target_audience, start_date, end_date from MarketingCampaigns where target_audience like '%employer%';"}
{"prompt": "What are the top 3 most engaged campaigns this year?", "response": "Select campaign_id, name, budget from MarketingCampaigns where start_date >= date_trunc('year', current_date) order by budget desc limit 3;"}
{"prompt": "What is the average budget of campaigns launched this month?", "response": "Select avg(budget) from MarketingCampaigns where start_date >= date_trunc('month', current_date);"}
{"prompt": "What are the details of campaigns that included resume optimization content?", "response": "Select campaign_id, name from MarketingCampaigns where name like '%resume%' or target_audience like '%resume%';"}
{"prompt": "System Developers/IT Staff", "response": "nan"}
{"prompt": "Natural Language Question (Arun’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What server logs were generated today after my deployment?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where date(timestamp) = current_date and action like '%deploy%';"}
{"prompt": "Are there any error logs or downtime events recorded today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where date(timestamp) = current_date and (action like '%error%' or action like '%downtime%');"}
{"prompt": "What actions did I perform today as a backend developer?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where user_id = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) and date(timestamp) = current_date;"}
{"prompt": "What logs mention updates to the job recommendation engine?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%recommendation engine%' order by timestamp desc;"}
{"prompt": "What logs are related to matching algorithm changes?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%matching algorithm%' order by timestamp desc;"}
{"prompt": "Which logs indicate collaboration with the frontend team today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%frontend%' and date(timestamp) = current_date;"}
{"prompt": "What logs show UI changes requested by UX designers?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%UI change%' or action like '%UX%' order by timestamp desc;"}
{"prompt": "What logs record the data breach simulation by the security team?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%data breach simulation%' order by timestamp desc;"}
{"prompt": "Which logs mention API vulnerability patches?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%API vulnerability%' or action like '%patch%' order by timestamp desc;"}
{"prompt": "What logs show access to job application histories?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%application history%' order by timestamp desc;"}
{"prompt": "What is the summary of the latest analytics report on system stability?", "response": "Select summary from AnalyticsReports where report_type like '%system stability%' order by generated_on desc limit 1;"}
{"prompt": "What are the details of all system logs generated in the last 24 hours?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where timestamp >= now() - interval '1 day' order by timestamp desc;"}
{"prompt": "What logs show API access or errors today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where (action like '%API%' or action like '%api error%') and date(timestamp) = current_date;"}
{"prompt": "What are the most recent logs for backend deployments?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%backend deploy%' order by timestamp desc limit 5;"}
{"prompt": "Which logs show code review or merge actions for backend features?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%code review%' or action like '%merge%' order by timestamp desc;"}
{"prompt": "What logs indicate system health checks after deployment?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%health check%' and date(timestamp) = current_date;"}
{"prompt": "What logs show permission or access changes to application data?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%permission%' or action like '%access change%' order by timestamp desc;"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) order by generated_on desc limit 1;"}
{"prompt": "What logs show communication with the security team today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%security team%' and date(timestamp) = current_date;"}
{"prompt": "What are the details of all logs related to API patching today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%API patch%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the daily job search trends for the last 30 days?", "response": "Select date(timestamp) as search_date, count(*) as search_count from SystemLogs where action like '%search%' and timestamp >= current_date - interval '30 days' group by search_date order by search_date;"}
{"prompt": "How many job applications were submitted each day in the last 30 days?", "response": "Select applied_on as application_date, count(*) as application_count from Applications where applied_on >= current_date - interval '30 days' group by application_date order by application_date;"}
{"prompt": "How many users started but did not complete profile creation in the last 30 days?", "response": "Select count(distinct user_id) as started_profiles from SystemLogs where action like '%profile creation started%' and timestamp >= current_date - interval '30 days';"}
{"prompt": "How many users completed profile creation in the last 30 days?", "response": "Select count(distinct user_id) as completed_profiles from SystemLogs where action like '%profile creation completed%' and timestamp >= current_date - interval '30 days';"}
{"prompt": "How many employer logins occurred before the recent UI update (2025-05-15)?", "response": "Select count(distinct user_id) as employer_logins_before from SystemLogs where role = 'Employer' and action like '%login%' and timestamp < '2025-05-15';"}
{"prompt": "How many employer logins occurred after the recent UI update (2025-05-15)?", "response": "Select count(distinct user_id) as employer_logins_after from SystemLogs where role = 'Employer' and action like '%login%' and timestamp >= '2025-05-15';"}
{"prompt": "How many job posts were created before the UI update?", "response": "Select count(*) as job_posts_before from JobPosts where posted_on < '2025-05-15';"}
{"prompt": "How many job posts were created after the UI update?", "response": "Select count(*) as job_posts_after from JobPosts where posted_on >= '2025-05-15';"}
{"prompt": "What are the application counts by A/B test group for the last 30 days?", "response": "Select case when JS.seeker_id % 2 = 0 then 'Group A' else 'Group B' end as test_group, count(*) as application_count from Applications A join JobSeekers JS on A.seeker_id = JS.seeker_id where A.applied_on >= current_date - interval '30 days' group by test_group order by test_group;"}
{"prompt": "How many employers (by A/B test group) posted jobs in the last 30 days?", "response": "Select case when E.employer_id % 2 = 0 then 'Group A' else 'Group B' end as test_group, count(distinct E.employer_id) as retained_employers from Employers E join JobPosts JP on E.employer_id = JP.employer_id where JP.posted_on >= current_date - interval '30 days' group by test_group order by test_group;"}
{"prompt": "How many users started profile creation in the last 30 days?", "response": "Select count(distinct user_id) as profile_started from SystemLogs where action like '%profile creation started%' and timestamp >= current_date - interval '30 days';"}
{"prompt": "How many users completed profile creation in the last 30 days?", "response": "Select count(distinct user_id) as profile_completed from SystemLogs where action like '%profile creation completed%' and timestamp >= current_date - interval '30 days';"}
{"prompt": "How many applications were submitted in the last 30 days?", "response": "Select count(*) as applications_submitted from Applications where applied_on >= current_date - interval '30 days';"}
{"prompt": "What is the drop-off rate in the candidate funnel (profile started vs. completed vs. applied)?", "response": "-- Use queries 11, 12, and 13 to calculate drop-off rates manually from their results."}
{"prompt": "What are the main bottlenecks in the application funnel this month?", "response": "-- Analyze results from queries 11, 12, and 13 for significant drop-offs."}
{"prompt": "What are the daily employer engagement rates before and after the UI update?", "response": "Select date(timestamp) as day, count(distinct user_id) as employer_logins from SystemLogs where role = 'Employer' and action like '%login%' and timestamp >= current_date - interval '60 days' group by day order by day;"}
{"prompt": "What is the application conversion rate for the last 30 days?", "response": "Select (select count(*) from Applications where applied_on >= current_date - interval '30 days')::float / nullif((select count(distinct user_id) from SystemLogs where action like '%profile creation completed%' and timestamp >= current_date - interval '30 days'),0) as conversion_rate;"}
{"prompt": "What is the employer retention rate for the last 30 days?", "response": "Select (select count(distinct employer_id) from JobPosts where posted_on >= current_date - interval '30 days')::float / nullif((select count(*) from Employers),0) as retention_rate;"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select user_id from SystemLogs where action like '%login%' and date(timestamp) = current_date limit 1) order by generated_on desc limit 1;"}
{"prompt": "What are the most common drop-off actions in the candidate funnel?", "response": "Select action, count(*) as dropoff_count from SystemLogs where action like '%drop-off%' and timestamp >= current_date - interval '30 days' group by action order by dropoff_count desc;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "AttendanceSystem", "response": "nan"}
{"prompt": "Students", "response": "nan"}
{"prompt": "Natural Language Question (Riya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is my attendance percentage for each subject?", "response": "Select C.name as subject, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') group by C.name;"}
{"prompt": "What is my attendance record for the last 30 days?", "response": "Select C.name as subject, A.date, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and A.date >= current_date - interval '30 days' order by A.date desc;"}
{"prompt": "Which classes have attendance not updated after the most recent lecture?", "response": "Select C.name, A.date from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and A.date = (Select max(date) from AttendanceRecords where student_id = (Select student_id from Students where name = 'Riya') and class_id = A.class_id) and A.status = 'Absent';"}
{"prompt": "Who is the attendance coordinator for my class?", "response": "Select T.name, T.email from Teachers T join Classes C on T.teacher_id = C.coordinator_id where C.class_id = (Select class_id from Students where name = 'Riya');"}
{"prompt": "How do I contact my attendance coordinator through the app?", "response": "Select T.name, T.email, T.phone from Teachers T join Classes C on T.teacher_id = C.coordinator_id where C.class_id = (Select class_id from Students where name = 'Riya');"}
{"prompt": "What is my complete attendance history for this semester?", "response": "Select C.name as subject, A.date, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and C.semester = (Select semester from Classes where class_id = (Select class_id from Students where name = 'Riya')) order by A.date;"}
{"prompt": "Which classes have I missed in the last month?", "response": "Select C.name, A.date from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and A.status = 'Absent' and A.date >= current_date - interval '30 days';"}
{"prompt": "What is the minimum attendance requirement for my classes?", "response": "-- Not available in schema; would require a 'minimum requirement' field in Classes or Departments."}
{"prompt": "What notifications have I received regarding attendance issues?", "response": "Select message, sent_on from Notifications where recipient_id = (Select student_id from Students where name = 'Riya') and role = 'Student' and message like '%attendance%';"}
{"prompt": "What is the summary of my latest attendance analytics report?", "response": "Select summary from AnalyticsReports where generated_by = (Select student_id from Students where name = 'Riya') and report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "What is the total number of classes I have attended this semester?", "response": "Select count(*) from AttendanceRecords where student_id = (Select student_id from Students where name = 'Riya') and status = 'Present' and class_id in (Select class_id from Classes where semester = (Select semester from Classes where class_id = (Select class_id from Students where name = 'Riya')));"}
{"prompt": "What is the total number of absences this semester?", "response": "Select count(*) from AttendanceRecords where student_id = (Select student_id from Students where name = 'Riya') and status = 'Absent' and class_id in (Select class_id from Classes where semester = (Select semester from Classes where class_id = (Select class_id from Students where name = 'Riya')));"}
{"prompt": "What is my attendance history for a specific subject (e.g., 'Mathematics')?", "response": "Select A.date, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and C.name = 'Mathematics' order by A.date;"}
{"prompt": "What actions have I performed in the app related to attendance?", "response": "Select action, timestamp from SystemLogs where user_id = (Select student_id from Students where name = 'Riya') and role = 'Student' and action like '%attendance%';"}
{"prompt": "What parent contacts are linked to my profile?", "response": "Select name, email, phone, relationship from ParentContacts where student_id = (Select student_id from Students where name = 'Riya');"}
{"prompt": "What is the attendance marking history for my classes this week?", "response": "Select C.name, A.date, A.status, A.marked_by from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and A.date >= current_date - interval '7 days' order by A.date desc;"}
{"prompt": "Which teachers have marked my attendance this semester?", "response": "Select distinct T.name from AttendanceRecords A join Teachers T on A.marked_by = T.teacher_id where A.student_id = (Select student_id from Students where name = 'Riya') and A.class_id in (Select class_id from Classes where semester = (Select semester from Classes where class_id = (Select class_id from Students where name = 'Riya')));"}
{"prompt": "What is the department name for my current class?", "response": "Select D.name from Departments D join Students S on D.department_id = S.department_id where S.name = 'Riya';"}
{"prompt": "What is the summary of my attendance notifications this month?", "response": "Select message, sent_on from Notifications where recipient_id = (Select student_id from Students where name = 'Riya') and role = 'Student' and sent_on >= date_trunc('month', current_date);"}
{"prompt": "What is my attendance percentage for today’s classes?", "response": "Select C.name as subject, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Riya') and A.date = current_date group by C.name;"}
{"prompt": "Teachers/Instructors", "response": "nan"}
{"prompt": "Natural Language Question (Mr. Sharma’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the attendance status of students for my classes today?", "response": "Select S.name, C.name as class_name, A.status, A.date from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') and A.date = current_date;"}
{"prompt": "Who are the students marked absent or late in my classes today?", "response": "Select S.name, C.name as class_name, A.status, A.date from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') and A.date = current_date and A.status in ('Absent', 'Late');"}
{"prompt": "What is the attendance percentage of each student in my classes this semester?", "response": "Select S.name, C.name as class_name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') and C.semester = (Select semester from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') limit 1) group by S.name, C.name;"}
{"prompt": "Which students have attendance below 75% in my classes this semester?", "response": "Select S.name, C.name as class_name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') and C.semester = (Select semester from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') limit 1) group by S.name, C.name having (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) < 0.75;"}
{"prompt": "What reminders have I sent to students with low attendance?", "response": "Select message, sent_on from Notifications where recipient_id in (Select student_id from Students where student_id in (Select student_id from AttendanceRecords where class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma')))) and role = 'Student' and message like '%reminder%';"}
{"prompt": "How do I update attendance records with notes on excused absences?", "response": "Update AttendanceRecords set status = 'Excused' where record_id = [RECORD_ID];"}
{"prompt": "What attendance discrepancies have I reported to the administration?", "response": "Select action, timestamp from SystemLogs where user_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') and action like '%attendance discrepancy%';"}
{"prompt": "What is the attendance history of a specific student in my class?", "response": "Select A.date, A.status from AttendanceRecords A join Students S on A.student_id = S.student_id where S.name = '[STUDENT_NAME]' and A.class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma')) order by A.date;"}
{"prompt": "Who are the students in my classes?", "response": "Select S.student_id, S.name, S.email from Students S where S.class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma'));"}
{"prompt": "What classes am I coordinating currently?", "response": "Select class_id, name, course_code, semester from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma');"}
{"prompt": "What notifications have I sent to students regarding attendance?", "response": "Select message, sent_on from Notifications where role = 'Student' and recipient_id in (Select student_id from Students where class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma')));"}
{"prompt": "What is the attendance marking history for my classes today?", "response": "Select A.record_id, S.name, A.status, A.date from AttendanceRecords A join Students S on A.student_id = S.student_id where A.date = current_date and A.class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma'));"}
{"prompt": "Which teachers have marked attendance for my classes?", "response": "Select distinct T.name from AttendanceRecords A join Teachers T on A.marked_by = T.teacher_id where A.class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma'));"}
{"prompt": "What is the summary of the latest attendance analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select teacher_id from Teachers where name = 'Mr. Sharma') and report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "What is the attendance percentage for each class I coordinate?", "response": "Select C.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') group by C.name;"}
{"prompt": "How many students have perfect attendance in my classes this semester?", "response": "Select S.name, C.name as class_name from Students S join AttendanceRecords A on S.student_id = A.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') group by S.name, C.name having sum(case when A.status = 'Present' then 1 else 0 end) = count(*);"}
{"prompt": "What is the list of students with excused absences in my classes?", "response": "Select S.name, C.name as class_name, A.date from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where A.status = 'Excused' and C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma');"}
{"prompt": "What are the details of attendance records I updated today?", "response": "Select record_id, student_id, class_id, status, date from AttendanceRecords where marked_by = (Select teacher_id from Teachers where name = 'Mr. Sharma') and date = current_date;"}
{"prompt": "Which students have attendance below the required threshold in my classes?", "response": "Select S.name, C.name as class_name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma') group by S.name, C.name having (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) < 0.75;"}
{"prompt": "What notifications have I sent to students at risk of low attendance?", "response": "Select message, sent_on from Notifications where recipient_id in (Select student_id from Students where student_id in (Select student_id from AttendanceRecords where class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Mr. Sharma')))) and role = 'Student' and message like '%low attendance%';"}
{"prompt": "Class Coordinators", "response": "nan"}
{"prompt": "Natural Language Question (Ankit’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the attendance percentage for each student in the classes I coordinate?", "response": "Select S.student_id, S.name, C.name as class_name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') group by S.student_id, S.name, C.name order by C.name, attendance_percentage asc;"}
{"prompt": "Which students in my batch have attendance below 75%?", "response": "Select S.student_id, S.name, C.name as class_name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') group by S.student_id, S.name, C.name having (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) < 75;"}
{"prompt": "Which students have the most absences in my classes this month?", "response": "Select S.student_id, S.name, count(*) as absence_count from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') and A.status = 'Absent' and A.date >= date_trunc('month', current_date) group by S.student_id, S.name order by absence_count desc;"}
{"prompt": "What is the attendance record for my batch for today?", "response": "Select S.name, C.name as class_name, A.status from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') and A.date = current_date;"}
{"prompt": "Which classes do I coordinate?", "response": "Select class_id, name, course_code, semester from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Ankit');"}
{"prompt": "Which teachers have marked attendance for my classes this semester?", "response": "Select distinct T.name from AttendanceRecords A join Teachers T on A.marked_by = T.teacher_id where A.class_id in (Select class_id from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Ankit'));"}
{"prompt": "What is the attendance history for a specific student in my batch?", "response": "Select C.name as class_name, A.date, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = [STUDENT_ID] and C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') order by A.date;"}
{"prompt": "Which students have perfect attendance this semester?", "response": "Select S.student_id, S.name from Students S join AttendanceRecords A on S.student_id = A.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') group by S.student_id, S.name having sum(case when A.status = 'Present' then 1 else 0 end) = count(*);"}
{"prompt": "What is the summary of my latest monthly attendance analytics report?", "response": "Select summary from AnalyticsReports where generated_by = (Select teacher_id from Teachers where name = 'Ankit') and report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "Which students have received attendance-related notifications this month?", "response": "Select distinct S.student_id, S.name from Notifications N join Students S on N.recipient_id = S.student_id where N.role = 'Student' and N.message like '%attendance%' and N.sent_on >= date_trunc('month', current_date);"}
{"prompt": "What attendance-related communications have I sent to teachers or students?", "response": "Select notification_id, recipient_id, role, message, sent_on from Notifications where (role = 'Student' or role = 'Teacher') and message like '%attendance%' and sent_on >= date_trunc('month', current_date);"}
{"prompt": "Which students have excused absences in my batch?", "response": "Select S.student_id, S.name, C.name as class_name, A.date from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') and A.status = 'Excused';"}
{"prompt": "What is the total number of absences in my batch this semester?", "response": "Select count(*) from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') and A.status = 'Absent' and C.semester = (Select semester from Classes where coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') limit 1);"}
{"prompt": "Which students have received multiple attendance warnings?", "response": "Select recipient_id, count(*) as warning_count from Notifications where role = 'Student' and message like '%attendance warning%' group by recipient_id having count(*) > 1;"}
{"prompt": "What is the attendance trend for my batch over the last 30 days?", "response": "Select A.date, count(*) filter (where A.status = 'Present') as present_count, count(*) filter (where A.status = 'Absent') as absent_count from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') and A.date >= current_date - interval '30 days' group by A.date order by A.date;"}
{"prompt": "What are the details of all attendance records submitted by each teacher in my batch?", "response": "Select T.name as teacher_name, C.name as class_name, A.date, count(*) as records_marked from AttendanceRecords A join Teachers T on A.marked_by = T.teacher_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') group by T.name, C.name, A.date order by A.date desc;"}
{"prompt": "Which students have not attended any classes this month?", "response": "Select S.student_id, S.name from Students S where S.student_id not in (Select distinct A.student_id from AttendanceRecords A where A.date >= date_trunc('month', current_date));"}
{"prompt": "What is the attendance marking history for my batch this week?", "response": "Select C.name as class_name, A.date, A.status, A.marked_by from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') and A.date >= current_date - interval '7 days' order by A.date desc;"}
{"prompt": "What is the department name for my batch?", "response": "Select D.name from Departments D join Classes C on D.department_id = C.department_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Ankit') limit 1;"}
{"prompt": "What is the summary of the latest attendance discrepancy report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select teacher_id from Teachers where name = 'Ankit') and report_type like '%discrepancy%' order by generated_on desc limit 1;"}
{"prompt": "Department Heads", "response": "nan"}
{"prompt": "Natural Language Question (Dr. Meera Rao’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the overall attendance percentage for the Computer Science department this semester?", "response": "Select round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('semester', current_date);"}
{"prompt": "What are the attendance trends across all semesters in my department?", "response": "Select C.semester, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') group by C.semester order by C.semester;"}
{"prompt": "What is the attendance percentage for each course in the Computer Science department?", "response": "Select C.name as course, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.department_id = (Select department_id from Departments where name = 'Computer Science') group by C.name order by C.name;"}
{"prompt": "Which students in my department have attendance below 75% this semester?", "response": "Select S.student_id, S.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('semester', current_date) group by S.student_id, S.name having (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) < 75;"}
{"prompt": "What is the monthly attendance summary for my department?", "response": "Select date_trunc('month', A.date) as month, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') group by month order by month;"}
{"prompt": "Which faculty have submitted attendance records for my department this month?", "response": "Select distinct T.name from AttendanceRecords A join Classes C on A.class_id = C.class_id join Teachers T on A.marked_by = T.teacher_id where C.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('month', current_date);"}
{"prompt": "What are the details of attendance records submitted by a specific faculty member?", "response": "Select S.name, C.name as class_name, A.date, A.status from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where A.marked_by = (Select teacher_id from Teachers where name = '[FACULTY_NAME]') and C.department_id = (Select department_id from Departments where name = 'Computer Science');"}
{"prompt": "Which students have been flagged for low attendance in my department this month?", "response": "Select S.student_id, S.name from Notifications N join Students S on N.recipient_id = S.student_id where N.role = 'Student' and N.message like '%low attendance%' and S.department_id = (Select department_id from Departments where name = 'Computer Science') and N.sent_on >= date_trunc('month', current_date);"}
{"prompt": "What is the attendance trend for each class in my department over the last 3 months?", "response": "Select C.name as class_name, date_trunc('month', A.date) as month, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= current_date - interval '3 months' group by C.name, month order by C.name, month;"}
{"prompt": "Which students have the most absences in the department this semester?", "response": "Select S.student_id, S.name, count(*) as absence_count from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.status = 'Absent' and A.date >= date_trunc('semester', current_date) group by S.student_id, S.name order by absence_count desc;"}
{"prompt": "What is the attendance status for all classes in my department today?", "response": "Select S.name as student_name, C.name as class_name, A.status from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date = current_date;"}
{"prompt": "What notifications have been sent to students at risk of falling below attendance requirements?", "response": "Select N.message, N.sent_on, S.name from Notifications N join Students S on N.recipient_id = S.student_id where N.role = 'Student' and N.message like '%attendance%' and S.department_id = (Select department_id from Departments where name = 'Computer Science');"}
{"prompt": "What are the details of all attendance discrepancies reported by faculty?", "response": "Select action, timestamp, user_id from SystemLogs where action like '%attendance discrepancy%' and user_id in (Select teacher_id from Teachers where department_id = (Select department_id from Departments where name = 'Computer Science'));"}
{"prompt": "What is the summary of the latest monthly attendance analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select head_id from Departments where name = 'Computer Science') and report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "Which classes have the lowest attendance percentage this semester?", "response": "Select C.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('semester', current_date) group by C.name order by attendance_percentage asc limit 5;"}
{"prompt": "Which students have perfect attendance in my department this semester?", "response": "Select S.student_id, S.name from Students S join AttendanceRecords A on S.student_id = A.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('semester', current_date) group by S.student_id, S.name having sum(case when A.status = 'Present' then 1 else 0 end) = count(*);"}
{"prompt": "What is the department-wide attendance for each month this year?", "response": "Select date_trunc('month', A.date) as month, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('year', current_date) group by month order by month;"}
{"prompt": "Which faculty have not submitted attendance records for their classes this month?", "response": "Select T.teacher_id, T.name from Teachers T where T.department_id = (Select department_id from Departments where name = 'Computer Science') and T.teacher_id not in (Select distinct A.marked_by from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('month', current_date));"}
{"prompt": "What is the attendance summary for each batch (class) in my department?", "response": "Select C.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where C.department_id = (Select department_id from Departments where name = 'Computer Science') group by C.name order by C.name;"}
{"prompt": "What is the total number of students with attendance below 50% this semester?", "response": "Select count(*) from (Select S.student_id from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id = (Select department_id from Departments where name = 'Computer Science') and A.date >= date_trunc('semester', current_date) group by S.student_id having (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) < 50) as low_attendance;"}
{"prompt": "School/College Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Mrs. Kavitha’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which teachers have not submitted attendance for their classes today?", "response": "Select T.teacher_id, T.name from Teachers T where T.teacher_id not in (Select distinct marked_by from AttendanceRecords where date = current_date);"}
{"prompt": "Which classes have missing attendance records this week?", "response": "Select C.class_id, C.name from Classes C where C.class_id not in (Select distinct class_id from AttendanceRecords where date >= current_date - interval '7 days');"}
{"prompt": "What attendance discrepancies have been flagged by class coordinators this month?", "response": "Select action, timestamp, user_id from SystemLogs where action like '%attendance discrepancy%' and timestamp >= date_trunc('month', current_date);"}
{"prompt": "What is the summary of department-level attendance reports for this month?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%department attendance%' and generated_on >= date_trunc('month', current_date);"}
{"prompt": "Which departments have the lowest average attendance this semester?", "response": "Select D.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Departments D on S.department_id = D.department_id where A.date >= date_trunc('semester', current_date) group by D.name order by attendance_percentage asc limit 3;"}
{"prompt": "What is the total number of flagged attendance discrepancies this month?", "response": "Select count(*) from SystemLogs where action like '%attendance discrepancy%' and timestamp >= date_trunc('month', current_date);"}
{"prompt": "What is the monthly attendance summary for each department?", "response": "Select D.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Departments D on S.department_id = D.department_id where A.date >= date_trunc('month', current_date) group by D.name order by D.name;"}
{"prompt": "Which students are being queried by parents for attendance issues?", "response": "Select distinct P.student_id, S.name from ParentContacts P join Students S on P.student_id = S.student_id where P.parent_id in (Select recipient_id from Notifications where role = 'Parent' and message like '%attendance%');"}
{"prompt": "What is the attendance history for a student after a parent inquiry?", "response": "Select C.name as class_name, A.date, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = [STUDENT_ID] order by A.date desc;"}
{"prompt": "What access rights have I managed for staff this month?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%access%' and timestamp >= date_trunc('month', current_date);"}
{"prompt": "Which teachers have been granted new access rights this semester?", "response": "Select user_id, role, action, timestamp from SystemLogs where role = 'Teacher' and action like '%access granted%' and timestamp >= date_trunc('semester', current_date);"}
{"prompt": "What notifications have been sent to staff about attendance policy compliance?", "response": "Select notification_id, recipient_id, message, sent_on from Notifications where role in ('Teacher', 'Coordinator') and message like '%policy%' and sent_on >= date_trunc('month', current_date);"}
{"prompt": "What is the summary of the latest college-wide attendance analytics report?", "response": "Select summary from AnalyticsReports where report_type like '%college attendance%' order by generated_on desc limit 1;"}
{"prompt": "Which students have received multiple parent inquiries about attendance?", "response": "Select student_id, count(*) as inquiry_count from Notifications where role = 'Parent' and message like '%attendance%' group by student_id having count(*) > 1;"}
{"prompt": "What is the attendance compliance rate for all departments this month?", "response": "Select D.name, (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) as compliance_rate from AttendanceRecords A join Students S on A.student_id = S.student_id join Departments D on S.department_id = D.department_id where A.date >= date_trunc('month', current_date) group by D.name;"}
{"prompt": "What are the details of all attendance-related communications between academic and exam teams?", "response": "Select notification_id, recipient_id, role, message, sent_on from Notifications where (role = 'Academic' or role = 'Exam') and message like '%attendance%';"}
{"prompt": "Which classes have the highest number of absences this semester?", "response": "Select C.name, count(*) as absence_count from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.status = 'Absent' and A.date >= date_trunc('semester', current_date) group by C.name order by absence_count desc limit 5;"}
{"prompt": "What is the list of all students with attendance below 50% in any department?", "response": "Select S.student_id, S.name, D.name as department from AttendanceRecords A join Students S on A.student_id = S.student_id join Departments D on S.department_id = D.department_id group by S.student_id, S.name, D.name having (sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) < 50;"}
{"prompt": "What is the summary of department attendance forwarded to the principal this month?", "response": "Select report_id, report_type, generated_on, summary from AnalyticsReports where report_type like '%department attendance%' and generated_on >= date_trunc('month', current_date);"}
{"prompt": "Which staff have been notified about attendance discrepancies this month?", "response": "Select distinct recipient_id, role from Notifications where message like '%attendance discrepancy%' and sent_on >= date_trunc('month', current_date);"}
{"prompt": "Attendance Clerks", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which attendance records have been submitted by teachers today?", "response": "Select record_id, student_id, class_id, date, status, marked_by from AttendanceRecords where date = current_date;"}
{"prompt": "Which teachers have not submitted attendance for their classes today?", "response": "Select teacher_id, name from Teachers where teacher_id not in (Select distinct marked_by from AttendanceRecords where date = current_date);"}
{"prompt": "What are the attendance records that require manual entry due to missing submissions?", "response": "Select class_id, date from Classes cross join (Select distinct date from AttendanceRecords where date = current_date) as dates where class_id not in (Select class_id from AttendanceRecords where date = current_date);"}
{"prompt": "Which students have attendance grievances today?", "response": "Select ticket_id, user_id, issue, status, created_on from SupportTickets where issue like '%attendance grievance%' and date(created_on) = current_date;"}
{"prompt": "What manual attendance entries have I made today?", "response": "Select record_id, student_id, class_id, date, status from AttendanceRecords where marked_by = (Select teacher_id from Teachers where name = 'Rahul') and date = current_date;"}
{"prompt": "Which attendance records have been updated after receiving valid approvals?", "response": "Select record_id, student_id, class_id, date, status from AttendanceRecords where date = current_date and status = 'Updated';"}
{"prompt": "What are the details of attendance discrepancies flagged by faculty?", "response": "Select action, timestamp, user_id from SystemLogs where action like '%attendance discrepancy%' and date(timestamp) = current_date;"}
{"prompt": "Which classes have attendance records pending verification?", "response": "Select class_id, name from Classes where class_id in (Select distinct class_id from AttendanceRecords where status = 'Pending Verification');"}
{"prompt": "What is the summary of the monthly attendance report I prepared?", "response": "Select summary from AnalyticsReports where generated_by = (Select teacher_id from Teachers where name = 'Rahul') and report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "Which students have had their attendance updated after grievance resolution?", "response": "Select distinct student_id from AttendanceRecords where status = 'Updated' and date >= current_date - interval '7 days';"}
{"prompt": "What are the attendance records for students with grievances in the last week?", "response": "Select A.record_id, A.student_id, A.class_id, A.date, A.status from AttendanceRecords A join SupportTickets S on A.student_id = S.user_id where S.issue like '%attendance grievance%' and S.created_on >= current_date - interval '7 days';"}
{"prompt": "Which teachers have the highest number of attendance records submitted this month?", "response": "Select marked_by, count(*) as records_submitted from AttendanceRecords where date >= date_trunc('month', current_date) group by marked_by order by records_submitted desc limit 5;"}
{"prompt": "What are the details of attendance records I verified today?", "response": "Select record_id, student_id, class_id, date, status from AttendanceRecords where marked_by = (Select teacher_id from Teachers where name = 'Rahul') and date = current_date;"}
{"prompt": "Which students have perfect attendance this semester?", "response": "Select student_id from AttendanceRecords where status = 'Present' group by student_id having count(*) = (Select count(*) from Classes where semester = (Select semester from Classes where class_id = (Select class_id from Students where student_id = student_id limit 1)));"}
{"prompt": "What notifications have I sent regarding attendance issues?", "response": "Select message, sent_on from Notifications where recipient_id = (Select teacher_id from Teachers where name = 'Rahul') and role = 'Teacher' and message like '%attendance%';"}
{"prompt": "What are the attendance records for classes coordinated by me?", "response": "Select A.record_id, S.name, C.name as class_name, A.date, A.status from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.coordinator_id = (Select teacher_id from Teachers where name = 'Rahul');"}
{"prompt": "Which attendance records have been flagged for errors or inconsistencies?", "response": "Select record_id, student_id, class_id, date, status from AttendanceRecords where status = 'Error' or status = 'Inconsistent';"}
{"prompt": "What is the total number of attendance records updated today?", "response": "Select count(*) from AttendanceRecords where marked_by = (Select teacher_id from Teachers where name = 'Rahul') and date = current_date;"}
{"prompt": "Which students have attendance below the required threshold this semester?", "response": "Select student_id, round((sum(case when status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords where date >= date_trunc('semester', current_date) group by student_id having attendance_percentage < 75;"}
{"prompt": "What is the summary of the latest attendance analytics report for the college?", "response": "Select summary from AnalyticsReports where report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "Parents/Guardians", "response": "nan"}
{"prompt": "Natural Language Question (Mrs. Anitha’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is Rohan's attendance record for the current month?", "response": "Select C.name as class_name, A.date, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Rohan') and date_trunc('month', A.date) = date_trunc('month', current_date) order by A.date;"}
{"prompt": "Which days was Rohan absent or late this month?", "response": "Select A.date, A.status from AttendanceRecords A where A.student_id = (Select student_id from Students where name = 'Rohan') and A.status in ('Absent', 'Late') and date_trunc('month', A.date) = date_trunc('month', current_date) order by A.date;"}
{"prompt": "What notifications have I received about Rohan's attendance issues?", "response": "Select message, sent_on from Notifications where recipient_id = (Select student_id from Students where name = 'Rohan') and role = 'Student' and message like '%attendance%';"}
{"prompt": "What is Rohan's overall attendance percentage for this semester?", "response": "Select round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A where A.student_id = (Select student_id from Students where name = 'Rohan') and A.date >= date_trunc('semester', current_date);"}
{"prompt": "Who is the class coordinator for Rohan's current classes?", "response": "Select T.name, T.email, T.phone from Teachers T join Classes C on T.teacher_id = C.coordinator_id where C.class_id in (Select class_id from Students where name = 'Rohan');"}
{"prompt": "How can I contact Rohan's class coordinator?", "response": "Select T.name, T.email, T.phone from Teachers T join Classes C on T.teacher_id = C.coordinator_id where C.class_id in (Select class_id from Students where name = 'Rohan');"}
{"prompt": "What is the history of attendance notifications sent to me regarding Rohan?", "response": "Select message, sent_on from Notifications where recipient_id = (Select student_id from Students where name = 'Rohan') and role = 'Student' and message like '%attendance%' order by sent_on desc;"}
{"prompt": "What attendance records have been updated after submitting medical certificates for Rohan?", "response": "Select record_id, class_id, date, status from AttendanceRecords where student_id = (Select student_id from Students where name = 'Rohan') and status = 'Excused' order by date desc;"}
{"prompt": "What is the total number of excused absences for Rohan this semester?", "response": "Select count(*) from AttendanceRecords where student_id = (Select student_id from Students where name = 'Rohan') and status = 'Excused' and date >= date_trunc('semester', current_date);"}
{"prompt": "What messages have I sent to class coordinators regarding Rohan's attendance?", "response": "Select message, sent_on from Notifications where role = 'Teacher' and message like '%Rohan%' and sent_on >= current_date - interval '30 days';"}
{"prompt": "What is the summary of the latest attendance report for Rohan?", "response": "Select summary from AnalyticsReports where generated_by = (Select student_id from Students where name = 'Rohan') and report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "Which classes has Rohan attended regularly this semester?", "response": "Select C.name from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Rohan') and A.status = 'Present' and A.date >= date_trunc('semester', current_date) group by C.name having count(*) > 5;"}
{"prompt": "Which classes has Rohan missed most frequently this semester?", "response": "Select C.name, count(*) as absence_count from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Rohan') and A.status = 'Absent' and A.date >= date_trunc('semester', current_date) group by C.name order by absence_count desc;"}
{"prompt": "What is the attendance percentage for Rohan's classes this month?", "response": "Select C.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Rohan') and date_trunc('month', A.date) = date_trunc('month', current_date) group by C.name;"}
{"prompt": "What are the details of notifications sent to me about Rohan's attendance in the last week?", "response": "Select message, sent_on from Notifications where recipient_id = (Select student_id from Students where name = 'Rohan') and role = 'Student' and message like '%attendance%' and sent_on >= current_date - interval '7 days' order by sent_on desc;"}
{"prompt": "What is the attendance status for Rohan's classes today?", "response": "Select C.name, A.status from AttendanceRecords A join Classes C on A.class_id = C.class_id where A.student_id = (Select student_id from Students where name = 'Rohan') and A.date = current_date;"}
{"prompt": "What is the contact information of Rohan's parents?", "response": "Select name, email, phone, relationship from ParentContacts where student_id = (Select student_id from Students where name = 'Rohan');"}
{"prompt": "What attendance-related actions have I performed in the portal?", "response": "Select action, timestamp from SystemLogs where user_id = (Select student_id from Students where name = 'Rohan') and role = 'Student' and action like '%attendance%';"}
{"prompt": "Which attendance records have been marked by the attendance coordinator for Rohan?", "response": "Select A.record_id, A.date, A.status, T.name as marked_by from AttendanceRecords A join Teachers T on A.marked_by = T.teacher_id where A.student_id = (Select student_id from Students where name = 'Rohan') order by A.date desc;"}
{"prompt": "What is the summary of the latest attendance analytics report I received?", "response": "Select summary from AnalyticsReports where generated_by = (Select student_id from Students where name = 'Rohan') order by generated_on desc limit 1;"}
{"prompt": "IT/System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Mr. Arvind’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What system errors or downtime have been logged today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where (action like '%error%' or action like '%downtime%') and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Which users experienced login issues today?", "response": "Select user_id, role, action, timestamp from SystemLogs where action like '%login issue%' and date(timestamp) = current_date order by timestamp desc;"}
{"prompt": "Which teachers have reported data syncing issues this week?", "response": "Select user_id, action, timestamp from SystemLogs where role = 'Teacher' and action like '%data sync issue%' and timestamp >= current_date - interval '7 days';"}
{"prompt": "What database backup actions have I performed this month?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%backup%' and date_trunc('month', timestamp) = date_trunc('month', current_date);"}
{"prompt": "What recent system logs show unauthorized access attempts?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%unauthorized access%' order by timestamp desc;"}
{"prompt": "What user accounts have been created or updated this week?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where (action like '%account created%' or action like '%account updated%') and timestamp >= current_date - interval '7 days';"}
{"prompt": "What are the most recent access rights changes for user roles?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%access right%' order by timestamp desc;"}
{"prompt": "Which teachers have not logged in during the last 7 days?", "response": "Select teacher_id, name from Teachers where teacher_id not in (Select distinct user_id from SystemLogs where role = 'Teacher' and action like '%login%' and timestamp >= current_date - interval '7 days');"}
{"prompt": "What is the summary of the latest system health analytics report?", "response": "Select summary from AnalyticsReports where report_type like '%system health%' order by generated_on desc limit 1;"}
{"prompt": "What actions have I performed today as system administrator?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where user_id = (Select user_id from SystemLogs where action like '%login%' and role = 'Admin' and date(timestamp) = current_date limit 1) and date(timestamp) = current_date;"}
{"prompt": "What logs show version upgrades or system updates this semester?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%version upgrade%' or action like '%system update%' and timestamp >= date_trunc('semester', current_date);"}
{"prompt": "Which students or teachers have been granted new access rights this month?", "response": "Select user_id, role, action, timestamp from SystemLogs where action like '%access granted%' and date_trunc('month', timestamp) = date_trunc('month', current_date);"}
{"prompt": "What is the list of all failed login attempts today?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%failed login%' and date(timestamp) = current_date;"}
{"prompt": "What are the details of all security protocol implementations this year?", "response": "Select log_id, user_id, action, timestamp from SystemLogs where action like '%security protocol%' and extract(year from timestamp) = extract(year from current_date);"}
{"prompt": "What is the status of all open support tickets related to system access?", "response": "Select ticket_id, user_id, role, issue, status, created_on from SupportTickets where issue like '%access%' and status = 'Open';"}
{"prompt": "What is the summary of the latest backup analytics report?", "response": "Select summary from AnalyticsReports where report_type like '%backup%' order by generated_on desc limit 1;"}
{"prompt": "What logs show new batch or course data updates before this semester?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where action like '%batch update%' or action like '%course update%' and timestamp >= date_trunc('semester', current_date) - interval '7 days';"}
{"prompt": "Which users have had their roles changed in the last month?", "response": "Select user_id, role, action, timestamp from SystemLogs where action like '%role changed%' and timestamp >= current_date - interval '30 days';"}
{"prompt": "What are the details of all system logs for the last 24 hours?", "response": "Select log_id, user_id, role, action, timestamp from SystemLogs where timestamp >= now() - interval '1 day' order by timestamp desc;"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "Select summary from AnalyticsReports where generated_by = (Select user_id from SystemLogs where action like '%login%' and role = 'Admin' and date(timestamp) = current_date limit 1) order by generated_on desc limit 1;"}
{"prompt": "Academic Advisors", "response": "nan"}
{"prompt": "Natural Language Question (Dr. Meera’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the weekly attendance percentages for students in the Computer Science department?", "response": "SELECT S.student_id, S.name, ROUND((SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / COUNT(*)) * 100, 2) AS attendance_percentage FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= current_date - interval '7 days' GROUP BY S.student_id, S.name ORDER BY attendance_percentage ASC;"}
{"prompt": "Which students in my department have attendance below 75% this semester?", "response": "SELECT S.student_id, S.name, ROUND((SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / count(*)) * 100, 2) AS attendance_percentage FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= date_trunc('semester', current_date) GROUP BY S.student_id, S.name HAVING (SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / count(*)) < 75;"}
{"prompt": "Which students have frequent absences (3+ absences) in the last 14 days?", "response": "SELECT S.student_id, S.name, count(*) AS absence_count FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.status = 'Absent' AND A.date >= current_date - interval '14 days' GROUP BY S.student_id, S.name HAVING count(*) >= 3 ORDER BY absence_count DESC;"}
{"prompt": "Which students have long absences (5+ consecutive days) this semester?", "response": "SELECT S.student_id, S.name FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.status = 'Absent' AND A.date >= date_trunc('semester', current_date) GROUP BY S.student_id, S.name HAVING MAX(A.date) - MIN(A.date) >= 5;"}
{"prompt": "Which students have been absent before exams in the last 30 days?", "response": "SELECT S.student_id, S.name, A.date FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.status = 'Absent' AND A.date IN (SELECT date FROM AttendanceRecords WHERE status = 'Absent' AND date >= current_date - interval '30 days') ORDER BY A.date DESC;"}
{"prompt": "What is the attendance trend for my department over the past month?", "response": "SELECT date_trunc('week', A.date) AS week, ROUND((SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / COUNT(*)) * 100, 2) AS attendance_percentage FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= current_date - interval '30 days' GROUP BY week ORDER BY week;"}
{"prompt": "What is the attendance percentage for each class in my department this semester?", "response": "SELECT C.name, ROUND((SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / COUNT(*)) * 100, 2) AS attendance_percentage FROM AttendanceRecords A JOIN Classes C ON A.class_id = C.class_id WHERE C.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= date_trunc('semester', current_date) GROUP BY C.name ORDER BY C.name;"}
{"prompt": "Which students have received one-on-one meeting or counseling notifications in the last month?", "response": "SELECT N.recipient_id, S.name, N.message, N.sent_on FROM Notifications N JOIN Students S ON N.recipient_id = S.student_id WHERE N.role = 'Student' AND (N.message like '%one-on-one%' OR N.message like '%counseling%' OR N.message like '%meeting%' OR N.message like '%support%') AND S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND N.sent_on >= current_date - interval '30 days' ORDER BY N.sent_on DESC;"}
{"prompt": "What is the summary of the latest attendance analytics report for my department?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%attendance%' AND generated_by = (SELECT head_id FROM Departments WHERE name = 'Computer Science') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which students have improved their attendance after counseling?", "response": "SELECT S.student_id, S.name FROM Students S WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND S.student_id IN (SELECT recipient_id FROM Notifications WHERE message like '%counseling%' AND sent_on >= current_date - interval '30 days') AND S.student_id IN (SELECT A.student_id FROM AttendanceRecords A WHERE A.status = 'Present' AND A.date >= current_date - interval '7 days');"}
{"prompt": "Which students have perfect attendance this semester?", "response": "SELECT S.student_id, S.name FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= date_trunc('semester', current_date) GROUP BY S.student_id, S.name HAVING SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END) = COUNT(*);"}
{"prompt": "What is the attendance status for all students today?", "response": "SELECT S.student_id, S.name, C.name AS class_name, A.status FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id JOIN Classes C ON A.class_id = C.class_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date = current_date;"}
{"prompt": "Which students have received multiple attendance warnings this semester?", "response": "SELECT N.recipient_id, S.name, count(*) AS warning_count FROM Notifications N JOIN Students S ON N.recipient_id = S.student_id WHERE N.role = 'Student' AND N.message like '%attendance warning%' AND S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND N.sent_on >= date_trunc('semester', current_date) GROUP BY N.recipient_id, S.name HAVING count(*) > 1;"}
{"prompt": "What are the attendance records for students absent for more than 5 consecutive days?", "response": "SELECT S.student_id, S.name, A.date FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.status = 'Absent' AND A.date >= current_date - interval '30 days' GROUP BY S.student_id, S.name, A.date HAVING COUNT(*) > 5;"}
{"prompt": "What is the attendance percentage for each batch in my department?", "response": "SELECT C.name, ROUND((SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / COUNT(*)) * 100, 2) AS attendance_percentage FROM AttendanceRecords A JOIN Classes C ON A.class_id = C.class_id WHERE C.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') GROUP BY C.name ORDER BY C.name;"}
{"prompt": "What is the list of students with low attendance before exam periods?", "response": "SELECT S.student_id, S.name FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.status = 'Absent' AND A.date BETWEEN current_date - interval '14 days' AND current_date GROUP BY S.student_id, S.name HAVING COUNT(*) >= 2;"}
{"prompt": "What is the total number of students at risk of falling below 75% this semester?", "response": "SELECT count(*) FROM (SELECT S.student_id FROM AttendanceRecords A JOIN Students S ON A.student_id = S.student_id WHERE S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= date_trunc('semester', current_date) GROUP BY S.student_id HAVING (SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / count(*)) < 75) AS at_risk;"}
{"prompt": "What is the attendance trend for each class in my department this semester?", "response": "SELECT C.name, date_trunc('week', A.date) AS week, ROUND((SUM(CASE WHEN A.status = 'Present' THEN 1 ELSE 0 END)::float / COUNT(*)) * 100, 2) AS attendance_percentage FROM AttendanceRecords A JOIN Classes C ON A.class_id = C.class_id WHERE C.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND A.date >= date_trunc('semester', current_date) GROUP BY C.name, week ORDER BY C.name, week;"}
{"prompt": "What is the summary of the latest counseling and support analytics report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%counseling%' AND generated_by = (SELECT head_id FROM Departments WHERE name = 'Computer Science') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the details of all one-on-one meetings scheduled with at-risk students?", "response": "SELECT N.recipient_id, S.name, N.message, N.sent_on FROM Notifications N JOIN Students S ON N.recipient_id = S.student_id WHERE N.role = 'Student' AND N.message like '%one-on-one%' AND S.department_id = (SELECT department_id FROM Departments WHERE name = 'Computer Science') AND N.sent_on >= current_date - interval '30 days' ORDER BY N.sent_on DESC;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Nisha’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the attendance percentage by department and semester?", "response": "Select S.department_id, C.semester, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id group by S.department_id, C.semester order by S.department_id, C.semester;"}
{"prompt": "What is the attendance percentage for morning classes in each engineering branch?", "response": "Select S.department_id, round((sum(case when A.status = 'Present' and C.name like '%Morning%' then 1 else 0 end)::float / count(*) filter (where C.name like '%Morning%')) * 100, 2) as morning_attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where S.department_id in (101,102,103) group by S.department_id;"}
{"prompt": "What is the attendance percentage by gender and department?", "response": "Select S.department_id, S.gender, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id group by S.department_id, S.gender order by S.department_id, S.gender;"}
{"prompt": "What are the attendance trends for the last 30 days across all departments?", "response": "Select S.department_id, A.date, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where A.date >= current_date - interval '30 days' group by S.department_id, A.date order by S.department_id, A.date;"}
{"prompt": "What is the average attendance percentage for each semester?", "response": "Select C.semester, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as avg_attendance from AttendanceRecords A join Classes C on A.class_id = C.class_id group by C.semester order by C.semester;"}
{"prompt": "Which departments have the lowest morning class attendance this month?", "response": "Select S.department_id, round((sum(case when A.status = 'Present' and C.name like '%Morning%' then 1 else 0 end)::float / count(*) filter (where C.name like '%Morning%')) * 100, 2) as morning_attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where A.date >= date_trunc('month', current_date) group by S.department_id order by morning_attendance_percentage asc limit 5;"}
{"prompt": "What is the attendance percentage for each age group in engineering branches?", "response": "Select S.department_id, S.age, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id in (101,102,103) group by S.department_id, S.age order by S.department_id, S.age;"}
{"prompt": "What is the attendance drop trend for morning classes over the past semester?", "response": "Select S.department_id, C.semester, A.date, round((sum(case when A.status = 'Present' and C.name like '%Morning%' then 1 else 0 end)::float / count(*) filter (where C.name like '%Morning%')) * 100, 2) as morning_attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.semester = (Select semester from Classes order by semester desc limit 1) group by S.department_id, C.semester, A.date order by S.department_id, A.date;"}
{"prompt": "What is the summary of the latest attendance analytics report for the council?", "response": "Select summary from AnalyticsReports where report_type like '%attendance%' order by generated_on desc limit 1;"}
{"prompt": "What is the attendance percentage by department and gender for the current semester?", "response": "Select S.department_id, S.gender, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where C.semester = (Select semester from Classes order by semester desc limit 1) group by S.department_id, S.gender order by S.department_id, S.gender;"}
{"prompt": "Which students are at risk of dropout based on low attendance and performance?", "response": "Select S.student_id, S.name, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.student_id in (Select student_id from AnalyticsReports where report_type like '%dropout risk%') group by S.student_id, S.name having attendance_percentage < 75;"}
{"prompt": "What is the average attendance percentage for each department this year?", "response": "Select S.department_id, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as avg_attendance from AttendanceRecords A join Students S on A.student_id = S.student_id where A.date >= date_trunc('year', current_date) group by S.department_id order by S.department_id;"}
{"prompt": "What is the attendance trend by gender for engineering branches in the last 30 days?", "response": "Select S.department_id, S.gender, A.date, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id in (101,102,103) and A.date >= current_date - interval '30 days' group by S.department_id, S.gender, A.date order by S.department_id, S.gender, A.date;"}
{"prompt": "What is the attendance pattern for students aged under 21 in engineering?", "response": "Select S.student_id, S.name, S.age, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where S.department_id in (101,102,103) and S.age < 21 group by S.student_id, S.name, S.age order by attendance_percentage asc;"}
{"prompt": "What is the summary of the latest predictive dropout analytics report?", "response": "Select summary from AnalyticsReports where report_type like '%dropout%' order by generated_on desc limit 1;"}
{"prompt": "What is the average morning attendance for each engineering branch this semester?", "response": "Select S.department_id, round((sum(case when A.status = 'Present' and C.name like '%Morning%' then 1 else 0 end)::float / count(*) filter (where C.name like '%Morning%')) * 100, 2) as morning_attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where S.department_id in (101,102,103) and C.semester = (Select semester from Classes order by semester desc limit 1) group by S.department_id;"}
{"prompt": "What is the monthly attendance trend for all departments?", "response": "Select S.department_id, date_trunc('month', A.date) as month, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id where A.date >= date_trunc('year', current_date) group by S.department_id, month order by S.department_id, month;"}
{"prompt": "What is the attendance percentage for female students in engineering branches this semester?", "response": "Select S.department_id, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where S.department_id in (101,102,103) and S.gender = 'F' and C.semester = (Select semester from Classes order by semester desc limit 1) group by S.department_id;"}
{"prompt": "What is the average attendance for afternoon classes in engineering branches?", "response": "Select S.department_id, round((sum(case when A.status = 'Present' and C.name like '%Afternoon%' then 1 else 0 end)::float / count(*) filter (where C.name like '%Afternoon%')) * 100, 2) as afternoon_attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id join Classes C on A.class_id = C.class_id where S.department_id in (101,102,103) group by S.department_id;"}
{"prompt": "Which departments have the highest risk of student dropouts based on attendance?", "response": "Select S.department_id, count(*) as at_risk_students from (Select S.student_id, S.department_id, round((sum(case when A.status = 'Present' then 1 else 0 end)::float / count(*)) * 100, 2) as attendance_percentage from AttendanceRecords A join Students S on A.student_id = S.student_id group by S.student_id, S.department_id having attendance_percentage < 75) as risk group by department_id order by at_risk_students desc;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "OnlineExamSystem", "response": "nan"}
{"prompt": "Students", "response": "nan"}
{"prompt": "Natural Language Question (Aarav’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What exams am I scheduled to take this semester?", "response": "SELECT exam_id, title, subject, exam_date, status FROM Exams WHERE exam_date >= current_date AND status = 'Scheduled';"}
{"prompt": "Did I successfully verify my credentials and perform a system check before today’s exam?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND role = 'Student' AND (action like '%credential%' OR action like '%system check%' OR action like '%webcam%' OR action like '%microphone%' OR action like '%internet%') AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What is my roll number and registered email?", "response": "SELECT roll_number, email FROM Students WHERE name = 'Aarav';"}
{"prompt": "Which mid-semester assessments have I completed?", "response": "SELECT E.exam_id, E.title, E.exam_date, E.status FROM Exams E JOIN ExamResults R ON E.exam_id = R.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND E.title like '%mid-semester%' ORDER BY E.exam_date DESC;"}
{"prompt": "Did the system log any technical issues (e.g., freeze) during my exam today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND action like '%freeze%' AND timestamp::date = current_date;"}
{"prompt": "Did I receive any warnings from the proctoring tool today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND action like '%proctoring warning%' AND timestamp::date = current_date;"}
{"prompt": "What is the status of my most recent exam submission?", "response": "SELECT E.title, R.result_id, R.grade FROM Exams E JOIN ExamResults R ON E.exam_id = R.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') ORDER BY E.exam_date DESC LIMIT 1;"}
{"prompt": "Did I receive a confirmation email for my exam submission today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND action like '%confirmation email%' AND timestamp::date = current_date;"}
{"prompt": "What are my latest exam scores and grades?", "response": "SELECT E.title, E.subject, R.marks_obtained, R.grade FROM ExamResults R JOIN Exams E ON R.exam_id = E.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') ORDER BY E.exam_date DESC LIMIT 10;"}
{"prompt": "What feedback did I receive for my latest exam?", "response": "SELECT R.result_id, Q.question_text, Q.correct_option, R.grade FROM ExamResults R JOIN Questions Q ON R.exam_id = Q.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') ORDER BY R.result_id DESC LIMIT 10;"}
{"prompt": "Have I raised any support tickets about automatically graded questions?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND role = 'Student' AND issue like '%graded question%' ORDER BY created_on DESC;"}
{"prompt": "What is the status of my latest support ticket?", "response": "SELECT status FROM SupportTickets WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav') ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "Which exams have I taken in the last 30 days?", "response": "SELECT E.exam_id, E.title, E.subject, E.exam_date FROM Exams E JOIN ExamResults R ON E.exam_id = R.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND E.exam_date >= current_date - interval '30 days';"}
{"prompt": "What are the details of my automatically graded questions in the last exam?", "response": "SELECT Q.question_id, Q.question_text, Q.correct_option, Q.marks FROM Questions Q WHERE Q.exam_id = (SELECT exam_id FROM ExamResults WHERE student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') ORDER BY result_id DESC LIMIT 1);"}
{"prompt": "What is the grading status of my most recent exam?", "response": "SELECT R.grade, R.graded_by FROM ExamResults R WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') ORDER BY R.result_id DESC LIMIT 1;"}
{"prompt": "Which exams have I failed or scored below passing marks?", "response": "SELECT E.title, R.marks_obtained, R.grade FROM ExamResults R JOIN Exams E ON R.exam_id = E.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND (R.grade = 'F' OR R.marks_obtained < 40);"}
{"prompt": "What is the list of all support tickets I have raised?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE user_id = (SELECT student_id FROM Students WHERE name = 'Aarav');"}
{"prompt": "What is the summary of the latest analytics report generated for students?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%student%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which teachers graded my exams?", "response": "SELECT DISTINCT T.name FROM ExamResults R JOIN Teachers T ON R.graded_by = T.teacher_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav');"}
{"prompt": "What is my exam and result history for the current academic year?", "response": "SELECT E.title, E.subject, E.exam_date, R.marks_obtained, R.grade FROM Exams E JOIN ExamResults R ON E.exam_id = R.exam_id WHERE R.student_id = (SELECT student_id FROM Students WHERE name = 'Aarav') AND EXTRACT(YEAR FROM E.exam_date) = 2025 ORDER BY E.exam_date DESC;"}
{"prompt": "Exam Coordinators", "response": "nan"}
{"prompt": "Natural Language Question (Mr. Ramesh’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which exams have uploaded papers before exam week?", "response": "SELECT exam_id, title, subject, exam_date, status FROM Exams WHERE status = 'Uploaded' AND exam_date >= current_date ORDER BY exam_date;"}
{"prompt": "Have all courses been allocated proper exam time slots?", "response": "SELECT exam_id, title, exam_date, duration_minutes FROM Exams WHERE exam_date >= current_date ORDER BY exam_date;"}
{"prompt": "What exam access rules have I set for upcoming exams?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM SystemLogs WHERE role = 'Exam Coordinator' AND action like '%Ramesh%' LIMIT 1) AND action like '%access rule%' ORDER BY timestamp DESC;"}
{"prompt": "What proctoring configurations have I set for exams?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM SystemLogs WHERE role = 'Exam Coordinator' AND action like '%Ramesh%' LIMIT 1) AND action like '%proctoring%' ORDER BY timestamp DESC;"}
{"prompt": "What student eligibility rules have I set for exams?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM SystemLogs WHERE role = 'Exam Coordinator' AND action like '%Ramesh%' LIMIT 1) AND action like '%eligibility%' ORDER BY timestamp DESC;"}
{"prompt": "How can I monitor real-time student participation during exams today?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE (role = 'Student' OR role = 'Exam Coordinator') AND action like '%participation%' AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What technical escalations have been logged today?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Exam Coordinator' AND action like '%escalation%' AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What is the result publication status for exams I coordinated?", "response": "SELECT E.exam_id, E.title, E.status, COUNT(R.result_id) as results_published FROM Exams E LEFT JOIN ExamResults R ON E.exam_id = R.exam_id WHERE E.coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ramesh') GROUP BY E.exam_id, E.title, E.status ORDER BY E.exam_date DESC;"}
{"prompt": "What exam integrity reports have been generated by the proctoring AI?", "response": "SELECT report_id, generated_by, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type like '%integrity%' OR report_type like '%proctoring%' ORDER BY generated_on DESC;"}
{"prompt": "Which exams are scheduled for the current week?", "response": "SELECT exam_id, title, subject, exam_date FROM Exams WHERE exam_date BETWEEN current_date AND current_date + interval '6 days' ORDER BY exam_date;"}
{"prompt": "Which students are eligible for each exam this week?", "response": "SELECT E.exam_id, E.title, S.student_id, S.name FROM Exams E JOIN Students S ON S.class_id = E.subject WHERE E.exam_date BETWEEN current_date AND current_date + interval '6 days';"}
{"prompt": "Which exams have missing or pending paper uploads?", "response": "SELECT exam_id, title, subject, exam_date FROM Exams WHERE status != 'Uploaded' AND exam_date >= current_date ORDER BY exam_date;"}
{"prompt": "What are the details of all proctoring incidents flagged today?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE action like '%proctoring incident%' AND timestamp::date = current_date;"}
{"prompt": "What is the summary of the latest exam analytics report I generated?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ramesh') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which teachers are assigned as coordinators for upcoming exams?", "response": "SELECT DISTINCT coordinator_id FROM Exams WHERE exam_date >= current_date;"}
{"prompt": "What is the participation count for each exam today?", "response": "SELECT exam_id, COUNT(*) as participation_count FROM SystemLogs WHERE action like '%participation%' AND timestamp::date = current_date GROUP BY exam_id;"}
{"prompt": "Which students faced technical issues during exams this week?", "response": "SELECT user_id, action, timestamp FROM SystemLogs WHERE role = 'Student' AND action like '%technical issue%' AND timestamp >= current_date - interval '7 days';"}
{"prompt": "What are the details of all exam access rule changes this month?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE action like '%access rule%' AND timestamp >= date_trunc('month', current_date);"}
{"prompt": "What is the publication status of results for all exams this semester?", "response": "SELECT E.exam_id, E.title, E.status, COUNT(R.result_id) as results_published FROM Exams E LEFT JOIN ExamResults R ON E.exam_id = R.exam_id WHERE E.exam_date >= date_trunc('semester', current_date) GROUP BY E.exam_id, E.title, E.status ORDER BY E.exam_date DESC;"}
{"prompt": "What is the list of all unresolved exam integrity incidents this month?", "response": "SELECT report_id, report_type, generated_on, summary FROM AnalyticsReports WHERE (report_type like '%integrity%' OR report_type like '%proctoring%') AND generated_on >= date_trunc('month', current_date) AND summary like '%unresolved%';"}
{"prompt": "Invigilators/Proctors", "response": "nan"}
{"prompt": "Natural Language Question (Mr. Arjun’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What exams am I assigned to invigilate this semester?", "response": "SELECT assigned_exam_id FROM Invigilators WHERE name = 'Arjun';"}
{"prompt": "Did I receive the checklist, login credentials, and monitoring guidelines before the exam?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND (action like '%checklist%' OR action like '%login credentials%' OR action like '%monitoring guidelines%') ORDER BY timestamp DESC;"}
{"prompt": "When did I log in on the exam day?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND action like '%login%' AND timestamp::date = current_date ORDER BY timestamp;"}
{"prompt": "Did I check students’ video feeds, internet, and identity verification before the exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND (action like '%video feed%' OR action like '%internet%' OR action like '%identity verification%') AND timestamp::date = current_date ORDER BY timestamp;"}
{"prompt": "Which students were flagged for suspicious activity during the exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND action like '%suspicious activity%' AND timestamp::date = current_date;"}
{"prompt": "What real-time alerts did I send to the exam coordinator?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND action like '%alert%' AND timestamp::date = current_date;"}
{"prompt": "Did I submit a misconduct report with screenshots after the exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND action like '%report%' AND action like '%screenshot%' AND timestamp::date = current_date;"}
{"prompt": "When did I log out after the exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND action like '%logout%' AND timestamp::date = current_date;"}
{"prompt": "What is the list of all exams I have invigilated this year?", "response": "SELECT assigned_exam_id FROM Invigilators WHERE name = 'Arjun' AND assigned_exam_id IN (SELECT exam_id FROM Exams WHERE EXTRACT(YEAR FROM exam_date) = 2025);"}
{"prompt": "Which students in my exam had identity verification issues?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE role = 'Invigilator' AND action like '%identity verification issue%' AND user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND timestamp::date = current_date;"}
{"prompt": "What technical issues did I log during the exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE role = 'Invigilator' AND action like '%technical issue%' AND user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND timestamp::date = current_date;"}
{"prompt": "What are the details of all students I monitored during the exam?", "response": "SELECT S.student_id, S.name FROM Students S JOIN Exams E ON S.class_id = E.subject WHERE E.exam_id = (SELECT assigned_exam_id FROM Invigilators WHERE name = 'Arjun');"}
{"prompt": "What is the summary of the latest invigilation analytics report I generated?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What support tickets did I raise as an invigilator today?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND created_on::date = current_date;"}
{"prompt": "Which students received proctoring warnings during my exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE role = 'Invigilator' AND action like '%proctoring warning%' AND user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND timestamp::date = current_date;"}
{"prompt": "What is the attendance status of all students in my exam?", "response": "SELECT S.student_id, S.name FROM Students S JOIN Exams E ON S.class_id = E.subject WHERE E.exam_id = (SELECT assigned_exam_id FROM Invigilators WHERE name = 'Arjun');"}
{"prompt": "Which exam coordinator was assigned to my exam?", "response": "SELECT coordinator_id FROM Exams WHERE exam_id = (SELECT assigned_exam_id FROM Invigilators WHERE name = 'Arjun');"}
{"prompt": "What are the details of all system logs I generated today as invigilator?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND timestamp::date = current_date;"}
{"prompt": "What are the details of all misconduct incidents I reported this semester?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT invigilator_id FROM Invigilators WHERE name = 'Arjun') AND role = 'Invigilator' AND action like '%misconduct%' AND timestamp >= date_trunc('semester', current_date);"}
{"prompt": "What is the summary of the latest exam integrity report for my exam?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%integrity%' AND generated_on >= current_date - interval '7 days' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "School/College Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Dr. Meenakshi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the exam schedule and which subjects have been uploaded by faculty for upcoming exams?", "response": "SELECT exam_id, title, subject, exam_date, status FROM Exams WHERE exam_date >= current_date ORDER BY exam_date;"}
{"prompt": "Has the system been tested for server load capacity and webcam compatibility in the last week?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE (action like '%server load%' OR action like '%webcam compatibility%' OR action like '%system test%') AND timestamp >= current_date - interval '7 days' ORDER BY timestamp DESC;"}
{"prompt": "Are there login and server uptime logs for students and staff before and during exam day?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE (action like '%login%' OR action like '%server uptime%') AND timestamp >= current_date - interval '7 days' ORDER BY timestamp DESC;"}
{"prompt": "What live events were logged today for attendance, connection drops, or cheating reports?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE (action like '%attendance%' OR action like '%connection drop%' OR action like '%cheating%' OR action like '%flagged%') AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What are the latest student performance reports after exams?", "response": "SELECT report_id, generated_by, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type like '%student performance%' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What are the latest invigilator notes submitted post-exam?", "response": "SELECT report_id, generated_by, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type like '%invigilator notes%' ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What technical issues have been logged in the last week?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE action like '%technical%' AND timestamp >= current_date - interval '7 days' ORDER BY timestamp DESC;"}
{"prompt": "What review meetings with department heads and IT staff have been scheduled in the last week?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE action like '%review meeting%' AND (role = 'Department Head' OR role = 'IT Staff' OR role = 'Admin') AND timestamp >= current_date - interval '7 days' ORDER BY timestamp DESC;"}
{"prompt": "Which exams had the most connection drops today?", "response": "SELECT exam_id, COUNT(*) as drop_count FROM SystemLogs WHERE action like '%connection drop%' AND timestamp::date = current_date GROUP BY exam_id ORDER BY drop_count DESC;"}
{"prompt": "How many students attended each exam today?", "response": "SELECT exam_id, COUNT(DISTINCT user_id) as attendance_count FROM SystemLogs WHERE action like '%attendance%' AND timestamp::date = current_date GROUP BY exam_id;"}
{"prompt": "What cheating or flagged incidents were reported today?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE (action like '%cheating%' OR action like '%flagged%') AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What is the summary of the latest technical analytics report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%technical%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which students were reported for cheating or misconduct in the last week?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action like '%cheating%' OR action like '%misconduct%' AND timestamp >= current_date - interval '7 days';"}
{"prompt": "What is the consolidated summary of all exam-related support tickets this week?", "response": "SELECT ticket_id, user_id, issue, status, created_on FROM SupportTickets WHERE created_on >= current_date - interval '7 days' ORDER BY created_on DESC;"}
{"prompt": "What is the list of all exams conducted in the last 7 days?", "response": "SELECT exam_id, title, subject, exam_date, status FROM Exams WHERE exam_date >= current_date - interval '7 days' ORDER BY exam_date DESC;"}
{"prompt": "Which faculty uploaded exam papers for their subjects this semester?", "response": "SELECT DISTINCT E.coordinator_id, T.name FROM Exams E JOIN Teachers T ON E.coordinator_id = T.teacher_id WHERE E.status = 'Uploaded' AND E.exam_date >= date_trunc('semester', current_date);"}
{"prompt": "What are the details of all flagged technical incidents during exams this week?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE (action like '%technical%' OR action like '%flagged%') AND timestamp >= current_date - interval '7 days';"}
{"prompt": "What is the summary of the latest exam performance analytics report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%exam performance%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which department heads attended the last review meeting?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action like '%review meeting%' AND role = 'Department Head' AND timestamp >= current_date - interval '7 days';"}
{"prompt": "What are the details of all student feedback logs after the last exam week?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE action like '%student feedback%' AND timestamp >= current_date - interval '7 days' ORDER BY timestamp DESC;"}
{"prompt": "Question Setters", "response": "nan"}
{"prompt": "Natural Language Question (Prof. Ravi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the list of exams I am assigned to prepare question papers for?", "response": "SELECT exam_id, title, exam_date, status FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') ORDER BY exam_date;"}
{"prompt": "What questions have I created for the upcoming mid-semester exam?", "response": "SELECT question_id, question_text, difficulty_level, marks FROM Questions WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') ORDER BY exam_date DESC LIMIT 1) AND created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi');"}
{"prompt": "How many versions of the question paper have been created for the mid-semester exam?", "response": "SELECT COUNT(DISTINCT version) FROM Questions WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') ORDER BY exam_date DESC LIMIT 1);"}
{"prompt": "What are the difficulty levels and unit numbers tagged to each question I created?", "response": "SELECT question_id, difficulty_level, unit_number FROM Questions WHERE created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' ORDER BY exam_date DESC LIMIT 1);"}
{"prompt": "Which questions have marking schemes for auto-evaluation?", "response": "SELECT question_id, question_text, marks FROM Questions WHERE marks IS NOT NULL AND created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' ORDER BY exam_date DESC LIMIT 1);"}
{"prompt": "What plagiarism and duplication check results were generated for my question sets?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND action like '%plagiarism%' AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "Have the question sets been encrypted and locked for the upcoming exam?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND action like '%encrypted%' AND action like '%locked%' AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What is the order of questions in each version of the question paper?", "response": "SELECT version, question_id, question_text FROM Questions WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') ORDER BY exam_date DESC LIMIT 1) ORDER BY version, question_id;"}
{"prompt": "Which questions are objective and which are subjective in my question sets?", "response": "SELECT question_id, question_text, CASE WHEN options IS NOT NULL THEN 'Objective' ELSE 'Subjective' END AS question_type FROM Questions WHERE created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' ORDER BY exam_date DESC LIMIT 1);"}
{"prompt": "What are the learning objectives tagged to each question I created?", "response": "SELECT question_id, question_text, learning_objective FROM Questions WHERE created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' ORDER BY exam_date DESC LIMIT 1);"}
{"prompt": "What is the summary of the latest analytics report on question paper preparation?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND report_type like '%question paper%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which questions have been flagged for duplication or plagiarism?", "response": "SELECT question_id, question_text FROM Questions WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi')) AND question_id IN (SELECT user_id FROM SystemLogs WHERE action like '%flagged%' AND timestamp::date = current_date);"}
{"prompt": "What are the details of the marking schemes I have added?", "response": "SELECT question_id, marks FROM Questions WHERE created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND marks IS NOT NULL;"}
{"prompt": "How many questions have I created for each unit number?", "response": "SELECT unit_number, COUNT(*) FROM Questions WHERE created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') GROUP BY unit_number;"}
{"prompt": "What is the distribution of question difficulty levels in my question sets?", "response": "SELECT difficulty_level, COUNT(*) FROM Questions WHERE created_by = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') GROUP BY difficulty_level;"}
{"prompt": "What is the status of question paper approval by the exam coordinator?", "response": "SELECT status FROM Exams WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') ORDER BY exam_date DESC LIMIT 1);"}
{"prompt": "Which versions of the question paper have been locked and encrypted?", "response": "SELECT DISTINCT version FROM Questions WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi')) AND question_id IN (SELECT user_id FROM SystemLogs WHERE action like '%encrypted%' AND timestamp::date = current_date);"}
{"prompt": "What are the timestamps of all plagiarism and duplication checks performed on my question sets?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') AND (action like '%plagiarism%' OR action like '%duplication%') ORDER BY timestamp DESC;"}
{"prompt": "What is the list of all question sets I have submitted for approval?", "response": "SELECT exam_id, status FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi') ORDER BY exam_date DESC;"}
{"prompt": "What are the details of all question papers encrypted and locked for the upcoming exam?", "response": "SELECT exam_id, version, question_id FROM Questions WHERE exam_id = (SELECT exam_id FROM Exams WHERE title like '%mid-semester%' AND coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Ravi')) AND question_id IN (SELECT user_id FROM SystemLogs WHERE action like '%encrypted%' AND action like '%locked%' AND timestamp::date = current_date);"}
{"prompt": "IT/System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Did I perform load testing a week before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%load testing%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "Did I optimize the database before the exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%database optimization%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "Did I conduct firewall checks before the exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%firewall check%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "Did I verify webcam monitoring, face recognition, and browser lock features before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND (action like '%webcam monitoring%' OR action like '%face recognition%' OR action like '%browser lock%') AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "What server health, login traffic, and error logs did I monitor on exam day?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND (action like '%server health%' OR action like '%login traffic%' OR action like '%error log%') AND timestamp::date = '2025-06-12' ORDER BY timestamp DESC;"}
{"prompt": "Did I reset access or restore session history for students with login issues on exam day?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND (action like '%reset access%' OR action like '%restore session%') AND timestamp::date = '2025-06-12' ORDER BY timestamp DESC;"}
{"prompt": "Did I generate audit logs and backup data after the exam?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND (action like '%audit log%' OR action like '%backup%') AND timestamp::date BETWEEN '2025-06-12' AND '2025-06-12' ORDER BY timestamp DESC;"}
{"prompt": "What is the summary of the latest system performance report submitted to the exam committee?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = 5001 AND report_type like '%system performance%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What were the results of the most recent server health checks?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%server health%' AND timestamp::date = '2025-06-12' ORDER BY timestamp DESC;"}
{"prompt": "How many login traffic events were recorded on exam day?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE role = 'Admin' AND action like '%login traffic%' AND timestamp::date = '2025-06-12';"}
{"prompt": "How many error logs were generated on exam day?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE role = 'Admin' AND action like '%error log%' AND timestamp::date = '2025-06-12';"}
{"prompt": "Which students had their sessions restored after login issues?", "response": "SELECT user_id, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%restore session%' AND timestamp::date = '2025-06-12';"}
{"prompt": "What backup operations were performed post-exam?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%backup%' AND timestamp::date = '2025-06-12' ORDER BY timestamp DESC;"}
{"prompt": "What audit log entries were created after the exam?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%audit log%' AND timestamp::date = '2025-06-12' ORDER BY timestamp DESC;"}
{"prompt": "What firewall check logs exist for the week before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%firewall check%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "Which webcam monitoring checks were performed before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%webcam monitoring%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "What face recognition checks were performed before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%face recognition%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "What browser lock checks were performed before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%browser lock%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "What database optimization actions were logged before exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE role = 'Admin' AND action like '%database optimization%' AND timestamp::date BETWEEN '2025-06-05' AND '2025-06-11' ORDER BY timestamp DESC;"}
{"prompt": "What is the count of all admin actions related to system health, login, or error logs on exam day?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE role = 'Admin' AND (action like '%server health%' OR action like '%login traffic%' OR action like '%error log%') AND timestamp::date = '2025-06-12';"}
{"prompt": "Grading Staff", "response": "nan"}
{"prompt": "Natural Language Question (Ms. Anjali’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "Which final-year economics exams am I assigned to grade?", "response": "SELECT exam_id, title, exam_date FROM Exams WHERE subject like '%economics%' AND status = 'Completed';"}
{"prompt": "Which descriptive answer scripts have I received for grading?", "response": "SELECT result_id, exam_id, student_id FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%' AND status = 'Completed') AND graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali');"}
{"prompt": "What is the anonymized list of student responses for my assigned exams?", "response": "SELECT result_id, exam_id, 'Anonymized' AS student_id FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%' AND status = 'Completed');"}
{"prompt": "What annotation actions have I performed during grading?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND action like '%annotation%' ORDER BY timestamp DESC;"}
{"prompt": "What comments and scores have I assigned to descriptive answers?", "response": "SELECT result_id, marks_obtained, grade FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%');"}
{"prompt": "Which objective questions were auto-evaluated by the system?", "response": "SELECT question_id, question_text FROM Questions WHERE exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%') AND options IS NOT NULL;"}
{"prompt": "What is the marking scheme for essay-type questions I need to follow?", "response": "SELECT question_id, question_text, marks FROM Questions WHERE exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%') AND options IS NULL;"}
{"prompt": "What is the grading deadline for each submission I am evaluating?", "response": "SELECT result_id, exam_id, '2025-06-15' AS grading_deadline FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali');"}
{"prompt": "What is my grading progress for the assigned exams?", "response": "SELECT COUNT(*) AS graded_count FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%');"}
{"prompt": "Which submissions have been sent for second-level review?", "response": "SELECT result_id, exam_id FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND status = 'Under Review';"}
{"prompt": "What is the status of my evaluations (graded, under review, finalized)?", "response": "SELECT result_id, status FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali');"}
{"prompt": "Which grades have I finalized and uploaded for student access?", "response": "SELECT result_id, marks_obtained, grade FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND status = 'Finalized';"}
{"prompt": "What is the summary of the latest grading analytics report I generated?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND report_type like '%grading%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which descriptive answers required additional comments or annotations?", "response": "SELECT result_id FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND action like '%annotation%' AND action like '%comment%';"}
{"prompt": "What is the list of all essay-type questions I have graded?", "response": "SELECT Q.question_id, Q.question_text FROM Questions Q JOIN ExamResults R ON Q.exam_id = R.exam_id WHERE Q.options IS NULL AND R.graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali');"}
{"prompt": "Which submissions are still pending my evaluation?", "response": "SELECT result_id, exam_id FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND status = 'Pending';"}
{"prompt": "What is the count of all descriptive answers I have graded for economics exams?", "response": "SELECT COUNT(*) FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND exam_id IN (SELECT exam_id FROM Exams WHERE subject like '%economics%');"}
{"prompt": "What is the status of second-level review for my graded submissions?", "response": "SELECT result_id, status FROM ExamResults WHERE graded_by = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND status = 'Under Review';"}
{"prompt": "What are the details of all grading actions I performed today?", "response": "SELECT log_id, action, timestamp FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Anjali') AND timestamp::date = current_date;"}
{"prompt": "What is the summary of the latest grading analytics report for the economics exam?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%grading%' AND generated_on >= current_date - interval '7 days' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Parents/Guardians (for school-level exams)", "response": "nan"}
{"prompt": "Natural Language Question (Mrs. Sharma’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the instructions and technical requirements for my child’s upcoming mid-term online exams?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%instruction%' AND action like '%mid-term%' ORDER BY timestamp DESC;"}
{"prompt": "What are my child’s login credentials and exam dates for the mid-term exams?", "response": "SELECT S.name, S.email, E.exam_date, E.title FROM Students S JOIN Exams E ON S.class_id = E.subject WHERE S.name = '[Child Name]' AND E.title like '%mid-term%';"}
{"prompt": "What guide or checklist was shared for parents before the exam?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%parent guide%' ORDER BY timestamp DESC;"}
{"prompt": "Did I receive notifications or reminders about the exam schedule?", "response": "SELECT message, timestamp FROM SystemLogs WHERE role = 'Parent' AND action like '%reminder%' AND action like '%exam%' ORDER BY timestamp DESC;"}
{"prompt": "How do I report a technical or health-related disruption during the exam?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE user_id = (SELECT parent_id FROM Parents WHERE name = 'Sharma') AND (issue like '%technical%' OR issue like '%health%') ORDER BY created_on DESC;"}
{"prompt": "What is the process for logging in and setting up webcam/microphone for the exam?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%webcam%' AND action like '%microphone%' ORDER BY timestamp DESC;"}
{"prompt": "What are the rules for parental assistance during the exam?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%no assistance%' ORDER BY timestamp DESC;"}
{"prompt": "What notifications did I receive on exam days?", "response": "SELECT message, timestamp FROM SystemLogs WHERE role = 'Parent' AND action like '%notification%' AND timestamp::date = current_date ORDER BY timestamp DESC;"}
{"prompt": "What is the summary of my child’s performance in the mid-term exams?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%performance%' AND generated_by = (SELECT parent_id FROM Parents WHERE name = 'Sharma') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What feedback did teachers provide for my child after the exams?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%feedback%' AND generated_by = (SELECT parent_id FROM Parents WHERE name = 'Sharma') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the details of all technical issues reported during exams?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE user_id = (SELECT parent_id FROM Parents WHERE name = 'Sharma') AND issue like '%technical%' ORDER BY created_on DESC;"}
{"prompt": "What are the details of all health-related issues reported during exams?", "response": "SELECT ticket_id, issue, status, created_on FROM SupportTickets WHERE user_id = (SELECT parent_id FROM Parents WHERE name = 'Sharma') AND issue like '%health%' ORDER BY created_on DESC;"}
{"prompt": "What is the list of all feedback and performance summaries received this month?", "response": "SELECT summary, generated_on FROM AnalyticsReports WHERE generated_by = (SELECT parent_id FROM Parents WHERE name = 'Sharma') AND generated_on >= date_trunc('month', current_date);"}
{"prompt": "What is the process for setting up a distraction-free environment for my child?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%distraction-free%' ORDER BY timestamp DESC;"}
{"prompt": "What are the concerns raised by parents about screen time?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%screen time%' ORDER BY timestamp DESC;"}
{"prompt": "What are the concerns raised by parents about exam stress?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%exam stress%' ORDER BY timestamp DESC;"}
{"prompt": "What are the concerns raised by parents about technical glitches?", "response": "SELECT message FROM SystemLogs WHERE role = 'Parent' AND action like '%technical glitch%' ORDER BY timestamp DESC;"}
{"prompt": "What is the summary of the latest parent feedback analytics report?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%parent feedback%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the record of all notifications and communications I received this month?", "response": "SELECT message, timestamp FROM SystemLogs WHERE role = 'Parent' AND timestamp >= date_trunc('month', current_date) ORDER BY timestamp DESC;"}
{"prompt": "What is the summary of the latest analytics report I received as a parent?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT parent_id FROM Parents WHERE name = 'Sharma') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Teachers/Instructors", "response": "nan"}
{"prompt": "Natural Language Question (Professor Kavita’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What exams am I scheduled to conduct for Operating Systems?", "response": "SELECT exam_id, title, exam_date, status FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%' ORDER BY exam_date;"}
{"prompt": "What MCQs and short-answer questions have I uploaded for the upcoming Operating Systems exam?", "response": "SELECT question_id, question_text, options, marks FROM Questions WHERE exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') ORDER BY question_id;"}
{"prompt": "What is the timer setting for my Operating Systems exams?", "response": "SELECT exam_id, title, duration_minutes FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%';"}
{"prompt": "Have I enabled webcam-based proctoring for my Operating Systems exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE user_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND action like '%webcam%' AND action like '%proctoring%' ORDER BY timestamp DESC;"}
{"prompt": "What flagged incidents of possible malpractice were detected by AI for my Operating Systems exams?", "response": "SELECT report_id, generated_by, report_type, generated_on, summary FROM AnalyticsReports WHERE report_type like '%malpractice%' AND generated_by = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') ORDER BY generated_on DESC;"}
{"prompt": "What are the details of short-answer responses I need to manually grade?", "response": "SELECT R.result_id, R.exam_id, R.student_id, R.marks_obtained, R.grade FROM ExamResults R JOIN Exams E ON R.exam_id = E.exam_id WHERE E.coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND E.title like '%Operating Systems%' AND R.marks_obtained IS NULL ORDER BY R.result_id;"}
{"prompt": "How do I release results with personalized feedback for my Operating Systems exams?", "response": "SELECT result_id, exam_id, student_id, marks_obtained, grade FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') ORDER BY result_id;"}
{"prompt": "What is the student performance on each question in my Operating Systems exams?", "response": "SELECT Q.question_id, Q.question_text, AVG(R.marks_obtained) as average_marks FROM Questions Q JOIN ExamResults R ON Q.exam_id = R.exam_id WHERE Q.exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') GROUP BY Q.question_id, Q.question_text ORDER BY Q.question_id;"}
{"prompt": "What is the list of students who took my Operating Systems exams?", "response": "SELECT DISTINCT S.student_id, S.name FROM Students S JOIN ExamResults R ON S.student_id = R.student_id WHERE R.exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%');"}
{"prompt": "What are the details of all proctoring incidents flagged during my Operating Systems exams?", "response": "SELECT log_id, user_id, role, action, timestamp FROM SystemLogs WHERE action like '%proctoring incident%' AND timestamp >= (SELECT MIN(exam_date) FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') AND timestamp <= (SELECT MAX(exam_date) FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') ORDER BY timestamp DESC;"}
{"prompt": "What is the summary of the latest analytics report on my Operating Systems exams?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND report_type like '%Operating Systems%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which students have not submitted their Operating Systems exam responses?", "response": "SELECT S.student_id, S.name FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%'));"}
{"prompt": "What is the average time taken by students to complete the Operating Systems exam?", "response": "SELECT AVG(EXTRACT(EPOCH FROM (R.submission_time - E.exam_date))) / 60 AS avg_minutes FROM ExamResults R JOIN Exams E ON R.exam_id = E.exam_id WHERE E.coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND E.title like '%Operating Systems%';"}
{"prompt": "What are the details of all short-answer questions I created for Operating Systems?", "response": "SELECT question_id, question_text, marks FROM Questions WHERE exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') AND options IS NULL;"}
{"prompt": "What is the distribution of grades for my Operating Systems exams?", "response": "SELECT grade, COUNT(*) as count FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') GROUP BY grade ORDER BY grade;"}
{"prompt": "Which invigilators were assigned to my Operating Systems exams?", "response": "SELECT name, email FROM Invigilators WHERE assigned_exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%');"}
{"prompt": "What are the details of all support tickets related to my Operating Systems exams?", "response": "SELECT ticket_id, user_id, role, issue, status, created_on FROM SupportTickets WHERE issue like '%Operating Systems%' ORDER BY created_on DESC;"}
{"prompt": "What is the list of students who received personalized feedback for Operating Systems exams?", "response": "SELECT DISTINCT student_id FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') AND feedback IS NOT NULL;"}
{"prompt": "What is the average marks obtained by students in each question of my Operating Systems exams?", "response": "SELECT Q.question_id, Q.question_text, AVG(R.marks_obtained) as avg_marks FROM Questions Q JOIN ExamResults R ON Q.exam_id = R.exam_id WHERE Q.exam_id IN (SELECT exam_id FROM Exams WHERE coordinator_id = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') AND title like '%Operating Systems%') GROUP BY Q.question_id, Q.question_text ORDER BY Q.question_id;"}
{"prompt": "What is the summary of the latest exam integrity report for my Operating Systems exams?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type like '%integrity%' AND generated_by = (SELECT teacher_id FROM Teachers WHERE name = 'Kavita') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Rohit’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "How many students attended each recent online semester exam?", "response": "SELECT exam_id, COUNT(DISTINCT student_id) AS attendance_count FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) GROUP BY exam_id;"}
{"prompt": "What is the average duration taken by students to complete each exam?", "response": "SELECT exam_id, AVG(EXTRACT(EPOCH FROM (submission_time - (SELECT exam_date FROM Exams WHERE exam_id = ExamResults.exam_id)))/60) AS avg_duration_minutes FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) GROUP BY exam_id;"}
{"prompt": "Which topics or questions had the lowest average scores?", "response": "SELECT Q.question_id, Q.question_text, AVG(R.marks_obtained) AS avg_score FROM Questions Q JOIN ExamResults R ON Q.exam_id = R.exam_id WHERE Q.exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) GROUP BY Q.question_id, Q.question_text ORDER BY avg_score ASC LIMIT 10;"}
{"prompt": "What is the distribution of scores for each exam?", "response": "SELECT exam_id, grade, COUNT(*) AS student_count FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) GROUP BY exam_id, grade ORDER BY exam_id, grade;"}
{"prompt": "What are the peak login times for students on exam days?", "response": "SELECT DATE_TRUNC('hour', timestamp) AS login_hour, COUNT(*) AS login_count FROM SystemLogs WHERE role = 'Student' AND action like '%login%' AND timestamp::date IN (SELECT exam_date::date FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) GROUP BY login_hour ORDER BY login_count DESC;"}
{"prompt": "How many cheating or suspicious incidents were flagged in each exam?", "response": "SELECT exam_id, COUNT(*) AS flagged_count FROM SystemLogs WHERE action like '%cheating%' OR action like '%suspicious%' AND timestamp >= date_trunc('semester', current_date) GROUP BY exam_id;"}
{"prompt": "What are the most common types of disruptions reported during exams?", "response": "SELECT action, COUNT(*) AS disruption_count FROM SystemLogs WHERE action like '%disruption%' AND timestamp >= date_trunc('semester', current_date) GROUP BY action ORDER BY disruption_count DESC;"}
{"prompt": "What is the correlation between flagged incidents and student scores?", "response": "SELECT R.exam_id, R.student_id, R.marks_obtained, (SELECT COUNT(*) FROM SystemLogs L WHERE L.user_id = R.student_id AND (L.action like '%cheating%' OR L.action like '%suspicious%') AND L.timestamp >= date_trunc('semester', current_date)) AS flagged_incidents FROM ExamResults R WHERE R.exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date));"}
{"prompt": "Which students had the most flagged incidents in recent exams?", "response": "SELECT user_id, COUNT(*) AS flagged_count FROM SystemLogs WHERE (action like '%cheating%' OR action like '%suspicious%') AND timestamp >= date_trunc('semester', current_date) GROUP BY user_id ORDER BY flagged_count DESC LIMIT 10;"}
{"prompt": "What are the answer patterns for students in each exam?", "response": "SELECT exam_id, student_id, GROUP_CONCAT(answer_pattern) AS answer_patterns FROM (SELECT exam_id, student_id, question_id"}
{"prompt": "What is the summary of the latest analytics report I generated?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM SystemLogs WHERE role = 'Analyst' AND action like '%login%' AND date(timestamp) = current_date LIMIT 1) ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which exams had the highest rate of flagged cheating incidents?", "response": "SELECT exam_id, COUNT(*) AS flagged_count FROM SystemLogs WHERE (action like '%cheating%' OR action like '%suspicious%') AND timestamp >= date_trunc('semester', current_date) GROUP BY exam_id ORDER BY flagged_count DESC LIMIT 5;"}
{"prompt": "What is the average score for each subject in the recent semester exams?", "response": "SELECT E.subject, AVG(R.marks_obtained) AS avg_score FROM ExamResults R JOIN Exams E ON R.exam_id = E.exam_id WHERE E.exam_date >= date_trunc('semester', current_date) GROUP BY E.subject ORDER BY avg_score DESC;"}
{"prompt": "Which students experienced the most disruptions during exams?", "response": "SELECT user_id, COUNT(*) AS disruption_count FROM SystemLogs WHERE action like '%disruption%' AND timestamp >= date_trunc('semester', current_date) GROUP BY user_id ORDER BY disruption_count DESC LIMIT 10;"}
{"prompt": "What is the summary of all flagged incidents for the semester?", "response": "SELECT log_id, user_id, action, timestamp FROM SystemLogs WHERE (action like '%cheating%' OR action like '%suspicious%') AND timestamp >= date_trunc('semester', current_date) ORDER BY timestamp DESC;"}
{"prompt": "Which questions were most frequently answered incorrectly?", "response": "SELECT Q.question_id, Q.question_text, COUNT(*) AS incorrect_count FROM Questions Q JOIN ExamResults R ON Q.exam_id = R.exam_id WHERE Q.exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) AND R.grade = 'F' GROUP BY Q.question_id, Q.question_text ORDER BY incorrect_count DESC LIMIT 10;"}
{"prompt": "What is the summary of the latest compliance report I generated?", "response": "SELECT summary FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM SystemLogs WHERE role = 'Analyst' AND action like '%login%' AND date(timestamp) = current_date LIMIT 1) AND report_type like '%compliance%' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the distribution of exam durations for each exam?", "response": "SELECT exam_id, MIN(EXTRACT(EPOCH FROM (submission_time - (SELECT exam_date FROM Exams WHERE exam_id = ExamResults.exam_id)))/60) AS min_duration, MAX(EXTRACT(EPOCH FROM (submission_time - (SELECT exam_date FROM Exams WHERE exam_id = ExamResults.exam_id)))/60) AS max_duration, AVG(EXTRACT(EPOCH FROM (submission_time - (SELECT exam_date FROM Exams WHERE exam_id = ExamResults.exam_id)))/60) AS avg_duration FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) GROUP BY exam_id;"}
{"prompt": "Which students have the lowest scores in the recent semester exams?", "response": "SELECT student_id, marks_obtained FROM ExamResults WHERE exam_id IN (SELECT exam_id FROM Exams WHERE exam_date >= date_trunc('semester', current_date)) ORDER BY marks_obtained ASC LIMIT 10;"}
{"prompt": "Which flagged patterns should be reviewed to refine the cheating detection algorithm?", "response": "SELECT action, COUNT(*) AS flagged_count FROM SystemLogs WHERE (action like '%cheating%' OR action like '%suspicious%') AND timestamp >= date_trunc('semester', current_date) GROUP BY action ORDER BY flagged_count DESC;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "PortfolioWebsite", "response": "nan"}
{"prompt": "Portfolio Owner (Individual/Professional)", "response": "nan"}
{"prompt": "Natural Language Question (Aarav’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the main categories of my design projects on the portfolio site?", "response": "SELECT DISTINCT category FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Aarav');"}
{"prompt": "How many projects do I have in each category?", "response": "SELECT category, COUNT(*) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Aarav') GROUP BY category;"}
{"prompt": "What are the details of my latest projects added to the portfolio?", "response": "SELECT project_id, title, description, start_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Aarav') ORDER BY start_date DESC LIMIT 5;"}
{"prompt": "How many visitors have viewed my portfolio site today?", "response": "SELECT COUNT(*) FROM Analytics WHERE date = current_date;"}
{"prompt": "What is the average time visitors spend on my portfolio site?", "response": "SELECT AVG(average_time) FROM Analytics WHERE date >= current_date - interval '7 days';"}
{"prompt": "Which project walkthrough videos have the highest number of views?", "response": "SELECT project_id, title, view_count FROM Projects ORDER BY view_count DESC LIMIT 5;"}
{"prompt": "How many contact form submissions have I received this month?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= date_trunc('month', current_date);"}
{"prompt": "What are the most common visitor locations visiting my portfolio?", "response": "SELECT location, count(*) FROM Analytics GROUP BY location ORDER BY count(*) DESC LIMIT 5;"}
{"prompt": "How many times has my resume been downloaded this week?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE subject like '%resume download%' AND sent_on >= current_date - interval '7 days';"}
{"prompt": "What are the analytics trends for visitor behavior over the last 30 days?", "response": "SELECT date, page_views FROM Analytics WHERE date >= current_date - interval '30 days' ORDER BY date;"}
{"prompt": "Which blog posts about design thinking have I published recently?", "response": "SELECT post_id, title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Aarav') AND tags like '%design thinking%' ORDER BY published_date DESC LIMIT 5;"}
{"prompt": "How many collaborations or freelance opportunities have been initiated through my portfolio site?", "response": "SELECT COUNT(*) FROM Collaborations WHERE project_id IN (SELECT project_id FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Aarav'));"}
{"prompt": "What feedback or testimonials have I received from clients?", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE from_name = 'Aarav' ORDER BY given_on DESC;"}
{"prompt": "How many visitors came from LinkedIn and Dribbble referrals?", "response": "SELECT referral_source, COUNT(*) FROM Analytics WHERE referral_source IN ('LinkedIn', 'Dribbble') GROUP BY referral_source;"}
{"prompt": "What is the bounce rate of my portfolio site?", "response": "SELECT bounce_rate FROM Analytics WHERE date = current_date;"}
{"prompt": "How many times have visitors clicked on my LinkedIn and Dribbble profile links?", "response": "SELECT profile_name, COUNT(*) FROM ContactMessages WHERE message like '%LinkedIn%' OR message like '%Dribbble%' GROUP BY profile_name;"}
{"prompt": "What are the most popular sections of my portfolio site based on visitor clicks?", "response": "SELECT section_name, count(*) FROM Analytics GROUP BY section_name ORDER BY count(*) DESC LIMIT 5;"}
{"prompt": "How many new blog posts have I published in the last 6 months?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Aarav') AND published_date >= current_date - interval '6 months';"}
{"prompt": "What is the average rating of my portfolio site from visitor feedback?", "response": "SELECT AVG(score) FROM SEOReports WHERE generated_on >= current_date - interval '1 year';"}
{"prompt": "How many times has my contact form been used to request freelance opportunities?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE message like '%freelance opportunity%';"}
{"prompt": "Website Visitors/Potential Clients", "response": "nan"}
{"prompt": "Natural Language Question (Nikita’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are Rohan’s profile details and how can I download his resume?", "response": "SELECT name, bio, email, phone, location, skills, resume_link FROM PortfolioOwner WHERE name = 'Rohan';"}
{"prompt": "What are the main categories of Rohan’s projects?", "response": "SELECT DISTINCT technologies FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan');"}
{"prompt": "Which projects are featured on Rohan’s homepage?", "response": "SELECT project_id, title, description, image_url FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan') ORDER BY start_date DESC LIMIT 3;"}
{"prompt": "What are the details of Rohan’s rebranding case study for a tech company?", "response": "SELECT project_id, title, description, technologies, project_link, image_url FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan') AND (title like '%rebranding%' OR description like '%rebranding%') AND (title like '%tech%' OR description like '%tech%');"}
{"prompt": "What testimonials has Rohan received from clients or collaborators?", "response": "SELECT from_name, role, content, given_on FROM Testimonials ORDER BY given_on DESC;"}
{"prompt": "What blog posts has Rohan published about design or branding?", "response": "SELECT title, published_date, tags FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan') AND (tags like '%design%' OR tags like '%branding%') ORDER BY published_date DESC;"}
{"prompt": "How can I contact Rohan or submit an inquiry through his portfolio site?", "response": "SELECT email FROM PortfolioOwner WHERE name = 'Rohan';"}
{"prompt": "How many times has Rohan’s resume been downloaded this month?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE subject like '%resume%' AND sent_on >= date_trunc('month', current_date) AND email = (SELECT email FROM PortfolioOwner WHERE name = 'Rohan');"}
{"prompt": "What is the total number of contact/inquiry messages Rohan has received this year?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= date_trunc('year', current_date) AND email = (SELECT email FROM PortfolioOwner WHERE name = 'Rohan');"}
{"prompt": "What are the most popular technologies Rohan uses in his projects?", "response": "SELECT technologies, COUNT(*) as project_count FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan') GROUP BY technologies ORDER BY project_count DESC LIMIT 5;"}
{"prompt": "What are the details of Rohan’s LinkedIn and Dribbble profiles?", "response": "SELECT profile_picture, name, email FROM PortfolioOwner WHERE name = 'Rohan'; -- (Assume links are in bio or skills)"}
{"prompt": "What are the analytics trends for Rohan’s portfolio site in the last 30 days?", "response": "SELECT date, page_views, unique_visitors, average_time, bounce_rate FROM Analytics WHERE date >= current_date - interval '30 days';"}
{"prompt": "How many visitors have viewed Rohan’s portfolio site today?", "response": "SELECT page_views FROM Analytics WHERE date = current_date;"}
{"prompt": "Which projects have the highest engagement or collaboration requests?", "response": "SELECT project_id, title, COUNT(*) as collab_count FROM Collaborations WHERE project_id IN (SELECT project_id FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan')) GROUP BY project_id, title ORDER BY collab_count DESC LIMIT 3;"}
{"prompt": "What is the average time visitors spend on Rohan’s site?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "What is the bounce rate of Rohan’s portfolio site?", "response": "SELECT bounce_rate FROM Analytics WHERE date = current_date;"}
{"prompt": "What SEO scores and mobile-friendliness ratings has Rohan’s site received?", "response": "SELECT generated_on, score, mobile_friendly, page_speed FROM SEOReports ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "What is the most recent feedback or testimonial Rohan received?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "What are the most recent blog posts or updates on Rohan’s site?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rohan') ORDER BY published_date DESC LIMIT 3;"}
{"prompt": "What are the details of my inquiry/quote request sent to Rohan?", "response": "SELECT message_id, name, email, subject, message, sent_on FROM ContactMessages WHERE email = (SELECT email FROM PortfolioOwner WHERE name = 'Rohan') AND (message like '%quote%' OR subject like '%quote%' OR message like '%inquiry%' OR subject like '%inquiry%') ORDER BY sent_on DESC LIMIT 1;"}
{"prompt": "Recruiters/Employers", "response": "nan"}
{"prompt": "Natural Language Question (Aman’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the profile details of the UI/UX designer whose portfolio I reviewed?", "response": "SELECT name, bio, email, phone, location, skills, resume_link FROM PortfolioOwner WHERE name = 'UI/UX Designer';"}
{"prompt": "What selected projects are showcased on the designer’s homepage?", "response": "SELECT project_id, title, description, technologies, project_link, image_url, start_date, end_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'UI/UX Designer') ORDER BY start_date DESC LIMIT 3;"}
{"prompt": "What are the details of the case study project that includes context, goals, tools, and results?", "response": "SELECT project_id, title, description, technologies, project_link FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'UI/UX Designer') AND (description like '%context%' OR description like '%goals%' OR description like '%tools%' OR description like '%results%');"}
{"prompt": "How many projects has the designer completed and what are their main technologies?", "response": "SELECT COUNT(*), technologies FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'UI/UX Designer') GROUP BY technologies;"}
{"prompt": "What testimonials from past clients are available on the portfolio?", "response": "SELECT from_name, role, content, given_on FROM Testimonials ORDER BY given_on DESC;"}
{"prompt": "What is the content of the most recent testimonial?", "response": "SELECT from_name, role, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "What is the process for contacting the designer or scheduling an interview?", "response": "SELECT email FROM PortfolioOwner WHERE name = 'UI/UX Designer';"}
{"prompt": "How many times has the designer’s resume been downloaded?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE subject like '%resume%' AND email = (SELECT email FROM PortfolioOwner WHERE name = 'UI/UX Designer');"}
{"prompt": "What are the details of my own contact/inquiry messages sent to the designer?", "response": "SELECT message_id, subject, message, sent_on FROM ContactMessages WHERE name = 'Aman' AND email = 'aman@techfirm.com';"}
{"prompt": "What is the total number of contact messages the designer has received this year?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= date_trunc('year', current_date) AND email = (SELECT email FROM PortfolioOwner WHERE name = 'UI/UX Designer');"}
{"prompt": "What are the analytics trends for site visits and engagement this week?", "response": "SELECT date, page_views, unique_visitors, average_time, bounce_rate FROM Analytics WHERE date >= current_date - interval '7 days';"}
{"prompt": "How many unique visitors accessed the designer’s portfolio today?", "response": "SELECT unique_visitors FROM Analytics WHERE date = current_date;"}
{"prompt": "What is the average time visitors spend on the site?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "What is the bounce rate for the portfolio site today?", "response": "SELECT bounce_rate FROM Analytics WHERE date = current_date;"}
{"prompt": "Which projects have the highest engagement or collaboration requests?", "response": "SELECT project_id, title, COUNT(*) as collab_count FROM Collaborations WHERE project_id IN (SELECT project_id FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'UI/UX Designer')) GROUP BY project_id, title ORDER BY collab_count DESC LIMIT 3;"}
{"prompt": "What are the most recent blog posts or updates on the designer’s site?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'UI/UX Designer') ORDER BY published_date DESC LIMIT 3;"}
{"prompt": "What is the SEO score and mobile-friendliness of the site?", "response": "SELECT generated_on, score, mobile_friendly, page_speed FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the most popular technologies used in the designer’s portfolio projects?", "response": "SELECT technologies, COUNT(*) as project_count FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'UI/UX Designer') GROUP BY technologies ORDER BY project_count DESC LIMIT 5;"}
{"prompt": "What is the most recent feedback or testimonial received?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "What are the details of the interview scheduling message I sent?", "response": "SELECT message_id, subject, message, sent_on FROM ContactMessages WHERE name = 'Aman' AND subject like '%interview%' ORDER BY sent_on DESC LIMIT 1;"}
{"prompt": "Collaborators/Peers", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are Ritesh’s portfolio details and contact information?", "response": "SELECT owner_id, name, bio, email, phone, location, skills, resume_link, profile_picture FROM PortfolioOwner WHERE name = 'Ritesh';"}
{"prompt": "Which of Ritesh’s projects showcase UI design work on mobile and web apps?", "response": "SELECT project_id, title, description, technologies, project_link, image_url, start_date, end_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') AND (technologies like '%UI%' OR technologies like '%mobile%' OR technologies like '%web%') ORDER BY start_date DESC;"}
{"prompt": "What are the details of Ritesh’s collaborative projects and case studies?", "response": "SELECT project_id, title, description, technologies, project_link, image_url, start_date, end_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') AND (description like '%collaborative%' OR description like '%case study%') ORDER BY start_date DESC;"}
{"prompt": "Which blog posts by Ritesh discuss Figma, open-source, design tools, or team workflows?", "response": "SELECT post_id, title, published_date, tags FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') AND (tags like '%Figma%' OR tags like '%open-source%' OR tags like '%design tools%' OR tags like '%team workflows%') ORDER BY published_date DESC;"}
{"prompt": "What are the details of collaboration proposals sent to Ritesh, including mine?", "response": "SELECT message_id, name, email, subject, message, sent_on FROM ContactMessages WHERE email = (SELECT email FROM PortfolioOwner WHERE name = 'Ritesh') AND (message like '%collaboration%' OR subject like '%collaboration%' OR message like '%proposal%' OR subject like '%proposal%') ORDER BY sent_on DESC;"}
{"prompt": "What are the most recent testimonials Ritesh has received from collaborators or clients?", "response": "SELECT from_name, role, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 5;"}
{"prompt": "How many collaborative projects has Ritesh participated in?", "response": "SELECT COUNT(*) FROM Collaborations WHERE project_id IN (SELECT project_id FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh'));"}
{"prompt": "What are the most popular technologies Ritesh uses in his projects?", "response": "SELECT technologies, COUNT(*) as project_count FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') GROUP BY technologies ORDER BY project_count DESC LIMIT 5;"}
{"prompt": "What is the list of all blog posts Ritesh has published in the last year?", "response": "SELECT post_id, title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') AND published_date >= current_date - interval '1 year' ORDER BY published_date DESC;"}
{"prompt": "What are the details of the most recent project Ritesh added to his portfolio?", "response": "SELECT project_id, title, description, start_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "How many contact/inquiry messages has Ritesh received this month?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= date_trunc('month', current_date) AND email = (SELECT email FROM PortfolioOwner WHERE name = 'Ritesh');"}
{"prompt": "What are the main skills and tools listed in Ritesh’s profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Ritesh';"}
{"prompt": "What is the average time visitors spend on Ritesh’s portfolio site?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "What is the bounce rate for Ritesh’s portfolio site today?", "response": "SELECT bounce_rate FROM Analytics WHERE date = current_date;"}
{"prompt": "What is the SEO score and mobile-friendliness of Ritesh’s site?", "response": "SELECT generated_on, score, mobile_friendly, page_speed FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the details of all collaborations Ritesh has documented?", "response": "SELECT collab_id, project_id, collaborator_name, role, contact FROM Collaborations WHERE project_id IN (SELECT project_id FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh'));"}
{"prompt": "What is the count of all blog posts about design tools and workflows?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') AND (tags like '%design tools%' OR tags like '%workflow%');"}
{"prompt": "What is the most recent feedback or testimonial Ritesh received?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "What are the most recent updates or new sections on Ritesh’s site?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Ritesh') ORDER BY published_date DESC LIMIT 3;"}
{"prompt": "What are the details of my own collaboration proposal sent to Ritesh?", "response": "SELECT message_id, name, email, subject, message, sent_on FROM ContactMessages WHERE name = 'Meera' AND email = (SELECT email FROM PortfolioOwner WHERE name = 'Ritesh') ORDER BY sent_on DESC LIMIT 1;"}
{"prompt": "Content Editors", "response": "nan"}
{"prompt": "Natural Language Question (Sana’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What is the current homepage intro content for the photographer’s portfolio?", "response": "SELECT bio FROM PortfolioOwner WHERE name = '[Photographer Name]';"}
{"prompt": "What are the project descriptions I need to review and enhance?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]');"}
{"prompt": "What is the photographer’s current bio?", "response": "SELECT bio FROM PortfolioOwner WHERE name = '[Photographer Name]';"}
{"prompt": "What blog posts are available for editing and SEO improvement?", "response": "SELECT post_id, title, content, tags, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]');"}
{"prompt": "What is the most recent project added to the portfolio?", "response": "SELECT project_id, title, description, start_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]') ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "Which projects have the highest visitor engagement (for narrative focus)?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]') ORDER BY (SELECT SUM(page_views) FROM Analytics WHERE date >= current_date - interval '30 days') DESC LIMIT 3;"}
{"prompt": "What are the most common keywords currently used in the photographer’s site content?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the average word count of project descriptions?", "response": "SELECT AVG(LENGTH(description) - LENGTH(REPLACE(description, ' ', '')) + 1) AS avg_word_count FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]');"}
{"prompt": "What are the most popular blog posts based on visitor analytics?", "response": "SELECT B.post_id, B.title, A.page_views FROM BlogPosts B JOIN Analytics A ON B.published_date = A.date ORDER BY A.page_views DESC LIMIT 5;"}
{"prompt": "What is the current SEO score for the photographer’s portfolio website?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the bounce rate and average time spent by visitors on the site?", "response": "SELECT bounce_rate, average_time FROM Analytics ORDER BY date DESC LIMIT 1;"}
{"prompt": "Which blog posts contain keywords related to photography, storytelling, or editing?", "response": "SELECT post_id, title, tags FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]') AND (tags like '%photography%' OR tags like '%story%' OR tags like '%edit%');"}
{"prompt": "How many projects have been updated in the last month?", "response": "SELECT COUNT(*) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]') AND end_date >= current_date - interval '1 month';"}
{"prompt": "What is the list of all testimonials for the photographer’s site?", "response": "SELECT from_name, role, content, given_on FROM Testimonials ORDER BY given_on DESC;"}
{"prompt": "What is the most recent feedback or testimonial received?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "What is the current formatting style of project descriptions?", "response": "SELECT description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = '[Photographer Name]') LIMIT 5;"}
{"prompt": "What is the most common visitor location for the site?", "response": "SELECT location, count(*) FROM Analytics GROUP BY location ORDER BY count(*) DESC LIMIT 1;"}
{"prompt": "What are the top 5 keywords that could be improved for SEO?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1; -- (Manual review for improvement)"}
{"prompt": "What is the trend in client inquiries before and after my edits?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= current_date - interval '2 months';"}
{"prompt": "What is the trend in average time spent on site before and after my edits?", "response": "SELECT date, average_time FROM Analytics WHERE date >= current_date - interval '2 months' ORDER BY date;"}
{"prompt": "Designers/UX Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the details of my latest portfolio projects?", "response": "SELECT project_id, title, description, technologies, project_link, image_url, start_date, end_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') ORDER BY start_date DESC LIMIT 5;"}
{"prompt": "Which projects have I tagged as interactive or narrative-driven?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (description like '%interactive%' OR description like '%narrative%');"}
{"prompt": "What feedback did I receive from user research sessions with peers?", "response": "SELECT message, sent_on FROM ContactMessages WHERE subject like '%feedback%' AND name IN (SELECT name FROM PortfolioOwner WHERE name = 'Priya');"}
{"prompt": "What are the most common pain points identified in my old portfolio?", "response": "SELECT message FROM ContactMessages WHERE subject like '%pain point%' AND name IN (SELECT name FROM PortfolioOwner WHERE name = 'Priya');"}
{"prompt": "What are the details of my case studies, including problem statements and outcomes?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (description like '%problem statement%' OR description like '%outcome%');"}
{"prompt": "What research methods and prototypes have I documented in my case studies?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (description like '%research method%' OR description like '%prototype%');"}
{"prompt": "Which projects include wireframes and final outcomes?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (description like '%wireframe%' OR description like '%final outcome%');"}
{"prompt": "What blog posts have I published about UX thinking, research, or accessibility?", "response": "SELECT post_id, title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (tags like '%UX%' OR tags like '%research%' OR tags like '%accessibility%') ORDER BY published_date DESC;"}
{"prompt": "What is the trend in visitor engagement since launching the new portfolio?", "response": "SELECT date, page_views, unique_visitors, average_time, bounce_rate FROM Analytics WHERE date >= current_date - interval '30 days';"}
{"prompt": "What is the average time spent by visitors on my new portfolio?", "response": "SELECT AVG(average_time) FROM Analytics WHERE date >= current_date - interval '30 days';"}
{"prompt": "How many client inquiries have I received since the redesign?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= (SELECT MIN(start_date) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya'));"}
{"prompt": "What are the most common keywords in my SEO reports post-redesign?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the current SEO score and mobile-friendliness of my portfolio?", "response": "SELECT score, mobile_friendly, page_speed FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the bounce rate of my portfolio site since the redesign?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= (SELECT MIN(start_date) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya'));"}
{"prompt": "What testimonials have I received about my new portfolio or UX process?", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content like '%portfolio%' OR content like '%UX%';"}
{"prompt": "What is the most recent testimonial or feedback I’ve received?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "What is the list of all blog posts about micro-interactions or performance?", "response": "SELECT post_id, title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (tags like '%micro-interaction%' OR tags like '%performance%') ORDER BY published_date DESC;"}
{"prompt": "What are the details of my projects that mention dark mode or accessibility?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND (description like '%dark mode%' OR description like '%accessibility%');"}
{"prompt": "What is the average SEO score for my site in the last 6 months?", "response": "SELECT AVG(score) FROM SEOReports WHERE generated_on >= current_date - interval '6 months';"}
{"prompt": "What is the trend in unique visitors and average time since adding new features?", "response": "SELECT date, unique_visitors, average_time FROM Analytics WHERE date >= (SELECT MIN(start_date) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya'));"}
{"prompt": "Developers/Web Admins", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the details of my portfolio projects built with Next.js and Tailwind CSS?", "response": "SELECT project_id, title, description, technologies, project_link, image_url, start_date, end_date FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND (technologies like '%Next.js%' OR technologies like '%Tailwind%');"}
{"prompt": "What is the uptime trend for my portfolio website?", "response": "SELECT date, page_views FROM Analytics ORDER BY date DESC LIMIT 30;"}
{"prompt": "What is the average Core Web Vitals score for my site in the last month?", "response": "SELECT AVG(score) FROM SEOReports WHERE generated_on >= current_date - interval '30 days';"}
{"prompt": "What are the details of my custom components for project displays and dark mode?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND (description like '%custom component%' OR description like '%dark mode%');"}
{"prompt": "What blog posts have I published using Markdown?", "response": "SELECT post_id, title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND status = 'Published' ORDER BY published_date DESC;"}
{"prompt": "What is the performance analytics trend for my site?", "response": "SELECT date, page_views, unique_visitors, average_time, bounce_rate FROM Analytics WHERE date >= current_date - interval '30 days' ORDER BY date;"}
{"prompt": "How many GitHub contributions have I integrated into my portfolio?", "response": "SELECT COUNT(*) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND technologies like '%GitHub%';"}
{"prompt": "What are the details of my automated CI/CD pipeline implementation?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND description like '%CI/CD%';"}
{"prompt": "What accessibility checks have I implemented on my site?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND description like '%accessibility%';"}
{"prompt": "What are the details of my GDPR-compliant cookie management solution?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND description like '%GDPR%' AND description like '%cookie%';"}
{"prompt": "What is the status of my serverless contact form and spam protection?", "response": "SELECT project_id, title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND description like '%serverless%' AND description like '%contact form%';"}
{"prompt": "How many contact form submissions have I received this month?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= date_trunc('month', current_date);"}
{"prompt": "What is the bounce rate for my portfolio site this week?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= current_date - interval '7 days';"}
{"prompt": "What is the average time spent by visitors on my site in the last 30 days?", "response": "SELECT AVG(average_time) FROM Analytics WHERE date >= current_date - interval '30 days';"}
{"prompt": "What are the most common technologies used in my projects?", "response": "SELECT technologies, COUNT(*) as tech_count FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') GROUP BY technologies ORDER BY tech_count DESC LIMIT 5;"}
{"prompt": "What is the summary of the latest SEO report for my portfolio?", "response": "SELECT generated_on, score, keywords, page_speed, mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the trend in unique visitors since launching my custom components?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= (SELECT MIN(start_date) FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND description like '%custom component%');"}
{"prompt": "What is the most recent blog post I published?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul') AND status = 'Published' ORDER BY published_date DESC LIMIT 1;"}
{"prompt": "What is the list of all collaborations I have documented on my portfolio?", "response": "SELECT collab_id, project_id, collaborator_name, role, contact FROM Collaborations WHERE project_id IN (SELECT project_id FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rahul'));"}
{"prompt": "What testimonials have I received about my technical and design skills?", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content like '%technical%' OR content like '%design%';"}
{"prompt": "SEO Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Tanvi’s POV)", "response": "SQL Query (Normal Text)"}
{"prompt": "What are the main keywords my portfolio site is targeting?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the current SEO score for my portfolio website?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the latest page speed score for my site?", "response": "SELECT page_speed FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Is my site marked as mobile-friendly in recent SEO reports?", "response": "SELECT mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the trend in my site’s SEO scores over the last three months?", "response": "SELECT generated_on, score FROM SEOReports WHERE generated_on >= current_date - interval '3 months' ORDER BY generated_on;"}
{"prompt": "What certifications and client results are highlighted on my portfolio?", "response": "SELECT bio FROM PortfolioOwner WHERE name = 'Tanvi';"}
{"prompt": "What blog posts have I published about trending SEO topics?", "response": "SELECT post_id, title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Tanvi') AND tags like '%SEO%' ORDER BY published_date DESC;"}
{"prompt": "Which articles and testimonials include schema markup?", "response": "SELECT post_id, title, tags FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Tanvi') AND tags like '%schema%';"}
{"prompt": "What is the structure of my site’s semantic HTML5 content?", "response": "SELECT * FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Tanvi') AND tags like '%HTML5%';"}
{"prompt": "What is the bounce rate for my site this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= date_trunc('month', current_date);"}
{"prompt": "What is the average load time for my site in the last 30 days?", "response": "SELECT AVG(page_speed) FROM SEOReports WHERE generated_on >= current_date - interval '30 days';"}
{"prompt": "How many unique visitors have I had in the last three months?", "response": "SELECT SUM(unique_visitors) FROM Analytics WHERE date >= current_date - interval '3 months';"}
{"prompt": "What is the trend in organic traffic after optimizing for “freelance SEO consultant in India”?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= current_date - interval '3 months' ORDER BY date;"}
{"prompt": "What testimonials have been published about my SEO consulting?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC;"}
{"prompt": "What is the distribution of blog posts by SEO topic/tag?", "response": "SELECT tags, count(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Tanvi') GROUP BY tags ORDER BY count(*) DESC;"}
{"prompt": "What is the latest feedback or testimonial I received from a client?", "response": "SELECT from_name, content, given_on FROM Testimonials ORDER BY given_on DESC LIMIT 1;"}
{"prompt": "How many backlinks or crawl issues have been tracked in the last three months?", "response": "SELECT COUNT(*) FROM SEOReports WHERE generated_on >= current_date - interval '3 months' AND (keywords like '%backlink%' OR keywords like '%crawl issue%');"}
{"prompt": "What is the summary of my latest SEO analytics report?", "response": "SELECT score, keywords, page_speed, mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the trend in page views and bounce rate since launching clear CTAs?", "response": "SELECT date, page_views, bounce_rate FROM Analytics WHERE date >= (SELECT MIN(published_date) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Tanvi') AND tags like '%CTA%');"}
{"prompt": "What is the average time spent on my site by visitors from organic search?", "response": "SELECT AVG(average_time) FROM Analytics WHERE date >= current_date - interval '3 months';"}
{"prompt": "Marketing/Branding Consultants", "response": "nan"}
{"prompt": "Natural Language Question", "response": "SQL Query"}
{"prompt": "What are the key skills Avinash highlights on his portfolio?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Avinash';"}
{"prompt": "List all projects where Avinash implemented a brand strategy.", "response": "SELECT title, description, technologies FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Avinash') AND description LIKE '%brand strategy%';"}
{"prompt": "Show the testimonials from clients praising Avinash’s branding work.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%branding%';"}
{"prompt": "Which projects mention measurable results like increased conversions or market share?", "response": "SELECT title, description FROM Projects WHERE description LIKE '%increased conversions%' OR description LIKE '%market share%';"}
{"prompt": "What is Avinash’s professional background and contact information?", "response": "SELECT bio, email, phone, location FROM PortfolioOwner WHERE name = 'Avinash';"}
{"prompt": "Display all blog posts Avinash has published about brand storytelling.", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Avinash') AND tags LIKE '%brand storytelling%' AND status = 'published';"}
{"prompt": "Which projects had collaborators, and what roles did they play?", "response": "SELECT p.title, c.collaborator_name, c.role FROM Projects p JOIN Collaborations c ON p.project_id = c.project_id WHERE p.owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Avinash');"}
{"prompt": "How many unique visitors has Avinash’s portfolio received this month?", "response": "SELECT SUM(unique_visitors) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "What is the current SEO score of Avinash’s homepage?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "List all case studies that demonstrate Avinash’s transformation framework.", "response": "SELECT title, description FROM Projects WHERE description LIKE '%transformation framework%';"}
{"prompt": "What is the average page speed of the portfolio site?", "response": "SELECT AVG(page_speed) FROM SEOReports;"}
{"prompt": "Show recent contact messages from prospective clients.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages ORDER BY sent_on DESC LIMIT 10;"}
{"prompt": "Which blog posts have the tag “brand strategy”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%brand strategy%' AND status = 'published';"}
{"prompt": "What is the bounce rate trend for the last 7 days?", "response": "SELECT date, bounce_rate FROM Analytics WHERE date >= DATE('2025-06-06') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "Which projects started in 2024 and are now completed?", "response": "SELECT title, start_date, end_date FROM Projects WHERE start_date >= '2024-01-01' AND end_date IS NOT NULL AND owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Avinash');"}
{"prompt": "List all testimonials given in 2025.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE given_on >= '2025-01-01';"}
{"prompt": "Which projects showcase interactive elements as part of their design?", "response": "SELECT title, description FROM Projects WHERE description LIKE '%interactive elements%';"}
{"prompt": "What is the average time visitors spend on Avinash’s site?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "Show all collaborations where the collaborator was a designer.", "response": "SELECT collaborator_name, role, contact FROM Collaborations WHERE role LIKE '%designer%';"}
{"prompt": "Which published blog posts discuss Avinash’s creative process?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%creative process%' AND status = 'published';"}
{"prompt": "Analytics/Data Trackers", "response": "nan"}
{"prompt": "Natural Language Question", "response": "SQL Query"}
{"prompt": "What analytics tools does Neha mention in her portfolio skills?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Neha';"}
{"prompt": "List all projects where Neha used Power BI, Looker Studio, or Python.", "response": "SELECT title, description, technologies FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Neha') AND (technologies LIKE '%Power BI%' OR technologies LIKE '%Looker Studio%' OR technologies LIKE '%Python%');"}
{"prompt": "Show the most recent blog posts Neha published about marketing analytics.", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Neha') AND tags LIKE '%marketing analytics%' AND status = 'published' ORDER BY published_date DESC LIMIT 5;"}
{"prompt": "How has the average session duration changed over the past month?", "response": "SELECT date, average_time FROM Analytics WHERE date >= DATE('2025-05-13') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "What is the current bounce rate on Neha’s portfolio site?", "response": "SELECT bounce_rate FROM Analytics ORDER BY date DESC LIMIT 1;"}
{"prompt": "How many page views did Neha’s portfolio get this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "Which projects include interactive dashboards?", "response": "SELECT title, description FROM Projects WHERE description LIKE '%interactive dashboard%';"}
{"prompt": "List all case studies Neha has published.", "response": "SELECT title, description FROM Projects WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Neha') AND description LIKE '%case study%';"}
{"prompt": "What is the trend in unique visitors over the last 14 days?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= DATE('2025-05-30') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "Show all testimonials from clients who appreciated Neha’s analytics insights.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%analytics insights%';"}
{"prompt": "What is Neha’s current SEO score?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which blog posts discuss A/B testing or site optimization?", "response": "SELECT title, published_date FROM BlogPosts WHERE (tags LIKE '%A/B testing%' OR tags LIKE '%site optimization%') AND status = 'published';"}
{"prompt": "How many inquiries did Neha receive after revising her homepage layout?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= '2025-05-13';"}
{"prompt": "Which projects started in 2025 and are now completed?", "response": "SELECT title, start_date, end_date FROM Projects WHERE start_date >= '2025-01-01' AND end_date IS NOT NULL AND owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Neha');"}
{"prompt": "Show the most recent contact messages from potential clients.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages ORDER BY sent_on DESC LIMIT 10;"}
{"prompt": "What is the average page speed of Neha’s site?", "response": "SELECT AVG(page_speed) FROM SEOReports;"}
{"prompt": "List all collaborations where the collaborator was a data visualization expert.", "response": "SELECT collaborator_name, role, contact FROM Collaborations WHERE role LIKE '%data visualization%';"}
{"prompt": "Which published blog posts feature Power BI dashboards?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%Power BI%' AND status = 'published';"}
{"prompt": "What are the most common keywords in Neha’s SEO reports?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Show all projects where Neha implemented user journey tracking.", "response": "SELECT title, description FROM Projects WHERE description LIKE '%user journey tracking%';"}
{"prompt": "nan", "response": "nan"}
{"prompt": "nan", "response": "nan"}
{"prompt": "BlogPlatform", "response": "nan"}
{"prompt": "Readers/Visitors", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are the most recent blog posts about productivity?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%productivity%' AND status = 'published' ORDER BY published_date DESC;"}
{"prompt": "Show all published articles related to mental health.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%mental health%' AND status = 'published';"}
{"prompt": "Which blog posts discuss career advice?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%career advice%' AND status = 'published';"}
{"prompt": "Display the content of the post titled “Atomic Habits: Applying the 2-Minute Rule in Real Life”.", "response": "SELECT content FROM BlogPosts WHERE title = 'Atomic Habits: Applying the 2-Minute Rule in Real Life' AND status = 'published';"}
{"prompt": "List all blog posts published in June 2025.", "response": "SELECT title, published_date FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "Which blog posts did Aarav comment on?", "response": "-- No comments table in schema; cannot answer with current schema."}
{"prompt": "How many unique visitors has MindStretch had this month?", "response": "SELECT SUM(unique_visitors) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "What is the average time visitors spend on the platform?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "What is the bounce rate trend for the last 7 days?", "response": "SELECT date, bounce_rate FROM Analytics WHERE date >= DATE('2025-06-06') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "List all testimonials from readers who mention community or belonging.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%community%' OR content LIKE '%belonging%';"}
{"prompt": "What are the most popular tags used in published blog posts?", "response": "SELECT tags FROM BlogPosts WHERE status = 'published' ORDER BY published_date DESC;"}
{"prompt": "Show all blog posts that have been published and are currently featured.", "response": "-- No 'featured' field in schema; cannot answer with current schema."}
{"prompt": "Which blog posts have the keyword “habit” in their title?", "response": "SELECT title, published_date FROM BlogPosts WHERE title LIKE '%habit%' AND status = 'published';"}
{"prompt": "What is the SEO score of the platform as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which posts were published by a specific owner (e.g., owner_id = 2)?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = 2 AND status = 'published';"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "What is the total number of page views for the current week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "List all contact messages sent by Aarav.", "response": "SELECT subject, message, sent_on FROM ContactMessages WHERE name = 'Aarav';"}
{"prompt": "What keywords are included in the most recent SEO report?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Show all blog posts with the tag “self-growth”.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%self-growth%' AND status = 'published';"}
{"prompt": "Bloggers/Content Creators", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Sana’s key skills as listed in her profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Sana';"}
{"prompt": "List all blog posts Sana has published about travel.", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sana') AND tags LIKE '%travel%' AND status = 'published';"}
{"prompt": "Which blog posts mention maps, galleries, or videos in their content?", "response": "SELECT title, published_date FROM BlogPosts WHERE (content LIKE '%map%' OR content LIKE '%gallery%' OR content LIKE '%video%') AND status = 'published';"}
{"prompt": "Show all blog posts scheduled to be published in June 2025.", "response": "SELECT title, published_date FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'scheduled';"}
{"prompt": "What is the publishing schedule Sana has followed in 2025?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sana') AND published_date >= '2025-01-01' ORDER BY published_date;"}
{"prompt": "Which of Sana’s posts have gone semi-viral, based on high page views?", "response": "SELECT p.title, a.page_views FROM BlogPosts p JOIN Analytics a ON p.post_id = a.analytics_id WHERE p.owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sana') AND a.page_views > 1000;"}
{"prompt": "Show analytics for the post “Solo in Spiti Valley”.", "response": "SELECT a.* FROM BlogPosts p JOIN Analytics a ON p.post_id = a.analytics_id WHERE p.title = 'Solo in Spiti Valley';"}
{"prompt": "What is the trend in unique visitors for Sana’s blog this month?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13' ORDER BY date;"}
{"prompt": "List all testimonials from readers who mention storytelling.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%storytelling%';"}
{"prompt": "Which blog posts were collaborations with guest writers?", "response": "SELECT p.title, c.collaborator_name FROM BlogPosts p JOIN Collaborations c ON p.post_id = c.project_id WHERE c.role LIKE '%guest writer%';"}
{"prompt": "Show all collaborations on Sana’s blog.", "response": "SELECT c.collaborator_name, c.role, c.contact FROM Collaborations c JOIN BlogPosts p ON c.project_id = p.post_id WHERE p.owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sana');"}
{"prompt": "Which blog posts contain affiliate links?", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%affiliate link%' AND status = 'published';"}
{"prompt": "How many subscribers has Sana gained through her premium newsletter?", "response": "-- No subscribers field in schema; cannot answer with current schema."}
{"prompt": "What is the average bounce rate on Sana’s blog in the last 14 days?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= DATE('2025-05-30') AND date <= DATE('2025-06-13');"}
{"prompt": "What is the SEO score for Sana’s blog as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "List all contact messages from readers mentioning the premium newsletter.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE message LIKE '%premium newsletter%';"}
{"prompt": "Which of Sana’s posts were published in the last 7 days?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sana') AND published_date >= DATE('2025-06-06') AND published_date <= DATE('2025-06-13') AND status = 'published';"}
{"prompt": "What are the most common keywords in Sana’s SEO reports?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Show all blog posts tagged with “personal brand”.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%personal brand%' AND status = 'published';"}
{"prompt": "How many blog posts has Sana published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sana') AND status = 'published';"}
{"prompt": "Editors/Moderators", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Priya’s key skills as listed in her profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Priya';"}
{"prompt": "Show all blog posts on tech that are currently in draft status.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%tech%' AND status = 'draft';"}
{"prompt": "List all blog posts on culture that are currently in draft status.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%culture%' AND status = 'draft';"}
{"prompt": "Which blog posts on education have been published this month?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%education%' AND status = 'published' AND published_date >= '2025-06-01' AND published_date <= '2025-06-13';"}
{"prompt": "Which posts were written by freelance bloggers?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id IN (SELECT owner_id FROM PortfolioOwner WHERE bio LIKE '%freelance blogger%');"}
{"prompt": "Show all published blog posts that mention editorial guidelines.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%editorial guideline%' AND status = 'published';"}
{"prompt": "List all contact messages from users reporting inappropriate content.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%report%' OR message LIKE '%inappropriate%';"}
{"prompt": "What is the average bounce rate for InkSphere this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "What is the SEO score for InkSphere as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which blog posts have been published by Priya?", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Priya') AND status = 'published';"}
{"prompt": "List all testimonials mentioning Priya’s editorial support.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%Priya%' AND content LIKE '%editorial%';"}
{"prompt": "Which posts have been tagged with “community standards”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%community standards%' AND status = 'published';"}
{"prompt": "Show all blog posts published in June 2025.", "response": "SELECT title, published_date FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "What are the most common keywords in InkSphere’s latest SEO report?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts are currently in draft status across the platform?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'draft';"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "What is the total number of page views for InkSphere this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "What is the trend in unique visitors to InkSphere in the last 14 days?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= DATE('2025-05-30') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "What is the average time visitors spend on InkSphere?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "List all contact messages sent by users with questions about editorial guidelines.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%editorial guideline%' OR message LIKE '%editorial guideline%';"}
{"prompt": "Platform Administrators", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Rajeev’s key skills as listed in his profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Rajeev';"}
{"prompt": "What is the most recent SEO score for WordFlare?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the average page speed of the platform?", "response": "SELECT AVG(page_speed) FROM SEOReports;"}
{"prompt": "What is the trend in unique visitors over the last 14 days?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= DATE('2025-05-30') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "How many page views did WordFlare receive this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "What is the average bounce rate for the last 30 days?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= DATE('2025-05-14') AND date <= DATE('2025-06-13');"}
{"prompt": "List all blog posts published on June 12, 2025.", "response": "SELECT title, published_date FROM BlogPosts WHERE published_date = '2025-06-12' AND status = 'published';"}
{"prompt": "Which blog posts received the most page views this month?", "response": "SELECT p.title, a.page_views FROM BlogPosts p JOIN Analytics a ON p.post_id = a.analytics_id WHERE a.date >= '2025-06-01' AND a.date <= '2025-06-13' ORDER BY a.page_views DESC;"}
{"prompt": "Show all contact messages about platform issues.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%platform%' OR message LIKE '%issue%';"}
{"prompt": "List all testimonials mentioning platform stability or uptime.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%stability%' OR content LIKE '%uptime%';"}
{"prompt": "What are the most recent keywords tracked in SEO reports?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "What is the total number of unique visitors for the month of May 2025?", "response": "SELECT SUM(unique_visitors) FROM Analytics WHERE date >= '2025-05-01' AND date <= '2025-05-31';"}
{"prompt": "What is the highest page speed recorded in the last 30 days?", "response": "SELECT MAX(page_speed) FROM SEOReports WHERE generated_on >= DATE('2025-05-14') AND generated_on <= DATE('2025-06-13');"}
{"prompt": "How many contact messages were received after June 10, 2025?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE sent_on >= '2025-06-10';"}
{"prompt": "List all blog posts tagged with “security”.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%security%' AND status = 'published';"}
{"prompt": "What is the average time visitors spend on the platform?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "What is the mobile friendliness status of the latest SEO report?", "response": "SELECT mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "List all blog posts published by Rajeev.", "response": "SELECT title, published_date FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Rajeev') AND status = 'published';"}
{"prompt": "What is the total number of bounce rates recorded this week?", "response": "SELECT SUM(bounce_rate) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "Commenters/Community Members", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Maya’s key skills as listed in her profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Maya';"}
{"prompt": "Show all published blog posts about social issues.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%social issue%' AND status = 'published';"}
{"prompt": "List all published blog posts about culture.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%culture%' AND status = 'published';"}
{"prompt": "Which blog posts discuss climate activism?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%climate activism%' AND status = 'published';"}
{"prompt": "What is the content of the latest post about climate activism?", "response": "SELECT content FROM BlogPosts WHERE tags LIKE '%climate activism%' AND status = 'published' ORDER BY published_date DESC LIMIT 1;"}
{"prompt": "How many blog posts have been published in June 2025?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "What are the most recent blog posts Maya has read?", "response": "-- No reading history in schema; cannot answer with current schema."}
{"prompt": "How many unique visitors has ThinkPulse had this week?", "response": "SELECT SUM(unique_visitors) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "What is the average time visitors spend on ThinkPulse?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "What is the bounce rate trend for the last 7 days?", "response": "SELECT date, bounce_rate FROM Analytics WHERE date >= DATE('2025-06-06') AND date <= DATE('2025-06-13') ORDER BY date;"}
{"prompt": "List all testimonials from readers who mention community or discussion.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%community%' OR content LIKE '%discussion%';"}
{"prompt": "What are the most common keywords in the latest SEO report?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Show all blog posts tagged with “activism”.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%activism%' AND status = 'published';"}
{"prompt": "What is the SEO score for ThinkPulse as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many contact messages have been sent by Maya?", "response": "SELECT COUNT(*) FROM ContactMessages WHERE name = 'Maya';"}
{"prompt": "List all contact messages mentioning “comment section”.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%comment section%' OR message LIKE '%comment section%';"}
{"prompt": "Which blog posts have the tag “community”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%community%' AND status = 'published';"}
{"prompt": "What is the total number of page views for ThinkPulse in June 2025?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-30';"}
{"prompt": "List all published blog posts with the tag “discussion”.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%discussion%' AND status = 'published';"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "Advertisers/Sponsors", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Raj’s key skills as listed in his profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Raj';"}
{"prompt": "List all published blog posts about sustainability.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%sustainability%' AND status = 'published';"}
{"prompt": "Which blog posts are tagged with “green living”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%green living%' AND status = 'published';"}
{"prompt": "Show all blog posts sponsored by Raj’s brand.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%sponsored%' AND content LIKE '%Raj%';"}
{"prompt": "Which published posts have the highest page views this month?", "response": "SELECT p.title, a.page_views FROM BlogPosts p JOIN Analytics a ON p.post_id = a.analytics_id WHERE a.date >= '2025-06-01' AND a.date <= '2025-06-13' AND p.status = 'published' ORDER BY a.page_views DESC;"}
{"prompt": "What is the trend in unique visitors for GreenPulse this month?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13' ORDER BY date;"}
{"prompt": "What is the average click-through rate for sponsored posts?", "response": "-- No click-through rate field in schema; cannot answer with current schema."}
{"prompt": "Show all testimonials mentioning Raj’s brand or sponsorship.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%Raj%' OR content LIKE '%sponsor%';"}
{"prompt": "What are the most common keywords in GreenPulse’s latest SEO report?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the SEO score for GreenPulse as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts about sustainability have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE tags LIKE '%sustainability%' AND status = 'published';"}
{"prompt": "What is the total number of page views for GreenPulse this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "List all contact messages received from Raj.", "response": "SELECT subject, message, sent_on FROM ContactMessages WHERE name = 'Raj';"}
{"prompt": "Which blog posts have the tag “eco-friendly”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%eco-friendly%' AND status = 'published';"}
{"prompt": "What is the average time visitors spend on GreenPulse?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "Which published blog posts mention “audience demographics”?", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%audience demographics%' AND status = 'published';"}
{"prompt": "How many blog posts have been published in June 2025?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "List all published blog posts mentioning “engagement metrics”.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%engagement metrics%' AND status = 'published';"}
{"prompt": "What is the average bounce rate for GreenPulse this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "SEO Specialists", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Neha’s key skills as listed in her profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Neha';"}
{"prompt": "Show all published blog posts about SEO.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%SEO%' AND status = 'published';"}
{"prompt": "List all blog posts containing the keyword “meta tag”.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%meta tag%' AND status = 'published';"}
{"prompt": "Which published blog posts mention “internal linking”?", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%internal linking%' AND status = 'published';"}
{"prompt": "What are the most recent keywords tracked in SEO reports?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the current SEO score for BrightBlogs?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the average page speed of the platform?", "response": "SELECT AVG(page_speed) FROM SEOReports;"}
{"prompt": "What is the mobile friendliness status of the latest SEO report?", "response": "SELECT mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "Which blog posts have the tag “organic traffic”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%organic traffic%' AND status = 'published';"}
{"prompt": "List all blog posts published in June 2025.", "response": "SELECT title, published_date FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "What is the trend in unique visitors to BrightBlogs this month?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13' ORDER BY date;"}
{"prompt": "What is the average bounce rate for BrightBlogs this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "What is the total number of page views for BrightBlogs this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "Which blog posts discuss “keyword trends”?", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%keyword trends%' AND status = 'published';"}
{"prompt": "List all testimonials mentioning Neha’s SEO expertise.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%Neha%' AND content LIKE '%SEO%';"}
{"prompt": "Which blog posts have the tag “ad revenue”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%ad revenue%' AND status = 'published';"}
{"prompt": "What is the average time visitors spend on BrightBlogs?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "List all contact messages mentioning “SEO” or “search ranking”.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%SEO%' OR message LIKE '%search ranking%' OR message LIKE '%SEO%' OR message LIKE '%search ranking%';"}
{"prompt": "How many blog posts have been published by Neha?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Neha') AND status = 'published';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are the key skills of the marketing team lead as listed in their profile?", "response": "SELECT skills FROM PortfolioOwner WHERE role LIKE '%marketing team lead%';"}
{"prompt": "List all published blog posts about user engagement.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%engagement%' AND status = 'published';"}
{"prompt": "Which blog posts are tagged with “campaign”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%campaign%' AND status = 'published';"}
{"prompt": "Show all blog posts promoting TrendWave on social media.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%social media%' AND status = 'published';"}
{"prompt": "Which published posts have the highest page views this month?", "response": "SELECT p.title, a.page_views FROM BlogPosts p JOIN Analytics a ON p.post_id = a.analytics_id WHERE a.date >= '2025-06-01' AND a.date <= '2025-06-13' AND p.status = 'published' ORDER BY a.page_views DESC;"}
{"prompt": "What is the trend in unique visitors for TrendWave this month?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13' ORDER BY date;"}
{"prompt": "What is the average bounce rate for TrendWave this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "Show all testimonials mentioning TrendWave’s marketing campaigns.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%marketing campaign%' OR content LIKE '%TrendWave%';"}
{"prompt": "What are the most common keywords in TrendWave’s latest SEO report?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the SEO score for TrendWave as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts about user growth have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE tags LIKE '%user growth%' AND status = 'published';"}
{"prompt": "What is the total number of page views for TrendWave this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "List all contact messages received mentioning “campaign” or “promotion”.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%campaign%' OR subject LIKE '%promotion%' OR message LIKE '%campaign%' OR message LIKE '%promotion%';"}
{"prompt": "Which blog posts have the tag “SEO”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%SEO%' AND status = 'published';"}
{"prompt": "What is the average time visitors spend on TrendWave?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "Which published blog posts mention “newsletter”?", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%newsletter%' AND status = 'published';"}
{"prompt": "How many blog posts have been published in June 2025?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "List all published blog posts mentioning “influencer” or “partnership”.", "response": "SELECT title, published_date FROM BlogPosts WHERE (content LIKE '%influencer%' OR content LIKE '%partnership%') AND status = 'published';"}
{"prompt": "What is the total number of unique visitors for TrendWave in May 2025?", "response": "SELECT SUM(unique_visitors) FROM Analytics WHERE date >= '2025-05-01' AND date <= '2025-05-31';"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "Developers/Technical Support", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Anita’s key skills as listed in her profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Anita';"}
{"prompt": "Which published blog posts are about technical support?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%technical support%' AND status = 'published';"}
{"prompt": "List all blog posts about platform updates.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%update%' AND status = 'published';"}
{"prompt": "Which blog posts mention bug fixes or hotfixes?", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%bug fix%' OR content LIKE '%hotfix%' AND status = 'published';"}
{"prompt": "Show all contact messages reporting issues with post publishing.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%post publishing%' OR message LIKE '%post publishing%';"}
{"prompt": "What is the trend in unique visitors to BlogNest this month?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13' ORDER BY date;"}
{"prompt": "What is the average bounce rate for BlogNest this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "What is the total number of page views for BlogNest this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "What is the current SEO score for BlogNest?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the most recent keywords tracked in SEO reports?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "List all testimonials mentioning Anita’s technical support.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%Anita%' AND content LIKE '%technical support%';"}
{"prompt": "Which blog posts have the tag “feature”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%feature%' AND status = 'published';"}
{"prompt": "How many blog posts have been published by Anita?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Anita') AND status = 'published';"}
{"prompt": "List all published blog posts mentioning “troubleshooting”.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%troubleshooting%' AND status = 'published';"}
{"prompt": "What is the average time visitors spend on BlogNest?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "List all contact messages from users asking technical questions.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%technical question%' OR message LIKE '%technical question%';"}
{"prompt": "Which published blog posts mention “user guide” or “platform features”?", "response": "SELECT title, published_date FROM BlogPosts WHERE (content LIKE '%user guide%' OR content LIKE '%platform feature%') AND status = 'published';"}
{"prompt": "How many blog posts have been published in June 2025?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "What is the mobile friendliness status of the latest SEO report?", "response": "SELECT mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Sameer’s key skills as listed in his profile?", "response": "SELECT skills FROM PortfolioOwner WHERE name = 'Sameer';"}
{"prompt": "Which published blog posts have the highest page views this month?", "response": "SELECT p.title, a.page_views FROM BlogPosts p JOIN Analytics a ON p.post_id = a.analytics_id WHERE a.date >= '2025-06-01' AND a.date <= '2025-06-13' AND p.status = 'published' ORDER BY a.page_views DESC;"}
{"prompt": "List all published blog posts about data analysis.", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%data analysis%' AND status = 'published';"}
{"prompt": "Which blog posts are tagged with “user behavior”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%user behavior%' AND status = 'published';"}
{"prompt": "What is the trend in unique visitors to ContentFlow this month?", "response": "SELECT date, unique_visitors FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13' ORDER BY date;"}
{"prompt": "What is the average bounce rate for ContentFlow this month?", "response": "SELECT AVG(bounce_rate) FROM Analytics WHERE date >= '2025-06-01' AND date <= '2025-06-13';"}
{"prompt": "What is the total number of page views for ContentFlow this week?", "response": "SELECT SUM(page_views) FROM Analytics WHERE date >= DATE('2025-06-07') AND date <= DATE('2025-06-13');"}
{"prompt": "Which topics have the most published blog posts?", "response": "SELECT tags, COUNT(*) as post_count FROM BlogPosts WHERE status = 'published' GROUP BY tags ORDER BY post_count DESC;"}
{"prompt": "What is the average time visitors spend on ContentFlow?", "response": "SELECT AVG(average_time) FROM Analytics;"}
{"prompt": "Which blog posts have the tag “retention”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%retention%' AND status = 'published';"}
{"prompt": "List all published blog posts mentioning “engagement”.", "response": "SELECT title, published_date FROM BlogPosts WHERE content LIKE '%engagement%' AND status = 'published';"}
{"prompt": "What is the SEO score for ContentFlow as of the latest report?", "response": "SELECT score FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What are the most recent keywords tracked in SEO reports?", "response": "SELECT keywords FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many blog posts have been published in June 2025?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE published_date >= '2025-06-01' AND published_date <= '2025-06-30' AND status = 'published';"}
{"prompt": "List all contact messages mentioning “data” or “analytics”.", "response": "SELECT name, email, subject, message, sent_on FROM ContactMessages WHERE subject LIKE '%data%' OR subject LIKE '%analytics%' OR message LIKE '%data%' OR message LIKE '%analytics%';"}
{"prompt": "Which blog posts have the tag “content strategy”?", "response": "SELECT title, published_date FROM BlogPosts WHERE tags LIKE '%content strategy%' AND status = 'published';"}
{"prompt": "How many blog posts have been published by Sameer?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE owner_id = (SELECT owner_id FROM PortfolioOwner WHERE name = 'Sameer') AND status = 'published';"}
{"prompt": "What is the mobile friendliness status of the latest SEO report?", "response": "SELECT mobile_friendly FROM SEOReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "List all testimonials mentioning Sameer’s data insights.", "response": "SELECT from_name, role, content, given_on FROM Testimonials WHERE content LIKE '%Sameer%' AND content LIKE '%data insight%';"}
{"prompt": "How many blog posts have been published in total?", "response": "SELECT COUNT(*) FROM BlogPosts WHERE status = 'published';"}
{"prompt": "nan", "response": "nan"}
{"prompt": "RealEstateDB", "response": "nan"}
{"prompt": "Property Buyers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "I’m looking to buy a home—can you show me what’s currently for sale?", "response": "SELECT * FROM Properties WHERE status = 'for sale';"}
{"prompt": "Are there any houses available for rent right now, and what’s the monthly rent for each?", "response": "SELECT p.property_id, p.type, p.location, r.monthly_rent FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.status = 'rented';"}
{"prompt": "Which sellers have the biggest portfolios on your platform?", "response": "SELECT name, listed_properties FROM Sellers ORDER BY listed_properties DESC;"}
{"prompt": "I want to find buyers interested in Downtown—who should I reach out to?", "response": "SELECT name, email, phone FROM Buyers WHERE interested_locations LIKE '%Downtown%';"}
{"prompt": "Who are the most experienced agents available, licensed before 2020?", "response": "SELECT name, email, phone, licensed_since FROM Agents WHERE licensed_since < '2020-01-01';"}
{"prompt": "Can you pull up all the property inquiries made by buyer ID 5?", "response": "SELECT * FROM Inquiries WHERE buyer_id = 5;"}
{"prompt": "I’d like to see all upcoming appointments for property number 10.", "response": "SELECT * FROM Appointments WHERE property_id = 10;"}
{"prompt": "Are there any rentals with overdue payments right now?", "response": "SELECT * FROM Rentals WHERE payment_status = 'pending';"}
{"prompt": "What’s the latest valuation for property 3, and who did it?", "response": "SELECT * FROM Valuations WHERE property_id = 3 ORDER BY valuation_date DESC LIMIT 1;"}
{"prompt": "I need to check the legal paperwork status for property 7—what’s been verified?", "response": "SELECT document_type, verified_by, status FROM LegalDocuments WHERE property_id = 7;"}
{"prompt": "Did we run any marketing campaigns for our listings on Facebook?", "response": "SELECT * FROM MarketingCampaigns WHERE platform = 'Facebook';"}
{"prompt": "Has agent 2 generated any analytics reports recently?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = 2;"}
{"prompt": "Can you show me properties priced between $500,000 and $1,000,000?", "response": "SELECT * FROM Properties WHERE price BETWEEN 500000 AND 1000000;"}
{"prompt": "Are there buyers looking for a place near the beach?", "response": "SELECT * FROM Buyers WHERE interested_locations LIKE '%Beach%';"}
{"prompt": "Do we have any property showings scheduled for today?", "response": "SELECT * FROM Appointments WHERE DATE(scheduled_on) = CURRENT_DATE;"}
{"prompt": "I’m searching for spacious homes—what’s available over 2,000 square feet?", "response": "SELECT * FROM Properties WHERE size_sqft > 2000;"}
{"prompt": "Which property inquiries are still open and need a response?", "response": "SELECT * FROM Inquiries WHERE status = 'open';"}
{"prompt": "Are there any rentals that have ended and might be available again?", "response": "SELECT * FROM Rentals WHERE end_date < CURRENT_DATE;"}
{"prompt": "Who are our top sellers with more than five listings?", "response": "SELECT * FROM Sellers WHERE listed_properties > 5;"}
{"prompt": "Show me the legal documents uploaded in the past month for compliance review.", "response": "SELECT * FROM LegalDocuments WHERE uploaded_on >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "Property Sellers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "How can Rahul check the current status and details of his apartment listing?", "response": "SELECT * FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul');"}
{"prompt": "What price did Rahul set for his apartment, and where is it located?", "response": "SELECT price, location FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul');"}
{"prompt": "How many buyers have inquired about Rahul’s apartment so far?", "response": "SELECT COUNT(*) FROM Inquiries WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "Can Rahul see the list of all inquiries for his property, including buyer contact details?", "response": "SELECT i.inquiry_id, b.name, b.email, b.phone, i.inquiry_date, i.status FROM Inquiries i JOIN Buyers b ON i.buyer_id = b.buyer_id WHERE i.property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "Who are the buyers interested in Rahul’s apartment, and what are their preferred locations?", "response": "SELECT b.name, b.interested_locations FROM Inquiries i JOIN Buyers b ON i.buyer_id = b.buyer_id WHERE i.property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "Has Rahul scheduled any site visits for his apartment?", "response": "SELECT * FROM Appointments WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "Which agents are assigned to show Rahul’s apartment to buyers?", "response": "SELECT a.name, a.email, a.phone FROM Appointments ap JOIN Agents a ON ap.agent_id = a.agent_id WHERE ap.property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "What is the average price of apartments similar in size to Rahul’s property?", "response": "SELECT AVG(price) FROM Properties WHERE type = 'apartment' AND size_sqft = (SELECT size_sqft FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "How many site visits have been scheduled for Rahul’s apartment, and what are their statuses?", "response": "SELECT COUNT(*), status FROM Appointments WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul')) GROUP BY status;"}
{"prompt": "Can Rahul review the latest valuation and expert notes for his apartment?", "response": "SELECT estimated_value, expert_name, notes, valuation_date FROM Valuations WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul')) ORDER BY valuation_date DESC LIMIT 1;"}
{"prompt": "What legal documents for Rahul’s apartment have been verified and uploaded?", "response": "SELECT document_type, status, verified_by, uploaded_on FROM LegalDocuments WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "How many people have viewed Rahul’s property listing this month?", "response": "SELECT SUM(reach) FROM MarketingCampaigns WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul')) AND start_date >= '2025-06-01';"}
{"prompt": "What is the total number of leads generated for Rahul’s property through marketing campaigns?", "response": "SELECT SUM(leads_generated) FROM MarketingCampaigns WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "Has Rahul received any recent offers or negotiations from buyers?", "response": "SELECT * FROM Inquiries WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul')) AND status = 'offer';"}
{"prompt": "What is the listing date and current status of Rahul’s apartment?", "response": "SELECT listing_date, status FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul');"}
{"prompt": "Are there any upcoming appointments for Rahul’s property that need his attention?", "response": "SELECT * FROM Appointments WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul')) AND status = 'scheduled';"}
{"prompt": "Which marketing platforms have been used to promote Rahul’s apartment?", "response": "SELECT DISTINCT platform FROM MarketingCampaigns WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "Has Rahul’s apartment been valued by more than one expert?", "response": "SELECT COUNT(DISTINCT expert_name) FROM Valuations WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'));"}
{"prompt": "What’s the most recent analytics report summary related to Rahul’s property?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'property' AND generated_by = (SELECT seller_id FROM Sellers WHERE name = 'Rahul') ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "How quickly did Rahul’s apartment sell after being listed?", "response": "SELECT DATEDIFF((SELECT MIN(end_date) FROM Rentals WHERE property_id = (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul'))), (SELECT listing_date FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Rahul')) AS days_on_market;"}
{"prompt": "Real Estate Agents/Brokers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Sanjay’s key skills as listed in his profile?", "response": "SELECT skills FROM Agents WHERE name = 'Sanjay';"}
{"prompt": "Which properties is Sanjay currently managing as a broker?", "response": "SELECT * FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay');"}
{"prompt": "How can Sanjay see all his active property listings and their current status?", "response": "SELECT property_id, type, location, price, status FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay');"}
{"prompt": "Who are the buyers that have made inquiries about Sanjay’s listings?", "response": "SELECT DISTINCT b.name, b.email, b.phone FROM Inquiries i JOIN Buyers b ON i.buyer_id = b.buyer_id WHERE i.property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay'));"}
{"prompt": "What is the schedule of upcoming property viewings Sanjay has arranged for his clients?", "response": "SELECT a.appointment_id, a.property_id, a.scheduled_on, a.status FROM Appointments a WHERE a.agent_id = (SELECT agent_id FROM Agents WHERE name = 'Sanjay') AND a.status = 'scheduled';"}
{"prompt": "Can Sanjay review all open inquiries for his properties?", "response": "SELECT * FROM Inquiries WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) AND status = 'open';"}
{"prompt": "Which of Sanjay’s properties have received the most buyer interest this month?", "response": "SELECT p.property_id, COUNT(i.inquiry_id) AS inquiry_count FROM Properties p JOIN Inquiries i ON p.property_id = i.property_id WHERE p.seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay') AND MONTH(i.inquiry_date) = 6 AND YEAR(i.inquiry_date) = 2025 GROUP BY p.property_id ORDER BY inquiry_count DESC;"}
{"prompt": "How many deals has Sanjay closed in the last 6 months?", "response": "SELECT COUNT(*) FROM Rentals WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) AND end_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"}
{"prompt": "What is the average price of properties Sanjay is currently listing?", "response": "SELECT AVG(price) FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay');"}
{"prompt": "Which of Sanjay’s properties have scheduled appointments today?", "response": "SELECT property_id, scheduled_on FROM Appointments WHERE agent_id = (SELECT agent_id FROM Agents WHERE name = 'Sanjay') AND DATE(scheduled_on) = CURRENT_DATE;"}
{"prompt": "Can Sanjay see the latest valuation for each of his properties?", "response": "SELECT property_id, estimated_value, expert_name, valuation_date FROM Valuations WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) ORDER BY valuation_date DESC;"}
{"prompt": "What legal documents are pending verification for Sanjay’s listings?", "response": "SELECT property_id, document_type, status FROM LegalDocuments WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) AND status != 'verified';"}
{"prompt": "Which marketing campaigns have been run for Sanjay’s properties in the past month?", "response": "SELECT * FROM MarketingCampaigns WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) AND start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the total reach and leads generated by marketing for Sanjay’s listings?", "response": "SELECT SUM(reach) AS total_reach, SUM(leads_generated) AS total_leads FROM MarketingCampaigns WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay'));"}
{"prompt": "How can Sanjay track the progress of all ongoing deals for his clients?", "response": "SELECT * FROM Rentals WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) AND payment_status = 'pending';"}
{"prompt": "What are the most recent analytics reports available to Sanjay for market insights?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT agent_id FROM Agents WHERE name = 'Sanjay') ORDER BY created_on DESC;"}
{"prompt": "Which of Sanjay’s clients have scheduled multiple appointments for the same property?", "response": "SELECT buyer_id, property_id, count(*) as appointment_count FROM Appointments WHERE agent_id = (SELECT agent_id FROM Agents WHERE name = 'Sanjay') GROUP BY buyer_id, property_id HAVING count(*) > 1;"}
{"prompt": "Are there any properties managed by Sanjay that have expired rental agreements?", "response": "SELECT * FROM Rentals WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) AND end_date < CURRENT_DATE;"}
{"prompt": "Which of Sanjay’s properties have the highest estimated value according to the latest valuations?", "response": "SELECT property_id, estimated_value FROM Valuations WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay')) ORDER BY valuation_date DESC, estimated_value DESC;"}
{"prompt": "How many unique buyers has Sanjay interacted with through inquiries or appointments?", "response": "SELECT COUNT(DISTINCT buyer_id) FROM (SELECT buyer_id FROM Inquiries WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE name = 'Sanjay') ) UNION ALL SELECT buyer_id FROM Appointments WHERE agent_id = (SELECT agent_id FROM Agents WHERE name = 'Sanjay')) AS buyers;"}
{"prompt": "Property Managers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which of my residential and commercial properties am I currently responsible for?", "response": "SELECT * FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya');"}
{"prompt": "Are any of my properties currently vacant and need new tenants?", "response": "SELECT * FROM Properties WHERE status = 'vacant' AND seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya');"}
{"prompt": "Which leases for my properties are set to expire soon?", "response": "SELECT p.property_id, r.end_date FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND r.end_date >= CURRENT_DATE ORDER BY r.end_date;"}
{"prompt": "Who still owes rent on my properties this month?", "response": "SELECT r.tenant_id, r.property_id, r.payment_status FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND r.payment_status = 'pending';"}
{"prompt": "Have I received any new tenant inquiries for my properties?", "response": "SELECT i.inquiry_id, i.buyer_id, i.property_id, i.inquiry_date, i.status FROM Inquiries i JOIN Properties p ON i.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya');"}
{"prompt": "What maintenance or tenant meetings are coming up for my properties?", "response": "SELECT a.appointment_id, a.property_id, a.scheduled_on, a.status FROM Appointments a JOIN Properties p ON a.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND a.status = 'scheduled';"}
{"prompt": "Which agents are helping me manage appointments for my properties?", "response": "SELECT DISTINCT a.agent_id, ag.name, ag.email, ag.phone FROM Appointments a JOIN Agents ag ON a.agent_id = ag.agent_id JOIN Properties p ON a.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya');"}
{"prompt": "For each of my properties, how many tenant inquiries have I received?", "response": "SELECT i.property_id, COUNT(i.inquiry_id) AS inquiry_count FROM Inquiries i JOIN Properties p ON i.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') GROUP BY i.property_id;"}
{"prompt": "What’s the average monthly rent for my residential properties?", "response": "SELECT AVG(r.monthly_rent) FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND p.type = 'residential';"}
{"prompt": "Can I see the rental status and tenant details for my commercial properties?", "response": "SELECT p.property_id, r.tenant_id, r.start_date, r.end_date, r.payment_status FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND p.type = 'commercial';"}
{"prompt": "Which of my leases are ending in the next 30 days so I can prepare for renewals?", "response": "SELECT p.property_id, r.end_date FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND r.end_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "How many tenants have moved out of my properties in the last six months?", "response": "SELECT COUNT(DISTINCT r.tenant_id) AS tenants_left FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND r.end_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND CURRENT_DATE;"}
{"prompt": "What’s the status of all legal documents for my properties?", "response": "SELECT ld.property_id, ld.document_type, ld.status, ld.verified_by FROM LegalDocuments ld JOIN Properties p ON ld.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya');"}
{"prompt": "How are my properties performing in recent marketing campaigns?", "response": "SELECT mc.property_id, mc.platform, mc.start_date, mc.end_date, mc.reach, mc.leads_generated FROM MarketingCampaigns mc JOIN Properties p ON mc.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya');"}
{"prompt": "Can I review the latest analytics reports for my portfolio?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT seller_id FROM Sellers WHERE name = 'Priya') ORDER BY created_on DESC;"}
{"prompt": "Which of my properties have gotten the most tenant inquiries lately?", "response": "SELECT i.property_id, COUNT(i.inquiry_id) AS inquiry_count FROM Inquiries i JOIN Properties p ON i.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') GROUP BY i.property_id ORDER BY inquiry_count DESC LIMIT 5;"}
{"prompt": "How many of my properties are currently rented out?", "response": "SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND p.status = 'rented';"}
{"prompt": "Are there any tenants with overdue rent on my properties?", "response": "SELECT r.tenant_id, r.property_id, r.payment_status FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND r.payment_status = 'overdue';"}
{"prompt": "What appointments do I have scheduled for maintenance or tenant meetings?", "response": "SELECT * FROM Appointments WHERE property_id IN (SELECT property_id FROM Properties WHERE seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya')) AND status = 'scheduled';"}
{"prompt": "What’s the total rental income I’ve generated from my properties over the past year?", "response": "SELECT SUM(r.monthly_rent) * 12 AS annual_rental_income FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.seller_id = (SELECT seller_id FROM Sellers WHERE name = 'Priya') AND r.start_date <= CURRENT_DATE AND (r.end_date IS NULL OR r.end_date >= CURRENT_DATE);"}
{"prompt": "Renters/Tenants", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Are there any rental apartments available near Ravi’s office?", "response": "SELECT p.property_id, p.type, p.location, r.monthly_rent, p.price, p.size_sqft FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.status = 'rented' AND p.location LIKE '%office location%';"}
{"prompt": "Can I see rental listings that fit within Ravi’s budget?", "response": "SELECT p.property_id, p.type, p.location, r.monthly_rent FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.status = 'rented' AND r.monthly_rent BETWEEN 1000 AND 3000;"}
{"prompt": "Which rental properties offer the amenities Ravi wants?", "response": "SELECT p.property_id, p.type, p.location, p.description FROM Properties p WHERE p.status = 'rented' AND p.description LIKE '%amenities%';"}
{"prompt": "How can Ravi save his favorite rental listings?", "response": "-- No favorites table in schema; cannot answer with current schema."}
{"prompt": "Who are the landlords for the rental properties Ravi is interested in, and how can he contact them?", "response": "SELECT s.name, s.email, s.phone FROM Sellers s JOIN Properties p ON s.seller_id = p.seller_id JOIN Rentals r ON p.property_id = r.property_id WHERE p.status = 'rented';"}
{"prompt": "What viewings has Ravi scheduled for rental properties?", "response": "SELECT a.appointment_id, a.property_id, a.scheduled_on, a.status FROM Appointments a WHERE a.buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi') AND a.status = 'scheduled';"}
{"prompt": "What are the rental terms for apartments Ravi is considering?", "response": "SELECT p.property_id, r.start_date, r.end_date, r.monthly_rent, r.payment_status FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE p.status = 'rented' AND p.property_id IN (SELECT property_id FROM Appointments WHERE buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi'));"}
{"prompt": "How can Ravi check the status of his rental applications?", "response": "SELECT i.inquiry_id, i.status FROM Inquiries i WHERE i.buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi') AND i.status IN ('application submitted', 'under review', 'approved', 'rejected');"}
{"prompt": "Which rental properties has Ravi inquired about so far?", "response": "SELECT p.property_id, p.type, p.location FROM Properties p JOIN Inquiries i ON p.property_id = i.property_id WHERE i.buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi');"}
{"prompt": "What appointments has Ravi set up for property viewings?", "response": "SELECT a.appointment_id, a.property_id, a.scheduled_on FROM Appointments a WHERE a.buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi');"}
{"prompt": "What’s the average monthly rent for apartments in Ravi’s preferred locations?", "response": "SELECT AVG(r.monthly_rent) FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE p.location LIKE '%preferred location%';"}
{"prompt": "Which agents are helping Ravi with his rental search?", "response": "SELECT DISTINCT a.agent_id, a.name, a.email, a.phone FROM Agents a JOIN Appointments ap ON a.agent_id = ap.agent_id WHERE ap.buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi');"}
{"prompt": "How many rental inquiries has Ravi made in the past month?", "response": "SELECT COUNT(*) FROM Inquiries WHERE buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi') AND inquiry_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What’s the payment status for rentals Ravi is involved with?", "response": "SELECT r.property_id, r.payment_status FROM Rentals r JOIN Properties p ON r.property_id = p.property_id WHERE r.tenant_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi');"}
{"prompt": "Are there any rental agreements ending soon for properties Ravi is interested in?", "response": "SELECT p.property_id, r.end_date FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE r.end_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 30 DAY) AND p.property_id IN (SELECT property_id FROM Inquiries WHERE buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi'));"}
{"prompt": "What legal documents can Ravi review for the rental properties he’s considering?", "response": "SELECT ld.document_type, ld.status, ld.verified_by FROM LegalDocuments ld WHERE ld.property_id IN (SELECT property_id FROM Inquiries WHERE buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi'));"}
{"prompt": "Have there been any marketing campaigns for rentals in Ravi’s preferred locations?", "response": "SELECT mc.campaign_id, mc.platform, mc.start_date, mc.end_date, mc.reach, mc.leads_generated FROM MarketingCampaigns mc JOIN Properties p ON mc.property_id = p.property_id WHERE p.location LIKE '%preferred location%';"}
{"prompt": "Can Ravi access analytics reports related to his rental interests?", "response": "SELECT ar.report_id, ar.report_type, ar.summary, ar.created_on FROM AnalyticsReports ar WHERE ar.generated_by = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi');"}
{"prompt": "Can Ravi see which rental properties with detailed descriptions he has viewed recently?", "response": "-- No viewing history table in schema; cannot answer with current schema."}
{"prompt": "What’s the average size of apartments Ravi is interested in renting?", "response": "SELECT AVG(p.size_sqft) FROM Properties p WHERE p.property_id IN (SELECT property_id FROM Inquiries WHERE buyer_id = (SELECT buyer_id FROM Buyers WHERE name = 'Ravi'));"}
{"prompt": "Legal Advisors", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which legal documents are available for review related to property titles?", "response": "SELECT * FROM LegalDocuments WHERE document_type LIKE '%title%';"}
{"prompt": "Can I see all lease agreements uploaded for properties that are currently rented?", "response": "SELECT ld.* FROM LegalDocuments ld JOIN Properties p ON ld.property_id = p.property_id WHERE ld.document_type LIKE '%lease agreement%' AND p.status = 'rented';"}
{"prompt": "Show me all legal documents that Meera has personally verified.", "response": "SELECT * FROM LegalDocuments WHERE verified_by = 'Meera';"}
{"prompt": "Which properties still have legal documents pending verification?", "response": "SELECT property_id, document_type, status FROM LegalDocuments WHERE status != 'verified';"}
{"prompt": "Are there any legal documents that have been uploaded in the last 30 days?", "response": "SELECT * FROM LegalDocuments WHERE uploaded_on >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "For each property, what legal documents are associated and what is their verification status?", "response": "SELECT p.property_id, p.type, ld.document_type, ld.status FROM Properties p LEFT JOIN LegalDocuments ld ON p.property_id = ld.property_id;"}
{"prompt": "Which legal documents are related to disclosures for properties currently listed for sale?", "response": "SELECT ld.* FROM LegalDocuments ld JOIN Properties p ON ld.property_id = p.property_id WHERE ld.document_type LIKE '%disclosure%' AND p.status = 'for sale';"}
{"prompt": "Are there any legal documents with notes mentioning compliance issues?", "response": "SELECT * FROM LegalDocuments WHERE notes LIKE '%compliance%';"}
{"prompt": "How many legal documents are associated with each property in the system?", "response": "SELECT property_id, COUNT(*) AS document_count FROM LegalDocuments GROUP BY property_id;"}
{"prompt": "Can I get a list of lease agreements expiring soon and their legal documents?", "response": "SELECT ld.* FROM LegalDocuments ld JOIN Rentals r ON ld.property_id = r.property_id WHERE ld.document_type LIKE '%lease agreement%' AND r.end_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "Has Meera verified any legal documents for properties located in Downtown?", "response": "SELECT ld.* FROM LegalDocuments ld JOIN Properties p ON ld.property_id = p.property_id WHERE ld.verified_by = 'Meera' AND p.location LIKE '%Downtown%';"}
{"prompt": "Which properties have legal documents that were rejected or need revision?", "response": "SELECT property_id, document_type, status FROM LegalDocuments WHERE status IN ('rejected', 'needs revision');"}
{"prompt": "Are there any legal documents related to property sales completed in the last 6 months?", "response": "SELECT ld.* FROM LegalDocuments ld JOIN Properties p ON ld.property_id = p.property_id WHERE p.status = 'sold' AND ld.uploaded_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"}
{"prompt": "Show me all legal documents that are contracts, regardless of property type.", "response": "SELECT * FROM LegalDocuments WHERE document_type LIKE '%contract%';"}
{"prompt": "Has Meera verified any legal documents that include notes about dispute resolution?", "response": "SELECT * FROM LegalDocuments WHERE verified_by = 'Meera' AND notes LIKE '%dispute%';"}
{"prompt": "Are there any properties in the system that don’t have any legal documents uploaded yet?", "response": "SELECT property_id FROM Properties WHERE property_id NOT IN (SELECT DISTINCT property_id FROM LegalDocuments);"}
{"prompt": "Can I see all legal documents Meera has uploaded in the past year?", "response": "SELECT * FROM LegalDocuments WHERE verified_by = 'Meera' AND uploaded_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}
{"prompt": "How many legal documents has Meera verified so far?", "response": "SELECT COUNT(*) FROM LegalDocuments WHERE verified_by = 'Meera' AND status = 'verified';"}
{"prompt": "Which of my properties have legal documents with unresolved compliance issues in the notes?", "response": "SELECT DISTINCT p.property_id, p.type FROM Properties p JOIN LegalDocuments ld ON p.property_id = ld.property_id WHERE ld.notes LIKE '%unresolved compliance%';"}
{"prompt": "What is the most recent legal document uploaded for each property?", "response": "SELECT ld1.* FROM LegalDocuments ld1 JOIN (SELECT property_id, MAX(uploaded_on) AS max_date FROM LegalDocuments GROUP BY property_id) ld2 ON ld1.property_id = ld2.property_id AND ld1.uploaded_on = ld2.max_date;"}
{"prompt": "Appraisers/Valuation Experts", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Can Arjun see the most recent valuation reports he’s created for properties this month?", "response": "SELECT * FROM Valuations WHERE expert_name = 'Arjun' AND valuation_date >= '2025-06-01' ORDER BY valuation_date DESC;"}
{"prompt": "Which properties have Arjun appraised more than once in the past year?", "response": "SELECT property_id, COUNT(*) as appraisal_count FROM Valuations WHERE expert_name = 'Arjun' AND valuation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY property_id HAVING appraisal_count > 1;"}
{"prompt": "What are the latest estimated values for all properties Arjun has appraised?", "response": "SELECT property_id, estimated_value, valuation_date FROM Valuations WHERE expert_name = 'Arjun' ORDER BY valuation_date DESC;"}
{"prompt": "Can Arjun review the property features and location for his most recent appraisal?", "response": "SELECT p.* FROM Properties p JOIN Valuations v ON p.property_id = v.property_id WHERE v.expert_name = 'Arjun' ORDER BY v.valuation_date DESC LIMIT 1;"}
{"prompt": "Which properties have seen a significant change in estimated value over the last six months?", "response": "SELECT property_id FROM Valuations WHERE valuation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY property_id HAVING MAX(estimated_value) - MIN(estimated_value) > 100000;"}
{"prompt": "What recent sales data can Arjun access for properties in a specific neighborhood, like 'Green Acres'?", "response": "SELECT * FROM Properties WHERE location LIKE '%Green Acres%' AND status = 'sold' ORDER BY listing_date DESC;"}
{"prompt": "For a given property, what is the full history of valuation estimates and notes?", "response": "SELECT estimated_value, notes, valuation_date FROM Valuations WHERE property_id = ? ORDER BY valuation_date DESC;"}
{"prompt": "Which properties appraised by Arjun are currently listed for sale?", "response": "SELECT p.* FROM Properties p JOIN Valuations v ON p.property_id = v.property_id WHERE v.expert_name = 'Arjun' AND p.status = 'for sale';"}
{"prompt": "What is the average estimated value for apartments Arjun has appraised this year?", "response": "SELECT AVG(estimated_value) FROM Valuations v JOIN Properties p ON v.property_id = p.property_id WHERE v.expert_name = 'Arjun' AND p.type = 'apartment' AND v.valuation_date >= '2025-01-01';"}
{"prompt": "Can Arjun find properties with recent valuations and compare them to their last sale price?", "response": "SELECT v.property_id, v.estimated_value, p.price AS last_sale_price, v.valuation_date FROM Valuations v JOIN Properties p ON v.property_id = p.property_id WHERE v.valuation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND p.status = 'sold';"}
{"prompt": "Which of Arjun’s appraisals include notes about neighborhood trends?", "response": "SELECT * FROM Valuations WHERE expert_name = 'Arjun' AND notes LIKE '%neighborhood trend%';"}
{"prompt": "What’s the highest estimated value Arjun has assigned in the last year?", "response": "SELECT MAX(estimated_value) FROM Valuations WHERE expert_name = 'Arjun' AND valuation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}
{"prompt": "Which properties have been appraised by multiple experts, including Arjun?", "response": "SELECT property_id FROM Valuations WHERE expert_name = 'Arjun' AND property_id IN (SELECT property_id FROM Valuations WHERE expert_name != 'Arjun');"}
{"prompt": "Can Arjun see all properties he’s appraised that are now rented out?", "response": "SELECT p.* FROM Properties p JOIN Rentals r ON p.property_id = r.property_id JOIN Valuations v ON p.property_id = v.property_id WHERE v.expert_name = 'Arjun' AND p.status = 'rented';"}
{"prompt": "For a specific property, what’s the most recent valuation and who performed it?", "response": "SELECT estimated_value, expert_name, valuation_date FROM Valuations WHERE property_id = ? ORDER BY valuation_date DESC LIMIT 1;"}
{"prompt": "Which properties appraised by Arjun have legal documents pending verification?", "response": "SELECT DISTINCT p.property_id FROM Properties p JOIN Valuations v ON p.property_id = v.property_id JOIN LegalDocuments ld ON p.property_id = ld.property_id WHERE v.expert_name = 'Arjun' AND ld.status != 'verified';"}
{"prompt": "Has Arjun appraised any properties that are currently the subject of tenant inquiries?", "response": "SELECT DISTINCT p.property_id FROM Properties p JOIN Valuations v ON p.property_id = v.property_id JOIN Inquiries i ON p.property_id = i.property_id WHERE v.expert_name = 'Arjun';"}
{"prompt": "What’s the distribution of estimated values for all properties Arjun has appraised this month?", "response": "SELECT estimated_value FROM Valuations WHERE expert_name = 'Arjun' AND valuation_date >= '2025-06-01';"}
{"prompt": "Can Arjun access analytics reports related to his valuation work?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT DISTINCT expert_name FROM Valuations WHERE expert_name = 'Arjun');"}
{"prompt": "Which properties have the largest difference between Arjun’s valuation and the last expert’s estimate?", "response": "SELECT v1.property_id, ABS(v1.estimated_value - v2.estimated_value) AS value_difference FROM Valuations v1 JOIN Valuations v2 ON v1.property_id = v2.property_id AND v2.valuation_date < v1.valuation_date WHERE v1.expert_name = 'Arjun' ORDER BY value_difference DESC;"}
{"prompt": "Platform Administrators", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Can Asha get a list of all users on the platform, including sellers, buyers, and agents?", "response": "SELECT name, email, phone, 'Seller' AS role FROM Sellers UNION ALL SELECT name, email, phone, 'Buyer' AS role FROM Buyers UNION ALL SELECT name, email, phone, 'Agent' AS role FROM Agents;"}
{"prompt": "Which sellers have the most properties listed on RealEstateDB?", "response": "SELECT name, listed_properties FROM Sellers ORDER BY listed_properties DESC;"}
{"prompt": "Are there any buyers who haven’t provided a phone number?", "response": "SELECT name, email FROM Buyers WHERE phone IS NULL OR phone = '';"}
{"prompt": "Can Asha see all agents who joined the platform in the last year?", "response": "SELECT * FROM Agents WHERE licensed_since >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}
{"prompt": "Which properties have been listed in the past 30 days?", "response": "SELECT * FROM Properties WHERE listing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "Are there any properties with missing or unusually low prices?", "response": "SELECT * FROM Properties WHERE price IS NULL OR price < 10000;"}
{"prompt": "Can Asha review all inquiries that are still open or unresolved?", "response": "SELECT * FROM Inquiries WHERE status = 'open';"}
{"prompt": "Which appointments are scheduled for today across the platform?", "response": "SELECT * FROM Appointments WHERE DATE(scheduled_on) = CURRENT_DATE;"}
{"prompt": "How many rental agreements are currently active on the platform?", "response": "SELECT COUNT(*) FROM Rentals WHERE start_date <= CURRENT_DATE AND (end_date IS NULL OR end_date >= CURRENT_DATE);"}
{"prompt": "Are there any legal documents pending verification or flagged as rejected?", "response": "SELECT * FROM LegalDocuments WHERE status IN ('pending', 'rejected');"}
{"prompt": "What’s the average time between a property being listed and its first inquiry?", "response": "SELECT AVG(DATEDIFF(MIN(i.inquiry_date), p.listing_date)) AS avg_days_to_first_inquiry FROM Properties p JOIN Inquiries i ON p.property_id = i.property_id GROUP BY p.property_id;"}
{"prompt": "Which marketing campaigns have generated the most leads this month?", "response": "SELECT * FROM MarketingCampaigns WHERE start_date >= '2025-06-01' ORDER BY leads_generated DESC;"}
{"prompt": "Can Asha see all analytics reports created in the last week for system monitoring?", "response": "SELECT * FROM AnalyticsReports WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which users have submitted the most inquiries or scheduled the most appointments?", "response": "SELECT b.name, COUNT(i.inquiry_id) AS total_inquiries FROM Buyers b JOIN Inquiries i ON b.buyer_id = i.buyer_id GROUP BY b.name ORDER BY total_inquiries DESC;"}
{"prompt": "Are there any properties with expired rental agreements that haven’t been updated?", "response": "SELECT p.* FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE r.end_date < CURRENT_DATE AND p.status = 'rented';"}
{"prompt": "Which agents are currently assigned to the most appointments?", "response": "SELECT a.name, COUNT(ap.appointment_id) AS total_appointments FROM Agents a JOIN Appointments ap ON a.agent_id = ap.agent_id GROUP BY a.name ORDER BY total_appointments DESC;"}
{"prompt": "Can Asha get a summary of all legal documents uploaded in the last month?", "response": "SELECT document_type, COUNT(*) AS total_uploaded FROM LegalDocuments WHERE uploaded_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY document_type;"}
{"prompt": "Are there any properties that have never received an inquiry?", "response": "SELECT property_id FROM Properties WHERE property_id NOT IN (SELECT DISTINCT property_id FROM Inquiries);"}
{"prompt": "Which users have interacted with the platform most frequently in the past month?", "response": "SELECT b.name, COUNT(i.inquiry_id) + COUNT(a.appointment_id) AS total_interactions FROM Buyers b LEFT JOIN Inquiries i ON b.buyer_id = i.buyer_id LEFT JOIN Appointments a ON b.buyer_id = a.buyer_id WHERE (i.inquiry_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) OR a.scheduled_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) GROUP BY b.name ORDER BY total_interactions DESC;"}
{"prompt": "Can Asha get a list of all properties with legal documents that are still pending or need revision?", "response": "SELECT DISTINCT p.property_id, p.type, ld.document_type, ld.status FROM Properties p JOIN LegalDocuments ld ON p.property_id = ld.property_id WHERE ld.status IN ('pending', 'needs revision');"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which marketing campaigns has Anita’s team launched in the past month to attract new users?", "response": "SELECT * FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the total reach and leads generated by all marketing campaigns this quarter?", "response": "SELECT SUM(reach) AS total_reach, SUM(leads_generated) AS total_leads FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Which campaigns specifically targeted real estate professionals?", "response": "SELECT * FROM MarketingCampaigns WHERE platform LIKE '%professional%';"}
{"prompt": "How effective have this month’s campaigns been in generating leads?", "response": "SELECT platform, SUM(leads_generated) AS leads FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY platform;"}
{"prompt": "What are the most recent analytics reports related to marketing activities?", "response": "SELECT * FROM AnalyticsReports WHERE report_type = 'marketing' ORDER BY created_on DESC;"}
{"prompt": "Can Anita see the trend in user sign-ups since the last major campaign launch?", "response": "SELECT created_on, summary FROM AnalyticsReports WHERE report_type = 'user sign-up' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Which marketing platforms have brought in the highest number of leads this year?", "response": "SELECT platform, SUM(leads_generated) AS total_leads FROM MarketingCampaigns WHERE start_date >= '2025-01-01' GROUP BY platform ORDER BY total_leads DESC;"}
{"prompt": "How does user engagement compare before and after recent marketing campaigns?", "response": "SELECT created_on, summary FROM AnalyticsReports WHERE report_type = 'user engagement' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 2 MONTH);"}
{"prompt": "What is the average reach per campaign for the last six months?", "response": "SELECT AVG(reach) FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"}
{"prompt": "Which campaigns have ended but generated above-average leads?", "response": "SELECT * FROM MarketingCampaigns WHERE end_date < CURRENT_DATE AND leads_generated > (SELECT AVG(leads_generated) FROM MarketingCampaigns);"}
{"prompt": "Which properties were featured in the most successful campaigns?", "response": "SELECT property_id, MAX(leads_generated) AS max_leads FROM MarketingCampaigns GROUP BY property_id ORDER BY max_leads DESC;"}
{"prompt": "Can Anita review all campaigns run on social media platforms?", "response": "SELECT * FROM MarketingCampaigns WHERE platform LIKE '%social%';"}
{"prompt": "What’s the latest summary of user behavior from analytics reports?", "response": "SELECT summary FROM AnalyticsReports WHERE report_type = 'user behavior' ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "Which campaigns are currently active and still running?", "response": "SELECT * FROM MarketingCampaigns WHERE end_date >= CURRENT_DATE;"}
{"prompt": "How many campaigns have been launched for properties in high-demand locations?", "response": "SELECT COUNT(*) FROM MarketingCampaigns mc JOIN Properties p ON mc.property_id = p.property_id WHERE p.location LIKE '%high-demand%';"}
{"prompt": "What is the total number of campaigns Anita’s team has managed so far?", "response": "SELECT COUNT(*) FROM MarketingCampaigns;"}
{"prompt": "Which campaigns have the highest reach-to-lead conversion rate?", "response": "SELECT campaign_id, (leads_generated*1.0/reach) AS conversion_rate FROM MarketingCampaigns WHERE reach > 0 ORDER BY conversion_rate DESC;"}
{"prompt": "Can Anita see all analytics reports created in the last month for marketing review?", "response": "SELECT * FROM AnalyticsReports WHERE report_type = 'marketing' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which campaigns targeted both buyers and sellers?", "response": "SELECT * FROM MarketingCampaigns WHERE platform LIKE '%buyer%' AND platform LIKE '%seller%';"}
{"prompt": "What’s the average number of leads generated per campaign for the past year?", "response": "SELECT AVG(leads_generated) FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "What are Karan’s key skills as listed in his profile?", "response": "SELECT skills FROM Agents WHERE name = 'Karan';"}
{"prompt": "Can Karan see the trend in property listings over the past six months?", "response": "SELECT MONTH(listing_date) AS month, COUNT(*) AS total_listed FROM Properties WHERE listing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which property types are most commonly listed on RealEstateDB?", "response": "SELECT type, COUNT(*) AS count FROM Properties GROUP BY type ORDER BY count DESC;"}
{"prompt": "What is the average price of properties listed in the last month?", "response": "SELECT AVG(price) FROM Properties WHERE listing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which locations have seen the highest number of new listings recently?", "response": "SELECT location, COUNT(*) AS total FROM Properties WHERE listing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY location ORDER BY total DESC;"}
{"prompt": "How many properties have changed status from ‘for sale’ to ‘sold’ this year?", "response": "SELECT COUNT(*) FROM Properties WHERE status = 'sold' AND listing_date >= '2025-01-01';"}
{"prompt": "What’s the average size of commercial properties listed on the platform?", "response": "SELECT AVG(size_sqft) FROM Properties WHERE type = 'commercial';"}
{"prompt": "Which buyers have made the most inquiries in the past quarter?", "response": "SELECT b.name, COUNT(i.inquiry_id) AS inquiry_count FROM Buyers b JOIN Inquiries i ON b.buyer_id = i.buyer_id WHERE i.inquiry_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY b.name ORDER BY inquiry_count DESC;"}
{"prompt": "What’s the monthly trend in rental agreements signed this year?", "response": "SELECT MONTH(start_date) AS month, COUNT(*) AS rentals_signed FROM Rentals WHERE start_date >= '2025-01-01' GROUP BY month ORDER BY month;"}
{"prompt": "Which properties have the highest average monthly rent?", "response": "SELECT p.property_id, p.location, AVG(r.monthly_rent) AS avg_rent FROM Properties p JOIN Rentals r ON p.property_id = r.property_id GROUP BY p.property_id, p.location ORDER BY avg_rent DESC;"}
{"prompt": "What is the bounce rate trend for the platform in the last 30 days?", "response": "SELECT created_on, summary FROM AnalyticsReports WHERE report_type = 'bounce rate' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "Which marketing campaigns generated the most leads last quarter?", "response": "SELECT * FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) ORDER BY leads_generated DESC;"}
{"prompt": "What’s the average time between a property being listed and its first inquiry?", "response": "SELECT AVG(DATEDIFF(MIN(i.inquiry_date), p.listing_date)) AS avg_days_to_first_inquiry FROM Properties p JOIN Inquiries i ON p.property_id = i.property_id GROUP BY p.property_id;"}
{"prompt": "Which agents have scheduled the most appointments in the last month?", "response": "SELECT ag.name, COUNT(a.appointment_id) AS total_appointments FROM Agents ag JOIN Appointments a ON ag.agent_id = a.agent_id WHERE a.scheduled_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY ag.name ORDER BY total_appointments DESC;"}
{"prompt": "How many legal documents have been uploaded for properties listed in the past year?", "response": "SELECT COUNT(*) FROM LegalDocuments WHERE property_id IN (SELECT property_id FROM Properties WHERE listing_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));"}
{"prompt": "What’s the average estimated value of properties appraised in the last three months?", "response": "SELECT AVG(estimated_value) FROM Valuations WHERE valuation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Which locations have the highest number of active rentals right now?", "response": "SELECT p.location, COUNT(*) AS active_rentals FROM Properties p JOIN Rentals r ON p.property_id = r.property_id WHERE r.start_date <= CURRENT_DATE AND (r.end_date IS NULL OR r.end_date >= CURRENT_DATE) GROUP BY p.location ORDER BY active_rentals DESC;"}
{"prompt": "What’s the total number of inquiries and appointments made in the last month?", "response": "SELECT (SELECT count(*) FROM Inquiries WHERE inquiry_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) + (SELECT count(*) FROM Appointments WHERE scheduled_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AS total_interactions;"}
{"prompt": "Which properties have the most legal documents pending verification?", "response": "SELECT property_id, COUNT(*) AS pending_docs FROM LegalDocuments WHERE status = 'pending' GROUP BY property_id ORDER BY pending_docs DESC;"}
{"prompt": "Can Karan get a summary of all analytics reports created this month for management review?", "response": "SELECT * FROM AnalyticsReports WHERE created_on >= '2025-06-01';"}
{"prompt": "nan", "response": "nan"}
{"prompt": "OnlineLearning", "response": "nan"}
{"prompt": "Students/Learners", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which courses is Anika currently enrolled in?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN Enrollments e ON c.course_id = e.course_id WHERE e.student_id = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "What study materials or modules are available for Anika in her enrolled courses?", "response": "SELECT m.module_id, m.title, m.content FROM Modules m WHERE m.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika'));"}
{"prompt": "Has Anika completed all modules in any of her courses?", "response": "SELECT course_id, COUNT(*) AS completed_modules FROM ProgressTracking WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika') AND status = 'completed' GROUP BY course_id;"}
{"prompt": "What is Anika’s progress status in the course 'Introduction to Psychology'?", "response": "SELECT status, completion_date FROM ProgressTracking WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika') AND course_id = (SELECT course_id FROM Courses WHERE title = 'Introduction to Psychology');"}
{"prompt": "Which assignments are pending submission for Anika in her courses?", "response": "SELECT a.assignment_id, a.title, a.due_date FROM Assignments a WHERE a.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika')) AND a.assignment_id NOT IN (SELECT assignment_id FROM Submissions WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika'));"}
{"prompt": "What feedback has Anika received on her assignments?", "response": "SELECT s.assignment_id, s.grade, s.feedback FROM Submissions s WHERE s.student_id = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "How many quizzes has Anika completed in her courses?", "response": "SELECT COUNT(*) FROM Assignments a JOIN Submissions s ON a.assignment_id = s.assignment_id WHERE a.title LIKE '%quiz%' AND s.student_id = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "What is Anika’s average grade across all her submitted assignments?", "response": "SELECT AVG(grade) FROM Submissions WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "Has Anika received any certificates for completed courses?", "response": "SELECT c.certificate_id, co.title, c.issue_date FROM Certifications c JOIN Courses co ON c.course_id = co.course_id WHERE c.student_id = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "What feedback ratings has Anika given for her courses?", "response": "SELECT f.course_id, f.rating, f.comments FROM Feedback f WHERE f.given_by = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "Which modules did Anika complete most recently?", "response": "SELECT module_id, completion_date FROM ProgressTracking WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika') AND status = 'completed' ORDER BY completion_date DESC;"}
{"prompt": "Has Anika participated in any course content reviews or peer feedback?", "response": "SELECT * FROM ContentReviews WHERE reviewed_by = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "What support tickets has Anika raised about her courses?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "Which courses has Anika rated with a score of 5?", "response": "SELECT course_id FROM Feedback WHERE given_by = (SELECT user_id FROM Users WHERE name = 'Anika') AND rating = 5;"}
{"prompt": "What is the completion status of all modules for Anika in the course 'Statistics 101'?", "response": "SELECT module_id, status FROM ProgressTracking WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika') AND course_id = (SELECT course_id FROM Courses WHERE title = 'Statistics 101');"}
{"prompt": "Has Anika submitted all assignments for her enrolled courses?", "response": "SELECT a.assignment_id, a.title FROM Assignments a WHERE a.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika')) AND a.assignment_id NOT IN (SELECT assignment_id FROM Submissions WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika'));"}
{"prompt": "What is the average rating Anika has given across all her course feedback?", "response": "SELECT AVG(rating) FROM Feedback WHERE given_by = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "Has Anika received any feedback from instructors on her submissions?", "response": "SELECT s.assignment_id, s.feedback FROM Submissions s WHERE s.student_id = (SELECT user_id FROM Users WHERE name = 'Anika') AND s.feedback IS NOT NULL;"}
{"prompt": "What is Anika’s enrollment status in each of her courses?", "response": "SELECT e.course_id, c.title, e.status FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = (SELECT user_id FROM Users WHERE name = 'Anika');"}
{"prompt": "Which modules are still in progress for Anika in her current courses?", "response": "SELECT module_id, course_id FROM ProgressTracking WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Anika') AND status = 'in progress';"}
{"prompt": "Instructors/Teachers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which courses has Rajesh created and is currently teaching on the platform?", "response": "SELECT course_id, title FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh');"}
{"prompt": "What modules has Rajesh uploaded for his courses?", "response": "SELECT m.module_id, m.title, m.course_id FROM Modules m WHERE m.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "Which assignments or quizzes has Rajesh created for his students?", "response": "SELECT assignment_id, title, due_date FROM Assignments WHERE course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "How does Rajesh track the progress of students in his courses?", "response": "SELECT pt.student_id, pt.course_id, pt.module_id, pt.status, pt.completion_date FROM ProgressTracking pt WHERE pt.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "Which students are struggling or have not completed modules in Rajesh’s courses?", "response": "SELECT pt.student_id, pt.course_id, pt.module_id FROM ProgressTracking pt WHERE pt.status != 'completed' AND pt.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "What feedback has Rajesh provided to students on their assignment submissions?", "response": "SELECT s.submission_id, s.assignment_id, s.student_id, s.feedback FROM Submissions s WHERE s.assignment_id IN (SELECT assignment_id FROM Assignments WHERE course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')));"}
{"prompt": "Which students have received the highest grades in Rajesh’s courses?", "response": "SELECT s.student_id, MAX(s.grade) AS max_grade FROM Submissions s WHERE s.assignment_id IN (SELECT assignment_id FROM Assignments WHERE course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'))) GROUP BY s.student_id ORDER BY max_grade DESC;"}
{"prompt": "What is the average grade for assignments in each of Rajesh’s courses?", "response": "SELECT a.course_id, AVG(s.grade) AS avg_grade FROM Assignments a JOIN Submissions s ON a.assignment_id = s.assignment_id WHERE a.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')) GROUP BY a.course_id;"}
{"prompt": "Which of Rajesh’s courses have the highest student enrollment?", "response": "SELECT c.course_id, c.title, COUNT(e.enrollment_id) AS total_enrolled FROM Courses c JOIN Enrollments e ON c.course_id = e.course_id WHERE c.created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh') GROUP BY c.course_id, c.title ORDER BY total_enrolled DESC;"}
{"prompt": "What feedback and ratings have students given for Rajesh’s courses?", "response": "SELECT f.course_id, f.rating, f.comments FROM Feedback f WHERE f.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "Has Rajesh’s course content been reviewed or approved by other instructors?", "response": "SELECT cr.review_date, cr.status, u.name AS reviewed_by FROM ContentReviews cr JOIN Users u ON cr.reviewed_by = u.user_id WHERE cr.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "Which students have earned certificates in Rajesh’s courses?", "response": "SELECT c.student_id, c.course_id, c.issue_date FROM Certifications c WHERE c.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh'));"}
{"prompt": "What support tickets have been raised by students in Rajesh’s courses?", "response": "SELECT st.ticket_id, st.subject, st.status FROM SupportTickets st WHERE st.raised_by IN (SELECT e.student_id FROM Enrollments e WHERE e.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')));"}
{"prompt": "Which modules in Rajesh’s courses are most frequently marked as incomplete?", "response": "SELECT module_id, COUNT(*) AS incomplete_count FROM ProgressTracking WHERE status != 'completed' AND course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')) GROUP BY module_id ORDER BY incomplete_count DESC;"}
{"prompt": "What is the average completion rate for Rajesh’s courses according to analytics reports?", "response": "SELECT AVG(average_completion_rate) FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Rajesh');"}
{"prompt": "Which assignments in Rajesh’s courses have the lowest average grades?", "response": "SELECT a.assignment_id, a.title, AVG(s.grade) AS avg_grade FROM Assignments a JOIN Submissions s ON a.assignment_id = s.assignment_id WHERE a.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')) GROUP BY a.assignment_id, a.title ORDER BY avg_grade ASC;"}
{"prompt": "Has Rajesh created any new courses in the past month?", "response": "SELECT course_id, title, created_on FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh') AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which students have completed all modules in any of Rajesh’s courses?", "response": "SELECT pt.student_id, pt.course_id FROM ProgressTracking pt WHERE pt.status = 'completed' AND pt.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')) GROUP BY pt.student_id, pt.course_id;"}
{"prompt": "What is the enrollment trend for Rajesh’s courses over the last six months?", "response": "SELECT MONTH(enrollment_date) AS month, COUNT(*) AS total_enrollments FROM Enrollments WHERE course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')) AND enrollment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which assignments in Rajesh’s courses have not yet been submitted by any student?", "response": "SELECT a.assignment_id, a.title FROM Assignments a WHERE a.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Rajesh')) AND a.assignment_id NOT IN (SELECT assignment_id FROM Submissions);"}
{"prompt": "Course Designers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which courses has Sneha designed or contributed to on the platform?", "response": "SELECT course_id, title FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha');"}
{"prompt": "What modules has Sneha developed for her courses?", "response": "SELECT m.module_id, m.title, m.course_id FROM Modules m WHERE m.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha'));"}
{"prompt": "Which assignments or assessments has Sneha created for her courses?", "response": "SELECT assignment_id, title, due_date FROM Assignments WHERE course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha'));"}
{"prompt": "How does Sneha use learner feedback to improve her courses?", "response": "SELECT f.course_id, f.rating, f.comments FROM Feedback f WHERE f.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha'));"}
{"prompt": "What analytics reports are available to help Sneha refine her course content?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Sneha');"}
{"prompt": "Which of Sneha’s courses have the highest student ratings?", "response": "SELECT f.course_id, AVG(f.rating) AS avg_rating FROM Feedback f WHERE f.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) GROUP BY f.course_id ORDER BY avg_rating DESC;"}
{"prompt": "What learner feedback has Sneha received on her interactive modules?", "response": "SELECT f.course_id, f.comments FROM Feedback f JOIN Modules m ON f.course_id = m.course_id WHERE m.content LIKE '%interactive%' AND m.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha'));"}
{"prompt": "Which modules in Sneha’s courses have the highest completion rates?", "response": "SELECT pt.module_id, COUNT(*) AS completions FROM ProgressTracking pt WHERE pt.status = 'completed' AND pt.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) GROUP BY pt.module_id ORDER BY completions DESC;"}
{"prompt": "What is the average completion rate for Sneha’s courses according to analytics reports?", "response": "SELECT AVG(average_completion_rate) FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Sneha');"}
{"prompt": "Which of Sneha’s courses have received content reviews in the last month?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE c.created_by = (SELECT user_id FROM Users WHERE name = 'Sneha') AND cr.review_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which assignments in Sneha’s courses have the lowest average grades?", "response": "SELECT a.assignment_id, a.title, AVG(s.grade) AS avg_grade FROM Assignments a JOIN Submissions s ON a.assignment_id = s.assignment_id WHERE a.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) GROUP BY a.assignment_id, a.title ORDER BY avg_grade ASC;"}
{"prompt": "How many students are currently enrolled in each of Sneha’s courses?", "response": "SELECT c.course_id, c.title, COUNT(e.enrollment_id) AS total_students FROM Courses c LEFT JOIN Enrollments e ON c.course_id = e.course_id WHERE c.created_by = (SELECT user_id FROM Users WHERE name = 'Sneha') GROUP BY c.course_id, c.title;"}
{"prompt": "What feedback have students given about the usability of Sneha’s courses?", "response": "SELECT f.course_id, f.comments FROM Feedback f WHERE f.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) AND f.comments LIKE '%usability%';"}
{"prompt": "Which modules designed by Sneha are most often marked as “in progress” by students?", "response": "SELECT pt.module_id, COUNT(*) AS in_progress_count FROM ProgressTracking pt WHERE pt.status = 'in progress' AND pt.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) GROUP BY pt.module_id ORDER BY in_progress_count DESC;"}
{"prompt": "Has Sneha created any new courses in the past month?", "response": "SELECT course_id, title, created_on FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha') AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which of Sneha’s courses have the most diverse range of modules?", "response": "SELECT c.course_id, COUNT(m.module_id) AS module_count FROM Courses c JOIN Modules m ON c.course_id = m.course_id WHERE c.created_by = (SELECT user_id FROM Users WHERE name = 'Sneha') GROUP BY c.course_id ORDER BY module_count DESC;"}
{"prompt": "What is the trend in student enrollments for Sneha’s courses over the last six months?", "response": "SELECT MONTH(e.enrollment_date) AS month, COUNT(*) AS total_enrollments FROM Enrollments e WHERE e.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) AND e.enrollment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which assignments in Sneha’s courses have not yet been submitted by any student?", "response": "SELECT a.assignment_id, a.title FROM Assignments a WHERE a.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) AND a.assignment_id NOT IN (SELECT assignment_id FROM Submissions);"}
{"prompt": "Which of Sneha’s courses have the highest average feedback rating from students?", "response": "SELECT f.course_id, AVG(f.rating) AS avg_rating FROM Feedback f WHERE f.course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) GROUP BY f.course_id ORDER BY avg_rating DESC;"}
{"prompt": "What are the most common comments or suggestions from students in Sneha’s courses?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE course_id IN (SELECT course_id FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sneha')) GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Content Reviewers", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which courses has Priya reviewed on the platform?", "response": "SELECT DISTINCT c.course_id, c.title FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya');"}
{"prompt": "What is the status of Priya’s most recent content reviews?", "response": "SELECT cr.course_id, cr.status, cr.review_date FROM ContentReviews cr WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') ORDER BY cr.review_date DESC;"}
{"prompt": "Which course modules have been reviewed by Priya in the last month?", "response": "SELECT m.module_id, m.title, cr.review_date FROM Modules m JOIN ContentReviews cr ON m.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.review_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What feedback or comments has Priya given during her content reviews?", "response": "SELECT cr.course_id, cr.comments, cr.review_date FROM ContentReviews cr WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya');"}
{"prompt": "Which courses reviewed by Priya are still pending approval?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.status = 'pending';"}
{"prompt": "Which assignments in reviewed courses did Priya flag for revision?", "response": "SELECT a.assignment_id, a.title FROM Assignments a JOIN ContentReviews cr ON a.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.status = 'needs revision';"}
{"prompt": "What is the average time Priya takes to complete a content review?", "response": "SELECT AVG(DATEDIFF(cr.review_date, c.created_on)) AS avg_review_time FROM ContentReviews cr JOIN Courses c ON cr.course_id = c.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya');"}
{"prompt": "Which courses reviewed by Priya have been approved and are now live?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.status = 'approved';"}
{"prompt": "What are the most common issues Priya identifies in her reviews?", "response": "SELECT comments, COUNT(*) AS frequency FROM ContentReviews WHERE reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Which instructors received feedback from Priya on their courses?", "response": "SELECT DISTINCT u.user_id, u.name FROM Users u JOIN Courses c ON u.user_id = c.created_by JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya');"}
{"prompt": "Which courses reviewed by Priya required accessibility improvements?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.comments LIKE '%accessibility%';"}
{"prompt": "How many courses has Priya reviewed in total?", "response": "SELECT COUNT(DISTINCT course_id) FROM ContentReviews WHERE reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya');"}
{"prompt": "Which courses reviewed by Priya have received the highest feedback ratings from students?", "response": "SELECT f.course_id, AVG(f.rating) AS avg_rating FROM Feedback f WHERE f.course_id IN (SELECT course_id FROM ContentReviews WHERE reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya')) GROUP BY f.course_id ORDER BY avg_rating DESC;"}
{"prompt": "What is the approval status of all courses Priya has reviewed this year?", "response": "SELECT cr.course_id, cr.status, cr.review_date FROM ContentReviews cr WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND YEAR(cr.review_date) = YEAR(CURRENT_DATE);"}
{"prompt": "Which course categories has Priya reviewed most frequently?", "response": "SELECT c.category, COUNT(*) AS review_count FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') GROUP BY c.category ORDER BY review_count DESC;"}
{"prompt": "Which courses reviewed by Priya have not yet received any student feedback?", "response": "SELECT c.course_id, c.title FROM Courses c WHERE c.course_id IN (SELECT course_id FROM ContentReviews WHERE reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya')) AND c.course_id NOT IN (SELECT course_id FROM Feedback);"}
{"prompt": "What is the most recent comment Priya has made in a content review?", "response": "SELECT comments FROM ContentReviews WHERE reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "Which of Priya’s reviews have led to courses being sent back for revision?", "response": "SELECT cr.course_id, cr.review_date FROM ContentReviews cr WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.status = 'needs revision';"}
{"prompt": "Has Priya reviewed any courses in the 'Computer Science' category recently?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id WHERE c.category = 'Computer Science' AND cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') AND cr.review_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which courses reviewed by Priya have the highest number of modules?", "response": "SELECT c.course_id, c.title, COUNT(m.module_id) AS module_count FROM Courses c JOIN ContentReviews cr ON c.course_id = cr.course_id JOIN Modules m ON c.course_id = m.course_id WHERE cr.reviewed_by = (SELECT user_id FROM Users WHERE name = 'Priya') GROUP BY c.course_id, c.title ORDER BY module_count DESC;"}
{"prompt": "Platform Administrators", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Can Sanjay get a complete list of all users registered on EduCore, along with their roles and registration dates?", "response": "SELECT user_id, name, role, email, phone, registration_date FROM Users;"}
{"prompt": "Which users have been assigned the “administrator” role on the platform?", "response": "SELECT user_id, name, email FROM Users WHERE role = 'administrator';"}
{"prompt": "Are there any users who registered in the last month but haven’t been assigned a role yet?", "response": "SELECT user_id, name, email FROM Users WHERE role IS NULL AND registration_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which courses have been created or approved by Sanjay?", "response": "SELECT course_id, title, created_on FROM Courses WHERE created_by = (SELECT user_id FROM Users WHERE name = 'Sanjay') OR approved_by = (SELECT user_id FROM Users WHERE name = 'Sanjay');"}
{"prompt": "Can Sanjay review all modules and assignments associated with a specific course?", "response": "SELECT m.module_id, m.title, a.assignment_id, a.title AS assignment_title FROM Modules m LEFT JOIN Assignments a ON m.course_id = a.course_id WHERE m.course_id = ?;"}
{"prompt": "What is the current status of all support tickets assigned to Sanjay?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE assigned_to = (SELECT user_id FROM Users WHERE name = 'Sanjay');"}
{"prompt": "Which support tickets are still open and were raised by instructors?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE status = 'open' AND raised_by IN (SELECT user_id FROM Users WHERE role = 'instructor');"}
{"prompt": "Can Sanjay see all courses that have not yet been approved?", "response": "SELECT course_id, title, created_on FROM Courses WHERE approved_by IS NULL;"}
{"prompt": "Which users have submitted the most support tickets in the last quarter?", "response": "SELECT raised_by, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY raised_by ORDER BY ticket_count DESC;"}
{"prompt": "What is the trend in new user registrations over the past six months?", "response": "SELECT MONTH(registration_date) AS month, COUNT(*) AS registrations FROM Users WHERE registration_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which courses have the highest number of active enrollments right now?", "response": "SELECT e.course_id, c.title, COUNT(*) AS active_enrollments FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.status = 'active' GROUP BY e.course_id, c.title ORDER BY active_enrollments DESC;"}
{"prompt": "Can Sanjay review all analytics reports generated by administrators in the last month?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by IN (SELECT user_id FROM Users WHERE role = 'administrator') AND report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which students have completed all modules in any of their enrolled courses?", "response": "SELECT pt.student_id, pt.course_id FROM ProgressTracking pt WHERE pt.status = 'completed' GROUP BY pt.student_id, pt.course_id;"}
{"prompt": "Are there any courses that have not received a content review yet?", "response": "SELECT course_id, title FROM Courses WHERE course_id NOT IN (SELECT DISTINCT course_id FROM ContentReviews);"}
{"prompt": "Which assignments have the highest number of late submissions?", "response": "SELECT a.assignment_id, a.title, COUNT(s.submission_id) AS late_count FROM Assignments a JOIN Submissions s ON a.assignment_id = s.assignment_id WHERE s.submitted_on > a.due_date GROUP BY a.assignment_id, a.title ORDER BY late_count DESC;"}
{"prompt": "What is the average course completion rate reported in the latest analytics report?", "response": "SELECT average_completion_rate FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which users have been most active in submitting feedback in the last month?", "response": "SELECT given_by, COUNT(*) AS feedback_count FROM Feedback WHERE submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY given_by ORDER BY feedback_count DESC;"}
{"prompt": "Are there any support tickets raised about system security or privacy issues?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE subject LIKE '%security%' OR subject LIKE '%privacy%' OR message LIKE '%security%' OR message LIKE '%privacy%';"}
{"prompt": "Which courses have the most modules, indicating complex learning structures?", "response": "SELECT course_id, COUNT(module_id) AS module_count FROM Modules GROUP BY course_id ORDER BY module_count DESC;"}
{"prompt": "Can Sanjay get a summary of all open support tickets and their assigned administrators?", "response": "SELECT ticket_id, subject, assigned_to, status FROM SupportTickets WHERE status = 'open';"}
{"prompt": "Academic Advisors", "response": "nan"}
{"prompt": "NL Question", "response": "SQL Query"}
{"prompt": "Which learners are currently enrolled in courses and what is their overall progress?", "response": "SELECT e.student_id, u.name, e.course_id, c.title, pt.status FROM Enrollments e JOIN Users u ON e.student_id = u.user_id JOIN Courses c ON e.course_id = c.course_id LEFT JOIN ProgressTracking pt ON e.student_id = pt.student_id AND e.course_id = pt.course_id;"}
{"prompt": "Can Meera see which students are at risk of falling behind based on incomplete modules or low grades?", "response": "SELECT pt.student_id, u.name, pt.course_id, pt.module_id, pt.status FROM ProgressTracking pt JOIN Users u ON pt.student_id = u.user_id WHERE pt.status != 'completed';"}
{"prompt": "Which students have shown declining engagement or have not logged in recently?", "response": "-- No login/activity tracking in schema; cannot answer with current schema."}
{"prompt": "What are the assessment scores for each student in their current courses?", "response": "SELECT s.student_id, u.name, a.course_id, a.title AS assignment_title, s.grade FROM Submissions s JOIN Assignments a ON s.assignment_id = a.assignment_id JOIN Users u ON s.student_id = u.user_id;"}
{"prompt": "Which learners have completed all modules and assignments in their enrolled courses?", "response": "SELECT pt.student_id, pt.course_id FROM ProgressTracking pt WHERE pt.status = 'completed' GROUP BY pt.student_id, pt.course_id HAVING count(*) = (SELECT count(*) FROM Modules WHERE course_id = pt.course_id);"}
{"prompt": "What feedback have students given about their learning experiences and support services?", "response": "SELECT f.given_by, u.name, f.course_id, f.rating, f.comments FROM Feedback f JOIN Users u ON f.given_by = u.user_id;"}
{"prompt": "Which students have received certificates for completing courses?", "response": "SELECT c.student_id, u.name, c.course_id, co.title, c.issue_date FROM Certifications c JOIN Users u ON c.student_id = u.user_id JOIN Courses co ON c.course_id = co.course_id;"}
{"prompt": "Can Meera review the progress of learners in skill-building workshops or elective courses?", "response": "SELECT e.student_id, u.name, e.course_id, c.title, pt.status FROM Enrollments e JOIN Users u ON e.student_id = u.user_id JOIN Courses c ON e.course_id = c.course_id LEFT JOIN ProgressTracking pt ON e.student_id = pt.student_id AND e.course_id = pt.course_id WHERE c.category LIKE '%workshop%' OR c.category LIKE '%elective%';"}
{"prompt": "What is the average completion rate for each course on the platform?", "response": "SELECT course_id, AVG(average_completion_rate) FROM AnalyticsReports GROUP BY course_id;"}
{"prompt": "Which students have requested academic counseling or support via support tickets?", "response": "SELECT st.raised_by, u.name, st.subject, st.status FROM SupportTickets st JOIN Users u ON st.raised_by = u.user_id WHERE st.subject LIKE '%counseling%' OR st.subject LIKE '%support%';"}
{"prompt": "What are the most common challenges or issues reported by learners in support tickets?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Which learners have participated in peer support groups or webinars?", "response": "-- No peer group/webinar tracking in schema; cannot answer with current schema."}
{"prompt": "Can Meera get a summary of all feedback ratings and comments for study skills and motivation workshops?", "response": "SELECT f.course_id, c.title, f.rating, f.comments FROM Feedback f JOIN Courses c ON f.course_id = c.course_id WHERE c.title LIKE '%study skills%' OR c.title LIKE '%motivation%';"}
{"prompt": "Which courses have the highest number of students at risk of not completing?", "response": "SELECT pt.course_id, COUNT(*) AS at_risk_count FROM ProgressTracking pt WHERE pt.status != 'completed' GROUP BY pt.course_id ORDER BY at_risk_count DESC;"}
{"prompt": "What is the trend in course completion rates over the past six months?", "response": "SELECT report_date, average_completion_rate FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) ORDER BY report_date;"}
{"prompt": "Which students have provided feedback mentioning “personalized support” or “advising”?", "response": "SELECT f.given_by, u.name, f.comments FROM Feedback f JOIN Users u ON f.given_by = u.user_id WHERE f.comments LIKE '%personalized support%' OR f.comments LIKE '%advising%';"}
{"prompt": "Can Meera see enrollment patterns and preferences for different course categories?", "response": "SELECT c.category, COUNT(e.enrollment_id) AS total_enrollments FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id GROUP BY c.category ORDER BY total_enrollments DESC;"}
{"prompt": "Which students have multiple active enrollments but low average grades?", "response": "SELECT s.student_id, u.name, AVG(s.grade) AS avg_grade FROM Submissions s JOIN Users u ON s.student_id = u.user_id WHERE s.student_id IN (SELECT student_id FROM Enrollments WHERE status = 'active' GROUP BY student_id HAVING COUNT(*) > 1) GROUP BY s.student_id, u.name HAVING avg_grade < 60;"}
{"prompt": "What is the most recent analytics report showing total students and active courses?", "response": "SELECT report_date, total_students, active_courses FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which courses have received the most positive feedback from learners?", "response": "SELECT f.course_id, c.title, AVG(f.rating) AS avg_rating FROM Feedback f JOIN Courses c ON f.course_id = c.course_id GROUP BY f.course_id, c.title ORDER BY avg_rating DESC;"}
{"prompt": "Parents/Guardians (for minors)", "response": "nan"}
{"prompt": "NL Question (Mrs. Sharma’s POV)", "response": "SQL Query"}
{"prompt": "Which courses is my child currently enrolled in?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN Enrollments e ON c.course_id = e.course_id WHERE e.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "Can I see my child’s attendance or progress status in each enrolled course?", "response": "SELECT e.course_id, c.title, pt.status, pt.completion_date FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id LEFT JOIN ProgressTracking pt ON e.student_id = pt.student_id AND e.course_id = pt.course_id WHERE e.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "What assignments are due soon for my child in their courses?", "response": "SELECT a.assignment_id, a.title, a.due_date FROM Assignments a WHERE a.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child')) AND a.due_date >= CURRENT_DATE ORDER BY a.due_date;"}
{"prompt": "Has my child submitted all their assignments on time?", "response": "SELECT a.assignment_id, a.title, a.due_date, s.submitted_on FROM Assignments a LEFT JOIN Submissions s ON a.assignment_id = s.assignment_id AND s.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child') WHERE a.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child'));"}
{"prompt": "What grades has my child received on their quizzes and assignments?", "response": "SELECT s.assignment_id, a.title, s.grade FROM Submissions s JOIN Assignments a ON s.assignment_id = a.assignment_id WHERE s.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "Which modules has my child completed in their current courses?", "response": "SELECT pt.course_id, pt.module_id, m.title, pt.completion_date FROM ProgressTracking pt JOIN Modules m ON pt.module_id = m.module_id WHERE pt.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child') AND pt.status = 'completed';"}
{"prompt": "Are there any modules or assignments my child is struggling with or hasn’t completed?", "response": "SELECT pt.course_id, pt.module_id, m.title FROM ProgressTracking pt JOIN Modules m ON pt.module_id = m.module_id WHERE pt.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child') AND pt.status != 'completed';"}
{"prompt": "Has my child received any feedback from instructors on their work?", "response": "SELECT s.assignment_id, a.title, s.feedback FROM Submissions s JOIN Assignments a ON s.assignment_id = a.assignment_id WHERE s.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child') AND s.feedback IS NOT NULL;"}
{"prompt": "What is my child’s average grade across all submitted assignments?", "response": "SELECT AVG(grade) FROM Submissions WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "Has my child earned any certificates for completing courses?", "response": "SELECT c.certificate_id, co.title, c.issue_date FROM Certifications c JOIN Courses co ON c.course_id = co.course_id WHERE c.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "What is the latest progress report or analytics for my child’s learning?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Sharma Child') ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Are there any alerts or signs of declining engagement or performance for my child?", "response": "SELECT * FROM AnalyticsReports WHERE generated_by = (SELECT user_id FROM Users WHERE name = 'Sharma Child') AND average_completion_rate < 0.7 ORDER BY report_date DESC;"}
{"prompt": "What feedback or comments has my child given about their courses?", "response": "SELECT f.course_id, c.title, f.rating, f.comments FROM Feedback f JOIN Courses c ON f.course_id = c.course_id WHERE f.given_by = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "Which instructors or advisors can I contact regarding my child’s progress?", "response": "SELECT DISTINCT u.user_id, u.name, u.email FROM Users u JOIN Courses c ON u.user_id = c.created_by WHERE c.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child'));"}
{"prompt": "Has my child attended any workshops or extra-curricular courses recently?", "response": "SELECT c.course_id, c.title FROM Courses c JOIN Enrollments e ON c.course_id = e.course_id WHERE e.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child') AND c.category LIKE '%workshop%';"}
{"prompt": "What are the most common strengths and areas for improvement highlighted in my child’s feedback?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE given_by = (SELECT user_id FROM Users WHERE name = 'Sharma Child') GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Are there any support tickets or requests my child has raised for help?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "What is the status of all assignments for my child’s current courses?", "response": "SELECT a.assignment_id, a.title, a.due_date, s.submitted_on, s.grade FROM Assignments a LEFT JOIN Submissions s ON a.assignment_id = s.assignment_id AND s.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child') WHERE a.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child'));"}
{"prompt": "Can I see a summary of my child’s participation in quizzes and assessments?", "response": "SELECT a.assignment_id, a.title, s.grade, s.submitted_on FROM Assignments a JOIN Submissions s ON a.assignment_id = s.assignment_id WHERE a.title LIKE '%quiz%' AND s.student_id = (SELECT user_id FROM Users WHERE name = 'Sharma Child');"}
{"prompt": "Which courses has my child rated highly or given positive feedback for?", "response": "SELECT f.course_id, c.title, f.rating FROM Feedback f JOIN Courses c ON f.course_id = c.course_id WHERE f.given_by = (SELECT user_id FROM Users WHERE name = 'Sharma Child') AND f.rating >= 4;"}
{"prompt": "Technical Support Staff", "response": "nan"}
{"prompt": "NL Question (Arjun’s Technical Support POV)", "response": "SQL Query"}
{"prompt": "Which support tickets are currently open and need urgent attention?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE status = 'open' ORDER BY created_on ASC;"}
{"prompt": "What are the most common technical issues reported by users in the last week?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Are there any login failure issues reported recently?", "response": "SELECT ticket_id, subject, message, status, created_on FROM SupportTickets WHERE subject LIKE '%login%' OR message LIKE '%login%';"}
{"prompt": "Which tickets have been assigned to Arjun for resolution?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE assigned_to = (SELECT user_id FROM Users WHERE name = 'Arjun');"}
{"prompt": "What is the average resolution time for support tickets closed in the last month?", "response": "SELECT AVG(TIMESTAMPDIFF(HOUR, created_on, NOW())) AS avg_resolution_time FROM SupportTickets WHERE status = 'closed' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "Which users have raised the most support tickets in the past month?", "response": "SELECT raised_by, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY raised_by ORDER BY ticket_count DESC;"}
{"prompt": "Are there any unresolved tickets related to assessment submission errors?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE (subject LIKE '%assessment%' OR message LIKE '%assessment%') AND status != 'closed';"}
{"prompt": "Which device compatibility issues have been reported by users?", "response": "SELECT ticket_id, subject, message FROM SupportTickets WHERE subject LIKE '%device%' OR message LIKE '%device%';"}
{"prompt": "What is the status of all tickets raised by instructors?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by IN (SELECT user_id FROM Users WHERE role = 'instructor');"}
{"prompt": "Which tickets were escalated due to streaming or video playback problems?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE subject LIKE '%stream%' OR message LIKE '%stream%' OR subject LIKE '%video%' OR message LIKE '%video%';"}
{"prompt": "How many support tickets have been resolved in the past week?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'closed' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which tickets have been open for more than 48 hours and still need resolution?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE status != 'closed' AND created_on <= DATE_SUB(NOW(), INTERVAL 48 HOUR);"}
{"prompt": "Are there any support tickets mentioning payment or billing issues?", "response": "SELECT ticket_id, subject, message, status FROM SupportTickets WHERE subject LIKE '%payment%' OR message LIKE '%payment%' OR subject LIKE '%billing%' OR message LIKE '%billing%';"}
{"prompt": "What is the trend in support ticket volume over the past month?", "response": "SELECT DATE(created_on) AS date, COUNT(*) AS tickets FROM SupportTickets WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY DATE(created_on) ORDER BY date;"}
{"prompt": "Which users have had multiple tickets escalated for the same issue?", "response": "SELECT raised_by, subject, COUNT(*) AS escalated_count FROM SupportTickets WHERE status = 'escalated' GROUP BY raised_by, subject HAVING escalated_count > 1;"}
{"prompt": "What feedback have users provided after their tickets were resolved?", "response": "-- No direct feedback field in SupportTickets schema; cannot answer with current schema."}
{"prompt": "How many tickets are currently assigned to each support staff member?", "response": "SELECT assigned_to, COUNT(*) AS assigned_tickets FROM SupportTickets WHERE status = 'open' GROUP BY assigned_to;"}
{"prompt": "Which support tickets mention slow platform performance or high latency?", "response": "SELECT ticket_id, subject, message FROM SupportTickets WHERE subject LIKE '%slow%' OR message LIKE '%latency%' OR message LIKE '%performance%' OR message LIKE '%performance%';"}
{"prompt": "Are there any tickets related to integration issues with third-party services?", "response": "SELECT ticket_id, subject, message, status FROM SupportTickets WHERE subject LIKE '%integration%' OR message LIKE '%integration%';"}
{"prompt": "What is the most recent ticket raised by a user from a specific institution or partner?", "response": "-- No institution/partner field in schema; cannot answer with current schema."}
{"prompt": "Certification Authorities", "response": "nan"}
{"prompt": "NL Question (Anil’s Certification Authority POV)", "response": "SQL Query"}
{"prompt": "How can I see all certifications issued by CertifyPro?", "response": "SELECT * FROM Certifications;"}
{"prompt": "Which learners have earned certifications in the last 6 months?", "response": "SELECT student_id, course_id, issue_date FROM Certifications WHERE issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);"}
{"prompt": "What are the details of certifications issued for a specific course?", "response": "SELECT * FROM Certifications WHERE course_id = 10;"}
{"prompt": "Which certification authorities have issued the most certificates?", "response": "SELECT issued_by, COUNT(*) AS total_certificates FROM Certifications GROUP BY issued_by ORDER BY total_certificates DESC;"}
{"prompt": "How many certifications have been issued per month in the past year?", "response": "SELECT DATE_FORMAT(issue_date, '%Y-%m') AS month, COUNT(*) AS certificates_issued FROM Certifications WHERE issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY month ORDER BY month;"}
{"prompt": "Which students have received more than one certification from CertifyPro?", "response": "SELECT student_id, COUNT(*) AS cert_count FROM Certifications GROUP BY student_id HAVING cert_count > 1;"}
{"prompt": "Which certifications have been issued most recently?", "response": "SELECT * FROM Certifications ORDER BY issue_date DESC LIMIT 20;"}
{"prompt": "What are the most common courses for which certifications are issued?", "response": "SELECT course_id, COUNT(*) AS cert_count FROM Certifications GROUP BY course_id ORDER BY cert_count DESC;"}
{"prompt": "What is the trend in certification issuance over the last quarter?", "response": "SELECT DATE_FORMAT(issue_date, '%Y-%m') AS month, COUNT(*) AS certificates_issued FROM Certifications WHERE issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "How many certifications have been issued by each certification authority in the last year?", "response": "SELECT issued_by, COUNT(*) AS cert_count FROM Certifications WHERE issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY issued_by ORDER BY cert_count DESC;"}
{"prompt": "What are the top courses contributing to workforce development based on certifications?", "response": "SELECT course_id, COUNT(*) AS cert_count FROM Certifications GROUP BY course_id ORDER BY cert_count DESC LIMIT 10;"}
{"prompt": "What support tickets have been raised related to certification issues?", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%certification%' OR message LIKE '%certification%';"}
{"prompt": "How many analytics reports related to certification issuance have been generated recently?", "response": "SELECT * FROM AnalyticsReports WHERE report_type LIKE '%certification%' ORDER BY report_date DESC LIMIT 5;"}
{"prompt": "Which certification authorities have the highest certification issuance rates?", "response": "SELECT issued_by, COUNT(*) AS cert_count FROM Certifications GROUP BY issued_by ORDER BY cert_count DESC LIMIT 5;"}
{"prompt": "What are the recent trends in certification issuance according to analytics reports?", "response": "SELECT report_date, summary FROM AnalyticsReports WHERE report_type LIKE '%certification%' ORDER BY report_date DESC LIMIT 5;"}
{"prompt": "Which students have earned certifications for a specific course in the last year?", "response": "SELECT student_id, issue_date FROM Certifications WHERE course_id = 10 AND issue_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}
{"prompt": "Which courses have the highest number of certifications issued by Anil?", "response": "SELECT course_id, COUNT(*) AS cert_count FROM Certifications WHERE issued_by = (SELECT user_id FROM Users WHERE name = 'Anil') GROUP BY course_id ORDER BY cert_count DESC;"}
{"prompt": "What is the most recent certification issued by Anil?", "response": "SELECT * FROM Certifications WHERE issued_by = (SELECT user_id FROM Users WHERE name = 'Anil') ORDER BY issue_date DESC LIMIT 1;"}
{"prompt": "Which students have received certifications from multiple authorities?", "response": "SELECT student_id, COUNT(DISTINCT issued_by) AS authority_count FROM Certifications GROUP BY student_id HAVING authority_count > 1;"}
{"prompt": "What is the monthly trend of certifications issued for the top 3 courses this year?", "response": "SELECT course_id, DATE_FORMAT(issue_date, '%Y-%m') AS month, count(*) AS certificates_issued FROM Certifications WHERE issue_date >= '2025-01-01' AND course_id IN (SELECT course_id FROM (SELECT course_id, count(*) AS cert_count FROM Certifications WHERE issue_date >= '2025-01-01' GROUP BY course_id ORDER BY cert_count DESC LIMIT 3) AS top_courses) GROUP BY course_id, month ORDER BY course_id, month"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question (Neha’s Data Analyst POV)", "response": "SQL Query"}
{"prompt": "What is the trend in course completion rates across the platform over the last six months?", "response": "SELECT report_date, average_completion_rate FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) ORDER BY report_date;"}
{"prompt": "Which courses have the highest and lowest average completion rates?", "response": "SELECT course_id, AVG(average_completion_rate) AS avg_completion FROM AnalyticsReports GROUP BY course_id ORDER BY avg_completion DESC;"}
{"prompt": "How many students are currently enrolled in each course?", "response": "SELECT c.course_id, c.title, COUNT(e.enrollment_id) AS total_students FROM Courses c LEFT JOIN Enrollments e ON c.course_id = e.course_id GROUP BY c.course_id, c.title;"}
{"prompt": "What is the average grade for each assignment across all courses?", "response": "SELECT assignment_id, AVG(grade) AS avg_grade FROM Submissions GROUP BY assignment_id;"}
{"prompt": "Which modules have the highest rates of incomplete status among students?", "response": "SELECT module_id, COUNT(*) AS incomplete_count FROM ProgressTracking WHERE status != 'completed' GROUP BY module_id ORDER BY incomplete_count DESC;"}
{"prompt": "What are the most common reasons for support tickets raised by students?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE raised_by IN (SELECT user_id FROM Users WHERE role = 'student') GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Which feedback ratings are most frequently given by learners for courses?", "response": "SELECT rating, COUNT(*) AS frequency FROM Feedback GROUP BY rating ORDER BY frequency DESC;"}
{"prompt": "What is the average time to certification for students who have completed a course?", "response": "SELECT AVG(DATEDIFF(c.issue_date, e.enrollment_date)) AS avg_days_to_cert FROM Certifications c JOIN Enrollments e ON c.student_id = e.student_id AND c.course_id = e.course_id;"}
{"prompt": "Which courses have the highest number of feedback submissions mentioning “engagement”?", "response": "SELECT f.course_id, c.title, COUNT(*) AS engagement_mentions FROM Feedback f JOIN Courses c ON f.course_id = c.course_id WHERE f.comments LIKE '%engagement%' GROUP BY f.course_id, c.title ORDER BY engagement_mentions DESC;"}
{"prompt": "What is the trend in new user registrations over the past year?", "response": "SELECT MONTH(registration_date) AS month, COUNT(*) AS registrations FROM Users WHERE registration_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY month ORDER BY month;"}
{"prompt": "Which marketing campaigns have generated the most enrollments in the last quarter?", "response": "SELECT mc.campaign_id, mc.platform, SUM(e.enrollment_id) AS enrollments FROM MarketingCampaigns mc JOIN Enrollments e ON mc.property_id = e.course_id WHERE mc.start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY mc.campaign_id, mc.platform ORDER BY enrollments DESC;"}
{"prompt": "What is the average rating for each course based on learner feedback?", "response": "SELECT course_id, AVG(rating) AS avg_rating FROM Feedback GROUP BY course_id ORDER BY avg_rating DESC;"}
{"prompt": "Which courses have the highest dropout rates based on enrollment status?", "response": "SELECT course_id, COUNT(*) AS dropout_count FROM Enrollments WHERE status = 'dropped' GROUP BY course_id ORDER BY dropout_count DESC;"}
{"prompt": "What are the most common topics or keywords in student feedback comments?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Which students have completed the most courses on the platform?", "response": "SELECT student_id, COUNT(*) AS completed_courses FROM Certifications GROUP BY student_id ORDER BY completed_courses DESC;"}
{"prompt": "What is the distribution of assignment grades for a specific course?", "response": "SELECT s.assignment_id, s.grade FROM Submissions s JOIN Assignments a ON s.assignment_id = a.assignment_id WHERE a.course_id = ?;"}
{"prompt": "How many support tickets have been resolved each month this year?", "response": "SELECT MONTH(created_on) AS month, COUNT(*) AS resolved_tickets FROM SupportTickets WHERE status = 'closed' AND created_on >= '2025-01-01' GROUP BY month ORDER BY month;"}
{"prompt": "Which modules are most often completed first by students in multi-module courses?", "response": "SELECT module_id, COUNT(*) AS first_completed FROM ProgressTracking WHERE status = 'completed' AND order = 1 GROUP BY module_id ORDER BY first_completed DESC;"}
{"prompt": "What is the average completion rate for elective courses compared to core courses?", "response": "SELECT category, AVG(average_completion_rate) FROM Courses c JOIN AnalyticsReports ar ON c.course_id = ar.report_id WHERE category IN ('elective', 'core') GROUP BY category;"}
{"prompt": "Which students have the highest engagement, as measured by feedback submissions and assignment completions?", "response": "SELECT s.student_id, COUNT(DISTINCT f.feedback_id) + COUNT(DISTINCT s2.submission_id) AS engagement_score FROM Feedback f JOIN Submissions s2 ON f.given_by = s2.student_id JOIN Submissions s ON s.student_id = f.given_by GROUP BY s.student_id ORDER BY engagement_score DESC;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "CinemaBooking", "response": "nan"}
{"prompt": "Moviegoers/Customers", "response": "nan"}
{"prompt": "NL Question (Customer/Staff POV)", "response": "SQL Query"}
{"prompt": "Which movies are currently showing in theaters today?", "response": "SELECT DISTINCT m.movie_id, m.title FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id WHERE DATE(s.start_time) = CURRENT_DATE;"}
{"prompt": "What are the available showtimes for 'Inception' at the Downtown Cinema?", "response": "SELECT s.show_id, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE m.title = 'Inception' AND t.name = 'Downtown Cinema';"}
{"prompt": "How many seats are available for the 7:00 PM show of 'Avatar' at any theater?", "response": "SELECT s.theater_id, t.name, s.screen_number, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE m.title = 'Avatar' AND TIME(s.start_time) = '19:00:00';"}
{"prompt": "Has my booking for the 5:30 PM show of 'Oppenheimer' been confirmed? (customer_id = 101)", "response": "SELECT b.status FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id WHERE b.customer_id = 101 AND m.title = 'Oppenheimer' AND TIME(s.start_time) = '17:30:00';"}
{"prompt": "What tickets have I booked for today and have I checked in? (customer_id = 102)", "response": "SELECT t.ticket_id, t.seat_number, t.checked_in FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id WHERE b.customer_id = 102 AND b.booking_date = CURRENT_DATE;"}
{"prompt": "Which movies have the highest audience ratings this month?", "response": "SELECT m.title, AVG(f.rating) AS avg_rating FROM Movies m JOIN Feedback f ON m.movie_id = f.movie_id WHERE MONTH(f.submitted_on) = MONTH(CURRENT_DATE) GROUP BY m.movie_id, m.title ORDER BY avg_rating DESC;"}
{"prompt": "What are the details of my last payment for a movie booking? (customer_id = 103)", "response": "SELECT p.amount, p.payment_method, p.paid_on FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.customer_id = 103 ORDER BY p.paid_on DESC LIMIT 1;"}
{"prompt": "Which theaters near 'Uptown' have the most screens?", "response": "SELECT name, location, total_screens FROM Theaters WHERE location LIKE '%Uptown%' ORDER BY total_screens DESC;"}
{"prompt": "What concession items are available in the 'Snacks' category?", "response": "SELECT item_id, name, price FROM Concessions WHERE category = 'Snacks';"}
{"prompt": "What orders have I placed for concessions today? (customer_id = 104)", "response": "SELECT o.order_id, c.name, o.quantity, o.order_time FROM Orders o JOIN Concessions c ON o.item_id = c.item_id WHERE o.customer_id = 104 AND DATE(o.order_time) = CURRENT_DATE;"}
{"prompt": "Which upcoming shows have less than 10 seats left?", "response": "SELECT s.show_id, m.title, t.name, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE s.available_seats < 10 AND s.start_time > NOW();"}
{"prompt": "What promotions are currently active for moviegoers?", "response": "SELECT promo_id, title, description FROM Promotions WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Which of my bookings are still pending or not confirmed? (customer_id = 105)", "response": "SELECT booking_id, show_id, status FROM Bookings WHERE customer_id = 105 AND status != 'confirmed';"}
{"prompt": "What feedback have I given for movies in the last month? (customer_id = 106)", "response": "SELECT f.movie_id, m.title, f.rating, f.comment, f.submitted_on FROM Feedback f JOIN Movies m ON f.movie_id = m.movie_id WHERE f.customer_id = 106 AND f.submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the total revenue generated by the platform this week?", "response": "SELECT SUM(revenue) FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which movies are releasing next week?", "response": "SELECT movie_id, title, release_date FROM Movies WHERE release_date BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY) AND DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the top 5 movies by bookings this month?", "response": "SELECT m.title, COUNT(b.booking_id) AS total_bookings FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY m.movie_id, m.title ORDER BY total_bookings DESC LIMIT 5;"}
{"prompt": "Which customers joined the platform in the last 30 days?", "response": "SELECT customer_id, name, email, joined_on FROM Customers WHERE joined_on >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "What are the details of all shows for the movie 'Dune' this weekend?", "response": "SELECT s.show_id, t.name, s.screen_number, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE m.title = 'Dune' AND WEEKDAY(s.start_time) IN (5,6);"}
{"prompt": "What is the most recent analytics report on bookings and revenue?", "response": "SELECT report_date, total_bookings, revenue, top_movie FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Booking Agents", "response": "nan"}
{"prompt": "NL Question (Sameer’s Booking Agent POV)", "response": "SQL Query"}
{"prompt": "Which shows across all theaters have at least 20 seats available for group bookings?", "response": "SELECT s.show_id, m.title, t.name, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE s.available_seats >= 20 AND s.start_time > NOW();"}
{"prompt": "What are the upcoming showtimes for 'Inside Out 2' at Cityplex Theater?", "response": "SELECT s.show_id, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE m.title = 'Inside Out 2' AND t.name = 'Cityplex Theater' AND s.start_time > NOW();"}
{"prompt": "Can I see all current bookings made for the 3:00 PM show of 'Kung Fu Panda 4' at Grand Cinema?", "response": "SELECT b.booking_id, b.customer_id, b.num_tickets, b.status FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE m.title = 'Kung Fu Panda 4' AND t.name = 'Grand Cinema' AND TIME(s.start_time) = '15:00:00';"}
{"prompt": "Which theaters in 'Downtown' have the most screens for accommodating large groups?", "response": "SELECT name, location, total_screens FROM Theaters WHERE location LIKE '%Downtown%' ORDER BY total_screens DESC;"}
{"prompt": "What is the total number of tickets booked for the 6:00 PM show of 'Godzilla x Kong' at Star Multiplex?", "response": "SELECT SUM(b.num_tickets) FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE m.title = 'Godzilla x Kong' AND t.name = 'Star Multiplex' AND TIME(s.start_time) = '18:00:00';"}
{"prompt": "Which customers have made bulk bookings (more than 10 tickets) in the last week?", "response": "SELECT b.customer_id, c.name, SUM(b.num_tickets) AS total_tickets FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY b.customer_id, c.name HAVING total_tickets > 10;"}
{"prompt": "What are the details of all bookings that were cancelled today?", "response": "SELECT booking_id, customer_id, show_id, num_tickets FROM Bookings WHERE status = 'cancelled' AND booking_date = CURRENT_DATE;"}
{"prompt": "Which shows this weekend have fewer than 15 seats left and might need special arrangements?", "response": "SELECT s.show_id, m.title, t.name, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE s.available_seats < 15 AND WEEKDAY(s.start_time) IN (5,6);"}
{"prompt": "What is the status of all bookings for customer 'Amit Sharma' this month?", "response": "SELECT b.booking_id, b.status, s.start_time, m.title FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id WHERE c.name = 'Amit Sharma' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which movies are most popular for group bookings this month?", "response": "SELECT m.title, SUM(b.num_tickets) AS total_tickets FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY m.title ORDER BY total_tickets DESC;"}
{"prompt": "What are the payment details for the latest bulk booking I processed? (booking_id = 501)", "response": "SELECT p.amount, p.payment_method, p.paid_on FROM Payments p WHERE p.booking_id = 501;"}
{"prompt": "Which shows are scheduled at 'Elite Cinema' tomorrow that still have at least 25 seats available?", "response": "SELECT s.show_id, m.title, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'Elite Cinema' AND DATE(s.start_time) = DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY) AND s.available_seats >= 25;"}
{"prompt": "Which customers have booked more than one show for the same day?", "response": "SELECT b.customer_id, c.name, COUNT(*) AS shows_booked FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id WHERE b.booking_date = CURRENT_DATE GROUP BY b.customer_id, c.name HAVING shows_booked > 1;"}
{"prompt": "What feedback have group booking customers left for 'Frozen 3'?", "response": "SELECT f.customer_id, c.name, f.rating, f.comment FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id JOIN Movies m ON f.movie_id = m.movie_id WHERE m.title = 'Frozen 3';"}
{"prompt": "Are there any pending payments for group bookings made this week?", "response": "SELECT p.payment_id, p.booking_id, p.amount FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.num_tickets > 10 AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) AND p.amount IS NULL;"}
{"prompt": "Which movies are releasing next week that may be of interest for school group bookings?", "response": "SELECT movie_id, title, release_date FROM Movies WHERE release_date BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY) AND DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the top 3 theaters by total group tickets sold this month?", "response": "SELECT t.name, SUM(b.num_tickets) AS total_tickets FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) AND b.num_tickets > 10 GROUP BY t.name ORDER BY total_tickets DESC LIMIT 3;"}
{"prompt": "Which shows have had last-minute cancellations today?", "response": "SELECT b.booking_id, b.customer_id, s.show_id, m.title FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id WHERE b.status = 'cancelled' AND b.booking_date = CURRENT_DATE AND s.start_time > NOW();"}
{"prompt": "What are the details of all tickets issued for booking_id = 502?", "response": "SELECT ticket_id, seat_number, checked_in FROM Tickets WHERE booking_id = 502;"}
{"prompt": "Which movies have received the highest average feedback rating from group bookings this year?", "response": "SELECT m.title, AVG(f.rating) AS avg_rating FROM Movies m JOIN Feedback f ON m.movie_id = f.movie_id JOIN Bookings b ON f.customer_id = b.customer_id WHERE b.num_tickets > 10 AND YEAR(f.submitted_on) = YEAR(CURRENT_DATE) GROUP BY m.title ORDER BY avg_rating DESC;"}
{"prompt": "Theater Managers", "response": "nan"}
{"prompt": "NL Question (Anita’s Theater Manager POV)", "response": "SQL Query"}
{"prompt": "Which movies are scheduled to play at CineLux today?", "response": "SELECT DISTINCT m.title FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND DATE(s.start_time) = CURRENT_DATE;"}
{"prompt": "What are the available seats for each show at CineLux this evening?", "response": "SELECT s.show_id, m.title, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND DATE(s.start_time) = CURRENT_DATE AND TIME(s.start_time) >= '18:00:00';"}
{"prompt": "Which staff members are scheduled for shifts today at CineLux? (Assume staff info is in Customers table, category = 'staff')", "response": "SELECT name, email, phone FROM Customers WHERE joined_on = CURRENT_DATE AND email LIKE '%cinelux.com';"}
{"prompt": "What are the total ticket sales for CineLux this week?", "response": "SELECT SUM(b.num_tickets) FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which shows at CineLux have less than 10 seats left and may need urgent attention?", "response": "SELECT s.show_id, m.title, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND s.available_seats < 10 AND s.start_time > NOW();"}
{"prompt": "Are there any booking errors or seat mismatches reported for CineLux today? (Assume status 'error' in Bookings)", "response": "SELECT booking_id, show_id, status FROM Bookings WHERE status = 'error' AND booking_date = CURRENT_DATE AND show_id IN (SELECT show_id FROM Shows WHERE theater_id = (SELECT theater_id FROM Theaters WHERE name = 'CineLux'));"}
{"prompt": "What are the most popular movies at CineLux this month based on ticket sales?", "response": "SELECT m.title, SUM(b.num_tickets) AS total_tickets FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Theaters t ON s.theater_id = t.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE t.name = 'CineLux' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY m.title ORDER BY total_tickets DESC;"}
{"prompt": "Which upcoming shows at CineLux are close to being sold out?", "response": "SELECT s.show_id, m.title, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND s.available_seats <= 5 AND s.start_time > NOW();"}
{"prompt": "What is the status of all pending bookings for CineLux?", "response": "SELECT b.booking_id, b.status, s.start_time, m.title FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND b.status = 'pending';"}
{"prompt": "Which customers have made the most bookings at CineLux this month?", "response": "SELECT c.customer_id, c.name, COUNT(b.booking_id) AS total_bookings FROM Customers c JOIN Bookings b ON c.customer_id = b.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY c.customer_id, c.name ORDER BY total_bookings DESC;"}
{"prompt": "What promotions are currently active at CineLux to attract more viewers?", "response": "SELECT promo_id, title, description FROM Promotions WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Which days of the week have the highest ticket sales at CineLux?", "response": "SELECT DAYNAME(b.booking_date) AS day, SUM(b.num_tickets) AS total_tickets FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' GROUP BY day ORDER BY total_tickets DESC;"}
{"prompt": "What is the average occupancy rate for all shows at CineLux this month?", "response": "SELECT AVG((b.num_tickets * 1.0) / (s.available_seats + b.num_tickets)) AS avg_occupancy FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which movies at CineLux have received the highest feedback ratings from customers?", "response": "SELECT m.title, AVG(f.rating) AS avg_rating FROM Movies m JOIN Feedback f ON m.movie_id = f.movie_id JOIN Shows s ON m.movie_id = s.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' GROUP BY m.title ORDER BY avg_rating DESC;"}
{"prompt": "What are the details of all bookings cancelled at CineLux this week?", "response": "SELECT b.booking_id, c.name, s.start_time, m.title FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND b.status = 'cancelled' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which shows at CineLux have the most concession orders placed?", "response": "SELECT s.show_id, m.title, COUNT(o.order_id) AS total_orders FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id JOIN Bookings b ON s.show_id = b.show_id JOIN Orders o ON b.customer_id = o.customer_id WHERE t.name = 'CineLux' GROUP BY s.show_id, m.title ORDER BY total_orders DESC;"}
{"prompt": "What are the most popular concession items sold at CineLux this month?", "response": "SELECT c.name, SUM(o.quantity) AS total_sold FROM Concessions c JOIN Orders o ON c.item_id = o.item_id JOIN Customers cu ON o.customer_id = cu.customer_id WHERE o.order_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY c.name ORDER BY total_sold DESC;"}
{"prompt": "Which bookings at CineLux have pending payments?", "response": "SELECT b.booking_id, b.customer_id, s.start_time, m.title FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id LEFT JOIN Payments p ON b.booking_id = p.booking_id WHERE t.name = 'CineLux' AND (p.amount IS NULL OR p.amount = 0);"}
{"prompt": "What is the total revenue generated by CineLux this month?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'CineLux' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which movies are scheduled for special discount days at CineLux this week?", "response": "SELECT DISTINCT m.title FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Theaters t ON s.theater_id = t.theater_id JOIN Promotions p ON DATE(s.start_time) BETWEEN p.start_date AND p.end_date WHERE t.name = 'CineLux' AND p.title LIKE '%discount%' AND p.start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Concession Stand Staff", "response": "nan"}
{"prompt": "NL Question (Priya’s Concession Stand Staff POV)", "response": "SQL Query"}
{"prompt": "Which movies are expected to have the largest audience at MetroCine tonight?", "response": "SELECT m.title, SUM(b.num_tickets) AS total_tickets FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Theaters t ON s.theater_id = t.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE t.name = 'MetroCine' AND DATE(s.start_time) = CURRENT_DATE AND TIME(s.start_time) >= '18:00:00' GROUP BY m.title ORDER BY total_tickets DESC;"}
{"prompt": "What are the most popular concession items sold at MetroCine this week?", "response": "SELECT c.name, SUM(o.quantity) AS total_sold FROM Concessions c JOIN Orders o ON c.item_id = o.item_id JOIN Customers cu ON o.customer_id = cu.customer_id WHERE DATE(o.order_time) >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY c.name ORDER BY total_sold DESC;"}
{"prompt": "Which snack orders have been pre-ordered for the 8:00 PM show of 'Elemental'?", "response": "SELECT o.order_id, cu.name, c.name AS item, o.quantity FROM Orders o JOIN Customers cu ON o.customer_id = cu.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE o.order_time >= CURRENT_DATE AND o.item_id IN (SELECT item_id FROM Concessions WHERE category = 'Snacks') AND o.customer_id IN (SELECT b.customer_id FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id WHERE m.title = 'Elemental' AND TIME(s.start_time) = '20:00:00');"}
{"prompt": "Are there any concession items that need restocking before the next show? (Assume threshold is 10 units, and Orders table tracks sales)", "response": "SELECT c.name, SUM(o.quantity) AS sold_this_week FROM Concessions c JOIN Orders o ON c.item_id = o.item_id WHERE DATE(o.order_time) >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY c.name HAVING sold_this_week > 10;"}
{"prompt": "What are the details of all orders placed for MetroCine today?", "response": "SELECT o.order_id, cu.name, c.name AS item, o.quantity, o.order_time FROM Orders o JOIN Customers cu ON o.customer_id = cu.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE DATE(o.order_time) = CURRENT_DATE;"}
{"prompt": "Which customers have placed the highest number of concession orders at MetroCine this month?", "response": "SELECT cu.customer_id, cu.name, COUNT(o.order_id) AS total_orders FROM Customers cu JOIN Orders o ON cu.customer_id = o.customer_id WHERE MONTH(o.order_time) = MONTH(CURRENT_DATE) GROUP BY cu.customer_id, cu.name ORDER BY total_orders DESC;"}
{"prompt": "What are the most popular snack combos sold at MetroCine? (Assume combos are in the category 'Combo')", "response": "SELECT c.name, SUM(o.quantity) AS total_sold FROM Concessions c JOIN Orders o ON c.item_id = o.item_id WHERE c.category = 'Combo' GROUP BY c.name ORDER BY total_sold DESC;"}
{"prompt": "Which shows at MetroCine have the highest number of pre-ordered concessions today?", "response": "SELECT s.show_id, m.title, COUNT(o.order_id) AS pre_orders FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Bookings b ON s.show_id = b.show_id JOIN Orders o ON b.customer_id = o.customer_id WHERE s.theater_id = (SELECT theater_id FROM Theaters WHERE name = 'MetroCine') AND DATE(o.order_time) = CURRENT_DATE GROUP BY s.show_id, m.title ORDER BY pre_orders DESC;"}
{"prompt": "What is the total revenue from concession sales at MetroCine this week?", "response": "SELECT SUM(c.price * o.quantity) AS total_revenue FROM Concessions c JOIN Orders o ON c.item_id = o.item_id WHERE DATE(o.order_time) >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which concession items have received the most positive feedback from customers?", "response": "SELECT c.name, AVG(f.rating) AS avg_rating FROM Concessions c JOIN Orders o ON c.item_id = o.item_id JOIN Feedback f ON o.customer_id = f.customer_id GROUP BY c.name ORDER BY avg_rating DESC;"}
{"prompt": "Are there any orders for special dietary items for tonight’s shows? (Assume category = 'Special')", "response": "SELECT o.order_id, cu.name, c.name AS item, o.quantity FROM Orders o JOIN Customers cu ON o.customer_id = cu.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE c.category = 'Special' AND DATE(o.order_time) = CURRENT_DATE;"}
{"prompt": "What is the busiest time for concession orders at MetroCine on weekends?", "response": "SELECT HOUR(order_time) AS hour, COUNT(*) AS total_orders FROM Orders WHERE WEEKDAY(order_time) IN (5,6) GROUP BY hour ORDER BY total_orders DESC;"}
{"prompt": "Which movies have the highest number of snack pre-orders for their shows at MetroCine this month?", "response": "SELECT m.title, COUNT(o.order_id) AS snack_preorders FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id JOIN Orders o ON b.customer_id = o.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE s.theater_id = (SELECT theater_id FROM Theaters WHERE name = 'MetroCine') AND MONTH(o.order_time) = MONTH(CURRENT_DATE) AND c.category = 'Snacks' GROUP BY m.title ORDER BY snack_preorders DESC;"}
{"prompt": "What are the details of all cancelled concession orders today?", "response": "SELECT o.order_id, cu.name, c.name AS item, o.quantity, o.order_time FROM Orders o JOIN Customers cu ON o.customer_id = cu.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE DATE(o.order_time) = CURRENT_DATE AND o.quantity = 0;"}
{"prompt": "Which customers have placed both online and in-person concession orders at MetroCine this week? (Assume payment_method in Payments)", "response": "SELECT DISTINCT cu.customer_id, cu.name FROM Customers cu JOIN Orders o ON cu.customer_id = o.customer_id JOIN Payments p ON o.order_id = p.booking_id WHERE DATE(o.order_time) >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) AND p.payment_method IN ('online', 'in-person');"}
{"prompt": "What is the average order size for concession sales at MetroCine?", "response": "SELECT AVG(o.quantity) FROM Orders o JOIN Customers cu ON o.customer_id = cu.customer_id;"}
{"prompt": "Which concession items are most frequently ordered together? (Assume Orders table has one item per row)", "response": "SELECT o1.item_id, o2.item_id, COUNT(*) AS pair_count FROM Orders o1 JOIN Orders o2 ON o1.customer_id = o2.customer_id AND o1.order_time = o2.order_time AND o1.item_id < o2.item_id GROUP BY o1.item_id, o2.item_id ORDER BY pair_count DESC;"}
{"prompt": "Which shows tonight at MetroCine have the highest expected snack demand based on pre-orders?", "response": "SELECT s.show_id, m.title, SUM(o.quantity) AS total_snacks FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Bookings b ON s.show_id = b.show_id JOIN Orders o ON b.customer_id = o.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE s.theater_id = (SELECT theater_id FROM Theaters WHERE name = 'MetroCine') AND DATE(s.start_time) = CURRENT_DATE AND TIME(s.start_time) >= '18:00:00' AND c.category = 'Snacks' GROUP BY s.show_id, m.title ORDER BY total_snacks DESC;"}
{"prompt": "What feedback have customers given about their concession experience at MetroCine this week?", "response": "SELECT f.customer_id, cu.name, f.rating, f.comment, f.submitted_on FROM Feedback f JOIN Customers cu ON f.customer_id = cu.customer_id WHERE f.submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which concession items have not been ordered at all this month at MetroCine?", "response": "SELECT c.item_id, c.name FROM Concessions c WHERE c.item_id NOT IN (SELECT DISTINCT o.item_id FROM Orders o WHERE MONTH(o.order_time) = MONTH(CURRENT_DATE));"}
{"prompt": "Ticket Checkers", "response": "nan"}
{"prompt": "NL Question (Aman’s Ticket Checker POV)", "response": "SQL Query"}
{"prompt": "Which tickets are scheduled for today's shows at SilverScreen Cinemas?", "response": "SELECT t.ticket_id, t.seat_number, b.show_id, s.start_time FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE;"}
{"prompt": "How can I verify if a ticket's seat number matches the booking for SilverScreen Cinemas?", "response": "SELECT t.ticket_id, t.seat_number, b.num_tickets FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas';"}
{"prompt": "Which bookings have multiple tickets for the same show at SilverScreen Cinemas?", "response": "SELECT b.booking_id, b.show_id, COUNT(t.ticket_id) AS ticket_count FROM Bookings b JOIN Tickets t ON b.booking_id = t.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' GROUP BY b.booking_id, b.show_id HAVING ticket_count > 1;"}
{"prompt": "What are the details of tickets checked in for today's shows at SilverScreen Cinemas?", "response": "SELECT t.ticket_id, t.seat_number, b.show_id, s.start_time FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE AND t.checked_in = TRUE;"}
{"prompt": "Which tickets have not been checked in yet for upcoming shows at SilverScreen Cinemas?", "response": "SELECT t.ticket_id, t.seat_number, b.show_id, s.start_time FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND s.start_time > NOW() AND t.checked_in = FALSE;"}
{"prompt": "How can I identify double bookings or seat conflicts at SilverScreen Cinemas?", "response": "SELECT t.seat_number, b.show_id, COUNT(*) AS count FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' GROUP BY t.seat_number, b.show_id HAVING count > 1;"}
{"prompt": "Which shows at SilverScreen Cinemas have the highest number of checked-in tickets today?", "response": "SELECT b.show_id, COUNT(t.ticket_id) AS checked_in_count FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE AND t.checked_in = TRUE GROUP BY b.show_id ORDER BY checked_in_count DESC;"}
{"prompt": "What are the showtimes and seat availability for age-restricted movies at SilverScreen Cinemas?", "response": "SELECT s.show_id, m.title, s.start_time, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND m.rating IN ('R', 'NC-17');"}
{"prompt": "How many tickets have been scanned and verified by me today at SilverScreen Cinemas?", "response": "SELECT COUNT(t.ticket_id) FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE AND t.checked_in = TRUE;"}
{"prompt": "Which customers have tickets for shows starting within the next hour at SilverScreen Cinemas?", "response": "SELECT DISTINCT b.customer_id, c.name FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND s.start_time BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 1 HOUR);"}
{"prompt": "What are the details of tickets with seat number mismatches for SilverScreen Cinemas?", "response": "SELECT t.ticket_id, t.seat_number, b.booking_id FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND t.seat_number NOT IN (SELECT seat_number FROM Tickets WHERE booking_id = b.booking_id);"}
{"prompt": "Which shows at SilverScreen Cinemas have the most no-shows today?", "response": "SELECT b.show_id, COUNT(t.ticket_id) AS no_show_count FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE AND t.checked_in = FALSE GROUP BY b.show_id ORDER BY no_show_count DESC;"}
{"prompt": "How can I quickly find tickets that have been cancelled or refunded at SilverScreen Cinemas?", "response": "SELECT b.booking_id, b.status FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND b.status IN ('cancelled', 'refunded');"}
{"prompt": "Which customers have reported issues with their tickets at SilverScreen Cinemas?", "response": "SELECT DISTINCT c.customer_id, c.name FROM Customers c JOIN Bookings b ON c.customer_id = b.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND b.status = 'issue reported';"}
{"prompt": "What are the details of tickets scanned during peak hours at SilverScreen Cinemas?", "response": "SELECT t.ticket_id, t.seat_number, s.start_time FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND TIME(s.start_time) BETWEEN '18:00:00' AND '22:00:00';"}
{"prompt": "Which shows at SilverScreen Cinemas have the highest number of tickets sold this week?", "response": "SELECT b.show_id, COUNT(t.ticket_id) AS tickets_sold FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY b.show_id ORDER BY tickets_sold DESC;"}
{"prompt": "How can I check the age restrictions for movies and verify IDs at SilverScreen Cinemas?", "response": "SELECT m.title, m.rating FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND m.rating IN ('R', 'NC-17');"}
{"prompt": "Which tickets have been scanned more than once, indicating possible double scanning?", "response": "SELECT t.ticket_id, COUNT(*) AS scan_count FROM Tickets t GROUP BY t.ticket_id HAVING scan_count > 1;"}
{"prompt": "What is the total number of tickets checked in today at SilverScreen Cinemas?", "response": "SELECT COUNT(t.ticket_id) FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE AND t.checked_in = TRUE;"}
{"prompt": "Which customers have the most tickets scanned for SilverScreen Cinemas today?", "response": "SELECT b.customer_id, c.name, COUNT(t.ticket_id) AS tickets_scanned FROM Tickets t JOIN Bookings b ON t.booking_id = b.booking_id JOIN Customers c ON b.customer_id = c.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters th ON s.theater_id = th.theater_id WHERE th.name = 'SilverScreen Cinemas' AND DATE(s.start_time) = CURRENT_DATE GROUP BY b.customer_id, c.name ORDER BY tickets_scanned DESC;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Ayesha’s Marketing Team POV)", "response": "SQL Query"}
{"prompt": "What are the current booking trends across all theaters this week?", "response": "SELECT report_date, total_bookings FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) ORDER BY report_date;"}
{"prompt": "Which movie genres have the highest ticket sales this month?", "response": "SELECT m.genre, COUNT(b.booking_id) AS total_bookings FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY m.genre ORDER BY total_bookings DESC;"}
{"prompt": "What are the demographics of customers booking superhero movies recently?", "response": "SELECT c.customer_id, c.name, c.email FROM Customers c JOIN Bookings b ON c.customer_id = b.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id WHERE m.genre LIKE '%superhero%' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "How many pre-bookings have been made for the upcoming superhero movie release?", "response": "SELECT COUNT(*) FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id WHERE m.genre LIKE '%superhero%' AND s.start_time > CURRENT_DATE;"}
{"prompt": "Which marketing campaigns are currently active and driving the most traffic?", "response": "SELECT promo_id, title, start_date, end_date FROM Promotions WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE ORDER BY start_date;"}
{"prompt": "What is the total reach and leads generated by the 'Family Friday' campaign?", "response": "SELECT SUM(reach) AS total_reach, SUM(leads_generated) AS total_leads FROM MarketingCampaigns WHERE platform LIKE '%Family Friday%';"}
{"prompt": "How effective are the 'Student Saturday' promotions in increasing ticket sales?", "response": "SELECT SUM(b.num_tickets) AS total_tickets FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN MarketingCampaigns mc ON s.show_id = mc.property_id WHERE mc.platform LIKE '%Student Saturday%' AND b.booking_date >= mc.start_date AND b.booking_date <= mc.end_date;"}
{"prompt": "Which theaters have the highest engagement from hyperlocal promotions?", "response": "SELECT t.name, COUNT(b.booking_id) AS total_bookings FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id JOIN MarketingCampaigns mc ON s.show_id = mc.property_id WHERE mc.platform LIKE '%hyperlocal%' GROUP BY t.name ORDER BY total_bookings DESC;"}
{"prompt": "What are the results of A/B testing for recent email campaigns?", "response": "SELECT * FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND report_type LIKE '%email%';"}
{"prompt": "How many app installs have been attributed to the latest social media giveaway?", "response": "SELECT summary FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND report_type LIKE '%social media giveaway%';"}
{"prompt": "Which customer segments respond best to early-bird discount campaigns?", "response": "SELECT c.customer_id, c.name, COUNT(b.booking_id) AS bookings FROM Customers c JOIN Bookings b ON c.customer_id = b.customer_id JOIN MarketingCampaigns mc ON b.booking_id = mc.campaign_id WHERE mc.title LIKE '%early-bird%' GROUP BY c.customer_id, c.name ORDER BY bookings DESC;"}
{"prompt": "What is the average conversion rate for SMS campaigns run in the last quarter?", "response": "SELECT AVG(leads_generated*1.0/reach) AS avg_conversion_rate FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND platform LIKE '%SMS%';"}
{"prompt": "How many loyalty points have been awarded to frequent viewers through recent campaigns?", "response": "-- No loyalty points field in schema; cannot answer with current schema."}
{"prompt": "Which social media platforms have driven the most traffic to booking pages?", "response": "SELECT platform, SUM(reach) AS total_reach FROM MarketingCampaigns GROUP BY platform ORDER BY total_reach DESC;"}
{"prompt": "What are the top 5 most successful digital campaigns by leads generated?", "response": "SELECT title, leads_generated FROM MarketingCampaigns ORDER BY leads_generated DESC LIMIT 5;"}
{"prompt": "How many customers have used dynamic tracking links in their bookings?", "response": "-- No dynamic tracking links field in schema; cannot answer with current schema."}
{"prompt": "What is the weekly trend in ticket sales during recent marketing campaigns?", "response": "SELECT DATE(b.booking_date) AS date, COUNT(b.booking_id) AS total_bookings FROM Bookings b JOIN MarketingCampaigns mc ON b.booking_id = mc.campaign_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY date ORDER BY date;"}
{"prompt": "Which customer demographics have shown increased engagement after targeted campaigns?", "response": "SELECT c.customer_id, c.name, c.email FROM Customers c JOIN Bookings b ON c.customer_id = b.customer_id JOIN MarketingCampaigns mc ON b.booking_id = mc.campaign_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY c.customer_id, c.name, c.email ORDER BY COUNT(b.booking_id) DESC;"}
{"prompt": "What are the most common feedback comments related to marketing campaigns?", "response": "SELECT f.comment, COUNT(*) AS frequency FROM Feedback f WHERE f.comment LIKE '%campaign%' GROUP BY f.comment ORDER BY frequency DESC;"}
{"prompt": "How does the ticket sales surge correlate with the timing of marketing campaigns?", "response": "SELECT mc.title, COUNT(b.booking_id) AS total_bookings FROM MarketingCampaigns mc JOIN Bookings b ON mc.campaign_id = b.booking_id GROUP BY mc.title ORDER BY total_bookings DESC;"}
{"prompt": "Finance and Accounting Staff", "response": "nan"}
{"prompt": "NL Question (Ramesh’s Finance & Accounting POV)", "response": "SQL Query"}
{"prompt": "What is the total ticket sales revenue generated by all partner cinemas today?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.booking_date = CURRENT_DATE;"}
{"prompt": "How much revenue has MetroCine generated from ticket sales this week?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'MetroCine' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the total value of online snack orders processed today?", "response": "SELECT SUM(c.price * o.quantity) FROM Concessions c JOIN Orders o ON c.item_id = o.item_id WHERE DATE(o.order_time) = CURRENT_DATE;"}
{"prompt": "How many refunds have been processed this month, and what is the total refund amount?", "response": "SELECT COUNT(*) AS total_refunds, SUM(p.amount) AS total_refund_amount FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.status = 'refunded' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which bookings have had double refunds issued this month?", "response": "SELECT b.booking_id, COUNT(p.payment_id) AS refund_count FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.status = 'refunded' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY b.booking_id HAVING refund_count > 1;"}
{"prompt": "What is the total commission owed to CinemaBooking from all partner cinemas this month? (Assume commission is 10% of ticket sales)", "response": "SELECT SUM(p.amount) * 0.10 AS commission_due FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the details of all payments settled to Star Multiplex this month?", "response": "SELECT p.payment_id, p.amount, p.payment_method, p.paid_on FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'Star Multiplex' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which theaters have the highest ticket sales revenue this quarter?", "response": "SELECT t.name, SUM(p.amount) AS total_revenue FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id JOIN Payments p ON b.booking_id = p.booking_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY t.name ORDER BY total_revenue DESC;"}
{"prompt": "What is the total cash flow from all transactions this month?", "response": "SELECT SUM(p.amount) + (SELECT SUM(c.price * o.quantity) FROM Concessions c JOIN Orders o ON c.item_id = o.item_id WHERE MONTH(o.order_time) = MONTH(CURRENT_DATE)) AS total_cash_flow FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which bookings have suspiciously high transaction amounts this week? (Assume threshold is 5000)", "response": "SELECT b.booking_id, p.amount FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE p.amount > 5000 AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the details of all promo code redemptions this month? (Assume promo redemptions are tracked in Payments with method)", "response": "SELECT p.payment_id, p.amount, p.paid_on FROM Payments p WHERE payment_method LIKE '%promo%' AND MONTH(p.paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total number of bookings and total revenue for each partner cinema this month?", "response": "SELECT t.name, COUNT(b.booking_id) AS total_bookings, SUM(p.amount) AS total_revenue FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id JOIN Payments p ON b.booking_id = p.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY t.name;"}
{"prompt": "Which customers have received the highest total refunds this year?", "response": "SELECT b.customer_id, c.name, SUM(p.amount) AS total_refunded FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id JOIN Customers c ON b.customer_id = c.customer_id WHERE b.status = 'refunded' AND YEAR(b.booking_date) = YEAR(CURRENT_DATE) GROUP BY b.customer_id, c.name ORDER BY total_refunded DESC;"}
{"prompt": "What are the details of all transactions processed by credit card this week?", "response": "SELECT p.payment_id, p.amount, p.paid_on FROM Payments p WHERE p.payment_method = 'credit card' AND DATE(p.paid_on) >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the monthly trend in total revenue for the past six months?", "response": "SELECT MONTH(b.booking_date) AS month, SUM(p.amount) AS total_revenue FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which theaters have the highest number of refunded bookings this quarter?", "response": "SELECT t.name, COUNT(b.booking_id) AS refunded_bookings FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE b.status = 'refunded' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY t.name ORDER BY refunded_bookings DESC;"}
{"prompt": "What are the details of all payments for cancelled bookings this month?", "response": "SELECT p.payment_id, p.amount, p.paid_on FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.status = 'cancelled' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the average transaction value for online snack orders this month?", "response": "SELECT AVG(c.price * o.quantity) AS avg_order_value FROM Concessions c JOIN Orders o ON c.item_id = o.item_id WHERE MONTH(o.order_time) = MONTH(CURRENT_DATE);"}
{"prompt": "Which partner cinemas have the lowest revenue this month?", "response": "SELECT t.name, SUM(p.amount) AS total_revenue FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id JOIN Payments p ON b.booking_id = p.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY t.name ORDER BY total_revenue ASC;"}
{"prompt": "What is the most recent analytics report showing overall revenue and top movie?", "response": "SELECT report_date, revenue, top_movie FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "IT/System Administrators", "response": "nan"}
{"prompt": "NL Question (Vikram’s IT/System Admin POV)", "response": "SQL Query"}
{"prompt": "Which theaters are currently hosting shows today, and are all their screens in use?", "response": "SELECT t.name, t.total_screens, COUNT(DISTINCT s.screen_number) AS screens_in_use FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id WHERE DATE(s.start_time) = CURRENT_DATE GROUP BY t.name, t.total_screens;"}
{"prompt": "Are there any shows today with zero available seats, indicating a sold-out status?", "response": "SELECT s.show_id, m.title, t.name, s.start_time FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE DATE(s.start_time) = CURRENT_DATE AND s.available_seats = 0;"}
{"prompt": "Which payment methods have been used most frequently this week?", "response": "SELECT payment_method, COUNT(*) AS usage_count FROM Payments WHERE paid_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY payment_method ORDER BY usage_count DESC;"}
{"prompt": "What is the total number of bookings and payments processed today?", "response": "SELECT (SELECT count(*) FROM Bookings WHERE booking_date = CURRENT_DATE) AS total_bookings, (SELECT count(*) FROM Payments WHERE DATE(paid_on) = CURRENT_DATE) AS total_payments;"}
{"prompt": "Which theaters have reported the most booking cancellations this month?", "response": "SELECT t.name, COUNT(b.booking_id) AS cancelled_bookings FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE b.status = 'cancelled' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY t.name ORDER BY cancelled_bookings DESC;"}
{"prompt": "Are there any shows with seat availability mismatches (e.g., negative available_seats)?", "response": "SELECT s.show_id, m.title, t.name, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE s.available_seats < 0;"}
{"prompt": "What is the trend in booking errors or failed payments this week? (Assume status 'error' in Bookings or Payments)", "response": "SELECT DATE(p.paid_on) AS date, COUNT(*) AS failed_payments FROM Payments p WHERE p.payment_method = 'error' AND p.paid_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY date ORDER BY date;"}
{"prompt": "Which APIs (theaters) have not updated their show schedules in the last 24 hours? (Assume last update is latest show start_time)", "response": "SELECT t.name FROM Theaters t WHERE t.theater_id NOT IN (SELECT DISTINCT theater_id FROM Shows WHERE start_time >= DATE_SUB(NOW(), INTERVAL 24 HOUR));"}
{"prompt": "What is the total number of unique customers who have booked tickets this month?", "response": "SELECT COUNT(DISTINCT customer_id) FROM Bookings WHERE MONTH(booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which movies are causing the highest traffic spikes based on total bookings this week?", "response": "SELECT m.title, COUNT(b.booking_id) AS total_bookings FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY m.title ORDER BY total_bookings DESC;"}
{"prompt": "Are there any duplicate bookings or double payments for the same show and customer?", "response": "SELECT b.customer_id, b.show_id, COUNT(*) AS booking_count FROM Bookings b GROUP BY b.customer_id, b.show_id HAVING booking_count > 1;"}
{"prompt": "What are the details of all backups or system reports generated in the last week? (Assume AnalyticsReports logs system events)", "response": "SELECT * FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which theaters have the most frequent seat syncing issues this month? (Assume negative available_seats as a proxy for sync issue)", "response": "SELECT t.name, COUNT(s.show_id) AS sync_issues FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id WHERE s.available_seats < 0 AND MONTH(s.start_time) = MONTH(CURRENT_DATE) GROUP BY t.name ORDER BY sync_issues DESC;"}
{"prompt": "What is the average booking volume per hour for today?", "response": "SELECT HOUR(s.start_time) AS hour, COUNT(b.booking_id) AS bookings FROM Shows s JOIN Bookings b ON s.show_id = b.show_id WHERE DATE(s.start_time) = CURRENT_DATE GROUP BY hour ORDER BY hour;"}
{"prompt": "Which shows have experienced booking spikes (over 100 tickets booked) in the last 24 hours?", "response": "SELECT s.show_id, m.title, t.name, COUNT(b.booking_id) AS tickets_booked FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE s.start_time >= DATE_SUB(NOW(), INTERVAL 24 HOUR) GROUP BY s.show_id, m.title, t.name HAVING tickets_booked > 100;"}
{"prompt": "Are there any theaters that have not hosted any shows this week?", "response": "SELECT t.name FROM Theaters t WHERE t.theater_id NOT IN (SELECT DISTINCT theater_id FROM Shows WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY));"}
{"prompt": "What is the status of all payments processed by debit card today?", "response": "SELECT payment_id, amount, paid_on, booking_id FROM Payments WHERE payment_method = 'debit card' AND DATE(paid_on) = CURRENT_DATE;"}
{"prompt": "Which shows today have the highest number of available seats left?", "response": "SELECT s.show_id, m.title, t.name, s.available_seats FROM Shows s JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE DATE(s.start_time) = CURRENT_DATE ORDER BY s.available_seats DESC;"}
{"prompt": "How many bookings and total payments have been processed for 'SilverScreen Cinemas' this month?", "response": "SELECT COUNT(b.booking_id) AS total_bookings, SUM(p.amount) AS total_payments FROM Bookings b JOIN Shows s ON b.show_id = s.show_id JOIN Theaters t ON s.theater_id = t.theater_id JOIN Payments p ON b.booking_id = p.booking_id WHERE t.name = 'SilverScreen Cinemas' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the most recent analytics report on system performance and top movie?", "response": "SELECT report_date, top_movie FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Customer Support Agents", "response": "nan"}
{"prompt": "NL Question (Megha’s Customer Support Agent POV)", "response": "SQL Query"}
{"prompt": "Can I find all bookings for customer 'Rahul Verma' to help with his inquiry?", "response": "SELECT b.booking_id, b.show_id, b.status, b.booking_date FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id WHERE c.name = 'Rahul Verma';"}
{"prompt": "What are the payment details for booking_id = 301 to check if the transaction went through?", "response": "SELECT * FROM Payments WHERE booking_id = 301;"}
{"prompt": "Which bookings have a successful payment but no ticket issued?", "response": "SELECT b.booking_id FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id LEFT JOIN Tickets t ON b.booking_id = t.booking_id WHERE p.amount > 0 AND t.ticket_id IS NULL;"}
{"prompt": "What is the email address of the customer who made booking_id = 302?", "response": "SELECT c.email FROM Customers c JOIN Bookings b ON c.customer_id = b.customer_id WHERE b.booking_id = 302;"}
{"prompt": "Which bookings today have been cancelled and need refund processing?", "response": "SELECT booking_id, customer_id FROM Bookings WHERE status = 'cancelled' AND booking_date = CURRENT_DATE;"}
{"prompt": "What is the seat number for ticket_id = 501 to assist a seat change request?", "response": "SELECT seat_number FROM Tickets WHERE ticket_id = 501;"}
{"prompt": "Which bookings have applied a promotion or coupon? (Assume payment_method LIKE '%promo%')", "response": "SELECT b.booking_id, p.payment_id FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id WHERE p.payment_method LIKE '%promo%';"}
{"prompt": "What is the full booking and ticket history for customer_id = 105?", "response": "SELECT b.booking_id, b.status, t.ticket_id, t.seat_number, t.checked_in FROM Bookings b LEFT JOIN Tickets t ON b.booking_id = t.booking_id WHERE b.customer_id = 105;"}
{"prompt": "Which shows have the most refund requests this week?", "response": "SELECT s.show_id, COUNT(b.booking_id) AS refund_count FROM Shows s JOIN Bookings b ON s.show_id = b.show_id WHERE b.status = 'refunded' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY s.show_id ORDER BY refund_count DESC;"}
{"prompt": "What is the order status for all snack orders placed by customer 'Priya Singh' today?", "response": "SELECT o.order_id, o.item_id, o.quantity, o.order_time FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.name = 'Priya Singh' AND DATE(o.order_time) = CURRENT_DATE;"}
{"prompt": "Which bookings have double charges (more than one payment) this month?", "response": "SELECT b.booking_id, COUNT(p.payment_id) AS payment_count FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY b.booking_id HAVING payment_count > 1;"}
{"prompt": "What are the details of all cancelled bookings for 'SilverScreen Cinemas' this month?", "response": "SELECT b.booking_id, c.name, s.start_time, m.title FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id JOIN Shows s ON b.show_id = s.show_id JOIN Movies m ON s.movie_id = m.movie_id JOIN Theaters t ON s.theater_id = t.theater_id WHERE t.name = 'SilverScreen Cinemas' AND b.status = 'cancelled' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which customers have requested seat changes for their bookings today? (Assume comment in Feedback LIKE '%seat change%')", "response": "SELECT DISTINCT f.customer_id, c.name FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE f.comment LIKE '%seat change%' AND f.submitted_on = CURRENT_DATE;"}
{"prompt": "What is the most recent booking made by customer 'Aarti Mehra'?", "response": "SELECT b.booking_id, b.show_id, b.status, b.booking_date FROM Bookings b JOIN Customers c ON b.customer_id = c.customer_id WHERE c.name = 'Aarti Mehra' ORDER BY b.booking_date DESC LIMIT 1;"}
{"prompt": "Which tickets for booking_id = 303 have not been checked in yet?", "response": "SELECT ticket_id, seat_number FROM Tickets WHERE booking_id = 303 AND checked_in = FALSE;"}
{"prompt": "What feedback have customers given about refund or payment issues this week?", "response": "SELECT f.customer_id, c.name, f.rating, f.comment FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE (f.comment LIKE '%refund%' OR f.comment LIKE '%payment%') AND f.submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which bookings have been flagged for suspicious activity or possible fraud? (Assume status = 'suspicious')", "response": "SELECT booking_id, customer_id FROM Bookings WHERE status = 'suspicious';"}
{"prompt": "What is the total number of refund requests processed this month?", "response": "SELECT COUNT(*) FROM Bookings WHERE status = 'refunded' AND MONTH(booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which customers have had more than three cancellations this month?", "response": "SELECT customer_id, COUNT(booking_id) AS cancel_count FROM Bookings WHERE status = 'cancelled' AND MONTH(booking_date) = MONTH(CURRENT_DATE) GROUP BY customer_id HAVING cancel_count > 3;"}
{"prompt": "What are the details of all bookings for shows starting in the next hour that may need urgent support?", "response": "SELECT b.booking_id, b.customer_id, s.show_id, s.start_time FROM Bookings b JOIN Shows s ON b.show_id = s.show_id WHERE s.start_time BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 1 HOUR);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question (Data Analyst POV)", "response": "SQL Query"}
{"prompt": "What is the daily trend in total ticket sales across all theaters this month?", "response": "SELECT booking_date, COUNT(booking_id) AS total_tickets FROM Bookings WHERE MONTH(booking_date) = MONTH(CURRENT_DATE) GROUP BY booking_date ORDER BY booking_date;"}
{"prompt": "Which movies have generated the highest ticket sales revenue this quarter?", "response": "SELECT m.title, SUM(p.amount) AS total_revenue FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id JOIN Payments p ON b.booking_id = p.booking_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY m.title ORDER BY total_revenue DESC;"}
{"prompt": "What is the average occupancy rate for all shows this week?", "response": "SELECT AVG((b.num_tickets * 1.0) / (s.available_seats + b.num_tickets)) AS avg_occupancy FROM Bookings b JOIN Shows s ON b.show_id = s.show_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which theaters have the highest number of bookings this month?", "response": "SELECT t.name, COUNT(b.booking_id) AS total_bookings FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY t.name ORDER BY total_bookings DESC;"}
{"prompt": "What are the most popular showtimes for moviegoers on weekends?", "response": "SELECT TIME(s.start_time) AS showtime, COUNT(b.booking_id) AS total_bookings FROM Shows s JOIN Bookings b ON s.show_id = b.show_id WHERE WEEKDAY(s.start_time) IN (5,6) GROUP BY showtime ORDER BY total_bookings DESC;"}
{"prompt": "How many unique customers have made bookings in the last 30 days?", "response": "SELECT COUNT(DISTINCT customer_id) FROM Bookings WHERE booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "Which genres have the highest average feedback ratings this year?", "response": "SELECT m.genre, AVG(f.rating) AS avg_rating FROM Movies m JOIN Feedback f ON m.movie_id = f.movie_id WHERE YEAR(f.submitted_on) = YEAR(CURRENT_DATE) GROUP BY m.genre ORDER BY avg_rating DESC;"}
{"prompt": "What is the total revenue from concession sales for each theater this month?", "response": "SELECT t.name, SUM(c.price * o.quantity) AS total_revenue FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id JOIN Orders o ON b.customer_id = o.customer_id JOIN Concessions c ON o.item_id = c.item_id WHERE MONTH(o.order_time) = MONTH(CURRENT_DATE) GROUP BY t.name;"}
{"prompt": "How many bookings have been cancelled or refunded this week?", "response": "SELECT COUNT(*) FROM Bookings WHERE (status = 'cancelled' OR status = 'refunded') AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the average transaction value for payments processed today?", "response": "SELECT AVG(amount) FROM Payments WHERE DATE(paid_on) = CURRENT_DATE;"}
{"prompt": "Which movies have the highest number of bookings from new customers this month?", "response": "SELECT m.title, COUNT(b.booking_id) AS new_customer_bookings FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id WHERE b.customer_id IN (SELECT customer_id FROM Customers WHERE joined_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) GROUP BY m.title ORDER BY new_customer_bookings DESC;"}
{"prompt": "What is the trend in app installs and bookings after major promotions? (Assume summary in AnalyticsReports)", "response": "SELECT report_date, summary FROM AnalyticsReports WHERE summary LIKE '%app install%' OR summary LIKE '%promotion%' ORDER BY report_date DESC;"}
{"prompt": "Which days of the week see the highest snack order volumes?", "response": "SELECT DAYNAME(order_time) AS day, COUNT(order_id) AS total_orders FROM Orders GROUP BY day ORDER BY total_orders DESC;"}
{"prompt": "What are the top 5 movies by average feedback rating this month?", "response": "SELECT m.title, AVG(f.rating) AS avg_rating FROM Movies m JOIN Feedback f ON m.movie_id = f.movie_id WHERE MONTH(f.submitted_on) = MONTH(CURRENT_DATE) GROUP BY m.title ORDER BY avg_rating DESC LIMIT 5;"}
{"prompt": "Which payment methods are most popular among customers this month?", "response": "SELECT payment_method, COUNT(*) AS usage_count FROM Payments WHERE MONTH(paid_on) = MONTH(CURRENT_DATE) GROUP BY payment_method ORDER BY usage_count DESC;"}
{"prompt": "How many customers have made more than three bookings this month?", "response": "SELECT customer_id, COUNT(booking_id) AS booking_count FROM Bookings WHERE MONTH(booking_date) = MONTH(CURRENT_DATE) GROUP BY customer_id HAVING booking_count > 3;"}
{"prompt": "What is the total number of bookings and revenue for each movie genre this quarter?", "response": "SELECT m.genre, COUNT(b.booking_id) AS total_bookings, SUM(p.amount) AS total_revenue FROM Movies m JOIN Shows s ON m.movie_id = s.movie_id JOIN Bookings b ON s.show_id = b.show_id JOIN Payments p ON b.booking_id = p.booking_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY m.genre;"}
{"prompt": "Which theaters have the lowest occupancy rates this month?", "response": "SELECT t.name, AVG((b.num_tickets * 1.0) / (s.available_seats + b.num_tickets)) AS avg_occupancy FROM Theaters t JOIN Shows s ON t.theater_id = s.theater_id JOIN Bookings b ON s.show_id = b.show_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY t.name ORDER BY avg_occupancy ASC;"}
{"prompt": "What are the most common reasons for refund requests based on feedback comments?", "response": "SELECT f.comment, COUNT(*) AS frequency FROM Feedback f WHERE f.comment LIKE '%refund%' GROUP BY f.comment ORDER BY frequency DESC;"}
{"prompt": "What is the most recent analytics report on top movies and revenue?", "response": "SELECT report_date, top_movie, revenue FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "TravelAgencyDB", "response": "nan"}
{"prompt": "Travelers/Customers B237", "response": "nan"}
{"prompt": "NL Question (Nikhil’s Traveler POV)", "response": "SQL Query"}
{"prompt": "What travel packages are available for a 10-day trip covering Paris, Amsterdam, and Rome?", "response": "SELECT tp.package_id, tp.title, tp.price, tp.duration_days FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE tp.duration_days = 10 AND d.name IN ('Paris', 'Amsterdam', 'Rome');"}
{"prompt": "Can I see all adventure-themed travel packages within my budget of $2,000?", "response": "SELECT tp.package_id, tp.title, tp.price FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE tp.price <= 2000 AND d.category = 'adventure';"}
{"prompt": "Who is the travel advisor or tour guide assigned to my 'Europe Express' package?", "response": "SELECT tg.name, tg.languages FROM TourGuides tg WHERE tg.assigned_package = (SELECT package_id FROM TravelPackages WHERE title = 'Europe Express');"}
{"prompt": "What is the full itinerary for the 'Europe Express' travel package?", "response": "SELECT day_number, activity FROM Itineraries WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Europe Express') ORDER BY day_number;"}
{"prompt": "How can I check the status of my booking for the 'Europe Express' package?", "response": "SELECT status FROM Bookings WHERE customer_id = (SELECT user_id FROM Users WHERE name = 'Nikhil') AND package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Europe Express');"}
{"prompt": "What payment methods can I use to confirm my travel package?", "response": "SELECT DISTINCT method FROM Payments;"}
{"prompt": "Can I see my payment history for all confirmed bookings?", "response": "SELECT amount, method, paid_on FROM Payments WHERE booking_id IN (SELECT booking_id FROM Bookings WHERE customer_id = (SELECT user_id FROM Users WHERE name = 'Nikhil') AND status = 'confirmed');"}
{"prompt": "What support tickets have I raised about my travel plans?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by = (SELECT user_id FROM Users WHERE name = 'Nikhil');"}
{"prompt": "Which marketing campaigns are currently active for European travel packages?", "response": "SELECT campaign_id, name, start_date, end_date, budget, channel FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND name LIKE '%Europe%';"}
{"prompt": "What feedback have other travelers given for the 'Europe Express' package?", "response": "SELECT rating, comments, submitted_on FROM Feedback WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Europe Express');"}
{"prompt": "Can I get a summary of the latest analytics report on top destinations and revenue?", "response": "SELECT report_date, top_destination, revenue_generated, total_bookings FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which destinations are available under culture and food themes?", "response": "SELECT destination_id, name, country FROM Destinations WHERE category IN ('culture', 'food');"}
{"prompt": "How many bookings have been made for the 'Europe Express' package so far?", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Europe Express');"}
{"prompt": "What is the average rating for travel packages in the adventure category?", "response": "SELECT AVG(rating) FROM Feedback WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE destination_id IN (SELECT destination_id FROM Destinations WHERE category = 'adventure'));"}
{"prompt": "Which travel packages have the highest number of bookings this year?", "response": "SELECT tp.title, COUNT(b.booking_id) AS total_bookings FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id WHERE YEAR(b.booking_date) = YEAR(CURRENT_DATE) GROUP BY tp.title ORDER BY total_bookings DESC;"}
{"prompt": "How do I contact my personalized travel advisor for the 'Europe Express' package?", "response": "SELECT name, email, phone FROM TourGuides WHERE assigned_package = (SELECT package_id FROM TravelPackages WHERE title = 'Europe Express');"}
{"prompt": "What is the average duration of travel packages booked by customers this year?", "response": "SELECT AVG(tp.duration_days) FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id WHERE YEAR(b.booking_date) = YEAR(CURRENT_DATE);"}
{"prompt": "Which travel packages have received the highest feedback ratings from travelers?", "response": "SELECT tp.title, AVG(f.rating) AS avg_rating FROM TravelPackages tp JOIN Feedback f ON tp.package_id = f.package_id GROUP BY tp.title ORDER BY avg_rating DESC;"}
{"prompt": "What are the most common feedback comments from travelers about European packages?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%Europe%') GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "What is the latest status of support tickets I have raised this month?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by = (SELECT user_id FROM Users WHERE name = 'Nikhil') AND MONTH(created_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Travel Agents", "response": "nan"}
{"prompt": "nan", "response": "nan"}
{"prompt": "NL Question (Sana’s Senior Travel Agent POV)", "response": "SQL Query"}
{"prompt": "Which 7-day travel packages to Southeast Asia beaches are available for families?", "response": "SELECT tp.package_id, tp.title, tp.price FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE tp.duration_days = 7 AND d.category = 'beach' AND d.country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines');"}
{"prompt": "What are the details of all packages in Bali and Phuket that are suitable for kids?", "response": "SELECT tp.package_id, tp.title, tp.price, d.name FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.name IN ('Bali', 'Phuket') AND d.description LIKE '%kid%';"}
{"prompt": "Which travel packages in Southeast Asia are under $2,500 and include snorkeling activities?", "response": "SELECT tp.package_id, tp.title, tp.price FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE tp.price <= 2500 AND d.country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines') AND tp.title LIKE '%snorkel%';"}
{"prompt": "What is the full itinerary for the 'Bali Beach Family Fun' package?", "response": "SELECT day_number, activity FROM Itineraries WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Bali Beach Family Fun') ORDER BY day_number;"}
{"prompt": "Who is the tour guide assigned to the 'Phuket Adventure' package, and what languages do they speak?", "response": "SELECT name, languages FROM TourGuides WHERE assigned_package = (SELECT package_id FROM TravelPackages WHERE title = 'Phuket Adventure');"}
{"prompt": "What is the average price of 7-day beach packages in Southeast Asia?", "response": "SELECT AVG(tp.price) FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE tp.duration_days = 7 AND d.category = 'beach' AND d.country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines');"}
{"prompt": "Which travel packages in Bali have received the highest feedback ratings from families?", "response": "SELECT tp.title, AVG(f.rating) AS avg_rating FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Feedback f ON tp.package_id = f.package_id WHERE d.name = 'Bali' GROUP BY tp.title ORDER BY avg_rating DESC;"}
{"prompt": "How many bookings have been made for Phuket packages this month?", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE destination_id = (SELECT destination_id FROM Destinations WHERE name = 'Phuket')) AND MONTH(booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the most common feedback comments for Southeast Asia beach packages?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE destination_id IN (SELECT destination_id FROM Destinations WHERE category = 'beach' AND country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines'))) GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Which active marketing campaigns are currently promoting Southeast Asia destinations?", "response": "SELECT campaign_id, name, start_date, end_date, channel FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND name LIKE '%Southeast Asia%';"}
{"prompt": "What is the payment status for the latest booking made for the 'Bali Beach Family Fun' package?", "response": "SELECT p.amount, p.method, p.paid_on FROM Payments p WHERE booking_id = (SELECT booking_id FROM Bookings WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Bali Beach Family Fun') ORDER BY booking_date DESC LIMIT 1);"}
{"prompt": "Which customers have booked family-friendly beach packages in Southeast Asia this year?", "response": "SELECT DISTINCT b.customer_id FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.category = 'beach' AND d.country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines') AND tp.title LIKE '%family%' AND YEAR(b.booking_date) = YEAR(CURRENT_DATE);"}
{"prompt": "What is the average rating for all beach packages in Thailand?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN TravelPackages tp ON f.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country = 'Thailand' AND d.category = 'beach';"}
{"prompt": "Which travel packages have the most diverse itineraries (most activities) in Bali or Phuket?", "response": "SELECT tp.title, COUNT(i.itinerary_id) AS activity_count FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Itineraries i ON tp.package_id = i.package_id WHERE d.name IN ('Bali', 'Phuket') GROUP BY tp.title ORDER BY activity_count DESC;"}
{"prompt": "How many support tickets have been raised this month about bookings for Southeast Asia destinations?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE raised_by IN (SELECT user_id FROM Users WHERE role = 'customer') AND subject LIKE '%Southeast Asia%' AND MONTH(created_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the trend in bookings for family beach packages in Southeast Asia over the last six months?", "response": "SELECT MONTH(booking_date) AS month, COUNT(*) AS total_bookings FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%family%' AND destination_id IN (SELECT destination_id FROM Destinations WHERE category = 'beach' AND country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines'))) AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which channels have the highest budget allocation for marketing Southeast Asia beach packages this quarter?", "response": "SELECT channel, SUM(budget) AS total_budget FROM MarketingCampaigns WHERE name LIKE '%Southeast Asia%' AND start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY channel ORDER BY total_budget DESC;"}
{"prompt": "What is the most recent analytics report showing the top destination and revenue generated?", "response": "SELECT report_date, top_destination, revenue_generated FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which users have submitted the most feedback for Bali or Phuket packages this year?", "response": "SELECT u.name, COUNT(f.feedback_id) AS feedback_count FROM Users u JOIN Feedback f ON u.user_id = f.user_id WHERE f.package_id IN (SELECT package_id FROM TravelPackages WHERE destination_id IN (SELECT destination_id FROM Destinations WHERE name IN ('Bali', 'Phuket'))) AND YEAR(f.submitted_on) = YEAR(CURRENT_DATE) GROUP BY u.name ORDER BY feedback_count DESC;"}
{"prompt": "What is the average payment amount for bookings made online for Southeast Asia beach packages this month?", "response": "SELECT AVG(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE p.method = 'online' AND MONTH(p.paid_on) = MONTH(CURRENT_DATE) AND d.category = 'beach' AND d.country IN ('Thailand', 'Indonesia', 'Malaysia', 'Vietnam', 'Philippines');"}
{"prompt": "Tour Guides", "response": "nan"}
{"prompt": "NL Question (David’s Tour Guide POV)", "response": "SQL Query"}
{"prompt": "What tours am I scheduled to lead today in Rome?", "response": "SELECT tp.title, tp.duration_days, d.name AS destination, b.booking_date FROM TravelPackages tp JOIN TourGuides tg ON tp.package_id = tg.assigned_package JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE tg.name = 'David' AND d.name = 'Rome' AND b.booking_date = CURRENT_DATE;"}
{"prompt": "How many tourists are in each of my groups today?", "response": "SELECT tp.title, COUNT(b.customer_id) AS group_size FROM TravelPackages tp JOIN TourGuides tg ON tp.package_id = tg.assigned_package JOIN Bookings b ON tp.package_id = b.package_id WHERE tg.name = 'David' AND b.booking_date = CURRENT_DATE GROUP BY tp.title;"}
{"prompt": "What are the nationalities of travelers in my next tour group? (Assume country field in Users table)", "response": "SELECT DISTINCT u.country FROM Users u JOIN Bookings b ON u.user_id = b.customer_id WHERE b.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') AND b.booking_date = CURRENT_DATE;"}
{"prompt": "Are there any special instructions or preferences for my assigned tours today?", "response": "SELECT b.booking_id, b.status, s.subject, s.message FROM Bookings b LEFT JOIN SupportTickets s ON b.customer_id = s.raised_by WHERE b.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') AND b.booking_date = CURRENT_DATE;"}
{"prompt": "What languages are required for my tours today?", "response": "SELECT languages FROM TourGuides WHERE name = 'David';"}
{"prompt": "What is the full itinerary for my assigned package today?", "response": "SELECT day_number, activity FROM Itineraries WHERE package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') ORDER BY day_number;"}
{"prompt": "Which travel packages in Rome have I been assigned to this month?", "response": "SELECT tp.title, tp.duration_days FROM TravelPackages tp JOIN TourGuides tg ON tp.package_id = tg.assigned_package JOIN Destinations d ON tp.destination_id = d.destination_id WHERE tg.name = 'David' AND d.name = 'Rome' AND tp.created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "How many tours have I led for groups larger than 10 people this year?", "response": "SELECT COUNT(*) FROM Bookings b JOIN TourGuides tg ON b.package_id = tg.assigned_package WHERE tg.name = 'David' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND b.booking_id IN (SELECT booking_id FROM Bookings GROUP BY booking_id HAVING COUNT(customer_id) > 10);"}
{"prompt": "What feedback ratings have I received from travelers this month?", "response": "SELECT f.rating, f.comments, f.submitted_on FROM Feedback f WHERE f.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') AND MONTH(f.submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is my average feedback rating for all tours this year?", "response": "SELECT AVG(f.rating) FROM Feedback f WHERE f.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') AND YEAR(f.submitted_on) = YEAR(CURRENT_DATE);"}
{"prompt": "Which of my tours have received the highest feedback ratings?", "response": "SELECT tp.title, AVG(f.rating) AS avg_rating FROM TravelPackages tp JOIN Feedback f ON tp.package_id = f.package_id JOIN TourGuides tg ON tp.package_id = tg.assigned_package WHERE tg.name = 'David' GROUP BY tp.title ORDER BY avg_rating DESC;"}
{"prompt": "How many premium or bonus tours have I been assigned this season? (Assume premium in package title)", "response": "SELECT COUNT(*) FROM TravelPackages tp JOIN TourGuides tg ON tp.package_id = tg.assigned_package WHERE tg.name = 'David' AND tp.title LIKE '%premium%' AND tp.created_on >= '2025-03-01';"}
{"prompt": "What are the most common feedback comments I receive from travelers?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Which days this month have I led the most tours?", "response": "SELECT b.booking_date, COUNT(*) AS tours_led FROM Bookings b JOIN TourGuides tg ON b.package_id = tg.assigned_package WHERE tg.name = 'David' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY b.booking_date ORDER BY tours_led DESC;"}
{"prompt": "What is the average group size for my tours in Rome this year?", "response": "SELECT AVG(group_size) FROM (SELECT COUNT(b.customer_id) AS group_size FROM Bookings b JOIN TourGuides tg ON b.package_id = tg.assigned_package JOIN Destinations d ON (SELECT destination_id FROM TravelPackages WHERE package_id = tg.assigned_package) = d.destination_id WHERE tg.name = 'David' AND d.name = 'Rome' AND YEAR(b.booking_date) = YEAR(CURRENT_DATE) GROUP BY b.booking_id) AS group_stats;"}
{"prompt": "Which travel packages have I led in more than one language?", "response": "SELECT tp.title, tg.languages FROM TravelPackages tp JOIN TourGuides tg ON tp.package_id = tg.assigned_package WHERE tg.name = 'David' AND tg.languages LIKE '%,%';"}
{"prompt": "What is the latest feedback I received for my most recent tour?", "response": "SELECT f.rating, f.comments, f.submitted_on FROM Feedback f WHERE f.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') ORDER BY f.submitted_on DESC LIMIT 1;"}
{"prompt": "Which of my tours have included special dietary requests from travelers? (Assume keyword in SupportTickets)", "response": "SELECT b.booking_id, s.subject, s.message FROM Bookings b JOIN SupportTickets s ON b.customer_id = s.raised_by WHERE b.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') AND s.message LIKE '%dietary%';"}
{"prompt": "What is the trend in feedback ratings for my tours over the past six months?", "response": "SELECT MONTH(f.submitted_on) AS month, AVG(f.rating) AS avg_rating FROM Feedback f WHERE f.package_id = (SELECT assigned_package FROM TourGuides WHERE name = 'David') AND f.submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which travel agencies have assigned me to the most tours this year? (Assume created_by in TravelPackages links to agency user)", "response": "SELECT u.name, COUNT(tp.package_id) AS total_tours FROM Users u JOIN TravelPackages tp ON u.user_id = tp.created_by JOIN TourGuides tg ON tp.package_id = tg.assigned_package WHERE tg.name = 'David' AND YEAR(tp.created_on) = YEAR(CURRENT_DATE) GROUP BY u.name ORDER BY total_tours DESC;"}
{"prompt": "Reservation Specialists", "response": "nan"}
{"prompt": "NL Question (Anita’s Reservation Specialist POV)", "response": "SQL Query"}
{"prompt": "Which travel packages are available for a business trip from Mumbai to New York?", "response": "SELECT tp.package_id, tp.title, tp.price, tp.duration_days FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.name IN ('New York') AND tp.title LIKE '%business%';"}
{"prompt": "What is the status of the latest booking request for customer 'Rajesh Kumar'?", "response": "SELECT status FROM Bookings WHERE customer_id = (SELECT user_id FROM Users WHERE name = 'Rajesh Kumar') ORDER BY booking_date DESC LIMIT 1;"}
{"prompt": "What are the details and price of all available travel packages to New York for next week?", "response": "SELECT tp.package_id, tp.title, tp.price FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.name = 'New York' AND tp.created_on <= DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which bookings have been confirmed for business travelers this month?", "response": "SELECT b.booking_id, b.customer_id, b.package_id FROM Bookings b JOIN Users u ON b.customer_id = u.user_id WHERE u.role = 'business' AND b.status = 'confirmed' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the payment status for booking_id = 1234?", "response": "SELECT amount, method, paid_on FROM Payments WHERE booking_id = 1234;"}
{"prompt": "Which customers have bookings for travel packages with tight schedules (duration_days <= 3)?", "response": "SELECT DISTINCT b.customer_id FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id WHERE tp.duration_days <= 3;"}
{"prompt": "What is the full itinerary for the 'NYC Business Express' package?", "response": "SELECT day_number, activity FROM Itineraries WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'NYC Business Express') ORDER BY day_number;"}
{"prompt": "Who is the assigned tour guide for the 'NYC Business Express' package?", "response": "SELECT name, languages FROM TourGuides WHERE assigned_package = (SELECT package_id FROM TravelPackages WHERE title = 'NYC Business Express');"}
{"prompt": "Which bookings are pending confirmation for trips departing from Mumbai this week?", "response": "SELECT b.booking_id, b.customer_id, b.package_id FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.name = 'Mumbai' AND b.status = 'pending' AND b.booking_date >= CURRENT_DATE AND b.booking_date <= DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What feedback have business travelers left for the 'NYC Business Express' package?", "response": "SELECT rating, comments, submitted_on FROM Feedback WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'NYC Business Express');"}
{"prompt": "Which marketing campaigns are currently active for business travel packages?", "response": "SELECT campaign_id, name, start_date, end_date, channel FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND name LIKE '%business%';"}
{"prompt": "What is the average price of business travel packages to the United States?", "response": "SELECT AVG(tp.price) FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country = 'United States' AND tp.title LIKE '%business%';"}
{"prompt": "Which bookings have been cancelled for New York packages this month?", "response": "SELECT b.booking_id, b.customer_id FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.name = 'New York' AND b.status = 'cancelled' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the payment method most frequently used by business travelers this year?", "response": "SELECT method, COUNT(*) AS usage_count FROM Payments WHERE booking_id IN (SELECT booking_id FROM Bookings WHERE customer_id IN (SELECT user_id FROM Users WHERE role = 'business')) AND YEAR(paid_on) = YEAR(CURRENT_DATE) GROUP BY method ORDER BY usage_count DESC LIMIT 1;"}
{"prompt": "Which support tickets have been raised about urgent booking issues this week?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE subject LIKE '%urgent%' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the most common feedback comments from business travelers about US packages?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE destination_id IN (SELECT destination_id FROM Destinations WHERE country = 'United States')) GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "Which bookings for business travelers have upcoming check-in deadlines this week?", "response": "SELECT b.booking_id, b.customer_id, b.package_id FROM Bookings b JOIN Users u ON b.customer_id = u.user_id WHERE u.role = 'business' AND b.status = 'confirmed' AND b.booking_date >= CURRENT_DATE AND b.booking_date <= DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the trend in confirmed business bookings to New York over the past six months?", "response": "SELECT MONTH(booking_date) AS month, COUNT(*) AS total_bookings FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%business%' AND destination_id = (SELECT destination_id FROM Destinations WHERE name = 'New York')) AND status = 'confirmed' AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which travel packages to New York have received the highest ratings from business travelers?", "response": "SELECT tp.title, AVG(f.rating) AS avg_rating FROM TravelPackages tp JOIN Feedback f ON tp.package_id = f.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.name = 'New York' AND tp.title LIKE '%business%' GROUP BY tp.title ORDER BY avg_rating DESC;"}
{"prompt": "What is the most recent analytics report showing top destination and revenue generated?", "response": "SELECT report_date, top_destination, revenue_generated FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "NL Question (Ritu’s Customer Support POV)", "response": "SQL Query"}
{"prompt": "Can I view the full itinerary for booking_id = 2101 to check which segment was affected?", "response": "SELECT i.day_number, i.activity FROM Itineraries i JOIN Bookings b ON i.package_id = b.package_id WHERE b.booking_id = 2101 ORDER BY i.day_number;"}
{"prompt": "What is the current status of the couple’s booking for booking_id = 2101?", "response": "SELECT status FROM Bookings WHERE booking_id = 2101;"}
{"prompt": "Which travel packages offer complimentary hotel stays for missed connections?", "response": "SELECT tp.package_id, tp.title FROM TravelPackages tp WHERE tp.title LIKE '%complimentary hotel%' OR tp.description LIKE '%complimentary hotel%';"}
{"prompt": "What are the payment details for booking_id = 2101 to confirm if a refund is needed?", "response": "SELECT amount, method, paid_on FROM Payments WHERE booking_id = 2101;"}
{"prompt": "Which support tickets have been raised by the couple about their disrupted journey? (Assume user_id = 305)", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by = 305;"}
{"prompt": "What is the updated itinerary for booking_id = 2101 after rescheduling?", "response": "SELECT i.day_number, i.activity FROM Itineraries i JOIN Bookings b ON i.package_id = b.package_id WHERE b.booking_id = 2101 ORDER BY i.day_number;"}
{"prompt": "Which bookings have been rescheduled due to weather this week?", "response": "SELECT booking_id, customer_id, status FROM Bookings WHERE status = 'rescheduled' AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What feedback have travelers given about support during flight disruptions?", "response": "SELECT rating, comments, submitted_on FROM Feedback WHERE comments LIKE '%flight%' OR comments LIKE '%support%';"}
{"prompt": "What is the visa documentation status for customer_id = 305? (Assume subject LIKE '%visa%' in SupportTickets)", "response": "SELECT status FROM SupportTickets WHERE raised_by = 305 AND subject LIKE '%visa%';"}
{"prompt": "Which bookings for customer_id = 305 have pending refunds?", "response": "SELECT b.booking_id FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id WHERE b.customer_id = 305 AND b.status = 'refunded' AND p.amount IS NOT NULL;"}
{"prompt": "What is the conversation history for support tickets raised by customer_id = 305?", "response": "SELECT subject, message, status, created_on FROM SupportTickets WHERE raised_by = 305 ORDER BY created_on DESC;"}
{"prompt": "Which travel packages have the most rescheduling requests this month?", "response": "SELECT tp.title, COUNT(st.ticket_id) AS reschedule_count FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id JOIN SupportTickets st ON b.customer_id = st.raised_by WHERE st.subject LIKE '%reschedule%' AND MONTH(st.created_on) = MONTH(CURRENT_DATE) GROUP BY tp.title ORDER BY reschedule_count DESC;"}
{"prompt": "What are the most common reasons for refund requests this month?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE subject LIKE '%refund%' AND MONTH(created_on) = MONTH(CURRENT_DATE) GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Which bookings for customer_id = 305 are scheduled to depart in the next 3 days?", "response": "SELECT booking_id, package_id, booking_date FROM Bookings WHERE customer_id = 305 AND booking_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 3 DAY);"}
{"prompt": "What is the latest feedback received from customer_id = 305 about their travel experience?", "response": "SELECT rating, comments, submitted_on FROM Feedback WHERE user_id = 305 ORDER BY submitted_on DESC LIMIT 1;"}
{"prompt": "Which support tickets are currently escalated and need urgent attention?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE status = 'escalated';"}
{"prompt": "What is the trend in support tickets related to flight disruptions over the past month?", "response": "SELECT DATE(created_on) AS date, COUNT(*) AS ticket_count FROM SupportTickets WHERE subject LIKE '%flight%' AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY date ORDER BY date;"}
{"prompt": "What is the average resolution time for support tickets this month?", "response": "SELECT AVG(TIMESTAMPDIFF(HOUR, created_on, NOW())) AS avg_resolution_hours FROM SupportTickets WHERE MONTH(created_on) = MONTH(CURRENT_DATE) AND status = 'resolved';"}
{"prompt": "Which destinations have the highest number of support tickets raised this quarter?", "response": "SELECT d.name, COUNT(st.ticket_id) AS ticket_count FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id JOIN SupportTickets st ON b.customer_id = st.raised_by WHERE st.created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY d.name ORDER BY ticket_count DESC;"}
{"prompt": "What is the most recent analytics report on support ticket volume and top destinations?", "response": "SELECT report_date, top_destination, total_bookings FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Travel Package Managers", "response": "nan"}
{"prompt": "NL Question (Arun’s Travel Package Manager POV)", "response": "SQL Query"}
{"prompt": "What are the most popular destinations this quarter based on booking counts?", "response": "SELECT d.name, COUNT(b.booking_id) AS total_bookings FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY d.name ORDER BY total_bookings DESC;"}
{"prompt": "Which travel packages have received the highest average customer ratings recently?", "response": "SELECT tp.title, AVG(f.rating) AS avg_rating FROM TravelPackages tp JOIN Feedback f ON tp.package_id = f.package_id WHERE f.submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY tp.title ORDER BY avg_rating DESC;"}
{"prompt": "What are the details of all travel packages created in the last quarter?", "response": "SELECT package_id, title, price, duration_days, created_on FROM TravelPackages WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "Can I see the full itinerary for the 'Winter Magic in Iceland' package?", "response": "SELECT day_number, activity FROM Itineraries WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Winter Magic in Iceland') ORDER BY day_number;"}
{"prompt": "Which tour guides are assigned to the 'Winter Magic in Iceland' package and what languages do they speak?", "response": "SELECT name, languages FROM TourGuides WHERE assigned_package = (SELECT package_id FROM TravelPackages WHERE title = 'Winter Magic in Iceland');"}
{"prompt": "What is the total number of bookings for the 'Winter Magic in Iceland' package this month?", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Winter Magic in Iceland') AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "How much revenue has the 'Winter Magic in Iceland' package generated so far?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Winter Magic in Iceland');"}
{"prompt": "Which marketing campaigns are currently promoting the 'Winter Magic in Iceland' package?", "response": "SELECT * FROM MarketingCampaigns WHERE name LIKE '%Winter Magic in Iceland%' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "What is the average price of travel packages that include eco-resorts?", "response": "SELECT AVG(price) FROM TravelPackages WHERE title LIKE '%eco-resort%';"}
{"prompt": "Which travel packages include Northern Lights tours?", "response": "SELECT package_id, title FROM TravelPackages WHERE title LIKE '%Northern Lights%';"}
{"prompt": "How many customer feedback entries mention thermal spa passes?", "response": "SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%thermal spa%';"}
{"prompt": "What are the most common activities included in travel itineraries for winter packages?", "response": "SELECT activity, COUNT(*) AS frequency FROM Itineraries WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%Winter%') GROUP BY activity ORDER BY frequency DESC;"}
{"prompt": "Which travel packages have been removed or adjusted due to low bookings recently? (not tracked in schema, so skip or rephrase)", "response": "-- No direct field for removed packages, so this question can be rephrased or tracked externally."}
{"prompt": "What is the average duration of travel packages created this year?", "response": "SELECT AVG(duration_days) FROM TravelPackages WHERE created_on >= DATE_FORMAT(CURRENT_DATE, '%Y-01-01');"}
{"prompt": "Which destinations have the highest number of eco-resort packages?", "response": "SELECT d.name, COUNT(tp.package_id) AS eco_resort_count FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id WHERE tp.title LIKE '%eco-resort%' GROUP BY d.name ORDER BY eco_resort_count DESC;"}
{"prompt": "How many bookings have been made for packages including thermal spa passes this year?", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%thermal spa%') AND booking_date >= DATE_FORMAT(CURRENT_DATE, '%Y-01-01');"}
{"prompt": "What is the trend in customer feedback ratings for the 'Winter Magic in Iceland' package over the last six months?", "response": "SELECT submitted_on, rating FROM Feedback WHERE package_id = (SELECT package_id FROM TravelPackages WHERE title = 'Winter Magic in Iceland') AND submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) ORDER BY submitted_on;"}
{"prompt": "Which travel packages have the most diverse itineraries based on the number of activities?", "response": "SELECT tp.title, COUNT(i.itinerary_id) AS activity_count FROM TravelPackages tp JOIN Itineraries i ON tp.package_id = i.package_id GROUP BY tp.title ORDER BY activity_count DESC;"}
{"prompt": "How many marketing campaigns have been launched this year?", "response": "SELECT COUNT(*) FROM MarketingCampaigns WHERE start_date >= DATE_FORMAT(CURRENT_DATE, '%Y-01-01');"}
{"prompt": "What is the latest analytics report showing top destinations and revenue generated?", "response": "SELECT report_date, top_destination, revenue_generated FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Finance/Accounting Staff", "response": "nan"}
{"prompt": "NL Question (Priya’s Finance Department POV)", "response": "SQL Query"}
{"prompt": "What is the total revenue generated from all bookings today?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.booking_date = CURRENT_DATE;"}
{"prompt": "How much revenue came from online transactions this month?", "response": "SELECT SUM(p.amount) FROM Payments p WHERE p.method = 'online' AND MONTH(p.paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total value of refunds processed this month?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.status = 'refunded' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which payments are still outstanding for customer bookings?", "response": "SELECT b.booking_id, b.customer_id FROM Bookings b LEFT JOIN Payments p ON b.booking_id = p.booking_id WHERE p.amount IS NULL OR p.amount = 0;"}
{"prompt": "What is the daily revenue breakdown for the past week?", "response": "SELECT b.booking_date, SUM(p.amount) AS daily_revenue FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY b.booking_date ORDER BY b.booking_date;"}
{"prompt": "Which partner hotels and airlines are due commission payments this month?", "response": "SELECT DISTINCT tp.created_by FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id JOIN Payments p ON b.booking_id = p.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total commission distributed to partners this month? (Assume 10% commission)", "response": "SELECT SUM(p.amount) * 0.10 AS commission_paid FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which bookings have duplicate refunds processed this month?", "response": "SELECT b.booking_id, COUNT(p.payment_id) AS refund_count FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.status = 'refunded' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY b.booking_id HAVING refund_count > 1;"}
{"prompt": "What are the details of all vendor settlements processed this month?", "response": "SELECT p.payment_id, p.amount, p.method, p.paid_on FROM Payments p WHERE p.method = 'vendor' AND MONTH(p.paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which discount codes or promo campaigns have been redeemed this month? (Assume method LIKE '%promo%')", "response": "SELECT p.payment_id, p.amount, p.paid_on FROM Payments p WHERE p.method LIKE '%promo%' AND MONTH(p.paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the GST amount for all bookings this month if GST is 18%?", "response": "SELECT SUM(p.amount) * 0.18 AS gst_amount FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total value of offline deposits received this month?", "response": "SELECT SUM(p.amount) FROM Payments p WHERE p.method = 'offline' AND MONTH(p.paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which partner hotels or airlines have missed payouts this month? (Assume missing payment for confirmed booking)", "response": "SELECT tp.created_by FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id LEFT JOIN Payments p ON b.booking_id = p.booking_id WHERE b.status = 'confirmed' AND (p.amount IS NULL OR p.amount = 0) AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the monthly trend of total revenue for the past six months?", "response": "SELECT MONTH(b.booking_date) AS month, SUM(p.amount) AS total_revenue FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which bookings have been flagged for financial discrepancies this month? (Assume status = 'discrepancy' in Bookings)", "response": "SELECT booking_id, customer_id FROM Bookings WHERE status = 'discrepancy' AND MONTH(booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total revenue in USD for international bookings this month? (Assume all international packages are in 'United States')", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country = 'United States' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total tax collected from all bookings this month if tax is 5%?", "response": "SELECT SUM(p.amount) * 0.05 AS tax_collected FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which customers have outstanding dues for bookings made this month?", "response": "SELECT b.customer_id FROM Bookings b LEFT JOIN Payments p ON b.booking_id = p.booking_id WHERE (p.amount IS NULL OR p.amount = 0) AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total number of bookings and total revenue for each destination this month?", "response": "SELECT d.name, COUNT(b.booking_id) AS total_bookings, SUM(p.amount) AS total_revenue FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id JOIN Payments p ON b.booking_id = p.booking_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY d.name;"}
{"prompt": "What is the most recent analytics report on total bookings and revenue generated?", "response": "SELECT report_date, total_bookings, revenue_generated FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Aliya’s Marketing Team POV)", "response": "SQL Query"}
{"prompt": "Which destinations have seen the highest number of package views or bookings this month?", "response": "SELECT d.name, COUNT(b.booking_id) AS total_bookings FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY d.name ORDER BY total_bookings DESC;"}
{"prompt": "What are the most popular trip durations among travelers who booked last month?", "response": "SELECT tp.duration_days, COUNT(b.booking_id) AS total_bookings FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id WHERE MONTH(b.booking_date) = MONTH(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) GROUP BY tp.duration_days ORDER BY total_bookings DESC;"}
{"prompt": "How many users browsed but did not book packages to Machu Picchu? (Assume abandoned bookings = status 'abandoned')", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%Machu Picchu%') AND status = 'abandoned';"}
{"prompt": "Which age groups are most interested in South American travel packages? (Assume Users table has age or birthdate; not present)", "response": "-- No age field in schema; cannot answer with current schema."}
{"prompt": "What is the conversion rate for the 'Escape to Peru' marketing campaign?", "response": "SELECT (SELECT count(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%Peru%') AND booking_date >= (SELECT start_date FROM MarketingCampaigns WHERE name = 'Escape to Peru')) * 1.0 / (SELECT count(*) FROM MarketingCampaigns WHERE name = 'Escape to Peru') AS conversion_rate;"}
{"prompt": "Which marketing campaigns are currently active and targeting South America?", "response": "SELECT campaign_id, name, start_date, end_date, channel FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND name LIKE '%South America%';"}
{"prompt": "What is the total budget spent on social media ads for the “Escape to Peru” campaign?", "response": "SELECT SUM(budget) FROM MarketingCampaigns WHERE name = 'Escape to Peru' AND channel LIKE '%social%';"}
{"prompt": "How many bookings were generated from the “Escape to Peru” campaign this week?", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%Peru%') AND booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the click-through and conversion rates for all campaigns launched this month? (Assume not tracked in schema)", "response": "-- No click/conversion fields in schema; cannot answer with current schema."}
{"prompt": "Which campaigns have the highest booking conversion rates this quarter?", "response": "SELECT name, (SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE CONCAT('%', name, '%')) AND booking_date >= start_date AND booking_date <= end_date) * 1.0 / (end_date - start_date + 1) AS conversion_rate FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) ORDER BY conversion_rate DESC;"}
{"prompt": "What is the trend in bookings for South American destinations over the past three months?", "response": "SELECT MONTH(b.booking_date) AS month, COUNT(b.booking_id) AS total_bookings FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Peru','Brazil','Argentina','Chile','Colombia','Ecuador','Bolivia','Uruguay','Paraguay') AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which marketing channels have generated the most bookings for South American packages?", "response": "SELECT mc.channel, COUNT(b.booking_id) AS total_bookings FROM MarketingCampaigns mc JOIN TravelPackages tp ON mc.campaign_id = tp.created_by JOIN Bookings b ON tp.package_id = b.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Peru','Brazil','Argentina','Chile','Colombia','Ecuador','Bolivia','Uruguay','Paraguay') GROUP BY mc.channel ORDER BY total_bookings DESC;"}
{"prompt": "What feedback have travelers left for Peru packages promoted by recent campaigns?", "response": "SELECT f.rating, f.comments, f.submitted_on FROM Feedback f JOIN TravelPackages tp ON f.package_id = tp.package_id WHERE tp.title LIKE '%Peru%';"}
{"prompt": "Which campaigns have the highest budgets this year?", "response": "SELECT name, budget FROM MarketingCampaigns WHERE start_date >= DATE_FORMAT(CURRENT_DATE, '%Y-01-01') ORDER BY budget DESC;"}
{"prompt": "How many bookings were abandoned after viewing Peru packages this month?", "response": "SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE '%Peru%') AND status = 'abandoned' AND MONTH(booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the average trip duration for bookings generated by the 'Escape to Peru' campaign?", "response": "SELECT AVG(tp.duration_days) FROM TravelPackages tp WHERE tp.title LIKE '%Peru%';"}
{"prompt": "Which marketing campaigns have ended in the last month but generated above-average bookings?", "response": "SELECT name FROM MarketingCampaigns WHERE end_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND (SELECT COUNT(*) FROM Bookings WHERE package_id IN (SELECT package_id FROM TravelPackages WHERE title LIKE CONCAT('%', name, '%')) AND booking_date >= start_date AND booking_date <= end_date) > (SELECT AVG(total_bookings) FROM AnalyticsReports);"}
{"prompt": "What is the most recent analytics report showing top destination and total bookings?", "response": "SELECT report_date, top_destination, total_bookings FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which destinations have the highest number of bookings from campaigns run in the last quarter?", "response": "SELECT d.name, COUNT(b.booking_id) AS total_bookings FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY d.name ORDER BY total_bookings DESC;"}
{"prompt": "What is the average rating for travel packages promoted by the “Escape to Peru” campaign?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN TravelPackages tp ON f.package_id = tp.package_id WHERE tp.title LIKE '%Peru%';"}
{"prompt": "IT/System Administrators", "response": "nan"}
{"prompt": "NL Question (Raghav’s IT/System Admin POV)", "response": "SQL Query"}
{"prompt": "Which users have been assigned the “admin” role in the system?", "response": "SELECT user_id, name, email FROM Users WHERE role = 'admin';"}
{"prompt": "How many bookings were processed successfully today?", "response": "SELECT COUNT(*) FROM Bookings WHERE status = 'confirmed' AND booking_date = CURRENT_DATE;"}
{"prompt": "What is the trend in failed payment transactions over the past week?", "response": "SELECT DATE(p.paid_on) AS date, COUNT(*) AS failed_payments FROM Payments p WHERE p.method = 'failed' AND p.paid_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY date ORDER BY date;"}
{"prompt": "Which APIs (partners) have not synced any new bookings in the last 24 hours? (Assume created_by in TravelPackages is partner user)", "response": "SELECT u.name FROM Users u WHERE u.role = 'partner' AND u.user_id NOT IN (SELECT DISTINCT created_by FROM TravelPackages WHERE created_on >= DATE_SUB(NOW(), INTERVAL 24 HOUR));"}
{"prompt": "What is the total number of user accounts created this month?", "response": "SELECT COUNT(*) FROM Users WHERE registered_on >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01');"}
{"prompt": "Which destinations have the highest booking volume this month?", "response": "SELECT d.name, COUNT(b.booking_id) AS total_bookings FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE MONTH(b.booking_date) = MONTH(CURRENT_DATE) GROUP BY d.name ORDER BY total_bookings DESC;"}
{"prompt": "How many daily backups have been completed in the past week? (Assume AnalyticsReports logs backups by report_type)", "response": "SELECT COUNT(*) FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) AND report_type = 'backup';"}
{"prompt": "What is the average API response time for partner integrations this month? (Assume summary in AnalyticsReports)", "response": "SELECT AVG(CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(summary, 'response_time:', -1), 'ms', 1) AS UNSIGNED)) AS avg_response_time FROM AnalyticsReports WHERE report_type = 'api' AND report_date >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01');"}
{"prompt": "Which users have not logged in since last month? (No login table in schema; cannot answer)", "response": "-- No login tracking in schema; cannot answer with current schema."}
{"prompt": "Which bookings were lost or failed due to payment gateway errors this week?", "response": "SELECT b.booking_id, b.customer_id FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id WHERE p.method = 'failed' AND p.paid_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the total number of support tickets raised about technical issues this month?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%technical%' AND MONTH(created_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which user roles have access to analytics reports?", "response": "SELECT DISTINCT role FROM Users WHERE user_id IN (SELECT generated_by FROM AnalyticsReports);"}
{"prompt": "What is the status of all pending support tickets related to system performance?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE subject LIKE '%performance%' AND status = 'pending';"}
{"prompt": "Which destinations have not received any new bookings in the past month?", "response": "SELECT name FROM Destinations WHERE destination_id NOT IN (SELECT tp.destination_id FROM TravelPackages tp JOIN Bookings b ON tp.package_id = b.package_id WHERE b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH));"}
{"prompt": "What is the monthly trend in total bookings and revenue for the past six months?", "response": "SELECT MONTH(report_date) AS month, SUM(total_bookings) AS bookings, SUM(revenue_generated) AS revenue FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which partner users have created the most travel packages this year?", "response": "SELECT u.name, COUNT(tp.package_id) AS package_count FROM Users u JOIN TravelPackages tp ON u.user_id = tp.created_by WHERE u.role = 'partner' AND tp.created_on >= DATE_FORMAT(CURRENT_DATE, '%Y-01-01') GROUP BY u.name ORDER BY package_count DESC;"}
{"prompt": "What is the status of all support tickets escalated to IT this week?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE assigned_to IN (SELECT user_id FROM Users WHERE role = 'it') AND created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which bookings have been flagged for security review this month? (Assume status = 'security_review')", "response": "SELECT booking_id, customer_id FROM Bookings WHERE status = 'security_review' AND MONTH(booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the most recent analytics report on system performance and top destination?", "response": "SELECT report_date, top_destination, revenue_generated FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which users have the highest number of support tickets assigned to them this month?", "response": "SELECT u.name, COUNT(st.ticket_id) AS ticket_count FROM Users u JOIN SupportTickets st ON u.user_id = st.assigned_to WHERE MONTH(st.created_on) = MONTH(CURRENT_DATE) GROUP BY u.name ORDER BY ticket_count DESC;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question (Meera’s Data Analyst POV)", "response": "SQL Query"}
{"prompt": "What is the weekly trend in bookings for Southeast Asia destinations among solo travelers?", "response": "SELECT WEEK(b.booking_date) AS week, COUNT(b.booking_id) AS total_bookings FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Users u ON b.customer_id = u.user_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND u.role = 'solo' GROUP BY week ORDER BY week;"}
{"prompt": "How many bookings for Southeast Asia packages were cancelled by solo travelers in the last month?", "response": "SELECT COUNT(*) FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Users u ON b.customer_id = u.user_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND u.role = 'solo' AND b.status = 'cancelled' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What is the average feedback rating for Southeast Asia travel packages?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN TravelPackages tp ON f.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei');"}
{"prompt": "Which travel packages for Southeast Asia are most popular among solo travelers aged 25–35? (Assume Users table has age; if not, skip)", "response": "-- No age field in schema; cannot answer with current schema."}
{"prompt": "Which marketing campaigns are currently active for Southeast Asia destinations?", "response": "SELECT campaign_id, name, start_date, end_date, channel FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND name LIKE '%Southeast Asia%';"}
{"prompt": "What is the total number of abandoned bookings for Southeast Asia destinations this month?", "response": "SELECT COUNT(*) FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND b.status = 'abandoned' AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the most common feedback comments for Southeast Asia packages?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback f JOIN TravelPackages tp ON f.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "What is the average price of Southeast Asia travel packages booked by solo travelers?", "response": "SELECT AVG(tp.price) FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Bookings b ON tp.package_id = b.package_id JOIN Users u ON b.customer_id = u.user_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND u.role = 'solo';"}
{"prompt": "How many bookings for Southeast Asia destinations were made in the last week?", "response": "SELECT COUNT(*) FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the most recent analytics report showing top destination and revenue generated?", "response": "SELECT report_date, top_destination, revenue_generated FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which Southeast Asia packages have the highest number of confirmed bookings this quarter?", "response": "SELECT tp.title, COUNT(b.booking_id) AS total_bookings FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND b.status = 'confirmed' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY tp.title ORDER BY total_bookings DESC;"}
{"prompt": "What is the monthly trend in cancellations for Southeast Asia tours?", "response": "SELECT MONTH(b.booking_date) AS month, COUNT(*) AS cancellations FROM Bookings b JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND b.status = 'cancelled' GROUP BY month ORDER BY month;"}
{"prompt": "What is the average duration of Southeast Asia travel packages booked this year?", "response": "SELECT AVG(tp.duration_days) FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND YEAR(b.booking_date) = YEAR(CURRENT_DATE);"}
{"prompt": "Which marketing channels have the highest budget allocation for Southeast Asia campaigns this quarter?", "response": "SELECT channel, SUM(budget) AS total_budget FROM MarketingCampaigns WHERE name LIKE '%Southeast Asia%' AND start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY channel ORDER BY total_budget DESC;"}
{"prompt": "Which travel packages for Southeast Asia have received the most feedback this month?", "response": "SELECT tp.title, COUNT(f.feedback_id) AS feedback_count FROM TravelPackages tp JOIN Destinations d ON tp.destination_id = d.destination_id JOIN Feedback f ON tp.package_id = f.package_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND MONTH(f.submitted_on) = MONTH(CURRENT_DATE) GROUP BY tp.title ORDER BY feedback_count DESC;"}
{"prompt": "What is the total revenue generated from Southeast Asia bookings this month?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND MONTH(b.booking_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which support tickets have been raised about Southeast Asia travel packages this month?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE subject LIKE '%Southeast Asia%' AND MONTH(created_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the average payment amount for Southeast Asia bookings made online this month?", "response": "SELECT AVG(p.amount) FROM Payments p JOIN Bookings b ON p.booking_id = b.booking_id JOIN TravelPackages tp ON b.package_id = tp.package_id JOIN Destinations d ON tp.destination_id = d.destination_id WHERE p.method = 'online' AND d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND MONTH(p.paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which Southeast Asia destinations have the highest number of abandoned bookings this quarter?", "response": "SELECT d.name, COUNT(b.booking_id) AS abandoned_count FROM Destinations d JOIN TravelPackages tp ON d.destination_id = tp.destination_id JOIN Bookings b ON tp.package_id = b.package_id WHERE d.country IN ('Thailand', 'Vietnam', 'Malaysia', 'Singapore', 'Indonesia', 'Philippines', 'Cambodia', 'Laos', 'Myanmar', 'Brunei') AND b.status = 'abandoned' AND b.booking_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY d.name ORDER BY abandoned_count DESC;"}
{"prompt": "What is the most common reason for cancellation in Southeast Asia bookings? (Assume comments in SupportTickets)", "response": "SELECT message, COUNT(*) AS frequency FROM SupportTickets WHERE subject LIKE '%Southeast Asia%' AND status = 'cancelled' GROUP BY message ORDER BY frequency DESC;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "nan", "response": "nan"}
{"prompt": "EventManagement", "response": "nan"}
{"prompt": "Event Attendees", "response": "nan"}
{"prompt": "NL Question (Rahul’s Attendee POV)", "response": "SQL Query"}
{"prompt": "Which events am I registered for as Rahul? (user_id = 201)", "response": "SELECT e.event_id, e.title, e.location, e.start_date, e.end_date FROM Events e JOIN Registrations r ON e.event_id = r.event_id WHERE r.user_id = 201;"}
{"prompt": "What is the schedule and description for the “Design Future 2025” event?", "response": "SELECT title, description, location, start_date, end_date FROM Events WHERE title = 'Design Future 2025';"}
{"prompt": "What is the status of my registration for “Design Future 2025”? (user_id = 201)", "response": "SELECT status FROM Registrations WHERE user_id = 201 AND event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What sessions or workshops are available for “Design Future 2025”? (Assume sessions/workshops are tasks assigned to event)", "response": "SELECT description, due_date FROM Tasks WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What merchandise or vendor services are available for “Design Future 2025”?", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id WHERE va.event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What payments have I made for my registration and merchandise for “Design Future 2025”? (user_id = 201)", "response": "SELECT p.amount, p.method, p.paid_on FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id WHERE r.user_id = 201 AND r.event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "How can I access my e-pass for “Design Future 2025”? (Assume status = 'confirmed' in Registrations)", "response": "SELECT registration_id FROM Registrations WHERE user_id = 201 AND event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') AND status = 'confirmed';"}
{"prompt": "Which tasks or sessions am I assigned to for “Design Future 2025”? (user_id = 201)", "response": "SELECT t.task_id, t.description, t.due_date FROM Tasks t WHERE t.event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') AND t.assigned_to = 201;"}
{"prompt": "What is my personalized schedule for the event? (user_id = 201)", "response": "SELECT t.description, t.due_date FROM Tasks t WHERE t.event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') AND t.assigned_to = 201;"}
{"prompt": "What is the check-in status for my registration at “Design Future 2025”? (Assume status = 'checked_in')", "response": "SELECT status FROM Registrations WHERE user_id = 201 AND event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What support tickets have I raised about “Design Future 2025”? (user_id = 201)", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE raised_by = 201 AND event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What feedback have I submitted for “Design Future 2025”? (user_id = 201)", "response": "SELECT rating, comments, submitted_on FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') AND submitted_by = 201;"}
{"prompt": "How can I access my digital certificate for “Design Future 2025”? (Assume feedback submitted triggers certificate)", "response": "SELECT feedback_id FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') AND submitted_by = 201;"}
{"prompt": "Where can I find session recordings or post-event resources for “Design Future 2025”? (Assume vendor service_type = 'media')", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id WHERE va.event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') AND v.service_type = 'media';"}
{"prompt": "What is the average attendee rating for “Design Future 2025”?", "response": "SELECT AVG(rating) FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "Which marketing campaigns promoted “Design Future 2025”?", "response": "SELECT campaign_id, channel, budget, start_date, end_date FROM MarketingCampaigns WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What is the total number of attendees registered for “Design Future 2025”?", "response": "SELECT COUNT(*) FROM Registrations WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What is the total revenue generated by “Design Future 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id WHERE r.event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025');"}
{"prompt": "What are the most common feedback comments for “Design Future 2025”?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Design Future 2025') GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "What is the latest analytics report showing total attendees and revenue for “Design Future 2025”?", "response": "SELECT report_date, total_attendees, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%Design Future 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "Event Planners", "response": "nan"}
{"prompt": "NL Question (Anika’s Event Planner POV)", "response": "SQL Query"}
{"prompt": "What is the current status of ticket sales for 'TechX Global 2025'?", "response": "SELECT COUNT(r.registration_id) AS total_registrations, e.title FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND r.status = 'confirmed';"}
{"prompt": "Can I see the list of all ticket categories defined for 'TechX Global 2025'?", "response": "SELECT DISTINCT r.status AS ticket_category FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "What are the scheduled sessions and their timings for 'TechX Global 2025'?", "response": "SELECT t.description, t.due_date FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'TechX Global 2025' ORDER BY t.due_date;"}
{"prompt": "Who are the keynote speakers booked for 'TechX Global 2025'?", "response": "SELECT v.name FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND v.service_type = 'speaker';"}
{"prompt": "Which vendors are assigned for stage setup, catering, and branding for 'TechX Global 2025'?", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND v.service_type IN ('stage setup', 'catering', 'branding');"}
{"prompt": "How many moderators and volunteers are assigned to sessions for 'TechX Global 2025'?", "response": "SELECT COUNT(DISTINCT t.assigned_to) AS total_moderators_volunteers FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "What is the real-time check-in count for attendees at 'TechX Global 2025'?", "response": "SELECT COUNT(r.registration_id) AS checked_in_count FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND r.status = 'checked_in';"}
{"prompt": "Which sessions have the highest occupancy during 'TechX Global 2025'?", "response": "SELECT t.description, COUNT(r.registration_id) AS occupancy FROM Tasks t JOIN Events e ON t.event_id = e.event_id JOIN Registrations r ON e.event_id = r.event_id WHERE e.title = 'TechX Global 2025' GROUP BY t.description ORDER BY occupancy DESC;"}
{"prompt": "What are the demographics of attendees registered for 'TechX Global 2025'?", "response": "SELECT u.role, COUNT(r.registration_id) AS count FROM Registrations r JOIN Users u ON r.user_id = u.user_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'TechX Global 2025' GROUP BY u.role;"}
{"prompt": "Can I get a list of all automated reminders sent for 'TechX Global 2025'?", "response": "SELECT st.ticket_id, st.subject, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND st.subject LIKE '%reminder%';"}
{"prompt": "What is the count of push notifications activated for 'TechX Global 2025'?", "response": "SELECT COUNT(*) FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND st.subject LIKE '%push notification%';"}
{"prompt": "How many attendees have received e-passes for 'TechX Global 2025'?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND r.status = 'confirmed';"}
{"prompt": "What is the total budget allocated to marketing campaigns for 'TechX Global 2025'?", "response": "SELECT SUM(mc.budget) FROM MarketingCampaigns mc JOIN Events e ON mc.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "Which marketing channels are being used for 'TechX Global 2025'?", "response": "SELECT DISTINCT mc.channel FROM MarketingCampaigns mc JOIN Events e ON mc.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "What is the total number of support tickets raised for 'TechX Global 2025'?", "response": "SELECT COUNT(*) FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "Which support tickets for 'TechX Global 2025' are still open?", "response": "SELECT st.ticket_id, st.subject FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'TechX Global 2025' AND st.status = 'open';"}
{"prompt": "What is the average rating given by attendees for 'TechX Global 2025'?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "Can I see all feedback comments submitted for 'TechX Global 2025'?", "response": "SELECT f.comments, f.submitted_on FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'TechX Global 2025' ORDER BY f.submitted_on DESC;"}
{"prompt": "What is the latest analytics report showing ticket sales and engagement for 'TechX Global 2025'?", "response": "SELECT report_date, total_attendees, total_revenue, top_events FROM AnalyticsReports WHERE top_events LIKE '%TechX Global 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "What is the total payment amount collected for 'TechX Global 2025'?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'TechX Global 2025';"}
{"prompt": "Vendors / Suppliers", "response": "nan"}
{"prompt": "NL Question (Rakesh’s Vendor POV)", "response": "SQL Query"}
{"prompt": "Which events am I supplying equipment for as StagePro Rentals?", "response": "SELECT e.event_id, e.title, e.location, e.start_date, e.end_date FROM Events e JOIN VendorAssignments va ON e.event_id = va.event_id JOIN Vendors v ON va.vendor_id = v.vendor_id WHERE v.name = 'StagePro Rentals';"}
{"prompt": "What are the event dates and venue details for “Startup Spark 2025”?", "response": "SELECT location, start_date, end_date FROM Events WHERE title = 'Startup Spark 2025';"}
{"prompt": "What is the contract amount and assigned services for “Startup Spark 2025”?", "response": "SELECT va.contract_amount, v.service_type FROM VendorAssignments va JOIN Vendors v ON va.vendor_id = v.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND v.name = 'StagePro Rentals';"}
{"prompt": "What are the setup schedules and due dates for my tasks at “Startup Spark 2025”?", "response": "SELECT t.task_id, t.description, t.due_date FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND t.assigned_to = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals');"}
{"prompt": "Which compliance checklists or reminders have I received for “Startup Spark 2025”?", "response": "SELECT st.subject, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND st.subject LIKE '%compliance%' AND st.raised_by = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals');"}
{"prompt": "What technical issues have I logged during “Startup Spark 2025”?", "response": "SELECT st.subject, st.message, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND st.raised_by = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals');"}
{"prompt": "What is the status of all my vendor assignments for upcoming events?", "response": "SELECT va.assignment_id, e.title, va.contract_amount FROM VendorAssignments va JOIN Vendors v ON va.vendor_id = v.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE v.name = 'StagePro Rentals' AND e.start_date >= CURRENT_DATE;"}
{"prompt": "What invoices have I submitted for “Startup Spark 2025”? (Assume invoices are tracked as support tickets or tasks)", "response": "SELECT st.ticket_id, st.subject, st.status, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND st.subject LIKE '%invoice%' AND st.raised_by = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals');"}
{"prompt": "What payments have I received for “Startup Spark 2025”? (Assume vendor payments are tracked in VendorAssignments)", "response": "SELECT va.contract_amount FROM VendorAssignments va JOIN Vendors v ON va.vendor_id = v.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND v.name = 'StagePro Rentals';"}
{"prompt": "What feedback ratings have I received from event organizers for my services?", "response": "SELECT f.rating, f.comments, f.submitted_on FROM Feedback f JOIN Events e ON f.event_id = e.event_id JOIN VendorAssignments va ON e.event_id = va.event_id WHERE va.vendor_id = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals');"}
{"prompt": "What are the most common issues reported by vendors for events this year?", "response": "SELECT st.subject, COUNT(*) AS frequency FROM SupportTickets st JOIN Vendors v ON st.raised_by = v.vendor_id WHERE YEAR(st.created_on) = YEAR(CURRENT_DATE) GROUP BY st.subject ORDER BY frequency DESC;"}
{"prompt": "Which upcoming events have assigned me for audio or lighting services?", "response": "SELECT e.title, e.start_date FROM Events e JOIN VendorAssignments va ON e.event_id = va.event_id JOIN Vendors v ON va.vendor_id = v.vendor_id WHERE v.name = 'StagePro Rentals' AND (v.service_type = 'audio' OR v.service_type = 'lighting') AND e.start_date >= CURRENT_DATE;"}
{"prompt": "What is the total contract value of all my assignments this quarter?", "response": "SELECT SUM(va.contract_amount) FROM VendorAssignments va JOIN Vendors v ON va.vendor_id = v.vendor_id WHERE v.name = 'StagePro Rentals' AND va.event_id IN (SELECT event_id FROM Events WHERE start_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH));"}
{"prompt": "Which tasks are still pending for my team at “Startup Spark 2025”?", "response": "SELECT t.task_id, t.description, t.due_date FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Startup Spark 2025' AND t.status = 'pending' AND t.assigned_to = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals');"}
{"prompt": "What is the average contract amount for my vendor assignments this year?", "response": "SELECT AVG(va.contract_amount) FROM VendorAssignments va JOIN Vendors v ON va.vendor_id = v.vendor_id WHERE v.name = 'StagePro Rentals' AND va.event_id IN (SELECT event_id FROM Events WHERE YEAR(start_date) = YEAR(CURRENT_DATE));"}
{"prompt": "Which events have given me the highest feedback ratings for my services?", "response": "SELECT e.title, AVG(f.rating) AS avg_rating FROM Feedback f JOIN Events e ON f.event_id = e.event_id JOIN VendorAssignments va ON e.event_id = va.event_id WHERE va.vendor_id = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals') GROUP BY e.title ORDER BY avg_rating DESC;"}
{"prompt": "What is the latest reminder or notification I received for any event?", "response": "SELECT subject, created_on FROM SupportTickets WHERE raised_by = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals') ORDER BY created_on DESC LIMIT 1;"}
{"prompt": "Which events have I been assigned to in Mumbai this year?", "response": "SELECT e.title, e.start_date FROM Events e JOIN VendorAssignments va ON e.event_id = va.event_id JOIN Vendors v ON va.vendor_id = v.vendor_id WHERE v.name = 'StagePro Rentals' AND e.location = 'Mumbai' AND YEAR(e.start_date) = YEAR(CURRENT_DATE);"}
{"prompt": "What is the total number of events I have supplied equipment for this year?", "response": "SELECT COUNT(DISTINCT e.event_id) FROM Events e JOIN VendorAssignments va ON e.event_id = va.event_id JOIN Vendors v ON va.vendor_id = v.vendor_id WHERE v.name = 'StagePro Rentals' AND YEAR(e.start_date) = YEAR(CURRENT_DATE);"}
{"prompt": "What is the most recent analytics report showing my event participation and contract value?", "response": "SELECT report_date, total_attendees, total_revenue, top_events FROM AnalyticsReports WHERE generated_by = (SELECT vendor_id FROM Vendors WHERE name = 'StagePro Rentals') ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Registration Specialists", "response": "nan"}
{"prompt": "NL Question (Maya’s Registration Specialist POV)", "response": "SQL Query"}
{"prompt": "What are the different ticket types set up for “Global Wellness Expo 2025”?", "response": "SELECT DISTINCT r.status AS ticket_type FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025';"}
{"prompt": "How many early-bird registrations have been received for “Global Wellness Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'early-bird';"}
{"prompt": "How many group registrations have been made for “Global Wellness Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'group';"}
{"prompt": "What is the total number of VIP pass upgrades for “Global Wellness Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'VIP';"}
{"prompt": "How many attendees have specified dietary preferences in their registration for “Global Wellness Expo 2025”? (Assume custom field in status)", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status LIKE '%dietary%';"}
{"prompt": "How many attendees have requested accessibility accommodations for “Global Wellness Expo 2025”? (Assume custom field in status)", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status LIKE '%accessibility%';"}
{"prompt": "What are the most popular session choices selected by attendees for “Global Wellness Expo 2025”? (Assume session info in status)", "response": "SELECT r.status AS session_choice, COUNT(*) AS count FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' GROUP BY r.status ORDER BY count DESC;"}
{"prompt": "What is the real-time count of all registrations for “Global Wellness Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025';"}
{"prompt": "How many registrations have been cancelled for “Global Wellness Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'cancelled';"}
{"prompt": "What is the regional distribution of attendees for “Global Wellness Expo 2025”? (Assume region in Users table)", "response": "SELECT u.role AS region, COUNT(r.registration_id) AS attendee_count FROM Registrations r JOIN Users u ON r.user_id = u.user_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' GROUP BY region;"}
{"prompt": "What is the total payment collected for “Global Wellness Expo 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025';"}
{"prompt": "Which attendees have not completed ID verification for “Global Wellness Expo 2025”? (Assume status = 'pending_verification')", "response": "SELECT r.user_id FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'pending_verification';"}
{"prompt": "Which attendees have received QR codes for check-in at “Global Wellness Expo 2025”? (Assume status = 'QR_issued')", "response": "SELECT r.user_id FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'QR_issued';"}
{"prompt": "What is the check-in count for “Global Wellness Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND r.status = 'checked_in';"}
{"prompt": "What support tickets have been raised by attendees for “Global Wellness Expo 2025”?", "response": "SELECT st.ticket_id, st.subject, st.status, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025';"}
{"prompt": "What is the total number of last-minute registrations for “Global Wellness Expo 2025”? (Assume registration_date = event start date)", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' AND DATE(r.registration_date) = DATE(e.start_date);"}
{"prompt": "What is the most common feedback comment from attendees for “Global Wellness Expo 2025”?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025' GROUP BY comments ORDER BY frequency DESC LIMIT 1;"}
{"prompt": "What is the average attendee rating for “Global Wellness Expo 2025”?", "response": "SELECT AVG(rating) FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025';"}
{"prompt": "What is the latest attendance report for “Global Wellness Expo 2025”?", "response": "SELECT report_date, total_attendees FROM AnalyticsReports WHERE top_events LIKE '%Global Wellness Expo 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "What is the total revenue generated from registrations for “Global Wellness Expo 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Wellness Expo 2025';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "NL Question (Arjun’s Customer Support POV)", "response": "SQL Query"}
{"prompt": "What support tickets have been raised for the “EduTech Global Summit”?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit');"}
{"prompt": "Which attendees have reported lost e-passes for the “EduTech Global Summit”? (Assume subject LIKE '%e-pass%')", "response": "SELECT raised_by, subject, status, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%e-pass%';"}
{"prompt": "What are the most common registration issues reported for the “EduTech Global Summit”?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%registration%' GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "What is the refund policy for the “EduTech Global Summit”? (Assume subject LIKE '%refund%')", "response": "SELECT message FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%refund%';"}
{"prompt": "What is the event history for attendee user_id = 301?", "response": "SELECT e.event_id, e.title, r.status FROM Events e JOIN Registrations r ON e.event_id = r.event_id WHERE r.user_id = 301;"}
{"prompt": "Which support tickets are still open for the “EduTech Global Summit”?", "response": "SELECT ticket_id, subject, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND status = 'open';"}
{"prompt": "What are the details of all escalated issues for the “EduTech Global Summit”? (Assume status = 'escalated')", "response": "SELECT ticket_id, subject, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND status = 'escalated';"}
{"prompt": "Which speakers’ sessions are missing from attendee dashboards? (Assume subject LIKE '%session missing%')", "response": "SELECT raised_by, subject, message, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%session missing%';"}
{"prompt": "What is the status of all tech support tickets for virtual session access during the event?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%virtual session%';"}
{"prompt": "Which attendees have requested help with login issues for the “EduTech Global Summit”?", "response": "SELECT raised_by, subject, status FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%login%';"}
{"prompt": "What is the check-in status for all attendees at the “EduTech Global Summit”?", "response": "SELECT user_id, status FROM Registrations WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit');"}
{"prompt": "Which attendees have requested certificates after the event? (Assume subject LIKE '%certificate%')", "response": "SELECT raised_by, subject, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%certificate%';"}
{"prompt": "What feedback has been submitted by attendees for the “EduTech Global Summit”?", "response": "SELECT submitted_by, rating, comments, submitted_on FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit');"}
{"prompt": "Which users have requested invoices for the “EduTech Global Summit”? (Assume subject LIKE '%invoice%')", "response": "SELECT raised_by, subject, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND subject LIKE '%invoice%';"}
{"prompt": "What is the total number of support tickets resolved for the “EduTech Global Summit”?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND status = 'resolved';"}
{"prompt": "What is the average response time for support tickets for the “EduTech Global Summit”?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, created_on, NOW())) AS avg_response_minutes FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit');"}
{"prompt": "What is the most common support issue reported during the event?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') GROUP BY subject ORDER BY frequency DESC LIMIT 1;"}
{"prompt": "What is the latest feedback rating for the “EduTech Global Summit”?", "response": "SELECT rating, comments, submitted_on FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') ORDER BY submitted_on DESC LIMIT 1;"}
{"prompt": "What is the total number of attendees who have checked in for the “EduTech Global Summit”?", "response": "SELECT COUNT(*) FROM Registrations WHERE event_id = (SELECT event_id FROM Events WHERE title = 'EduTech Global Summit') AND status = 'checked_in';"}
{"prompt": "What is the most recent analytics report showing total attendees and revenue for the “EduTech Global Summit”?", "response": "SELECT report_date, total_attendees, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%EduTech Global Summit%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Event Coordinators", "response": "nan"}
{"prompt": "NL Question (Sneha’s Event Coordinator POV)", "response": "SQL Query"}
{"prompt": "What is the full schedule of sessions and setup tasks for “Innovate India 2025”?", "response": "SELECT t.description, t.due_date, t.status FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Innovate India 2025' ORDER BY t.due_date;"}
{"prompt": "Who are the vendors assigned to “Innovate India 2025” and what services do they provide?", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Innovate India 2025';"}
{"prompt": "Which speakers and volunteers are assigned roles for “Innovate India 2025”?", "response": "SELECT u.name, u.role FROM Users u JOIN Tasks t ON u.user_id = t.assigned_to JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Innovate India 2025' GROUP BY u.name, u.role;"}
{"prompt": "What are the contact details for all venue staff and key stakeholders for “Innovate India 2025”?", "response": "SELECT u.name, u.email, u.phone FROM Users u JOIN Tasks t ON u.user_id = t.assigned_to JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND u.role = 'venue_staff';"}
{"prompt": "What is the current room capacity and attendee count for each session at “Innovate India 2025”?", "response": "SELECT t.description AS session, t.due_date, COUNT(r.registration_id) AS attendee_count FROM Tasks t JOIN Events e ON t.event_id = e.event_id LEFT JOIN Registrations r ON e.event_id = r.event_id WHERE e.title = 'Innovate India 2025' GROUP BY t.description, t.due_date;"}
{"prompt": "Which tasks or sessions have pending status for “Innovate India 2025”?", "response": "SELECT t.task_id, t.description, t.due_date FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND t.status = 'pending';"}
{"prompt": "What is the latest feedback received from attendees during “Innovate India 2025”?", "response": "SELECT f.rating, f.comments, f.submitted_on FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Innovate India 2025' ORDER BY f.submitted_on DESC LIMIT 1;"}
{"prompt": "Which support tickets are open for “Innovate India 2025” and what issues are being reported?", "response": "SELECT st.ticket_id, st.subject, st.status, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND st.status = 'open';"}
{"prompt": "What changes have been requested by keynote speakers or exhibitors for “Innovate India 2025”?", "response": "SELECT st.subject, st.message, st.created_on FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND (st.subject LIKE '%speaker%' OR st.subject LIKE '%exhibitor%');"}
{"prompt": "What is the total number of attendees checked in for “Innovate India 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND r.status = 'checked_in';"}
{"prompt": "Which booth exhibitors have requested additional equipment or changes? (Assume subject LIKE '%booth%' or '%equipment%')", "response": "SELECT st.raised_by, st.subject, st.message FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND (st.subject LIKE '%booth%' OR st.subject LIKE '%equipment%');"}
{"prompt": "What is the average attendee rating for “Innovate India 2025”?", "response": "SELECT AVG(f.rating) FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Innovate India 2025';"}
{"prompt": "What are the most common feedback comments for “Innovate India 2025”?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Innovate India 2025' GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "How many support tickets have been resolved for “Innovate India 2025”?", "response": "SELECT COUNT(*) FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND st.status = 'resolved';"}
{"prompt": "What is the total contract amount paid to vendors for “Innovate India 2025”?", "response": "SELECT SUM(va.contract_amount) FROM VendorAssignments va JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Innovate India 2025';"}
{"prompt": "Which marketing campaigns are currently active for “Innovate India 2025”?", "response": "SELECT campaign_id, channel, budget, start_date, end_date FROM MarketingCampaigns WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Innovate India 2025') AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "What is the total revenue collected from registrations for “Innovate India 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Innovate India 2025';"}
{"prompt": "What is the latest analytics report showing total attendees and revenue for “Innovate India 2025”?", "response": "SELECT report_date, total_attendees, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%Innovate India 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which tasks or sessions have been reassigned or rescheduled during the event? (Assume status = 'rescheduled' or 'reassigned')", "response": "SELECT t.task_id, t.description, t.status, t.due_date FROM Tasks t JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND (t.status = 'rescheduled' OR t.status = 'reassigned');"}
{"prompt": "What are the contact details for all keynote speakers and moderators for “Innovate India 2025”? (Assume role in Users table)", "response": "SELECT u.name, u.email, u.phone FROM Users u JOIN Tasks t ON u.user_id = t.assigned_to JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Innovate India 2025' AND u.role IN ('speaker', 'moderator');"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "NL Question (Ravi’s Finance Department POV)", "response": "SQL Query"}
{"prompt": "What is the total ticket revenue collected for “GreenTech Expo 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025';"}
{"prompt": "How many early-bird tickets have been sold for “GreenTech Expo 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND r.status = 'early-bird';"}
{"prompt": "What is the total value of vendor contracts for “GreenTech Expo 2025”?", "response": "SELECT SUM(va.contract_amount) FROM VendorAssignments va JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025';"}
{"prompt": "Which sponsors have agreements uploaded for “GreenTech Expo 2025”? (Assume sponsors are Vendors with service_type = 'sponsor')", "response": "SELECT v.name FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND v.service_type = 'sponsor';"}
{"prompt": "What are the total installment payments received from exhibitors for “GreenTech Expo 2025”? (Assume status = 'installment')", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND r.status = 'installment';"}
{"prompt": "What is the current marketing campaign budget for “GreenTech Expo 2025”?", "response": "SELECT SUM(mc.budget) FROM MarketingCampaigns mc JOIN Events e ON mc.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND mc.start_date <= CURRENT_DATE AND mc.end_date >= CURRENT_DATE;"}
{"prompt": "Which expense reports have been generated for “GreenTech Expo 2025”? (Assume reports in AnalyticsReports with top_events)", "response": "SELECT report_date, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%GreenTech Expo 2025%';"}
{"prompt": "What is the total sales revenue from merchandise and food stalls for “GreenTech Expo 2025”? (Assume Vendors table, service_type)", "response": "SELECT SUM(va.contract_amount) FROM VendorAssignments va JOIN Vendors v ON va.vendor_id = v.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND v.service_type IN ('merchandise', 'food');"}
{"prompt": "How much revenue has been generated from add-on workshops for “GreenTech Expo 2025”? (Assume workshop as a status in Registrations)", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND r.status = 'workshop';"}
{"prompt": "What are the outstanding dues for “GreenTech Expo 2025”? (Assume registrations without payment)", "response": "SELECT r.registration_id, r.user_id FROM Registrations r LEFT JOIN Payments p ON r.registration_id = p.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND (p.amount IS NULL OR p.amount = 0);"}
{"prompt": "What is the total value of refunds processed for “GreenTech Expo 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND r.status = 'refunded';"}
{"prompt": "Which vendors have been paid for “GreenTech Expo 2025”? (Assume paid if contract_amount > 0)", "response": "SELECT v.name FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND va.contract_amount > 0;"}
{"prompt": "What is the total GST amount collected for “GreenTech Expo 2025” if GST is 18% of ticket revenue?", "response": "SELECT SUM(p.amount) * 0.18 AS gst_collected FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025';"}
{"prompt": "What is the monthly trend in ticket revenue for “GreenTech Expo 2025”?", "response": "SELECT MONTH(p.paid_on) AS month, SUM(p.amount) AS revenue FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' GROUP BY month ORDER BY month;"}
{"prompt": "Which marketing channels have the highest spend for “GreenTech Expo 2025”?", "response": "SELECT mc.channel, SUM(mc.budget) AS total_spend FROM MarketingCampaigns mc JOIN Events e ON mc.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' GROUP BY mc.channel ORDER BY total_spend DESC;"}
{"prompt": "What is the total profit for “GreenTech Expo 2025” if profit = total revenue - total vendor contracts?", "response": "SELECT (SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025') - (SELECT SUM(va.contract_amount) FROM VendorAssignments va JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025') AS profit;"}
{"prompt": "What is the latest financial analytics report for “GreenTech Expo 2025”?", "response": "SELECT report_date, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%GreenTech Expo 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which sponsors or vendors have outstanding payments for “GreenTech Expo 2025”? (Assume contract_amount > 0 and not settled)", "response": "SELECT v.name FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND (va.contract_amount IS NOT NULL AND va.contract_amount > 0);"}
{"prompt": "What is the total number of paid vs. unpaid registrations for “GreenTech Expo 2025”?", "response": "SELECT 'paid' AS status, count(*) FROM Registrations r JOIN Payments p ON r.registration_id = p.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' UNION ALL SELECT 'unpaid' AS status, count(*) FROM Registrations r LEFT JOIN Payments p ON r.registration_id = p.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025' AND (p.amount IS NULL OR p.amount = 0);"}
{"prompt": "What is the total tax implication for “GreenTech Expo 2025” if tax is 5% of all payments?", "response": "SELECT SUM(p.amount) * 0.05 AS tax_due FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'GreenTech Expo 2025';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Nisha’s Marketing Team POV)", "response": "SQL Query"}
{"prompt": "What is the total number of registrations for “FutureWork Global Summit 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025';"}
{"prompt": "How many early-bird tickets have been sold for “FutureWork Global Summit 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' AND r.status = 'early-bird';"}
{"prompt": "What are the current tiered ticket options available for “FutureWork Global Summit 2025”?", "response": "SELECT DISTINCT r.status AS ticket_type FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025';"}
{"prompt": "Which marketing campaigns are active for “FutureWork Global Summit 2025”?", "response": "SELECT campaign_id, channel, budget, start_date, end_date FROM MarketingCampaigns WHERE event_id = (SELECT event_id FROM Events WHERE title = 'FutureWork Global Summit 2025') AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "What is the total budget spent on marketing for “FutureWork Global Summit 2025”?", "response": "SELECT SUM(budget) FROM MarketingCampaigns WHERE event_id = (SELECT event_id FROM Events WHERE title = 'FutureWork Global Summit 2025');"}
{"prompt": "How many group bookings have used discount codes for “FutureWork Global Summit 2025”? (Assume status LIKE '%group%')", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' AND r.status LIKE '%group%';"}
{"prompt": "What is the referral program’s impact on registrations for “FutureWork Global Summit 2025”? (Assume status LIKE '%referral%')", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' AND r.status LIKE '%referral%';"}
{"prompt": "What is the daily trend in page visits and registrations for “FutureWork Global Summit 2025”? (Assume AnalyticsReports)", "response": "SELECT report_date, total_attendees FROM AnalyticsReports WHERE top_events LIKE '%FutureWork Global Summit 2025%' ORDER BY report_date;"}
{"prompt": "What are the most effective marketing channels for “FutureWork Global Summit 2025”?", "response": "SELECT channel, SUM(budget) AS total_spend FROM MarketingCampaigns WHERE event_id = (SELECT event_id FROM Events WHERE title = 'FutureWork Global Summit 2025') GROUP BY channel ORDER BY total_spend DESC;"}
{"prompt": "How many reminder emails and push notifications have been sent for “FutureWork Global Summit 2025”? (Assume subject LIKE '%reminder%' or '%push%')", "response": "SELECT COUNT(*) FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' AND (st.subject LIKE '%reminder%' OR st.subject LIKE '%push%');"}
{"prompt": "What is the conversion rate from page visits to registrations for “FutureWork Global Summit 2025”? (Assume AnalyticsReports)", "response": "SELECT (SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025') / (SELECT SUM(total_attendees) FROM AnalyticsReports WHERE top_events LIKE '%FutureWork Global Summit 2025%') AS conversion_rate;"}
{"prompt": "Which attendee segments have the highest registration rates for “FutureWork Global Summit 2025”? (Assume role in Users table)", "response": "SELECT u.role, COUNT(r.registration_id) AS registrations FROM Registrations r JOIN Users u ON r.user_id = u.user_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' GROUP BY u.role ORDER BY registrations DESC;"}
{"prompt": "What feedback have attendees given about the marketing campaigns for “FutureWork Global Summit 2025”?", "response": "SELECT f.comments, f.rating, f.submitted_on FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' AND f.comments LIKE '%campaign%';"}
{"prompt": "What is the average attendee rating for “FutureWork Global Summit 2025”?", "response": "SELECT AVG(rating) FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025';"}
{"prompt": "Which days saw the highest spike in registrations for “FutureWork Global Summit 2025”?", "response": "SELECT DATE(r.registration_date) AS reg_day, COUNT(*) AS registrations FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' GROUP BY reg_day ORDER BY registrations DESC;"}
{"prompt": "How many attendees participated in live polls during “FutureWork Global Summit 2025”? (Assume status LIKE '%poll%')", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' AND r.status LIKE '%poll%';"}
{"prompt": "What is the total revenue generated from registrations for “FutureWork Global Summit 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025';"}
{"prompt": "What is the most recent analytics report for “FutureWork Global Summit 2025”?", "response": "SELECT report_date, total_attendees, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%FutureWork Global Summit 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which marketing campaigns had the highest ROI for “FutureWork Global Summit 2025”? (Assume ROI = total_attendees/budget)", "response": "SELECT campaign_id, (SELECT total_attendees FROM AnalyticsReports WHERE top_events LIKE '%FutureWork Global Summit 2025%' ORDER BY report_date DESC LIMIT 1)/budget AS ROI FROM MarketingCampaigns WHERE event_id = (SELECT event_id FROM Events WHERE title = 'FutureWork Global Summit 2025');"}
{"prompt": "What are the most common feedback comments for “FutureWork Global Summit 2025”?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'FutureWork Global Summit 2025' GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "NL Question (Karan’s IT/System Admin POV)", "response": "SQL Query"}
{"prompt": "Which users have admin or organizer roles for “Global Health & Wellness Expo”?", "response": "SELECT u.user_id, u.name, u.role FROM Users u JOIN Events e ON u.user_id = e.organized_by WHERE e.title = 'Global Health & Wellness Expo' AND u.role IN ('admin', 'organizer');"}
{"prompt": "What is the current number of active registrations for “Global Health & Wellness Expo”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo' AND r.status = 'confirmed';"}
{"prompt": "How many payment transactions have been processed for “Global Health & Wellness Expo”?", "response": "SELECT COUNT(*) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo';"}
{"prompt": "Which vendors are assigned to “Global Health & Wellness Expo” and what services do they provide?", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo';"}
{"prompt": "What is the real-time status of all support tickets for “Global Health & Wellness Expo”?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Global Health & Wellness Expo');"}
{"prompt": "Which integrations (vendors) are providing live-streaming or check-in services for “Global Health & Wellness Expo”?", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo' AND v.service_type IN ('live-streaming', 'check-in');"}
{"prompt": "What is the server load trend during the registration spike for “Global Health & Wellness Expo”? (Assume AnalyticsReports)", "response": "SELECT report_date, total_attendees FROM AnalyticsReports WHERE top_events LIKE '%Global Health & Wellness Expo%' ORDER BY report_date;"}
{"prompt": "Which users have access to sensitive data or elevated permissions for “Global Health & Wellness Expo”?", "response": "SELECT u.user_id, u.name, u.role FROM Users u WHERE u.role IN ('admin', 'organizer', 'it');"}
{"prompt": "What audit logs or system reports have been generated for “Global Health & Wellness Expo”? (Assume AnalyticsReports)", "response": "SELECT report_date, generated_by FROM AnalyticsReports WHERE top_events LIKE '%Global Health & Wellness Expo%';"}
{"prompt": "Which support tickets are related to data privacy or GDPR for “Global Health & Wellness Expo”?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Global Health & Wellness Expo') AND (subject LIKE '%privacy%' OR subject LIKE '%GDPR%');"}
{"prompt": "What is the check-in device status for “Global Health & Wellness Expo”? (Assume check-in as a vendor service)", "response": "SELECT v.name, v.service_type FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo' AND v.service_type = 'check-in';"}
{"prompt": "How many technical support tickets were raised during the event? (Assume subject LIKE '%technical%')", "response": "SELECT COUNT(*) FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Global Health & Wellness Expo') AND subject LIKE '%technical%';"}
{"prompt": "Which sessions or tasks had network issues reported during “Global Health & Wellness Expo”? (Assume subject LIKE '%network%')", "response": "SELECT t.task_id, t.description, st.subject, st.created_on FROM Tasks t JOIN Events e ON t.event_id = e.event_id JOIN SupportTickets st ON e.event_id = st.event_id WHERE e.title = 'Global Health & Wellness Expo' AND st.subject LIKE '%network%';"}
{"prompt": "What is the most recent system health report for “Global Health & Wellness Expo”? (Assume AnalyticsReports)", "response": "SELECT report_date, total_attendees, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%Global Health & Wellness Expo%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which users have been assigned IT support roles for “Global Health & Wellness Expo”?", "response": "SELECT u.user_id, u.name FROM Users u JOIN Tasks t ON u.user_id = t.assigned_to JOIN Events e ON t.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo' AND u.role = 'it';"}
{"prompt": "What is the total number of check-ins recorded for “Global Health & Wellness Expo”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo' AND r.status = 'checked_in';"}
{"prompt": "What is the status of all open technical issues for “Global Health & Wellness Expo”? (Assume subject LIKE '%technical%' AND status = 'open')", "response": "SELECT ticket_id, subject, created_on FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Global Health & Wellness Expo') AND subject LIKE '%technical%' AND status = 'open';"}
{"prompt": "Which vendors have not yet completed their assignments for “Global Health & Wellness Expo”? (Assume incomplete if contract_amount = 0)", "response": "SELECT v.name FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Global Health & Wellness Expo' AND va.contract_amount = 0;"}
{"prompt": "What is the total number of support tickets resolved for “Global Health & Wellness Expo”?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE event_id = (SELECT event_id FROM Events WHERE title = 'Global Health & Wellness Expo') AND status = 'resolved';"}
{"prompt": "What is the total number of users, vendors, and events currently active on the platform?", "response": "SELECT (SELECT count(*) FROM Users) AS total_users, (SELECT count(*) FROM Vendors) AS total_vendors, (SELECT COUNT(*) FROM Events WHERE end_date >= CURRENT_DATE) AS active_events;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question (Anita’s Data Analyst POV)", "response": "SQL Query"}
{"prompt": "What is the daily registration trend for “Women in Tech Summit 2025”?", "response": "SELECT DATE(r.registration_date) AS day, COUNT(*) AS registrations FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY day ORDER BY day;"}
{"prompt": "Which sessions are most popular based on attendee assignments for “Women in Tech Summit 2025”?", "response": "SELECT t.description AS session, COUNT(r.registration_id) AS attendee_count FROM Tasks t JOIN Events e ON t.event_id = e.event_id LEFT JOIN Registrations r ON e.event_id = r.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY t.description ORDER BY attendee_count DESC;"}
{"prompt": "What are the demographics of attendees for “Women in Tech Summit 2025”? (Assume role in Users table)", "response": "SELECT u.role, COUNT(r.registration_id) AS attendee_count FROM Registrations r JOIN Users u ON r.user_id = u.user_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY u.role;"}
{"prompt": "What is the total number of tickets sold for “Women in Tech Summit 2025” by channel? (Assume channel in MarketingCampaigns)", "response": "SELECT mc.channel, COUNT(r.registration_id) AS tickets_sold FROM MarketingCampaigns mc JOIN Events e ON mc.event_id = e.event_id JOIN Registrations r ON e.event_id = r.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY mc.channel;"}
{"prompt": "What is the real-time attendance count for “Women in Tech Summit 2025”?", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' AND r.status = 'checked_in';"}
{"prompt": "Which virtual sessions had the highest drop-off rates during “Women in Tech Summit 2025”? (Assume subject LIKE '%drop-off%' in SupportTickets)", "response": "SELECT t.description, COUNT(st.ticket_id) AS drop_offs FROM Tasks t JOIN Events e ON t.event_id = e.event_id JOIN SupportTickets st ON e.event_id = st.event_id WHERE e.title = 'Women in Tech Summit 2025' AND st.subject LIKE '%drop-off%' GROUP BY t.description ORDER BY drop_offs DESC;"}
{"prompt": "Which booths received the lowest engagement during “Women in Tech Summit 2025”? (Assume booth info in Tasks and feedback in Feedback)", "response": "SELECT t.description AS booth, AVG(f.rating) AS avg_engagement FROM Tasks t JOIN Events e ON t.event_id = e.event_id JOIN Feedback f ON e.event_id = f.event_id WHERE e.title = 'Women in Tech Summit 2025' AND t.description LIKE '%booth%' GROUP BY t.description ORDER BY avg_engagement ASC;"}
{"prompt": "What is the participation rate for live polls during “Women in Tech Summit 2025”? (Assume status LIKE '%poll%' in Registrations)", "response": "SELECT COUNT(*) FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' AND r.status LIKE '%poll%';"}
{"prompt": "What are the average feedback scores for workshops at “Women in Tech Summit 2025”? (Assume workshop info in Tasks)", "response": "SELECT t.description AS workshop, AVG(f.rating) AS avg_score FROM Tasks t JOIN Events e ON t.event_id = e.event_id JOIN Feedback f ON e.event_id = f.event_id WHERE e.title = 'Women in Tech Summit 2025' AND t.description LIKE '%workshop%' GROUP BY t.description ORDER BY avg_score DESC;"}
{"prompt": "What is the ROI by sponsor for “Women in Tech Summit 2025”? (Assume sponsors are Vendors with service_type = 'sponsor')", "response": "SELECT v.name, SUM(va.contract_amount) AS sponsor_investment, (SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e2 ON r.event_id = e2.event_id WHERE e2.title = 'Women in Tech Summit 2025') AS revenue FROM Vendors v JOIN VendorAssignments va ON v.vendor_id = va.vendor_id JOIN Events e ON va.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' AND v.service_type = 'sponsor' GROUP BY v.name;"}
{"prompt": "What is the average attendee satisfaction score for “Women in Tech Summit 2025”?", "response": "SELECT AVG(rating) FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025';"}
{"prompt": "What are the most common reasons for registration abandonment for “Women in Tech Summit 2025”? (Assume status = 'abandoned')", "response": "SELECT st.message, COUNT(*) AS frequency FROM SupportTickets st JOIN Events e ON st.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' AND st.subject LIKE '%abandon%' GROUP BY st.message ORDER BY frequency DESC;"}
{"prompt": "What is the conversion funnel from page visits to registrations for “Women in Tech Summit 2025”? (Assume AnalyticsReports)", "response": "SELECT report_date, total_attendees FROM AnalyticsReports WHERE top_events LIKE '%Women in Tech Summit 2025%' ORDER BY report_date;"}
{"prompt": "Which event days saw the highest engagement scores during “Women in Tech Summit 2025”? (Assume engagement in Feedback)", "response": "SELECT f.submitted_on, AVG(f.rating) AS engagement_score FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY f.submitted_on ORDER BY engagement_score DESC;"}
{"prompt": "What are the most common feedback comments for “Women in Tech Summit 2025”?", "response": "SELECT comments, COUNT(*) AS frequency FROM Feedback f JOIN Events e ON f.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY comments ORDER BY frequency DESC;"}
{"prompt": "What is the total revenue generated from registrations for “Women in Tech Summit 2025”?", "response": "SELECT SUM(p.amount) FROM Payments p JOIN Registrations r ON p.registration_id = r.registration_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025';"}
{"prompt": "Which attendee segments (roles) had the highest check-in rates for “Women in Tech Summit 2025”?", "response": "SELECT u.role, COUNT(r.registration_id) AS checkins FROM Registrations r JOIN Users u ON r.user_id = u.user_id JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' AND r.status = 'checked_in' GROUP BY u.role ORDER BY checkins DESC;"}
{"prompt": "What is the monthly trend in ticket sales for “Women in Tech Summit 2025”?", "response": "SELECT MONTH(r.registration_date) AS month, COUNT(*) AS tickets_sold FROM Registrations r JOIN Events e ON r.event_id = e.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY month ORDER BY month;"}
{"prompt": "What is the most recent analytics report for “Women in Tech Summit 2025”?", "response": "SELECT report_date, total_attendees, total_revenue FROM AnalyticsReports WHERE top_events LIKE '%Women in Tech Summit 2025%' ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "What are the optimal session timings based on attendance and feedback for “Women in Tech Summit 2025”? (Assume session = task)", "response": "SELECT t.description AS session, t.due_date, AVG(f.rating) AS avg_feedback FROM Tasks t JOIN Events e ON t.event_id = e.event_id JOIN Feedback f ON e.event_id = f.event_id WHERE e.title = 'Women in Tech Summit 2025' GROUP BY t.description, t.due_date ORDER BY avg_feedback DESC;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "MusicStreaming", "response": "nan"}
{"prompt": "Listeners / Users", "response": "nan"}
{"prompt": "NL Question (Riya’s User POV)", "response": "SQL Query"}
{"prompt": "What are my most played songs this month? (Assume user_id = 501)", "response": "SELECT s.title, COUNT(ss.stream_id) AS play_count FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.user_id = 501 AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY s.title ORDER BY play_count DESC;"}
{"prompt": "Which playlists have I created on SoundWave? (user_id = 501)", "response": "SELECT playlist_id, name, created_on FROM Playlists WHERE created_by = 501;"}
{"prompt": "What songs are in my “Road Trip Vibes” playlist? (user_id = 501)", "response": "SELECT s.title, s.artist_id FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Road Trip Vibes' AND p.created_by = 501;"}
{"prompt": "Which artists do I follow or listen to most often? (user_id = 501)", "response": "SELECT a.artist_id, a.name, COUNT(ss.stream_id) AS play_count FROM Artists a JOIN Songs s ON a.artist_id = s.artist_id JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.user_id = 501 GROUP BY a.artist_id, a.name ORDER BY play_count DESC;"}
{"prompt": "What new indie albums have I discovered through “Discover Weekly” this month? (Assume genre = 'Indie')", "response": "SELECT s.title, s.release_date FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.user_id = 501 AND s.genre = 'Indie' AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which songs or albums have I added to my favorites recently? (Assume “favorites” is a playlist)", "response": "SELECT s.title, s.artist_id FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Favorites' AND p.created_by = 501 ORDER BY ps.added_on DESC;"}
{"prompt": "What songs have I shared with friends via the app this week? (Assume shared songs are logged as support tickets with subject LIKE '%share%')", "response": "SELECT st.message FROM SupportTickets st WHERE st.user_id = 501 AND st.subject LIKE '%share%' AND st.submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "On which devices have I listened to music this month? (user_id = 501)", "response": "SELECT DISTINCT device FROM SongStreams WHERE user_id = 501 AND MONTH(stream_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is my total listening time this week? (user_id = 501)", "response": "SELECT SUM(s.duration) AS total_minutes FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.user_id = 501 AND ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which songs have I downloaded for offline listening? (Assume offline downloads are playlists named 'Offline' by user 501)", "response": "SELECT s.title, s.artist_id FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Offline' AND p.created_by = 501;"}
{"prompt": "What are the top recommended songs for me based on my listening habits? (Assume recommendations are top genres by play count)", "response": "SELECT s.genre, COUNT(ss.stream_id) AS play_count FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.user_id = 501 GROUP BY s.genre ORDER BY play_count DESC LIMIT 3;"}
{"prompt": "Which concerts or live sessions are suggested to me based on my listening patterns? (Assume suggestions are sent as support tickets with subject LIKE '%concert%')", "response": "SELECT st.message FROM SupportTickets st WHERE st.user_id = 501 AND st.subject LIKE '%concert%';"}
{"prompt": "What is my streaming activity trend for the past month? (user_id = 501)", "response": "SELECT DATE(stream_date) AS day, COUNT(*) AS streams FROM SongStreams WHERE user_id = 501 AND stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "Which of my playlists are set to public visibility? (user_id = 501)", "response": "SELECT playlist_id, name FROM Playlists WHERE created_by = 501 AND visibility = 'public';"}
{"prompt": "What are the most common genres in my playlists? (user_id = 501)", "response": "SELECT s.genre, COUNT(*) AS genre_count FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.created_by = 501 GROUP BY s.genre ORDER BY genre_count DESC;"}
{"prompt": "What is my subscription type and when did I sign up? (user_id = 501)", "response": "SELECT subscription_type, signup_date FROM Users WHERE user_id = 501;"}
{"prompt": "How many songs have I streamed on my smartphone vs. laptop this month? (user_id = 501)", "response": "SELECT device, COUNT(*) AS stream_count FROM SongStreams WHERE user_id = 501 AND MONTH(stream_date) = MONTH(CURRENT_DATE) GROUP BY device;"}
{"prompt": "What are the most recent moderation actions taken on my playlists or songs? (user_id = 501)", "response": "SELECT log_id, content_type, content_id, action, action_date FROM ModerationLogs WHERE moderator_id = 501 ORDER BY action_date DESC;"}
{"prompt": "Which friends have I shared music with the most? (Assume friends are users who received shared support tickets from user 501)", "response": "SELECT st.user_id, COUNT(*) AS share_count FROM SupportTickets st WHERE st.subject LIKE '%share%' AND st.user_id != 501 GROUP BY st.user_id ORDER BY share_count DESC;"}
{"prompt": "What is the most recent analytics report showing my top song and artist? (Assume AnalyticsReports has user-specific data; if not, skip)", "response": "-- No user-specific analytics in schema; cannot answer with current schema."}
{"prompt": "Artists", "response": "nan"}
{"prompt": "NL Question (Arjun’s Artist POV)", "response": "SQL Query"}
{"prompt": "How many streams has my new single received this month? (Assume artist_id = 601, song_id = 1101)", "response": "SELECT COUNT(*) AS total_streams FROM SongStreams WHERE song_id = 1101 AND MONTH(stream_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the daily streaming trend for my latest song this week? (song_id = 1101)", "response": "SELECT DATE(stream_date) AS day, COUNT(*) AS streams FROM SongStreams WHERE song_id = 1101 AND stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY day ORDER BY day;"}
{"prompt": "Which playlists include my new single? (song_id = 1101)", "response": "SELECT p.playlist_id, p.name FROM Playlists p JOIN PlaylistSongs ps ON p.playlist_id = ps.playlist_id WHERE ps.song_id = 1101;"}
{"prompt": "What are the top countries or regions where my listeners are based? (Assume listener region in Users table; if not, skip)", "response": "-- No region/country field in Users or SongStreams schema; cannot answer with current schema."}
{"prompt": "Which users have added my songs to their playlists this month? (artist_id = 601)", "response": "SELECT DISTINCT ps.playlist_id, p.name, p.created_by FROM PlaylistSongs ps JOIN Playlists p ON ps.playlist_id = p.playlist_id JOIN Songs s ON ps.song_id = s.song_id WHERE s.artist_id = 601 AND MONTH(ps.added_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total royalty amount generated by my songs this month? (artist_id = 601)", "response": "SELECT SUM(amount) AS total_royalty FROM Royalties WHERE artist_id = 601 AND MONTH(generated_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which of my songs have the highest number of streams this year? (artist_id = 601)", "response": "SELECT s.title, COUNT(ss.stream_id) AS total_streams FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE s.artist_id = 601 AND YEAR(ss.stream_date) = YEAR(CURRENT_DATE) GROUP BY s.title ORDER BY total_streams DESC;"}
{"prompt": "Which users have streamed my songs the most this month? (artist_id = 601)", "response": "SELECT ss.user_id, COUNT(ss.stream_id) AS play_count FROM SongStreams ss JOIN Songs s ON ss.song_id = s.song_id WHERE s.artist_id = 601 AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY ss.user_id ORDER BY play_count DESC;"}
{"prompt": "What is the trend in playlist inclusions for my songs over the last three months? (artist_id = 601)", "response": "SELECT MONTH(ps.added_on) AS month, COUNT(ps.song_id) AS inclusions FROM PlaylistSongs ps JOIN Songs s ON ps.song_id = s.song_id WHERE s.artist_id = 601 AND ps.added_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which marketing campaigns are currently running for my genre? (Assume genre = 'Indie')", "response": "SELECT campaign_id, name, start_date, end_date, budget FROM MarketingCampaigns WHERE target_genre = 'Indie' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "What moderation actions have been taken on my songs this month? (artist_id = 601)", "response": "SELECT log_id, content_id, action, action_date FROM ModerationLogs WHERE content_type = 'song' AND content_id IN (SELECT song_id FROM Songs WHERE artist_id = 601) AND MONTH(action_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total number of playlists co-created with other artists? (artist_id = 601)", "response": "SELECT COUNT(DISTINCT p.playlist_id) FROM Playlists p JOIN PlaylistSongs ps ON p.playlist_id = ps.playlist_id JOIN Songs s ON ps.song_id = s.song_id WHERE s.artist_id = 601 GROUP BY p.playlist_id HAVING COUNT(DISTINCT s.artist_id) > 1;"}
{"prompt": "Which of my songs have been remixed or collaborated on with other artists? (Assume remixes/collabs are new songs with same title)", "response": "SELECT s2.song_id, s2.title, s2.artist_id FROM Songs s1 JOIN Songs s2 ON s1.title = s2.title AND s1.artist_id = 601 AND s2.artist_id != 601;"}
{"prompt": "What is the payout report for my royalties in the last month? (artist_id = 601)", "response": "SELECT royalty_id, song_id, amount, generated_on FROM Royalties WHERE artist_id = 601 AND generated_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}
{"prompt": "What are the most common support ticket topics raised by my listeners? (Assume subject LIKE '%Arjun%' or by song_id)", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE message LIKE '%Arjun%' GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "What is the average duration of my songs? (artist_id = 601)", "response": "SELECT AVG(duration) FROM Songs WHERE artist_id = 601;"}
{"prompt": "Which of my songs have been added to the most playlists? (artist_id = 601)", "response": "SELECT s.title, COUNT(ps.playlist_id) AS playlist_count FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id WHERE s.artist_id = 601 GROUP BY s.title ORDER BY playlist_count DESC;"}
{"prompt": "What is the most recent analytics report showing my top streamed song and total streams? (artist_id = 601, if available)", "response": "SELECT report_date, top_song, total_streams FROM AnalyticsReports WHERE top_song IN (SELECT title FROM Songs WHERE artist_id = 601) ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "What is the trend in my monthly royalty earnings for the past six months? (artist_id = 601)", "response": "SELECT MONTH(generated_on) AS month, SUM(amount) AS total_royalty FROM Royalties WHERE artist_id = 601 AND generated_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which of my songs were released in the last 30 days? (artist_id = 601)", "response": "SELECT song_id, title, release_date FROM Songs WHERE artist_id = 601 AND release_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "Playlist Curators", "response": "nan"}
{"prompt": "NL Question (Meera’s Playlist Curator POV)", "response": "SQL Query"}
{"prompt": "What are the most streamed songs this month for potential playlist inclusion?", "response": "SELECT s.song_id, s.title, COUNT(ss.stream_id) AS total_streams FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY s.song_id, s.title ORDER BY total_streams DESC;"}
{"prompt": "Which genres are trending based on total streams this month?", "response": "SELECT s.genre, COUNT(ss.stream_id) AS total_streams FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY s.genre ORDER BY total_streams DESC;"}
{"prompt": "What is the average rating for songs in the “Indie” genre?", "response": "SELECT AVG(f.rating) FROM Songs s JOIN Feedback f ON s.song_id = f.song_id WHERE s.genre = 'Indie';"}
{"prompt": "Which songs have the lowest skip rates and highest repeat listens? (Assume skip/repeat tracked in SongStreams; not in schema)", "response": "-- No skip/repeat fields in schema; cannot answer with current schema."}
{"prompt": "What are the most followed playlists I have created? (Assume user_id = 701)", "response": "SELECT playlist_id, name FROM Playlists WHERE created_by = 701 ORDER BY visibility = 'public' DESC, created_on DESC;"}
{"prompt": "Which songs have been added most often to user playlists this month?", "response": "SELECT s.title, COUNT(ps.playlist_id) AS add_count FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id WHERE MONTH(ps.added_on) = MONTH(CURRENT_DATE) GROUP BY s.title ORDER BY add_count DESC;"}
{"prompt": "Which emerging artists are gaining popularity based on streams this quarter?", "response": "SELECT a.artist_id, a.name, COUNT(ss.stream_id) AS total_streams FROM Artists a JOIN Songs s ON a.artist_id = s.artist_id JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY a.artist_id, a.name ORDER BY total_streams DESC;"}
{"prompt": "What is the growth in followers for my “Chill Vibes” playlist over the past month? (Assume followers are tracked; not in schema)", "response": "-- No follower table/field in schema; cannot answer with current schema."}
{"prompt": "What are the most common genres in my “Workout Boost” playlist? (playlist_id = 1201)", "response": "SELECT s.genre, COUNT(*) AS genre_count FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id WHERE ps.playlist_id = 1201 GROUP BY s.genre ORDER BY genre_count DESC;"}
{"prompt": "Which songs in my “Indie Discoveries” playlist have the highest user ratings? (playlist_id = 1202)", "response": "SELECT s.title, AVG(f.rating) AS avg_rating FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id LEFT JOIN Feedback f ON s.song_id = f.song_id WHERE ps.playlist_id = 1202 GROUP BY s.title ORDER BY avg_rating DESC;"}
{"prompt": "What is the average duration of songs in my “Chill Vibes” playlist? (playlist_id = 1203)", "response": "SELECT AVG(s.duration) FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id WHERE ps.playlist_id = 1203;"}
{"prompt": "Which of my playlists have the most songs added in the last 30 days? (user_id = 701)", "response": "SELECT p.playlist_id, p.name, COUNT(ps.song_id) AS songs_added FROM Playlists p JOIN PlaylistSongs ps ON p.playlist_id = ps.playlist_id WHERE p.created_by = 701 AND ps.added_on >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY p.playlist_id, p.name ORDER BY songs_added DESC;"}
{"prompt": "What are the most suggested songs by listeners for my playlists? (Assume suggestions are support tickets with subject LIKE '%suggest%')", "response": "SELECT message, COUNT(*) AS suggestion_count FROM SupportTickets WHERE subject LIKE '%suggest%' GROUP BY message ORDER BY suggestion_count DESC;"}
{"prompt": "Which of my playlists have been shared the most on social media? (Assume sharing tracked in SupportTickets; not in schema)", "response": "-- No playlist sharing field in schema; cannot answer with current schema."}
{"prompt": "Which exclusive tracks have been featured in my playlists this month? (Assume “exclusive” in song title, user_id = 701)", "response": "SELECT s.title FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.created_by = 701 AND s.title LIKE '%exclusive%' AND MONTH(ps.added_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the trend in playlist creation for each genre this year?", "response": "SELECT s.genre, COUNT(DISTINCT p.playlist_id) AS playlist_count FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE YEAR(p.created_on) = YEAR(CURRENT_DATE) GROUP BY s.genre ORDER BY playlist_count DESC;"}
{"prompt": "Which of my playlists are set to public visibility? (user_id = 701)", "response": "SELECT playlist_id, name FROM Playlists WHERE created_by = 701 AND visibility = 'public';"}
{"prompt": "What are the most common support ticket topics from listeners about my playlists? (user_id = 701)", "response": "SELECT subject, COUNT(*) AS topic_count FROM SupportTickets WHERE user_id = 701 GROUP BY subject ORDER BY topic_count DESC;"}
{"prompt": "Which artists have collaborated most often in my playlists? (user_id = 701)", "response": "SELECT s.artist_id, a.name, COUNT(*) AS collab_count FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id JOIN Artists a ON s.artist_id = a.artist_id WHERE p.created_by = 701 GROUP BY s.artist_id, a.name ORDER BY collab_count DESC;"}
{"prompt": "What is the most recent analytics report showing top song and most streamed artist for playlist curation?", "response": "SELECT report_date, top_song, most_streamed_artist FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Content Moderators", "response": "nan"}
{"prompt": "NL Question (Rajesh’s Content Moderator POV)", "response": "SQL Query"}
{"prompt": "Which songs have been flagged for moderation this month?", "response": "SELECT content_id, action, action_date FROM ModerationLogs WHERE content_type = 'song' AND MONTH(action_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the most common moderation actions taken on user-generated content this year?", "response": "SELECT action, COUNT(*) AS action_count FROM ModerationLogs WHERE content_type = 'user' AND YEAR(action_date) = YEAR(CURRENT_DATE) GROUP BY action ORDER BY action_count DESC;"}
{"prompt": "Which moderators have taken the most actions this month?", "response": "SELECT moderator_id, COUNT(*) AS action_count FROM ModerationLogs WHERE MONTH(action_date) = MONTH(CURRENT_DATE) GROUP BY moderator_id ORDER BY action_count DESC;"}
{"prompt": "What is the status of all songs reported for copyright infringement?", "response": "SELECT content_id, action, action_date FROM ModerationLogs WHERE content_type = 'song' AND action LIKE '%copyright%';"}
{"prompt": "Which users have received warnings for inappropriate comments this year? (Assume content_type='user', action LIKE '%warning%')", "response": "SELECT content_id, action, action_date FROM ModerationLogs WHERE content_type = 'user' AND action LIKE '%warning%' AND YEAR(action_date) = YEAR(CURRENT_DATE);"}
{"prompt": "What is the trend in moderation actions for songs over the last six months?", "response": "SELECT MONTH(action_date) AS month, COUNT(*) AS action_count FROM ModerationLogs WHERE content_type = 'song' AND action_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which songs have been removed from the platform this quarter?", "response": "SELECT content_id, action_date FROM ModerationLogs WHERE content_type = 'song' AND action = 'removed' AND action_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);"}
{"prompt": "What is the most recent moderation action taken on any song?", "response": "SELECT content_id, action, action_date FROM ModerationLogs WHERE content_type = 'song' ORDER BY action_date DESC LIMIT 1;"}
{"prompt": "Which artists have had the most songs flagged for moderation this year?", "response": "SELECT s.artist_id, a.name, COUNT(m.log_id) AS flagged_count FROM ModerationLogs m JOIN Songs s ON m.content_id = s.song_id JOIN Artists a ON s.artist_id = a.artist_id WHERE m.content_type = 'song' AND YEAR(m.action_date) = YEAR(CURRENT_DATE) GROUP BY s.artist_id, a.name ORDER BY flagged_count DESC;"}
{"prompt": "What are the most common reasons for content removal? (Assume action field describes reason)", "response": "SELECT action, COUNT(*) AS removal_count FROM ModerationLogs WHERE action LIKE '%removed%' GROUP BY action ORDER BY removal_count DESC;"}
{"prompt": "Which user-generated content was flagged as spam this month? (Assume content_type='user', action LIKE '%spam%')", "response": "SELECT content_id, action_date FROM ModerationLogs WHERE content_type = 'user' AND action LIKE '%spam%' AND MONTH(action_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the average response time for moderation actions this month? (Assume response time can be approximated by action_date - upload date, but upload date not in schema)", "response": "-- No upload date field in schema; cannot answer with current schema."}
{"prompt": "Which songs have been restored after being previously removed? (Assume action = 'restored')", "response": "SELECT content_id, action_date FROM ModerationLogs WHERE content_type = 'song' AND action = 'restored';"}
{"prompt": "What is the distribution of moderation actions by content type this year?", "response": "SELECT content_type, COUNT(*) AS action_count FROM ModerationLogs WHERE YEAR(action_date) = YEAR(CURRENT_DATE) GROUP BY content_type;"}
{"prompt": "Which support tickets are related to moderation issues this month? (Assume subject LIKE '%moderation%')", "response": "SELECT ticket_id, user_id, subject, status FROM SupportTickets WHERE subject LIKE '%moderation%' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the most common moderation actions taken on comments or reviews? (Assume content_type='user')", "response": "SELECT action, COUNT(*) AS action_count FROM ModerationLogs WHERE content_type = 'user' GROUP BY action ORDER BY action_count DESC;"}
{"prompt": "Which artists have received the most moderation actions for their songs?", "response": "SELECT s.artist_id, a.name, COUNT(m.log_id) AS moderation_count FROM ModerationLogs m JOIN Songs s ON m.content_id = s.song_id JOIN Artists a ON s.artist_id = a.artist_id WHERE m.content_type = 'song' GROUP BY s.artist_id, a.name ORDER BY moderation_count DESC;"}
{"prompt": "What is the most recent support ticket related to content moderation?", "response": "SELECT ticket_id, user_id, subject, status, submitted_on FROM SupportTickets WHERE subject LIKE '%moderation%' ORDER BY submitted_on DESC LIMIT 1;"}
{"prompt": "How many moderation actions were taken in total this month?", "response": "SELECT COUNT(*) FROM ModerationLogs WHERE MONTH(action_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the most recent analytics report showing moderation activity and top flagged song? (Assume top_song in AnalyticsReports)", "response": "SELECT report_date, top_song FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "NL Question (Anita’s Customer Support POV)", "response": "SQL Query"}
{"prompt": "What are the open support tickets for payment errors this month?", "response": "SELECT ticket_id, user_id, subject, status, submitted_on FROM SupportTickets WHERE subject LIKE '%payment%' AND status = 'open' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which users have reported account access issues this week?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE subject LIKE '%account access%' AND submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the status of all playlist syncing issue tickets?", "response": "SELECT ticket_id, user_id, status, submitted_on FROM SupportTickets WHERE subject LIKE '%playlist sync%';"}
{"prompt": "What are the most common support ticket topics submitted by users this month?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE MONTH(submitted_on) = MONTH(CURRENT_DATE) GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Which support tickets are marked as urgent or high priority? (Assume subject LIKE '%urgent%' OR '%priority%')", "response": "SELECT ticket_id, user_id, subject, status FROM SupportTickets WHERE subject LIKE '%urgent%' OR subject LIKE '%priority%';"}
{"prompt": "What is the full support history for user_id = 501?", "response": "SELECT ticket_id, subject, status, submitted_on FROM SupportTickets WHERE user_id = 501 ORDER BY submitted_on DESC;"}
{"prompt": "Which tickets have been resolved for playlist issues this month?", "response": "SELECT ticket_id, user_id, status FROM SupportTickets WHERE subject LIKE '%playlist%' AND status = 'resolved' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the average resolution time for support tickets this month?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, submitted_on, NOW())) AS avg_resolution_minutes FROM SupportTickets WHERE status = 'resolved' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which users have submitted the most tickets this year?", "response": "SELECT user_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE YEAR(submitted_on) = YEAR(CURRENT_DATE) GROUP BY user_id ORDER BY ticket_count DESC;"}
{"prompt": "What are the most recent unresolved support tickets?", "response": "SELECT ticket_id, user_id, subject, status, submitted_on FROM SupportTickets WHERE status != 'resolved' ORDER BY submitted_on DESC LIMIT 10;"}
{"prompt": "What feedback have users given about new features this month? (Assume subject LIKE '%feature%' or message LIKE '%feature%')", "response": "SELECT user_id, subject, message, submitted_on FROM SupportTickets WHERE (subject LIKE '%feature%' OR message LIKE '%feature%') AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the most common pain points reported by users this quarter?", "response": "SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Which tickets are related to outages or bugs during music releases or promotions? (Assume subject LIKE '%outage%' OR '%bug%')", "response": "SELECT ticket_id, user_id, subject, status, submitted_on FROM SupportTickets WHERE subject LIKE '%outage%' OR subject LIKE '%bug%';"}
{"prompt": "What is the resolution status of all tickets submitted today?", "response": "SELECT ticket_id, user_id, subject, status FROM SupportTickets WHERE DATE(submitted_on) = CURRENT_DATE;"}
{"prompt": "Which technical issues have been escalated to engineering this month? (Assume status = 'escalated')", "response": "SELECT ticket_id, user_id, subject, submitted_on FROM SupportTickets WHERE status = 'escalated' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the trend in support ticket volume over the past six months?", "response": "SELECT MONTH(submitted_on) AS month, COUNT(*) AS ticket_count FROM SupportTickets WHERE submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which users have received workaround solutions for their issues? (Assume message LIKE '%workaround%')", "response": "SELECT user_id, ticket_id, subject, message FROM SupportTickets WHERE message LIKE '%workaround%';"}
{"prompt": "What is the most recent support ticket submitted by user_id = 501?", "response": "SELECT ticket_id, subject, status, submitted_on FROM SupportTickets WHERE user_id = 501 ORDER BY submitted_on DESC LIMIT 1;"}
{"prompt": "What is the total number of resolved vs unresolved tickets this month?", "response": "SELECT status, COUNT(*) AS ticket_count FROM SupportTickets WHERE MONTH(submitted_on) = MONTH(CURRENT_DATE) GROUP BY status;"}
{"prompt": "What is the most recent analytics report showing support ticket trends and user satisfaction? (Assume AnalyticsReports)", "response": "SELECT report_date, total_streams, total_revenue FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "NL Question (Vikram’s Marketing Team POV)", "response": "SQL Query"}
{"prompt": "What is the total number of new users registered this month?", "response": "SELECT COUNT(*) FROM Users WHERE MONTH(signup_date) = MONTH(CURRENT_DATE);"}
{"prompt": "How many users have streamed songs from the “Global Beats” playlist this week?", "response": "SELECT COUNT(DISTINCT ss.user_id) FROM SongStreams ss JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats' AND ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "Which marketing campaigns are currently active for promoting “Global Beats”?", "response": "SELECT campaign_id, name, start_date, end_date, budget FROM MarketingCampaigns WHERE name LIKE '%Global Beats%' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "What is the total budget spent on campaigns for “Global Beats”?", "response": "SELECT SUM(budget) FROM MarketingCampaigns WHERE name LIKE '%Global Beats%';"}
{"prompt": "Which influencers or artists have partnered on “Global Beats” promotions? (Assume artist_id in MarketingCampaigns; if not, skip)", "response": "-- No influencer/artist field in MarketingCampaigns schema; cannot answer with current schema."}
{"prompt": "What is the daily trend in user engagement for “Global Beats” this month?", "response": "SELECT DATE(ss.stream_date) AS day, COUNT(*) AS streams FROM SongStreams ss JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats' AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY day ORDER BY day;"}
{"prompt": "What are the top devices used to stream “Global Beats”?", "response": "SELECT ss.device, COUNT(*) AS stream_count FROM SongStreams ss JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats' GROUP BY ss.device ORDER BY stream_count DESC;"}
{"prompt": "What is the conversion rate from campaign clicks to new subscriptions this month? (Assume campaign clicks in AnalyticsReports)", "response": "SELECT (SELECT COUNT(*) FROM Users WHERE MONTH(signup_date) = MONTH(CURRENT_DATE) AND subscription_type != 'free') / (SELECT SUM(total_streams) FROM AnalyticsReports WHERE report_date >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')) AS conversion_rate;"}
{"prompt": "Which user segments are most engaged with “Global Beats”? (Assume segments by subscription_type)", "response": "SELECT u.subscription_type, COUNT(DISTINCT ss.user_id) AS engaged_users FROM Users u JOIN SongStreams ss ON u.user_id = ss.user_id JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats' GROUP BY u.subscription_type ORDER BY engaged_users DESC;"}
{"prompt": "What is the trend in user retention for “Global Beats” playlist listeners over the past three months?", "response": "SELECT MONTH(ss.stream_date) AS month, COUNT(DISTINCT ss.user_id) AS retained_users FROM SongStreams ss JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats' AND ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which marketing channels have generated the most streams for “Global Beats”? (Assume channel in MarketingCampaigns)", "response": "SELECT channel, SUM(total_streams) AS streams FROM MarketingCampaigns mc JOIN AnalyticsReports ar ON mc.name LIKE CONCAT('%', ar.top_song, '%') WHERE mc.name LIKE '%Global Beats%' GROUP BY channel ORDER BY streams DESC;"}
{"prompt": "How many users have redeemed discounted subscriptions from “Global Beats” campaigns? (Assume promo in MarketingCampaigns name)", "response": "SELECT COUNT(*) FROM Users WHERE signup_date >= (SELECT MIN(start_date) FROM MarketingCampaigns WHERE name LIKE '%Global Beats%' AND name LIKE '%discount%');"}
{"prompt": "What is the total revenue generated from users engaging with “Global Beats”?", "response": "SELECT SUM(ar.total_revenue) FROM AnalyticsReports ar WHERE ar.top_song IN (SELECT s.title FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats');"}
{"prompt": "Which regions have the highest engagement with “Global Beats”? (Assume region in Users table; if not, skip)", "response": "-- No region/country field in Users schema; cannot answer with current schema."}
{"prompt": "What is the average stream duration for “Global Beats” playlist?", "response": "SELECT AVG(s.duration) FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats';"}
{"prompt": "What is the most recent analytics report for “Global Beats” campaign performance?", "response": "SELECT report_date, top_song, most_streamed_artist, total_streams, total_revenue FROM AnalyticsReports WHERE top_song IN (SELECT s.title FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats') ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "How many users have attended exclusive listening parties for “Global Beats”? (Assume parties tracked as support tickets)", "response": "SELECT COUNT(DISTINCT user_id) FROM SupportTickets WHERE subject LIKE '%Global Beats%' AND message LIKE '%listening party%';"}
{"prompt": "What feedback have users given about “Global Beats” playlists or campaigns? (Assume feedback in SupportTickets message)", "response": "SELECT user_id, message, submitted_on FROM SupportTickets WHERE subject LIKE '%Global Beats%';"}
{"prompt": "Which artists have been most streamed via “Global Beats” playlists?", "response": "SELECT s.artist_id, a.name, COUNT(ss.stream_id) AS streams FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id JOIN SongStreams ss ON s.song_id = ss.song_id JOIN Artists a ON s.artist_id = a.artist_id WHERE p.name = 'Global Beats' GROUP BY s.artist_id, a.name ORDER BY streams DESC;"}
{"prompt": "What is the monthly trend in streams and revenue for “Global Beats”?", "response": "SELECT ar.report_date, ar.total_streams, ar.total_revenue FROM AnalyticsReports ar WHERE ar.top_song IN (SELECT s.title FROM Songs s JOIN PlaylistSongs ps ON s.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Global Beats') AND ar.report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) ORDER BY ar.report_date;"}
{"prompt": "Finance / Royalty Management Staff", "response": "nan"}
{"prompt": "NL Question (Sneha’s Finance & Royalty Management POV)", "response": "SQL Query"}
{"prompt": "What is the total royalty amount paid to artists this month?", "response": "SELECT SUM(amount) AS total_royalty FROM Royalties WHERE MONTH(generated_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which artists have received the highest royalty payments this month?", "response": "SELECT a.artist_id, a.name, SUM(r.amount) AS total_royalty FROM Artists a JOIN Royalties r ON a.artist_id = r.artist_id WHERE MONTH(r.generated_on) = MONTH(CURRENT_DATE) GROUP BY a.artist_id, a.name ORDER BY total_royalty DESC;"}
{"prompt": "What are the total streams for each song this month?", "response": "SELECT s.song_id, s.title, COUNT(ss.stream_id) AS total_streams FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY s.song_id, s.title ORDER BY total_streams DESC;"}
{"prompt": "What is the average royalty paid per stream this month?", "response": "SELECT AVG(r.amount) FROM Royalties r JOIN SongStreams ss ON r.song_id = ss.song_id WHERE MONTH(r.generated_on) = MONTH(CURRENT_DATE) AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE);"}
{"prompt": "Which songs have generated the highest royalties this quarter?", "response": "SELECT s.title, SUM(r.amount) AS total_royalty FROM Songs s JOIN Royalties r ON s.song_id = r.song_id WHERE r.generated_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY s.title ORDER BY total_royalty DESC;"}
{"prompt": "What is the monthly trend in royalty payments for the past six months?", "response": "SELECT MONTH(generated_on) AS month, SUM(amount) AS total_royalty FROM Royalties WHERE generated_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which artists have disputed royalty payments this year? (Assume disputes are tracked in SupportTickets with subject LIKE '%royalty%')", "response": "SELECT DISTINCT st.user_id, a.name FROM SupportTickets st JOIN Artists a ON st.user_id = a.artist_id WHERE st.subject LIKE '%royalty%' AND YEAR(st.submitted_on) = YEAR(CURRENT_DATE);"}
{"prompt": "What are the details of all royalty payments made to artist_id = 601 this year?", "response": "SELECT royalty_id, song_id, amount, generated_on FROM Royalties WHERE artist_id = 601 AND YEAR(generated_on) = YEAR(CURRENT_DATE);"}
{"prompt": "Which songs have the highest number of regional streams this month? (Assume region in Users; not in schema)", "response": "-- No region/country field in Users or SongStreams schema; cannot answer with current schema."}
{"prompt": "What is the total revenue from subscription payments this month? (Assume revenue in AnalyticsReports)", "response": "SELECT SUM(total_revenue) FROM AnalyticsReports WHERE report_date >= DATE_FORMAT(CURRENT_DATE, '%Y-%m-01');"}
{"prompt": "Which artists have not received any royalty payments this month?", "response": "SELECT artist_id, name FROM Artists WHERE artist_id NOT IN (SELECT DISTINCT artist_id FROM Royalties WHERE MONTH(generated_on) = MONTH(CURRENT_DATE));"}
{"prompt": "What is the average royalty rate applied to songs this month? (Assume rate = royalty/total streams per song)", "response": "SELECT s.song_id, s.title, SUM(r.amount)/COUNT(ss.stream_id) AS avg_rate FROM Songs s JOIN Royalties r ON s.song_id = r.song_id JOIN SongStreams ss ON s.song_id = ss.song_id WHERE MONTH(r.generated_on) = MONTH(CURRENT_DATE) AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY s.song_id, s.title;"}
{"prompt": "What are the details of all royalty payments flagged for discrepancies this month? (Assume disputes in SupportTickets)", "response": "SELECT r.royalty_id, r.artist_id, r.song_id, r.amount, r.generated_on FROM Royalties r JOIN SupportTickets st ON r.artist_id = st.user_id WHERE st.subject LIKE '%discrepancy%' AND MONTH(r.generated_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which artists have the highest cumulative royalties all time?", "response": "SELECT a.artist_id, a.name, SUM(r.amount) AS total_royalty FROM Artists a JOIN Royalties r ON a.artist_id = r.artist_id GROUP BY a.artist_id, a.name ORDER BY total_royalty DESC;"}
{"prompt": "What is the payout schedule for all artists this month?", "response": "SELECT artist_id, SUM(amount) AS payout, MAX(generated_on) AS last_payment FROM Royalties WHERE MONTH(generated_on) = MONTH(CURRENT_DATE) GROUP BY artist_id;"}
{"prompt": "What is the most recent royalty payment made to artist_id = 601?", "response": "SELECT royalty_id, song_id, amount, generated_on FROM Royalties WHERE artist_id = 601 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What is the trend in royalty disputes over the past year? (Assume SupportTickets with subject LIKE '%royalty%' and status = 'disputed')", "response": "SELECT MONTH(submitted_on) AS month, COUNT(*) AS disputes FROM SupportTickets WHERE subject LIKE '%royalty%' AND status = 'disputed' AND submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY month ORDER BY month;"}
{"prompt": "Which songs have not generated any royalties this year?", "response": "SELECT song_id, title FROM Songs WHERE song_id NOT IN (SELECT DISTINCT song_id FROM Royalties WHERE YEAR(generated_on) = YEAR(CURRENT_DATE));"}
{"prompt": "What is the total number of royalty payments processed this month?", "response": "SELECT COUNT(*) FROM Royalties WHERE MONTH(generated_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the most recent analytics report showing total streams and revenue for royalty calculations?", "response": "SELECT report_date, total_streams, total_revenue FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "NL Question (Rahul’s Data Analyst POV)", "response": "SQL Query"}
{"prompt": "What are the most played songs on SoundWave this month?", "response": "SELECT s.title, COUNT(ss.stream_id) AS play_count FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY s.title ORDER BY play_count DESC;"}
{"prompt": "Which genres are most popular based on total streams this quarter?", "response": "SELECT s.genre, COUNT(ss.stream_id) AS total_streams FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY s.genre ORDER BY total_streams DESC;"}
{"prompt": "What is the average session duration for users this week? (Assume session duration = sum of song durations per user per day)", "response": "SELECT ss.user_id, DATE(ss.stream_date) AS day, SUM(s.duration) AS total_session_duration FROM SongStreams ss JOIN Songs s ON ss.song_id = s.song_id WHERE ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY ss.user_id, day ORDER BY total_session_duration DESC;"}
{"prompt": "Which users have the highest skip rates this month? (Assume skip data; not in schema)", "response": "-- No skip field in schema; cannot answer with current schema."}
{"prompt": "What is the trend in new user subscriptions over the past six months?", "response": "SELECT MONTH(signup_date) AS month, COUNT(*) AS new_users FROM Users WHERE signup_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which artists are emerging based on stream growth this month?", "response": "SELECT a.artist_id, a.name, COUNT(ss.stream_id) AS stream_count FROM Artists a JOIN Songs s ON a.artist_id = s.artist_id JOIN SongStreams ss ON s.song_id = ss.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY a.artist_id, a.name ORDER BY stream_count DESC;"}
{"prompt": "What is the adoption rate of the “Daily Mix” feature this month? (Assume Daily Mix is a playlist)", "response": "SELECT COUNT(DISTINCT ss.user_id) AS adopters FROM SongStreams ss JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Daily Mix' AND MONTH(ss.stream_date) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the engagement trend for “Daily Mix” over the past month?", "response": "SELECT DATE(ss.stream_date) AS day, COUNT(*) AS play_count FROM SongStreams ss JOIN PlaylistSongs ps ON ss.song_id = ps.song_id JOIN Playlists p ON ps.playlist_id = p.playlist_id WHERE p.name = 'Daily Mix' AND ss.stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "Which songs in “Daily Mix” have the highest repeat listens? (Assume repeat = multiple streams per user; not in schema)", "response": "-- No repeat field in schema; cannot answer with current schema."}
{"prompt": "What is the distribution of subscription types among active users?", "response": "SELECT subscription_type, COUNT(*) AS user_count FROM Users WHERE user_id IN (SELECT DISTINCT user_id FROM SongStreams WHERE stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) GROUP BY subscription_type ORDER BY user_count DESC;"}
{"prompt": "Which regions have the highest user engagement? (Assume region in Users; not in schema)", "response": "-- No region/country field in Users schema; cannot answer with current schema."}
{"prompt": "What is the monthly trend in total streams and revenue for SoundWave?", "response": "SELECT report_date, total_streams, total_revenue FROM AnalyticsReports WHERE report_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) ORDER BY report_date;"}
{"prompt": "Which playlists have gained the most new followers this month? (Assume followers tracked; not in schema)", "response": "-- No follower field in schema; cannot answer with current schema."}
{"prompt": "What are the top devices used for streaming music on SoundWave?", "response": "SELECT device, COUNT(*) AS stream_count FROM SongStreams GROUP BY device ORDER BY stream_count DESC;"}
{"prompt": "Which marketing campaigns have the highest conversion rates this year? (Assume conversion = new users from campaign; not in schema)", "response": "-- No direct campaign-user mapping in schema; cannot answer with current schema."}
{"prompt": "What are the most common subscription types among users who listen to “Indie” genre?", "response": "SELECT u.subscription_type, COUNT(*) AS user_count FROM Users u JOIN SongStreams ss ON u.user_id = ss.user_id JOIN Songs s ON ss.song_id = s.song_id WHERE s.genre = 'Indie' GROUP BY u.subscription_type ORDER BY user_count DESC;"}
{"prompt": "What is the most recent analytics report showing top song and most streamed artist?", "response": "SELECT report_date, top_song, most_streamed_artist, total_streams, total_revenue FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which artists have the fastest growing listener base this quarter? (Assume growth = unique listeners; not in schema)", "response": "-- No unique listener field in schema; cannot answer with current schema."}
{"prompt": "What is the average number of songs streamed per user this month?", "response": "SELECT AVG(user_streams) FROM (SELECT user_id, COUNT(*) AS user_streams FROM SongStreams WHERE MONTH(stream_date) = MONTH(CURRENT_DATE) GROUP BY user_id) AS sub;"}
{"prompt": "Which genres have the highest adoption among new users registered this month?", "response": "SELECT s.genre, COUNT(ss.stream_id) AS total_streams FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.user_id IN (SELECT user_id FROM Users WHERE MONTH(signup_date) = MONTH(CURRENT_DATE)) GROUP BY s.genre ORDER BY total_streams DESC;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "NL Question (Snehal’s IT/System Admin POV)", "response": "SQL Query"}
{"prompt": "How many new users registered on SoundWave this week?", "response": "SELECT COUNT(*) FROM Users WHERE signup_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What is the daily trend in song streams over the past week?", "response": "SELECT DATE(stream_date) AS day, COUNT(*) AS total_streams FROM SongStreams WHERE stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY day ORDER BY day;"}
{"prompt": "Which songs have experienced the highest spike in streams during the last 24 hours?", "response": "SELECT s.song_id, s.title, COUNT(ss.stream_id) AS stream_count FROM Songs s JOIN SongStreams ss ON s.song_id = ss.song_id WHERE ss.stream_date >= DATE_SUB(NOW(), INTERVAL 1 DAY) GROUP BY s.song_id, s.title ORDER BY stream_count DESC;"}
{"prompt": "What is the current server load based on total streams today?", "response": "SELECT COUNT(*) AS streams_today FROM SongStreams WHERE DATE(stream_date) = CURRENT_DATE;"}
{"prompt": "Which payment methods have been used most frequently this month?", "response": "SELECT method, COUNT(*) AS usage_count FROM Payments WHERE MONTH(paid_on) = MONTH(CURRENT_DATE) GROUP BY method ORDER BY usage_count DESC;"}
{"prompt": "How many failed payment attempts have occurred this month? (Assume method LIKE '%fail%' in Payments)", "response": "SELECT COUNT(*) FROM Payments WHERE method LIKE '%fail%' AND MONTH(paid_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which users have the most login attempts this week? (Assume login attempts tracked in SupportTickets with subject LIKE '%login%')", "response": "SELECT user_id, COUNT(*) AS login_attempts FROM SupportTickets WHERE subject LIKE '%login%' AND submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY user_id ORDER BY login_attempts DESC;"}
{"prompt": "What is the status of all open support tickets related to system performance? (Assume subject LIKE '%performance%' AND status != 'resolved')", "response": "SELECT ticket_id, user_id, subject, status, submitted_on FROM SupportTickets WHERE subject LIKE '%performance%' AND status != 'resolved';"}
{"prompt": "Which users have been assigned the 'admin' role on the platform?", "response": "SELECT user_id, name, email FROM Users WHERE role = 'admin';"}
{"prompt": "What is the monthly trend in total payments processed on SoundWave?", "response": "SELECT MONTH(paid_on) AS month, COUNT(*) AS payment_count FROM Payments WHERE paid_on >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which devices are most commonly used for streaming music this month?", "response": "SELECT device, COUNT(*) AS stream_count FROM SongStreams WHERE MONTH(stream_date) = MONTH(CURRENT_DATE) GROUP BY device ORDER BY stream_count DESC;"}
{"prompt": "What is the status of all recent updates or patches deployed? (Assume tracked in ModerationLogs with action LIKE '%update%' or '%patch%')", "response": "SELECT log_id, content_type, content_id, action, action_date FROM ModerationLogs WHERE action LIKE '%update%' OR action LIKE '%patch%' ORDER BY action_date DESC;"}
{"prompt": "Which users have unresolved payment issues this month? (Assume status = 'open' and subject LIKE '%payment%' in SupportTickets)", "response": "SELECT user_id, ticket_id, subject, status FROM SupportTickets WHERE subject LIKE '%payment%' AND status = 'open' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total number of users currently subscribed to premium plans?", "response": "SELECT COUNT(*) FROM Users WHERE subscription_type = 'premium';"}
{"prompt": "Which support tickets are related to security or data privacy concerns? (Assume subject LIKE '%security%' OR '%privacy%')", "response": "SELECT ticket_id, user_id, subject, status, submitted_on FROM SupportTickets WHERE subject LIKE '%security%' OR subject LIKE '%privacy%';"}
{"prompt": "What is the most recent analytics report showing platform usage and revenue?", "response": "SELECT report_date, total_streams, total_revenue FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which artists have had the most uploads this year? (Assume upload = new song in Songs)", "response": "SELECT artist_id, COUNT(song_id) AS uploads FROM Songs WHERE YEAR(release_date) = YEAR(CURRENT_DATE) GROUP BY artist_id ORDER BY uploads DESC;"}
{"prompt": "What is the average stream duration per user this month?", "response": "SELECT AVG(user_duration) FROM (SELECT user_id, SUM(s.duration) AS user_duration FROM SongStreams ss JOIN Songs s ON ss.song_id = s.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY user_id) AS durations;"}
{"prompt": "How many support tickets have been escalated to IT this month? (Assume status = 'escalated' and subject LIKE '%IT%')", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'escalated' AND subject LIKE '%IT%' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What is the total number of unique users who streamed music in the last 24 hours?", "response": "SELECT COUNT(DISTINCT user_id) FROM SongStreams WHERE stream_date >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "NL Question (Aarav’s Product Manager POV)", "response": "SQL Query"}
{"prompt": "What are the most requested new features by users this month? (Assume SupportTickets with subject LIKE '%feature%')", "response": "SELECT subject, COUNT(*) AS request_count FROM SupportTickets WHERE subject LIKE '%feature%' AND MONTH(submitted_on) = MONTH(CURRENT_DATE) GROUP BY subject ORDER BY request_count DESC;"}
{"prompt": "Which playlists have the highest user engagement this month? (Assume engagement = total streams)", "response": "SELECT p.playlist_id, p.name, COUNT(ss.stream_id) AS engagement FROM Playlists p JOIN PlaylistSongs ps ON p.playlist_id = ps.playlist_id JOIN SongStreams ss ON ps.song_id = ss.song_id WHERE MONTH(ss.stream_date) = MONTH(CURRENT_DATE) GROUP BY p.playlist_id, p.name ORDER BY engagement DESC;"}
{"prompt": "What is the trend in user retention over the past six months?", "response": "SELECT MONTH(signup_date) AS month, COUNT(*) AS new_users FROM Users WHERE signup_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which users have provided the most feedback about playlist discovery? (Assume SupportTickets with subject LIKE '%playlist discovery%')", "response": "SELECT user_id, COUNT(*) AS feedback_count FROM SupportTickets WHERE subject LIKE '%playlist discovery%' GROUP BY user_id ORDER BY feedback_count DESC;"}
{"prompt": "What is the average number of playlists created per user this month?", "response": "SELECT AVG(user_playlists) FROM (SELECT created_by, COUNT(*) AS user_playlists FROM Playlists WHERE MONTH(created_on) = MONTH(CURRENT_DATE) GROUP BY created_by) AS sub;"}
{"prompt": "How many users have used the social sharing feature this month? (Assume subject LIKE '%share%' in SupportTickets)", "response": "SELECT COUNT(DISTINCT user_id) FROM SupportTickets WHERE subject LIKE '%share%' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "What are the most common pain points reported about offline listening? (Assume subject LIKE '%offline%' in SupportTickets)", "response": "SELECT message, COUNT(*) AS frequency FROM SupportTickets WHERE subject LIKE '%offline%' GROUP BY message ORDER BY frequency DESC;"}
{"prompt": "What is the monthly trend in subscription growth for SoundWave?", "response": "SELECT MONTH(signup_date) AS month, COUNT(*) AS new_subscriptions FROM Users WHERE subscription_type != 'free' GROUP BY month ORDER BY month;"}
{"prompt": "Which features have received the highest positive feedback this year? (Assume message LIKE '%love%' or '%great%' in SupportTickets)", "response": "SELECT subject, COUNT(*) AS positive_feedback FROM SupportTickets WHERE (message LIKE '%love%' OR message LIKE '%great%') AND YEAR(submitted_on) = YEAR(CURRENT_DATE) GROUP BY subject ORDER BY positive_feedback DESC;"}
{"prompt": "What is the average retention rate for users who created playlists in the last three months?", "response": "SELECT AVG(retention) FROM (SELECT user_id, COUNT(DISTINCT MONTH(stream_date)) AS retention FROM SongStreams WHERE user_id IN (SELECT created_by FROM Playlists WHERE created_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) GROUP BY user_id) AS sub;"}
{"prompt": "What is the adoption rate of the new social sharing feature this month? (Assume subject LIKE '%share%' in SupportTickets)", "response": "SELECT COUNT(DISTINCT user_id) AS adopters FROM SupportTickets WHERE subject LIKE '%share%' AND MONTH(submitted_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which artists have the most songs added to user playlists this quarter?", "response": "SELECT a.artist_id, a.name, COUNT(ps.song_id) AS added_count FROM Artists a JOIN Songs s ON a.artist_id = s.artist_id JOIN PlaylistSongs ps ON s.song_id = ps.song_id WHERE ps.added_on >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY a.artist_id, a.name ORDER BY added_count DESC;"}
{"prompt": "What are the most common reasons for subscription cancellations this month? (Assume subject LIKE '%cancel%' in SupportTickets)", "response": "SELECT message, COUNT(*) AS cancel_count FROM SupportTickets WHERE subject LIKE '%cancel%' AND MONTH(submitted_on) = MONTH(CURRENT_DATE) GROUP BY message ORDER BY cancel_count DESC;"}
{"prompt": "What is the total number of users who have enabled offline listening this month? (Assume playlist name = 'Offline')", "response": "SELECT COUNT(DISTINCT created_by) FROM Playlists WHERE name = 'Offline' AND MONTH(created_on) = MONTH(CURRENT_DATE);"}
{"prompt": "Which new features have the highest engagement within the first week of launch? (Assume tracked in SupportTickets or SongStreams)", "response": "SELECT subject, COUNT(*) AS engagement FROM SupportTickets WHERE submitted_on >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY subject ORDER BY engagement DESC;"}
{"prompt": "What is the most recent analytics report showing user engagement and subscription growth?", "response": "SELECT report_date, total_streams, total_revenue FROM AnalyticsReports ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Which subscription types have the highest retention rates?", "response": "SELECT subscription_type, COUNT(*) AS user_count FROM Users WHERE user_id IN (SELECT DISTINCT user_id FROM SongStreams WHERE stream_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)) GROUP BY subscription_type ORDER BY user_count DESC;"}
{"prompt": "What is the average session duration for users engaging with new features this month? (Assume new features = playlists created this month)", "response": "SELECT AVG(session_duration) FROM (SELECT ss.user_id, SUM(s.duration) AS session_duration FROM SongStreams ss JOIN Songs s ON ss.song_id = s.song_id WHERE ss.user_id IN (SELECT created_by FROM Playlists WHERE MONTH(created_on) = MONTH(CURRENT_DATE)) GROUP BY ss.user_id) AS sub;"}
{"prompt": "Which user segments are most engaged with playlist discovery features? (Assume role in Users, subject LIKE '%playlist discovery%')", "response": "SELECT u.role, COUNT(st.ticket_id) AS engagement FROM Users u JOIN SupportTickets st ON u.user_id = st.user_id WHERE st.subject LIKE '%playlist discovery%' GROUP BY u.role ORDER BY engagement DESC;"}
{"prompt": "What are the most recent user suggestions for improving playlist discovery? (Assume subject LIKE '%playlist discovery%')", "response": "SELECT user_id, message, submitted_on FROM SupportTickets WHERE subject LIKE '%playlist discovery%' ORDER BY submitted_on DESC LIMIT 10;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "DonationPlatform", "response": "nan"}
{"prompt": "Donors", "response": "nan"}
{"prompt": "Natural Language Question (Anita's POV)", "response": "MySQL Query"}
{"prompt": "Which campaigns have I donated to in the past year?", "response": "SELECT DISTINCT c.title, c.description FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id = [Anita's user_id] AND d.donation_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}
{"prompt": "What is the total amount I have donated so far?", "response": "SELECT SUM(amount) AS total_donated FROM Donations WHERE donor_id = [Anita's user_id];"}
{"prompt": "How many campaigns have I supported with recurring donations?", "response": "SELECT COUNT(DISTINCT campaign_id) AS recurring_campaigns FROM Donations WHERE donor_id = [Anita's user_id] AND payment_method = 'Recurring';"}
{"prompt": "Can I see the latest updates for the campaigns I donated to?", "response": "SELECT c.title, cl.action, cl.timestamp FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN ComplianceLogs cl ON c.campaign_id = cl.campaign_id WHERE d.donor_id = [Anita's user_id] ORDER BY cl.timestamp DESC LIMIT 10;"}
{"prompt": "Which campaign that I donated to has raised the most funds overall?", "response": "SELECT c.title, SUM(d2.amount) AS total_raised FROM Donations d1 JOIN Campaigns c ON d1.campaign_id = c.campaign_id JOIN Donations d2 ON c.campaign_id = d2.campaign_id WHERE d1.donor_id = [Anita's user_id] GROUP BY c.title ORDER BY total_raised DESC LIMIT 1;"}
{"prompt": "What are the impact reports for my favorite campaigns?", "response": "SELECT c.title, ar.report_date, ar.total_donations, ar.top_campaign FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN AnalyticsReports ar ON c.title = ar.top_campaign WHERE d.donor_id = [Anita's user_id];"}
{"prompt": "Have my donations reached the intended beneficiaries?", "response": "SELECT c.title, b.name, ft.amount, ft.status FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN FundTransfers ft ON c.campaign_id = ft.campaign_id JOIN Beneficiaries b ON ft.beneficiary_id = b.beneficiary_id WHERE d.donor_id = [Anita's user_id];"}
{"prompt": "What is the status of the campaigns I recently donated to?", "response": "SELECT c.title, c.status FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id = [Anita's user_id] ORDER BY d.donation_date DESC LIMIT 5;"}
{"prompt": "Which payment methods have I used most frequently?", "response": "SELECT payment_method, COUNT(*) AS usage_count FROM Donations WHERE donor_id = [Anita's user_id] GROUP BY payment_method ORDER BY usage_count DESC;"}
{"prompt": "What are the upcoming campaigns in healthcare that I can support?", "response": "SELECT title, description, start_date FROM Campaigns WHERE status = 'active' AND start_date > CURDATE() AND description LIKE '%healthcare%';"}
{"prompt": "Have I received all my thank-you messages from campaigns?", "response": "SELECT c.title, d.donation_date FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id = [Anita's user_id] AND d.donation_id NOT IN (SELECT DISTINCT donation_id FROM SupportTickets WHERE subject LIKE '%Thank you%');"}
{"prompt": "What is the average amount I donate per campaign?", "response": "SELECT AVG(total) AS avg_per_campaign FROM (SELECT SUM(amount) AS total FROM Donations WHERE donor_id = [Anita's user_id] GROUP BY campaign_id) t;"}
{"prompt": "Which beneficiaries have received funds because of my donations?", "response": "SELECT DISTINCT b.name FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN FundTransfers ft ON c.campaign_id = ft.campaign_id JOIN Beneficiaries b ON ft.beneficiary_id = b.beneficiary_id WHERE d.donor_id = [Anita's user_id];"}
{"prompt": "What support tickets have I raised and what are their statuses?", "response": "SELECT subject, status, created_on FROM SupportTickets WHERE user_id = [Anita's user_id];"}
{"prompt": "How many active donors are there in the campaigns I support?", "response": "SELECT c.title, ar.active_donors FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN AnalyticsReports ar ON c.title = ar.top_campaign WHERE d.donor_id = [Anita's user_id];"}
{"prompt": "Which of my donations were made during disaster relief campaigns?", "response": "SELECT c.title, d.amount, d.donation_date FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id = [Anita's user_id] AND c.description LIKE '%disaster relief%';"}
{"prompt": "What is the status of fund transfers for the campaigns I contributed to?", "response": "SELECT c.title, ft.amount, ft.status, ft.transfer_date FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN FundTransfers ft ON c.campaign_id = ft.campaign_id WHERE d.donor_id = [Anita's user_id];"}
{"prompt": "Which campaigns I donated to are still accepting donations?", "response": "SELECT DISTINCT c.title FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id = [Anita's user_id] AND c.status = 'active';"}
{"prompt": "What is the breakdown of my donations by cause (e.g., education, healthcare, disaster relief)?", "response": "SELECT CASE WHEN c.description LIKE '%education%' THEN 'Education' WHEN c.description LIKE '%healthcare%' THEN 'Healthcare' WHEN c.description LIKE '%disaster relief%' THEN 'Disaster Relief' ELSE 'Other' END AS cause, SUM(d.amount) AS total FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id = [Anita's user_id] GROUP BY cause;"}
{"prompt": "How many times have I donated in the last month?", "response": "SELECT COUNT(*) AS donation_count FROM Donations WHERE donor_id = [Anita's user_id] AND donation_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Fundraisers / Campaign Organizers", "response": "nan"}
{"prompt": "Natural Language Question (Rahul's POV)", "response": "MySQL Query"}
{"prompt": "How much money has my school renovation campaign raised so far?", "response": "SELECT SUM(d.amount) AS total_raised FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project';"}
{"prompt": "What is the current status of my school renovation campaign?", "response": "SELECT status FROM Campaigns WHERE created_by = [Rahul's user_id] AND title = 'School Renovation Project';"}
{"prompt": "How many donors have contributed to my campaign?", "response": "SELECT COUNT(DISTINCT d.donor_id) AS donor_count FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project';"}
{"prompt": "Who are the top 5 donors to my campaign?", "response": "SELECT u.name, SUM(d.amount) AS total_donated FROM Donations d JOIN Users u ON d.donor_id = u.user_id JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' GROUP BY u.name ORDER BY total_donated DESC LIMIT 5;"}
{"prompt": "What are the most common payment methods used by donors in my campaign?", "response": "SELECT d.payment_method, COUNT(*) AS usage_count FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' GROUP BY d.payment_method ORDER BY usage_count DESC;"}
{"prompt": "What is the average donation amount for my campaign?", "response": "SELECT AVG(d.amount) AS avg_donation FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project';"}
{"prompt": "How many donations have been made this month to my campaign?", "response": "SELECT COUNT(*) AS donations_this_month FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' AND MONTH(d.donation_date) = MONTH(CURDATE()) AND YEAR(d.donation_date) = YEAR(CURDATE());"}
{"prompt": "Can I see a list of all donors and their total contributions to my campaign?", "response": "SELECT u.name, SUM(d.amount) AS total_donated FROM Donations d JOIN Users u ON d.donor_id = u.user_id JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' GROUP BY u.name;"}
{"prompt": "What updates or compliance actions have been logged for my campaign?", "response": "SELECT cl.action, cl.timestamp FROM ComplianceLogs cl JOIN Campaigns c ON cl.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' ORDER BY cl.timestamp DESC;"}
{"prompt": "Has the beneficiary school received any fund transfers from my campaign?", "response": "SELECT ft.amount, ft.transfer_date, ft.status FROM FundTransfers ft JOIN Campaigns c ON ft.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project';"}
{"prompt": "What is the timeline (start and end date) for my campaign?", "response": "SELECT start_date, end_date FROM Campaigns WHERE created_by = [Rahul's user_id] AND title = 'School Renovation Project';"}
{"prompt": "How close am I to reaching my fundraising goal?", "response": "SELECT goal_amount, IFNULL(SUM(d.amount),0) AS amount_raised FROM Campaigns c LEFT JOIN Donations d ON c.campaign_id = d.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' GROUP BY c.goal_amount;"}
{"prompt": "What are the donor demographics for my campaign?", "response": "SELECT u.role, COUNT(*) AS count FROM Donations d JOIN Users u ON d.donor_id = u.user_id JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' GROUP BY u.role;"}
{"prompt": "What are the most successful marketing channels for my campaign?", "response": "SELECT mc.channel, mc.budget FROM MarketingCampaigns mc WHERE mc.campaign_id = (SELECT campaign_id FROM Campaigns WHERE created_by = [Rahul's user_id] AND title = 'School Renovation Project');"}
{"prompt": "How many support tickets have been raised by donors regarding my campaign?", "response": "SELECT COUNT(*) AS ticket_count FROM SupportTickets st JOIN Campaigns c ON st.user_id = c.created_by WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project';"}
{"prompt": "What are the most recent donor messages or support tickets related to my campaign?", "response": "SELECT st.subject, st.message, st.created_on FROM SupportTickets st JOIN Campaigns c ON st.user_id = c.created_by WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' ORDER BY st.created_on DESC LIMIT 5;"}
{"prompt": "Which donors have set up recurring donations for my campaign?", "response": "SELECT u.name FROM Donations d JOIN Users u ON d.donor_id = u.user_id JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' AND d.payment_method = 'Recurring' GROUP BY u.name;"}
{"prompt": "What is the daily donation trend for my campaign over the last two weeks?", "response": "SELECT DATE(d.donation_date) AS donation_day, SUM(d.amount) AS daily_total FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project' AND d.donation_date >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) GROUP BY donation_day ORDER BY donation_day;"}
{"prompt": "What is the total amount transferred to the beneficiary so far?", "response": "SELECT IFNULL(SUM(ft.amount),0) AS total_transferred FROM FundTransfers ft JOIN Campaigns c ON ft.campaign_id = c.campaign_id WHERE c.created_by = [Rahul's user_id] AND c.title = 'School Renovation Project';"}
{"prompt": "Which of my campaign’s donors have also donated to other campaigns on the platform?", "response": "SELECT DISTINCT u.name FROM Donations d1 JOIN Users u ON d1.donor_id = u.user_id JOIN Campaigns c1 ON d1.campaign_id = c1.campaign_id WHERE c1.created_by = [Rahul's user_id] AND c1.title = 'School Renovation Project' AND EXISTS (SELECT 1 FROM Donations d2 WHERE d2.donor_id = d1.donor_id AND d2.campaign_id != c1.campaign_id);"}
{"prompt": "Beneficiaries / Recipients", "response": "nan"}
{"prompt": "Natural Language Question (Fatima's POV)", "response": "MySQL Query"}
{"prompt": "Which campaigns am I the beneficiary of?", "response": "SELECT title, description, start_date, end_date FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "How much money has been raised for my clean water project?", "response": "SELECT c.title, SUM(d.amount) AS total_raised FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id WHERE c.beneficiary_id = [Fatima's beneficiary_id] GROUP BY c.title;"}
{"prompt": "What is the fundraising goal for my community’s project?", "response": "SELECT title, goal_amount FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "What is the status of the campaigns supporting my community?", "response": "SELECT title, status FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "Have I received all the fund transfers from the campaigns?", "response": "SELECT amount, transfer_date, status FROM FundTransfers WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "What is the total amount transferred to me so far?", "response": "SELECT IFNULL(SUM(amount),0) AS total_transferred FROM FundTransfers WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "Which campaign organizers are running projects for my community?", "response": "SELECT DISTINCT u.name FROM Campaigns c JOIN Users u ON c.created_by = u.user_id WHERE c.beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "What updates or compliance actions have been logged for my projects?", "response": "SELECT cl.action, cl.timestamp, c.title FROM ComplianceLogs cl JOIN Campaigns c ON cl.campaign_id = c.campaign_id WHERE c.beneficiary_id = [Fatima's beneficiary_id] ORDER BY cl.timestamp DESC;"}
{"prompt": "Can I see recent donations to my clean water project?", "response": "SELECT u.name AS donor_name, d.amount, d.donation_date FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN Users u ON d.donor_id = u.user_id WHERE c.beneficiary_id = [Fatima's beneficiary_id] ORDER BY d.donation_date DESC LIMIT 10;"}
{"prompt": "What is the timeline for my clean water project campaign?", "response": "SELECT title, start_date, end_date FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "What is the current status of fund transfers for my projects?", "response": "SELECT amount, transfer_date, status FROM FundTransfers WHERE beneficiary_id = [Fatima's beneficiary_id] ORDER BY transfer_date DESC;"}
{"prompt": "How can I contact the organizers of my campaigns?", "response": "SELECT u.name, u.email FROM Campaigns c JOIN Users u ON c.created_by = u.user_id WHERE c.beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "What support tickets have I raised and what are their statuses?", "response": "SELECT subject, status, created_on FROM SupportTickets WHERE user_id = [Fatima's user_id];"}
{"prompt": "What feedback have I shared with campaign organizers?", "response": "SELECT subject, message, created_on FROM SupportTickets WHERE user_id = [Fatima's user_id] AND subject LIKE '%feedback%';"}
{"prompt": "Which community events related to my project have been promoted on the platform?", "response": "SELECT name, channel, start_date, end_date FROM MarketingCampaigns WHERE campaign_id IN (SELECT campaign_id FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id]);"}
{"prompt": "How many families have benefited from the clean water project, according to campaign reports?", "response": "SELECT report_date, total_donations, top_campaign FROM AnalyticsReports WHERE top_campaign IN (SELECT title FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id]);"}
{"prompt": "What are the most recent analytics or impact reports for my project?", "response": "SELECT report_date, total_donations, active_donors FROM AnalyticsReports WHERE top_campaign IN (SELECT title FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id]) ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Are there any ongoing campaigns for my community?", "response": "SELECT title, status FROM Campaigns WHERE beneficiary_id = [Fatima's beneficiary_id] AND status = 'active';"}
{"prompt": "What is the verification status of my beneficiary profile?", "response": "SELECT verified FROM Beneficiaries WHERE beneficiary_id = [Fatima's beneficiary_id];"}
{"prompt": "Which donors have contributed the most to my community’s campaigns?", "response": "SELECT u.name, SUM(d.amount) AS total_donated FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id JOIN Users u ON d.donor_id = u.user_id WHERE c.beneficiary_id = [Fatima's beneficiary_id] GROUP BY u.name ORDER BY total_donated DESC LIMIT 5;"}
{"prompt": "Donation Processing Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Ravi's POV)", "response": "MySQL Query"}
{"prompt": "What are all the donations processed today?", "response": "SELECT * FROM Donations WHERE DATE(donation_date) = CURDATE();"}
{"prompt": "How many donations failed today, and what were the reasons?", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%failed payment%' AND DATE(created_on) = CURDATE();"}
{"prompt": "What is the total amount of donations processed per payment method today?", "response": "SELECT payment_method, SUM(amount) AS total FROM Donations WHERE DATE(donation_date) = CURDATE() GROUP BY payment_method;"}
{"prompt": "Which donations were made using credit cards in the last week?", "response": "SELECT * FROM Donations WHERE payment_method = 'Credit Card' AND donation_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Are there any suspicious or duplicate donations today?", "response": "SELECT donor_id, amount, COUNT(*) AS occurrences FROM Donations WHERE DATE(donation_date) = CURDATE() GROUP BY donor_id, amount HAVING occurrences > 1;"}
{"prompt": "What is the total donation amount for each campaign today?", "response": "SELECT campaign_id, SUM(amount) AS total FROM Donations WHERE DATE(donation_date) = CURDATE() GROUP BY campaign_id;"}
{"prompt": "Which donors have reported issues with their payments today?", "response": "SELECT DISTINCT u.name, st.subject, st.created_on FROM SupportTickets st JOIN Users u ON st.user_id = u.user_id WHERE st.subject LIKE '%payment%' AND DATE(st.created_on) = CURDATE();"}
{"prompt": "What are the most common payment methods used this month?", "response": "SELECT payment_method, COUNT(*) AS count FROM Donations WHERE MONTH(donation_date) = MONTH(CURDATE()) AND YEAR(donation_date) = YEAR(CURDATE()) GROUP BY payment_method ORDER BY count DESC;"}
{"prompt": "Which donations have been refunded in the last month?", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%refund%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many donations were processed by each payment method this week?", "response": "SELECT payment_method, COUNT(*) AS count FROM Donations WHERE donation_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY payment_method;"}
{"prompt": "What is the total amount processed by the platform today?", "response": "SELECT SUM(amount) AS total_processed FROM Donations WHERE DATE(donation_date) = CURDATE();"}
{"prompt": "Which campaigns received the highest donations today?", "response": "SELECT campaign_id, SUM(amount) AS total FROM Donations WHERE DATE(donation_date) = CURDATE() GROUP BY campaign_id ORDER BY total DESC LIMIT 5;"}
{"prompt": "What are the unresolved payment-related support tickets?", "response": "SELECT * FROM SupportTickets WHERE status != 'resolved' AND subject LIKE '%payment%';"}
{"prompt": "What is the status of all fund transfers processed today?", "response": "SELECT * FROM FundTransfers WHERE transfer_date = CURDATE();"}
{"prompt": "Which donations were made using digital wallets this month?", "response": "SELECT * FROM Donations WHERE payment_method = 'Digital Wallet' AND MONTH(donation_date) = MONTH(CURDATE()) AND YEAR(donation_date) = YEAR(CURDATE());"}
{"prompt": "Are there any audit logs related to donation processing today?", "response": "SELECT * FROM AuditLogs WHERE table = 'Donations' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the reconciliation report for today’s donations and fund transfers?", "response": "SELECT (SELECT IFNULL(SUM(amount),0) FROM Donations WHERE DATE(donation_date) = CURDATE()) AS total_donations, (SELECT IFNULL(SUM(amount),0) FROM FundTransfers WHERE transfer_date = CURDATE()) AS total_transfers;"}
{"prompt": "Which donors have made multiple failed payment attempts this week?", "response": "SELECT user_id, COUNT(*) AS failed_attempts FROM SupportTickets WHERE subject LIKE '%failed payment%' AND created_on >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY user_id HAVING failed_attempts > 1;"}
{"prompt": "What are the most recent compliance actions related to donation processing?", "response": "SELECT * FROM ComplianceLogs WHERE campaign_id IN (SELECT DISTINCT campaign_id FROM Donations) ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the total number of donations processed, grouped by status, today?", "response": "SELECT status, COUNT(*) AS count FROM FundTransfers WHERE transfer_date = CURDATE() GROUP BY status;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Natural Language Question (Neha's POV)", "response": "MySQL Query"}
{"prompt": "How can I assist donors in obtaining their donation receipts?", "response": "SELECT u.name, d.donation_id, d.amount, d.donation_date FROM Donations d JOIN Users u ON d.donor_id = u.user_id WHERE u.user_id = [donor_user_id];"}
{"prompt": "What are the common account issues donors face on the platform?", "response": "SELECT subject, message, status, created_on FROM SupportTickets WHERE subject LIKE '%account issue%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "How do I guide new users to create accounts on GiveHope?", "response": "SELECT 'Guide: Users can create accounts by clicking on the Sign Up button and filling the registration form.' AS guidance;"}
{"prompt": "What refund policies are in place for donors requesting refunds?", "response": "SELECT subject, message FROM SupportTickets WHERE subject LIKE '%refund policy%';"}
{"prompt": "Which donors have reported technical difficulties recently?", "response": "SELECT u.name, st.subject, st.created_on FROM SupportTickets st JOIN Users u ON st.user_id = u.user_id WHERE st.subject LIKE '%technical difficulty%' ORDER BY st.created_on DESC LIMIT 10;"}
{"prompt": "How can I help donors make secure donations?", "response": "SELECT 'Guide: Donors should use secure payment methods and ensure their internet connection is safe.' AS guidance;"}
{"prompt": "What are the most frequent support requests from beneficiaries?", "response": "SELECT subject, COUNT(*) AS request_count FROM SupportTickets WHERE user_id IN (SELECT user_id FROM Users WHERE role = 'beneficiary') GROUP BY subject ORDER BY request_count DESC LIMIT 10;"}
{"prompt": "How do I report common issues to the product team?", "response": "SELECT subject, message, created_on FROM SupportTickets WHERE status = 'open' ORDER BY created_on DESC LIMIT 20;"}
{"prompt": "Which users have unresolved support tickets?", "response": "SELECT u.name, st.subject, st.status FROM SupportTickets st JOIN Users u ON st.user_id = u.user_id WHERE st.status != 'resolved';"}
{"prompt": "What feedback have donors provided about the platform?", "response": "SELECT u.name, st.message, st.created_on FROM SupportTickets st JOIN Users u ON st.user_id = u.user_id WHERE st.subject LIKE '%feedback%' ORDER BY st.created_on DESC;"}
{"prompt": "How do I assist users with password reset issues?", "response": "SELECT subject, message FROM SupportTickets WHERE subject LIKE '%password reset%';"}
{"prompt": "What are the common payment method issues reported by donors?", "response": "SELECT subject, COUNT(*) AS issue_count FROM SupportTickets WHERE subject LIKE '%payment method%' GROUP BY subject ORDER BY issue_count DESC;"}
{"prompt": "How can I help new users navigate the donation process?", "response": "SELECT 'Guide: Users can browse campaigns, select a cause, and follow the secure checkout process to donate.' AS guidance;"}
{"prompt": "What are the most common technical difficulties faced by users?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE subject LIKE '%technical difficulty%' GROUP BY subject ORDER BY count DESC;"}
{"prompt": "How do I track the resolution status of support tickets?", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets ORDER BY created_on DESC;"}
{"prompt": "What are the common reasons for refund requests?", "response": "SELECT subject, message FROM SupportTickets WHERE subject LIKE '%refund%';"}
{"prompt": "How can I ensure donor satisfaction through support interactions?", "response": "SELECT 'Guide: Provide timely responses, clear communication, and follow-up on donor concerns.' AS guidance;"}
{"prompt": "Which campaigns have the most support tickets raised?", "response": "SELECT c.title, COUNT(st.ticket_id) AS ticket_count FROM SupportTickets st JOIN Users u ON st.user_id = u.user_id JOIN Campaigns c ON c.created_by = u.user_id GROUP BY c.title ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What training materials are available for new support representatives?", "response": "SELECT 'Training materials include platform user guides, FAQs, and video tutorials.' AS training_info;"}
{"prompt": "How do I handle escalations for unresolved donor issues?", "response": "SELECT subject, message FROM SupportTickets WHERE status = 'escalated';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Riya's POV)", "response": "MySQL Query"}
{"prompt": "Which marketing campaigns are currently active?", "response": "SELECT name, channel, start_date, end_date FROM MarketingCampaigns WHERE start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "What is the total budget allocated to all ongoing marketing campaigns?", "response": "SELECT SUM(budget) AS total_budget FROM MarketingCampaigns WHERE start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "Which marketing channels have generated the highest donor engagement?", "response": "SELECT channel, COUNT(*) AS donor_engagement FROM MarketingCampaigns GROUP BY channel ORDER BY donor_engagement DESC;"}
{"prompt": "What are the top-performing marketing campaigns by budget utilization?", "response": "SELECT name, budget FROM MarketingCampaigns ORDER BY budget DESC LIMIT 5;"}
{"prompt": "Which campaigns have seen the highest increase in donations after a marketing push?", "response": "SELECT c.title, SUM(d.amount) AS total_donations FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id WHERE c.campaign_id IN (SELECT campaign_id FROM MarketingCampaigns) GROUP BY c.title ORDER BY total_donations DESC LIMIT 5;"}
{"prompt": "What is the average donation amount for campaigns promoted via social media?", "response": "SELECT AVG(d.amount) AS avg_donation FROM Donations d WHERE d.campaign_id IN (SELECT campaign_id FROM MarketingCampaigns WHERE channel = 'Social Media');"}
{"prompt": "Which influencer partnership campaigns are currently running?", "response": "SELECT name, start_date, end_date FROM MarketingCampaigns WHERE channel = 'Influencer' AND start_date <= CURDATE() AND end_date >= CURDATE();"}
{"prompt": "What is the total number of donors acquired through email campaigns?", "response": "SELECT COUNT(DISTINCT d.donor_id) AS email_donors FROM Donations d WHERE d.campaign_id IN (SELECT campaign_id FROM MarketingCampaigns WHERE channel = 'Email');"}
{"prompt": "Which marketing campaign has the highest ROI based on donations received?", "response": "SELECT mc.name, SUM(d.amount)/mc.budget AS roi FROM Donations d JOIN MarketingCampaigns mc ON d.campaign_id = mc.campaign_id GROUP BY mc.name, mc.budget ORDER BY roi DESC LIMIT 1;"}
{"prompt": "What is the donation trend for campaigns promoted in the last month?", "response": "SELECT DATE(d.donation_date) AS donation_day, SUM(d.amount) AS daily_total FROM Donations d WHERE d.campaign_id IN (SELECT campaign_id FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY donation_day ORDER BY donation_day;"}
{"prompt": "Which campaigns have been promoted across multiple channels?", "response": "SELECT campaign_id, COUNT(DISTINCT channel) AS channel_count FROM MarketingCampaigns GROUP BY campaign_id HAVING channel_count > 1;"}
{"prompt": "What are the most common donor demographics for campaigns promoted via email?", "response": "SELECT u.role, COUNT(*) AS count FROM Donations d JOIN Users u ON d.donor_id = u.user_id WHERE d.campaign_id IN (SELECT campaign_id FROM MarketingCampaigns WHERE channel = 'Email') GROUP BY u.role;"}
{"prompt": "Which campaigns had the largest increase in active donors after a marketing campaign?", "response": "SELECT ar.top_campaign, MAX(ar.active_donors) AS max_active FROM AnalyticsReports ar WHERE ar.top_campaign IN (SELECT name FROM MarketingCampaigns) GROUP BY ar.top_campaign ORDER BY max_active DESC LIMIT 5;"}
{"prompt": "What is the average budget per marketing campaign this quarter?", "response": "SELECT AVG(budget) AS avg_budget FROM MarketingCampaigns WHERE QUARTER(start_date) = QUARTER(CURDATE()) AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "Which campaigns have received the most support tickets after a marketing push?", "response": "SELECT c.title, COUNT(st.ticket_id) AS ticket_count FROM SupportTickets st JOIN Campaigns c ON st.user_id = c.created_by WHERE c.campaign_id IN (SELECT campaign_id FROM MarketingCampaigns) GROUP BY c.title ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What is the total reach of influencer campaigns this year?", "response": "SELECT COUNT(DISTINCT campaign_id) AS influencer_campaigns FROM MarketingCampaigns WHERE channel = 'Influencer' AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "Which marketing campaigns are set to launch next month?", "response": "SELECT name, start_date, channel FROM MarketingCampaigns WHERE MONTH(start_date) = MONTH(DATE_ADD(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "What are the most effective content types for donor engagement?", "response": "SELECT channel, COUNT(*) AS engagement FROM MarketingCampaigns GROUP BY channel ORDER BY engagement DESC;"}
{"prompt": "Which campaigns have the highest donor retention after marketing efforts?", "response": "SELECT c.title, COUNT(DISTINCT d.donor_id) AS repeat_donors FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.donor_id IN (SELECT donor_id FROM Donations GROUP BY donor_id HAVING COUNT(DISTINCT campaign_id) > 1) GROUP BY c.title ORDER BY repeat_donors DESC LIMIT 5;"}
{"prompt": "What feedback have donors given regarding recent marketing campaigns?", "response": "SELECT st.subject, st.message, st.created_on FROM SupportTickets st WHERE st.subject LIKE '%marketing%' ORDER BY st.created_on DESC LIMIT 10;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "Natural Language Question (Rajesh's POV)", "response": "MySQL Query"}
{"prompt": "What is the total amount and transaction count for each payment method processed today?", "response": "SELECT payment_method, SUM(amount) AS total_amount, COUNT(*) AS transaction_count FROM Donations WHERE DATE(donation_date) = CURDATE() GROUP BY payment_method;"}
{"prompt": "Are there any discrepancies between donations received and funds transferred to campaigns?", "response": "SELECT c.campaign_id, c.title, SUM(d.amount) AS total_donated, IFNULL(SUM(ft.amount), 0) AS total_transferred FROM Campaigns c LEFT JOIN Donations d ON c.campaign_id = d.campaign_id LEFT JOIN FundTransfers ft ON c.campaign_id = ft.campaign_id GROUP BY c.campaign_id, c.title HAVING total_donated != total_transferred;"}
{"prompt": "What is the total marketing budget and sum of campaign goals for all active campaigns?", "response": "SELECT SUM(budget) AS total_marketing_budget, SUM(goal_amount) AS total_campaign_goals FROM MarketingCampaigns mc JOIN Campaigns c ON mc.campaign_id = c.campaign_id;"}
{"prompt": "What financial audit logs have been recorded in the last quarter?", "response": "SELECT al.log_id, al.action, al.action_type, al.timestamp, u.name AS performed_by FROM AuditLogs al JOIN Users u ON al.user_id = u.user_id WHERE al.timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ORDER BY al.timestamp DESC;"}
{"prompt": "What is the total donation amount received today across all campaigns?", "response": "SELECT SUM(amount) AS total_today FROM Donations WHERE DATE(donation_date) = CURDATE();"}
{"prompt": "How much has been transferred to beneficiaries today?", "response": "SELECT SUM(amount) AS total_transferred_today FROM FundTransfers WHERE transfer_date = CURDATE();"}
{"prompt": "Which campaigns have not yet received any fund transfers despite receiving donations?", "response": "SELECT c.campaign_id, c.title FROM Campaigns c LEFT JOIN FundTransfers ft ON c.campaign_id = ft.campaign_id WHERE ft.transfer_id IS NULL AND EXISTS (SELECT 1 FROM Donations d WHERE d.campaign_id = c.campaign_id);"}
{"prompt": "What is the breakdown of donations by payment method for the current month?", "response": "SELECT payment_method, SUM(amount) AS total_amount FROM Donations WHERE MONTH(donation_date) = MONTH(CURDATE()) AND YEAR(donation_date) = YEAR(CURDATE()) GROUP BY payment_method;"}
{"prompt": "Which campaigns have exceeded their fundraising goals?", "response": "SELECT c.title, SUM(d.amount) AS total_raised, c.goal_amount FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id GROUP BY c.campaign_id, c.title, c.goal_amount HAVING total_raised > c.goal_amount;"}
{"prompt": "What are the daily donation totals for the past week?", "response": "SELECT DATE(donation_date) AS donation_day, SUM(amount) AS total FROM Donations WHERE donation_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY donation_day ORDER BY donation_day;"}
{"prompt": "Which fund transfers are pending or failed?", "response": "SELECT transfer_id, campaign_id, beneficiary_id, amount, transfer_date, status FROM FundTransfers WHERE status IN ('pending', 'failed');"}
{"prompt": "What is the total amount of refunds processed this quarter?", "response": "SELECT SUM(amount) AS total_refunded FROM Donations WHERE payment_method = 'Refund' AND donation_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "Which campaigns had the highest donation volume last month?", "response": "SELECT c.title, SUM(d.amount) AS total_donated FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id WHERE MONTH(d.donation_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(d.donation_date) = YEAR(CURDATE()) GROUP BY c.title ORDER BY total_donated DESC LIMIT 5;"}
{"prompt": "How much has been allocated to operational costs this year?", "response": "SELECT SUM(budget) AS operational_costs FROM MarketingCampaigns WHERE YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "Which users performed financial actions according to audit logs this month?", "response": "SELECT DISTINCT u.name FROM AuditLogs al JOIN Users u ON al.user_id = u.user_id WHERE al.timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the total number of donation transactions processed this quarter?", "response": "SELECT COUNT(*) AS transaction_count FROM Donations WHERE donation_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "Which campaigns have the largest discrepancies between donations received and funds transferred?", "response": "SELECT c.campaign_id, c.title, SUM(d.amount) AS total_donated, IFNULL(SUM(ft.amount), 0) AS total_transferred, ABS(SUM(d.amount) - IFNULL(SUM(ft.amount), 0)) AS discrepancy FROM Campaigns c LEFT JOIN Donations d ON c.campaign_id = d.campaign_id LEFT JOIN FundTransfers ft ON c.campaign_id = ft.campaign_id GROUP BY c.campaign_id, c.title ORDER BY discrepancy DESC LIMIT 5;"}
{"prompt": "What is the total value of all donations processed via digital wallets this year?", "response": "SELECT SUM(amount) AS total_digital_wallet FROM Donations WHERE payment_method = 'Digital Wallet' AND YEAR(donation_date) = YEAR(CURDATE());"}
{"prompt": "Which beneficiaries have received the highest fund transfers this quarter?", "response": "SELECT b.name, SUM(ft.amount) AS total_transferred FROM FundTransfers ft JOIN Beneficiaries b ON ft.beneficiary_id = b.beneficiary_id WHERE ft.transfer_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY b.name ORDER BY total_transferred DESC LIMIT 5;"}
{"prompt": "How many campaigns have had at least one audit log entry in the last quarter?", "response": "SELECT COUNT(DISTINCT al.table) AS audited_campaigns FROM AuditLogs al WHERE al.timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND al.table = 'Campaigns';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Anita's POV)", "response": "SQL Query"}
{"prompt": "What is the total donation amount received across all campaigns?", "response": "SELECT SUM(amount) AS total_donations FROM Donations;"}
{"prompt": "Which campaigns have raised the most funds?", "response": "SELECT c.title, SUM(d.amount) AS total_raised FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id GROUP BY c.title ORDER BY total_raised DESC;"}
{"prompt": "How many unique donors have contributed this month?", "response": "SELECT COUNT(DISTINCT donor_id) AS unique_donors FROM Donations WHERE MONTH(donation_date) = MONTH(CURDATE()) AND YEAR(donation_date) = YEAR(CURDATE());"}
{"prompt": "What is the average donation amount per campaign?", "response": "SELECT c.title, AVG(d.amount) AS avg_donation FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id GROUP BY c.title;"}
{"prompt": "Which donors have contributed to more than one campaign?", "response": "SELECT donor_id, COUNT(DISTINCT campaign_id) AS campaigns_supported FROM Donations GROUP BY donor_id HAVING campaigns_supported > 1;"}
{"prompt": "What are the top 5 most active donors by total amount given?", "response": "SELECT u.name, SUM(d.amount) AS total_given FROM Donations d JOIN Users u ON d.donor_id = u.user_id GROUP BY u.name ORDER BY total_given DESC LIMIT 5;"}
{"prompt": "What is the daily donation total for the past week?", "response": "SELECT DATE(donation_date) AS day, SUM(amount) AS total FROM Donations WHERE donation_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day ORDER BY day;"}
{"prompt": "Which campaigns have not yet reached their fundraising goal?", "response": "SELECT c.title, SUM(d.amount) AS raised, c.goal_amount FROM Campaigns c LEFT JOIN Donations d ON c.campaign_id = d.campaign_id GROUP BY c.campaign_id, c.title, c.goal_amount HAVING raised < c.goal_amount;"}
{"prompt": "What is the breakdown of donations by payment method this year?", "response": "SELECT payment_method, SUM(amount) AS total FROM Donations WHERE YEAR(donation_date) = YEAR(CURDATE()) GROUP BY payment_method;"}
{"prompt": "Which regions have the highest number of active donors? (Assuming Users table has a 'region' field)", "response": "SELECT u.region, COUNT(DISTINCT d.donor_id) AS active_donors FROM Donations d JOIN Users u ON d.donor_id = u.user_id GROUP BY u.region ORDER BY active_donors DESC;"}
{"prompt": "What is the trend in donation volume during the last three months?", "response": "SELECT MONTH(donation_date) AS month, SUM(amount) AS total FROM Donations WHERE donation_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "Which campaigns have received the most recurring donations?", "response": "SELECT c.title, COUNT(*) AS recurring_count FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id WHERE d.payment_method = 'Recurring' GROUP BY c.title ORDER BY recurring_count DESC;"}
{"prompt": "How many donors have made only one donation?", "response": "SELECT count(*) AS single_time_donors FROM (SELECT donor_id FROM Donations GROUP BY donor_id HAVING count(*) = 1) t;"}
{"prompt": "What is the average time between a campaign’s start date and its first donation?", "response": "SELECT AVG(DATEDIFF(MIN(d.donation_date), c.start_date)) AS avg_days_to_first_donation FROM Campaigns c JOIN Donations d ON c.campaign_id = d.campaign_id GROUP BY c.campaign_id;"}
{"prompt": "Which campaigns have the highest donor retention rates?", "response": "SELECT c.title, COUNT(DISTINCT d.donor_id) AS donor_count FROM Donations d JOIN Campaigns c ON d.campaign_id = c.campaign_id GROUP BY c.title ORDER BY donor_count DESC LIMIT 5;"}
{"prompt": "What is the total amount transferred to beneficiaries this quarter?", "response": "SELECT SUM(amount) AS total_transferred FROM FundTransfers WHERE QUARTER(transfer_date) = QUARTER(CURDATE()) AND YEAR(transfer_date) = YEAR(CURDATE());"}
{"prompt": "Which beneficiaries have received the most funds?", "response": "SELECT b.name, SUM(ft.amount) AS total_received FROM FundTransfers ft JOIN Beneficiaries b ON ft.beneficiary_id = b.beneficiary_id GROUP BY b.name ORDER BY total_received DESC LIMIT 5;"}
{"prompt": "What are the most common support ticket subjects raised by donors?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which campaigns have the highest number of support tickets?", "response": "SELECT c.title, COUNT(st.ticket_id) AS ticket_count FROM SupportTickets st JOIN Campaigns c ON st.user_id = c.created_by GROUP BY c.title ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What is the average donation amount by donor role?", "response": "SELECT u.role, AVG(d.amount) AS avg_donation FROM Donations d JOIN Users u ON d.donor_id = u.user_id GROUP BY u.role;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Deepak's POV)", "response": "SQL Query"}
{"prompt": "What are the most recent actions recorded in the audit logs?", "response": "SELECT * FROM AuditLogs ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "Which users have performed the most actions on the platform this week?", "response": "SELECT user_id, COUNT(*) AS action_count FROM AuditLogs WHERE timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY user_id ORDER BY action_count DESC;"}
{"prompt": "Which tables have had the most changes in the last 24 hours?", "response": "SELECT table, COUNT(*) AS change_count FROM AuditLogs WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY) GROUP BY table ORDER BY change_count DESC;"}
{"prompt": "Which campaigns have had compliance actions logged this month?", "response": "SELECT campaign_id, COUNT(*) AS compliance_events FROM ComplianceLogs WHERE MONTH(timestamp) = MONTH(CURDATE()) AND YEAR(timestamp) = YEAR(CURDATE()) GROUP BY campaign_id ORDER BY compliance_events DESC;"}
{"prompt": "What are the most common compliance actions performed on campaigns?", "response": "SELECT action, COUNT(*) AS action_count FROM ComplianceLogs GROUP BY action ORDER BY action_count DESC;"}
{"prompt": "Who performed the latest compliance action on campaign_id = 7? (campaign_id = 7)", "response": "SELECT cl.campaign_id, cl.action, cl.performed_by, cl.timestamp FROM ComplianceLogs cl WHERE cl.campaign_id = 7 ORDER BY cl.timestamp DESC LIMIT 1;"}
{"prompt": "How many audit logs were recorded today? (today is 2025-06-13)", "response": "SELECT COUNT(*) FROM AuditLogs WHERE DATE(timestamp) = '2025-06-13';"}
{"prompt": "How many users registered in the last week? (from 2025-06-06 to 2025-06-13)", "response": "SELECT COUNT(*) AS new_users FROM Users WHERE registered_on >= '2025-06-06' AND registered_on <= '2025-06-13';"}
{"prompt": "What is the distribution of user roles on the platform?", "response": "SELECT role, COUNT(*) AS user_count FROM Users GROUP BY role;"}
{"prompt": "How many updates were made to the Campaigns table in the audit logs? (action_type = 'update')", "response": "SELECT COUNT(*) AS update_count FROM AuditLogs WHERE table = 'Campaigns' AND action_type = 'update';"}
{"prompt": "What support tickets have been raised about technical issues in the last month? (from 2025-05-13 to 2025-06-13)", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%technical%' AND created_on >= '2025-05-13' AND created_on <= '2025-06-13';"}
{"prompt": "Which users have raised the most support tickets?", "response": "SELECT user_id, COUNT(*) AS ticket_count FROM SupportTickets GROUP BY user_id ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What are the most recent compliance log entries?", "response": "SELECT * FROM ComplianceLogs ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which campaigns had compliance actions performed by user_id = 3? (performed_by = 3)", "response": "SELECT campaign_id, action, performed_by, timestamp FROM ComplianceLogs WHERE performed_by = 3;"}
{"prompt": "How many audit log entries were generated during a specific date range? (2025-05-15 to 2025-05-22)", "response": "SELECT COUNT(*) FROM AuditLogs WHERE timestamp BETWEEN '2025-05-15' AND '2025-05-22';"}
{"prompt": "What is the trend of audit log entries per day for the past week? (from 2025-06-06 to 2025-06-13)", "response": "SELECT DATE(timestamp) AS day, COUNT(*) AS log_count FROM AuditLogs WHERE timestamp >= '2025-06-06' AND timestamp <= '2025-06-13' GROUP BY day ORDER BY day;"}
{"prompt": "Which users have not raised any support tickets?", "response": "SELECT user_id FROM Users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM SupportTickets);"}
{"prompt": "What are the most recent actions taken on the database tables?", "response": "SELECT * FROM AuditLogs ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "Which campaigns have the most compliance log entries?", "response": "SELECT campaign_id, COUNT(*) AS compliance_count FROM ComplianceLogs GROUP BY campaign_id ORDER BY compliance_count DESC LIMIT 5;"}
{"prompt": "What are the statuses of all support tickets raised this month? (month = 6, year = 2025)", "response": "SELECT ticket_id, subject, status, created_on FROM SupportTickets WHERE MONTH(created_on) = 6 AND YEAR(created_on) = 2025;"}
{"prompt": "Compliance / Legal Team", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV, with explicit values)", "response": "SQL Query"}
{"prompt": "What compliance actions have been logged for campaign_id = 12? (campaign_id = 12)", "response": "SELECT action, performed_by, timestamp FROM ComplianceLogs WHERE campaign_id = 12 ORDER BY timestamp DESC;"}
{"prompt": "Who performed the latest compliance action for campaign_id = 12? (campaign_id = 12)", "response": "SELECT action, performed_by, timestamp FROM ComplianceLogs WHERE campaign_id = 12 ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which campaigns created by user_id = 5 are currently pending review? (created_by = 5, status = 'pending_review')", "response": "SELECT campaign_id, title FROM Campaigns WHERE created_by = 5 AND status = 'pending_review';"}
{"prompt": "What is the status of all campaigns created by user_id = 5? (created_by = 5)", "response": "SELECT campaign_id, title, status FROM Campaigns WHERE created_by = 5;"}
{"prompt": "Which beneficiaries have not yet been verified? (verified = false)", "response": "SELECT beneficiary_id, name FROM Beneficiaries WHERE verified = false;"}
{"prompt": "What compliance actions were performed by user_id = 3 in the last month? (performed_by = 3, 2025-05-13 to 2025-06-13)", "response": "SELECT action, campaign_id, timestamp FROM ComplianceLogs WHERE performed_by = 3 AND timestamp >= '2025-05-13' AND timestamp <= '2025-06-13';"}
{"prompt": "How many campaigns started in the last 30 days? (from 2025-05-14 to 2025-06-13)", "response": "SELECT COUNT(*) FROM Campaigns WHERE start_date >= '2025-05-14' AND start_date <= '2025-06-13';"}
{"prompt": "Which campaigns have a goal amount greater than 50000? (goal_amount > 50000)", "response": "SELECT campaign_id, title, goal_amount FROM Campaigns WHERE goal_amount > 50000;"}
{"prompt": "What are the audit logs for user_id = 7 in the last week? (user_id = 7, 2025-06-06 to 2025-06-13)", "response": "SELECT action, table, action_type, timestamp FROM AuditLogs WHERE user_id = 7 AND timestamp >= '2025-06-06' AND timestamp <= '2025-06-13';"}
{"prompt": "Which campaigns have received donations via 'Bank Transfer'? (payment_method = 'Bank Transfer')", "response": "SELECT DISTINCT campaign_id FROM Donations WHERE payment_method = 'Bank Transfer';"}
{"prompt": "What is the total donation amount for campaign_id = 8? (campaign_id = 8)", "response": "SELECT SUM(amount) AS total_donated FROM Donations WHERE campaign_id = 8;"}
{"prompt": "Which support tickets about 'refund' have been created in June 2025? (subject LIKE '%refund%', June 2025)", "response": "SELECT ticket_id, user_id, subject, status, created_on FROM SupportTickets WHERE subject LIKE '%refund%' AND MONTH(created_on) = 6 AND YEAR(created_on) = 2025;"}
{"prompt": "What is the status of fund transfers for beneficiary_id = 4? (beneficiary_id = 4)", "response": "SELECT transfer_id, campaign_id, amount, transfer_date, status FROM FundTransfers WHERE beneficiary_id = 4;"}
{"prompt": "Which users registered after June 1, 2025? (registered_on > '2025-06-01')", "response": "SELECT user_id, name, email, role, registered_on FROM Users WHERE registered_on > '2025-06-01';"}
{"prompt": "What are the compliance actions for campaigns that ended before June 1, 2025? (end_date < '2025-06-01')", "response": "SELECT cl.campaign_id, cl.action, cl.timestamp FROM ComplianceLogs cl JOIN Campaigns c ON cl.campaign_id = c.campaign_id WHERE c.end_date < '2025-06-01';"}
{"prompt": "What audit logs were performed on the 'Donations' table in the last 7 days? ('Donations', 2025-06-06 to 2025-06-13)", "response": "SELECT log_id, user_id, action, action_type, timestamp FROM AuditLogs WHERE table = 'Donations' AND timestamp >= '2025-06-06' AND timestamp <= '2025-06-13';"}
{"prompt": "Which campaigns have status 'closed' and were created by user_id = 5? (status = 'closed', created_by = 5)", "response": "SELECT campaign_id, title FROM Campaigns WHERE status = 'closed' AND created_by = 5;"}
{"prompt": "Which beneficiaries have received fund transfers greater than 10000? (amount > 10000)", "response": "SELECT DISTINCT beneficiary_id FROM FundTransfers WHERE amount > 10000;"}
{"prompt": "What are the audit logs for actions of type 'delete' in May 2025? (action_type = 'delete', May 2025)", "response": "SELECT log_id, user_id, action, table, timestamp FROM AuditLogs WHERE action_type = 'delete' AND MONTH(timestamp) = 5 AND YEAR(timestamp) = 2025;"}
{"prompt": "Which campaigns have compliance actions containing 'AML'? (action LIKE '%AML%')", "response": "SELECT DISTINCT campaign_id FROM ComplianceLogs WHERE action LIKE '%AML%';"}
{"prompt": "nan", "response": "nan"}
{"prompt": "SurveySystem", "response": "nan"}
{"prompt": "Respondents", "response": "nan"}
{"prompt": "NL Question (Aarav’s POV, with explicit values)", "response": "SQL Query"}
{"prompt": "Which surveys about student mental health services have I participated in? (respondent_id = 12, category = 'Mental Health')", "response": "SELECT s.survey_id, s.title FROM Surveys s JOIN Responses r ON s.survey_id = r.survey_id WHERE r.respondent_id = 12 AND s.category = 'Mental Health';"}
{"prompt": "What is the title and description of the student mental health survey I took? (survey_id = 7)", "response": "SELECT title, description FROM Surveys WHERE survey_id = 7;"}
{"prompt": "How many questions are in the student mental health survey? (survey_id = 7)", "response": "SELECT COUNT(*) AS question_count FROM Questions WHERE survey_id = 7;"}
{"prompt": "How many questions did I answer in the student mental health survey? (response_id = 25)", "response": "SELECT COUNT(*) AS answered FROM Answers WHERE response_id = 25;"}
{"prompt": "What is the text of all required questions in the student mental health survey? (survey_id = 7, is_required = true)", "response": "SELECT question_text FROM Questions WHERE survey_id = 7 AND is_required = true;"}
{"prompt": "What were my answers for the student mental health survey? (response_id = 25)", "response": "SELECT q.question_text, a.answer_text FROM Answers a JOIN Questions q ON a.question_id = q.question_id WHERE a.response_id = 25;"}
{"prompt": "What is the completion rate for the student mental health survey? (survey_id = 7)", "response": "SELECT completion_rate FROM SurveyMetrics WHERE survey_id = 7 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How long did I spend on the student mental health survey? (response_id = 25)", "response": "SELECT TIMESTAMPDIFF(MINUTE, (SELECT MIN(submitted_at) FROM Responses WHERE response_id = 25), (SELECT submitted_at FROM Responses WHERE response_id = 25)) AS minutes_spent;"}
{"prompt": "How many surveys have I completed in June 2025? (respondent_id = 12, June 2025)", "response": "SELECT COUNT(*) FROM Responses WHERE respondent_id = 12 AND MONTH(submitted_at) = 6 AND YEAR(submitted_at) = 2025;"}
{"prompt": "What is my most recent survey participation? (respondent_id = 12)", "response": "SELECT survey_id, submitted_at FROM Responses WHERE respondent_id = 12 ORDER BY submitted_at DESC LIMIT 1;"}
{"prompt": "What reward did I receive for completing the student mental health survey? (user_id = 12, subject LIKE '%reward%')", "response": "SELECT subject, description FROM SupportTickets WHERE user_id = 12 AND subject LIKE '%reward%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What was the thank-you message I received after submitting my survey response? (user_id = 12, subject LIKE '%thank you%')", "response": "SELECT description FROM SupportTickets WHERE user_id = 12 AND subject LIKE '%thank you%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What is the average time spent on the student mental health survey? (survey_id = 7)", "response": "SELECT avg_time_spent FROM SurveyMetrics WHERE survey_id = 7 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many responses were submitted for the student mental health survey in June 2025? (survey_id = 7, June 2025)", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 7 AND MONTH(submitted_at) = 6 AND YEAR(submitted_at) = 2025;"}
{"prompt": "What is the status of my most recent support ticket? (user_id = 12)", "response": "SELECT status FROM SupportTickets WHERE user_id = 12 ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What are the categories of surveys I have participated in? (respondent_id = 12)", "response": "SELECT DISTINCT s.category FROM Surveys s JOIN Responses r ON s.survey_id = r.survey_id WHERE r.respondent_id = 12;"}
{"prompt": "What are the open surveys available for me to participate in? (status = 'open')", "response": "SELECT survey_id, title FROM Surveys WHERE status = 'open';"}
{"prompt": "What is the description and status of the student mental health survey? (survey_id = 7)", "response": "SELECT description, status FROM Surveys WHERE survey_id = 7;"}
{"prompt": "Which of my responses were submitted in the last 7 days? (respondent_id = 12, last 7 days)", "response": "SELECT response_id, survey_id, submitted_at FROM Responses WHERE respondent_id = 12 AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the answer texts for my response to question_id = 15? (response_id = 25, question_id = 15)", "response": "SELECT answer_text FROM Answers WHERE response_id = 25 AND question_id = 15;"}
{"prompt": "Survey Creators", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "Which surveys about urban nutrition have I created?", "response": "SELECT survey_id, title FROM Surveys WHERE created_by = 8 AND category = 'Urban Nutrition';"}
{"prompt": "How many questions are included in my urban nutrition survey (survey_id = 15)?", "response": "SELECT COUNT(*) AS question_count FROM Questions WHERE survey_id = 15;"}
{"prompt": "What is the average time spent by respondents on my urban nutrition survey (survey_id = 15)?", "response": "SELECT avg_time_spent FROM SurveyMetrics WHERE survey_id = 15 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many surveys have I created this month?", "response": "SELECT COUNT(*) FROM Surveys WHERE created_by = 8 AND MONTH(start_date) = MONTH(CURDATE()) AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "What are the required questions in my urban nutrition survey (survey_id = 15)?", "response": "SELECT question_id, question_text FROM Questions WHERE survey_id = 15 AND is_required = true;"}
{"prompt": "Which of my surveys are currently open for responses?", "response": "SELECT survey_id, title FROM Surveys WHERE created_by = 8 AND status = 'open';"}
{"prompt": "How many responses have I received for my urban nutrition survey (survey_id = 15) this month?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 15 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "What is the completion rate for my urban nutrition survey (survey_id = 15)?", "response": "SELECT completion_rate FROM SurveyMetrics WHERE survey_id = 15 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Who are the participants who submitted responses to my survey (survey_id = 15)?", "response": "SELECT DISTINCT respondent_id FROM Responses WHERE survey_id = 15;"}
{"prompt": "What types of questions are included in my urban nutrition survey (survey_id = 15)?", "response": "SELECT question_id, question_type FROM Questions WHERE survey_id = 15;"}
{"prompt": "How many multiple-choice questions are in my urban nutrition survey (survey_id = 15)?", "response": "SELECT COUNT(*) FROM Questions WHERE survey_id = 15 AND question_type = 'multiple_choice';"}
{"prompt": "What is the distribution of question types in my urban nutrition survey (survey_id = 15)?", "response": "SELECT question_type, COUNT(*) AS count FROM Questions WHERE survey_id = 15 GROUP BY question_type;"}
{"prompt": "What are the most recent answers submitted for my urban nutrition survey (survey_id = 15)?", "response": "SELECT a.answer_id, a.answer_text FROM Answers a JOIN Responses r ON a.response_id = r.response_id WHERE r.survey_id = 15 ORDER BY r.submitted_at DESC LIMIT 10;"}
{"prompt": "How many Likert scale questions are in my urban nutrition survey (survey_id = 15)?", "response": "SELECT COUNT(*) FROM Questions WHERE survey_id = 15 AND question_type = 'likert_scale';"}
{"prompt": "What are the open support tickets I have raised this month?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE user_id = 8 AND status = 'open' AND MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE());"}
{"prompt": "Which of my surveys have the highest response count?", "response": "SELECT survey_id, response_count FROM SurveyMetrics WHERE survey_id IN (SELECT survey_id FROM Surveys WHERE created_by = 8) ORDER BY response_count DESC;"}
{"prompt": "On which days this month did I receive the most responses for my urban nutrition survey (survey_id = 15)?", "response": "SELECT DATE(submitted_at) AS response_date, COUNT(*) AS total FROM Responses WHERE survey_id = 15 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE()) GROUP BY response_date ORDER BY total DESC;"}
{"prompt": "What are the most recent audit log entries for actions I performed on surveys?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = 8 AND table_name = 'Surveys' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the latest completion rate and average time spent for my urban nutrition survey (survey_id = 15)?", "response": "SELECT completion_rate, avg_time_spent FROM SurveyMetrics WHERE survey_id = 15 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which of my surveys are scheduled to end today?", "response": "SELECT survey_id, title FROM Surveys WHERE created_by = 8 AND end_date = CURDATE();"}
{"prompt": "Data Collectors", "response": "nan"}
{"prompt": "Natural Language Question (Rohit’s POV)", "response": "SQL Query"}
{"prompt": "Which surveys have I been assigned to collect data for recently?", "response": "SELECT survey_id, assigned_on, status FROM Assignments WHERE collector_id = 9 ORDER BY assigned_on DESC LIMIT 10;"}
{"prompt": "How many responses have I submitted for the rural education survey (survey_id = 20)?", "response": "SELECT COUNT(*) FROM Responses WHERE respondent_id = 9 AND survey_id = 20;"}
{"prompt": "What are the titles and categories of surveys I am currently collecting data for?", "response": "SELECT s.title, s.category FROM Surveys s JOIN Assignments a ON s.survey_id = a.survey_id WHERE a.collector_id = 9 AND a.status = 'active';"}
{"prompt": "What is the status of my assigned surveys?", "response": "SELECT survey_id, status FROM Assignments WHERE collector_id = 9;"}
{"prompt": "How many responses have I synced to the central database today?", "response": "SELECT COUNT(*) FROM Responses WHERE respondent_id = 9 AND DATE(submitted_at) = CURDATE();"}
{"prompt": "What are the timestamps of my recent survey submissions?", "response": "SELECT response_id, submitted_at FROM Responses WHERE respondent_id = 9 ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Which questions are included in the rural education survey (survey_id = 20)?", "response": "SELECT question_id, question_text, question_type FROM Questions WHERE survey_id = 20;"}
{"prompt": "What is the completion rate and average time spent on the rural education survey (survey_id = 20)?", "response": "SELECT completion_rate, avg_time_spent FROM SurveyMetrics WHERE survey_id = 20 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many support tickets have I raised regarding data collection issues?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE user_id = 9 ORDER BY created_at DESC;"}
{"prompt": "What are the statuses of my support tickets?", "response": "SELECT ticket_id, status FROM SupportTickets WHERE user_id = 9;"}
{"prompt": "What surveys have I completed in the last month?", "response": "SELECT DISTINCT survey_id FROM Responses WHERE respondent_id = 9 AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the total number of responses I have submitted for all surveys?", "response": "SELECT COUNT(*) FROM Responses WHERE respondent_id = 9;"}
{"prompt": "Which surveys have the highest response counts among those I have collected data for?", "response": "SELECT s.title, COUNT(r.response_id) AS response_count FROM Surveys s JOIN Responses r ON s.survey_id = r.survey_id WHERE r.respondent_id = 9 GROUP BY s.title ORDER BY response_count DESC;"}
{"prompt": "What are the answer texts I have submitted for the rural education survey (survey_id = 20)?", "response": "SELECT q.question_text, a.answer_text FROM Answers a JOIN Questions q ON a.question_id = q.question_id JOIN Responses r ON a.response_id = r.response_id WHERE r.respondent_id = 9 AND r.survey_id = 20;"}
{"prompt": "What is the average time between my assigned date and the submission date for surveys?", "response": "SELECT AVG(DATEDIFF(r.submitted_at, a.assigned_on)) AS avg_days FROM Responses r JOIN Assignments a ON r.survey_id = a.survey_id WHERE r.respondent_id = 9 AND a.collector_id = 9;"}
{"prompt": "Which surveys assigned to me are still open for responses?", "response": "SELECT s.survey_id, s.title FROM Surveys s JOIN Assignments a ON s.survey_id = a.survey_id WHERE a.collector_id = 9 AND a.status = 'active' AND s.status = 'open';"}
{"prompt": "How many responses have I submitted for each survey in the last week?", "response": "SELECT survey_id, COUNT(*) AS response_count FROM Responses WHERE respondent_id = 9 AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY survey_id;"}
{"prompt": "What are the most recent audit log entries related to my user actions?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = 9 ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the status of surveys I have collected data for that have ended?", "response": "SELECT survey_id, title, status FROM Surveys WHERE survey_id IN (SELECT survey_id FROM Responses WHERE respondent_id = 9) AND end_date < CURDATE();"}
{"prompt": "How many support tickets have I resolved this month?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE user_id = 9 AND status = 'resolved' AND MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE());"}
{"prompt": "Survey Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Anjali’s POV)", "response": "SQL Query"}
{"prompt": "Which surveys are currently open and accepting responses?", "response": "SELECT survey_id, title FROM Surveys WHERE status = 'open';"}
{"prompt": "How many questions are in the survey on employee engagement (survey_id = 22)?", "response": "SELECT COUNT(*) FROM Questions WHERE survey_id = 22;"}
{"prompt": "What are the types of questions configured in the employee engagement survey (survey_id = 22)?", "response": "SELECT question_id, question_type FROM Questions WHERE survey_id = 22;"}
{"prompt": "Which questions in the employee engagement survey are required for respondents to answer (survey_id = 22)?", "response": "SELECT question_id, question_text FROM Questions WHERE survey_id = 22 AND is_required = true;"}
{"prompt": "Who are the users with the role 'admin' on the platform?", "response": "SELECT user_id, name FROM Users WHERE role = 'admin';"}
{"prompt": "What is the status of all support tickets I have raised this month (user_id = 5)?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE user_id = 5 AND MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE());"}
{"prompt": "How many responses have been submitted for the employee engagement survey (survey_id = 22) this month?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 22 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "What is the completion rate for the employee engagement survey (survey_id = 22)?", "response": "SELECT completion_rate FROM SurveyMetrics WHERE survey_id = 22 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which users have the role 'collector' for surveys this quarter?", "response": "SELECT user_id, name FROM Users WHERE role = 'collector' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What are the current statuses of all ongoing surveys?", "response": "SELECT survey_id, title, status FROM Surveys WHERE end_date >= CURDATE();"}
{"prompt": "How many incomplete responses are there for the employee engagement survey (survey_id = 22)?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 22 AND response_id NOT IN (SELECT response_id FROM Answers);"}
{"prompt": "Which users have permissions to edit survey data for the employee engagement survey (survey_id = 22)?", "response": "SELECT u.user_id, u.name FROM Users u JOIN Assignments a ON u.user_id = a.collector_id WHERE a.survey_id = 22 AND a.status = 'active';"}
{"prompt": "What are the most recent audit log entries related to survey configuration changes?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Surveys' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many surveys have closed in the last week?", "response": "SELECT COUNT(*) FROM Surveys WHERE status = 'closed' AND end_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which surveys have response rates below 50% this month?", "response": "SELECT survey_id FROM SurveyMetrics WHERE completion_rate < 0.5 AND generated_on >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"}
{"prompt": "What is the average time spent by respondents on the employee engagement survey (survey_id = 22)?", "response": "SELECT avg_time_spent FROM SurveyMetrics WHERE survey_id = 22 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which users registered on the platform this month?", "response": "SELECT user_id, name FROM Users WHERE MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE());"}
{"prompt": "What is the status of assignments for the employee engagement survey (survey_id = 22)?", "response": "SELECT assignment_id, status FROM Assignments WHERE survey_id = 22;"}
{"prompt": "Which surveys have the highest number of responses this month?", "response": "SELECT survey_id, response_count FROM SurveyMetrics WHERE generated_on >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) ORDER BY response_count DESC LIMIT 5;"}
{"prompt": "What are the most recent support tickets about data privacy or GDPR?", "response": "SELECT ticket_id, subject, status FROM SupportTickets WHERE subject LIKE '%privacy%' OR subject LIKE '%GDPR%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Natural Language Question (Karan’s POV)", "response": "SQL Query"}
{"prompt": "Which users have open support tickets about login issues?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE subject LIKE '%login%' AND status = 'open';"}
{"prompt": "What are the most recent support tickets about survey submission errors?", "response": "SELECT ticket_id, user_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%submission error%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "How many support tickets have I resolved this month? (user_id = 14)", "response": "SELECT COUNT(*) FROM SupportTickets WHERE user_id = 14 AND status = 'resolved' AND MONTH(resolved_at) = MONTH(CURDATE()) AND YEAR(resolved_at) = YEAR(CURDATE());"}
{"prompt": "What are the open support tickets about data privacy settings?", "response": "SELECT ticket_id, user_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%privacy%' AND status = 'open';"}
{"prompt": "Which users have raised the most support tickets this year?", "response": "SELECT user_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE YEAR(created_at) = YEAR(CURDATE()) GROUP BY user_id ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What is the status of my most recent support ticket? (user_id = 14)", "response": "SELECT status FROM SupportTickets WHERE user_id = 14 ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What guidance have I provided to users about creating surveys?", "response": "SELECT subject, description FROM SupportTickets WHERE subject LIKE '%create survey%' ORDER BY created_at DESC LIMIT 5;"}
{"prompt": "How many support tickets are currently open?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'open';"}
{"prompt": "Which tickets have been escalated to the IT team this week?", "response": "SELECT ticket_id, subject, created_at FROM SupportTickets WHERE status = 'escalated' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most common issues reported by respondents?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE user_id IN (SELECT user_id FROM Users WHERE role = 'respondent') GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which support tickets are still unresolved after more than 3 days?", "response": "SELECT ticket_id, user_id, subject, created_at FROM SupportTickets WHERE status != 'resolved' AND created_at <= DATE_SUB(CURDATE(), INTERVAL 3 DAY);"}
{"prompt": "What are the latest support tickets about bugs in survey answering?", "response": "SELECT ticket_id, user_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%bug%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "How many support tickets have been created today?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_at) = CURDATE();"}
{"prompt": "What are the most recent support tickets I have handled? (user_id = 14)", "response": "SELECT ticket_id, subject, status, created_at FROM SupportTickets WHERE user_id = 14 ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which users have asked for help interpreting response rates?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE subject LIKE '%response rate%';"}
{"prompt": "How many open support tickets are there for survey administrators?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE user_id IN (SELECT user_id FROM Users WHERE role = 'admin') AND status = 'open';"}
{"prompt": "What are the most frequent subjects in support tickets this month?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE()) GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which support tickets about managing respondents are unresolved?", "response": "SELECT ticket_id, user_id, subject FROM SupportTickets WHERE subject LIKE '%manage respondent%' AND status != 'resolved';"}
{"prompt": "What is the resolution time for my last 5 resolved support tickets? (user_id = 14)", "response": "SELECT ticket_id, TIMESTAMPDIFF(HOUR, created_at, resolved_at) AS resolution_hours FROM SupportTickets WHERE user_id = 14 AND status = 'resolved' ORDER BY resolved_at DESC LIMIT 5;"}
{"prompt": "Which users have asked about the knowledge base or FAQs?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE subject LIKE '%FAQ%' OR subject LIKE '%knowledge base%';"}
{"prompt": "Analysts / Data Scientists", "response": "nan"}
{"prompt": "Natural Language Question (Neha’s POV)", "response": "SQL Query"}
{"prompt": "How many responses were collected for the digital literacy survey (survey_id = 101)?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 101;"}
{"prompt": "What is the average time spent on the digital literacy survey (survey_id = 101)?", "response": "SELECT avg_time_spent FROM SurveyMetrics WHERE survey_id = 101 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "How many responses were submitted this month for the digital literacy survey (survey_id = 101)?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 101 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "What are the most common education levels among survey respondents?", "response": "SELECT education_level, COUNT(*) AS count FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id GROUP BY u.education_level ORDER BY count DESC;"}
{"prompt": "How are responses distributed by region for the digital literacy survey (survey_id = 101)?", "response": "SELECT u.region, COUNT(*) AS count FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id GROUP BY u.region;"}
{"prompt": "What is the count of responses by urban and rural zones for the digital literacy survey (survey_id = 101)?", "response": "SELECT u.status AS urban_rural, COUNT(*) AS count FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id GROUP BY u.status;"}
{"prompt": "What is the average age of respondents by urban and rural zones for the digital literacy survey (survey_id = 101)?", "response": "SELECT u.status AS urban_rural, AVG(u.age) AS avg_age FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id GROUP BY u.status;"}
{"prompt": "How many responses were submitted by each education level in urban areas?", "response": "SELECT u.education_level, COUNT(*) AS count FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id WHERE u.status = 'Urban' GROUP BY u.education_level;"}
{"prompt": "How many responses were submitted by each education level in rural areas?", "response": "SELECT u.education_level, COUNT(*) AS count FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id WHERE u.status = 'Rural' GROUP BY u.education_level;"}
{"prompt": "What are the most recent open-ended answers for the digital literacy survey (survey_id = 101)?", "response": "SELECT a.answer_text FROM Answers a JOIN Questions q ON a.question_id = q.question_id WHERE q.survey_id = 101 AND q.question_type = 'open_ended' ORDER BY a.answer_id DESC LIMIT 10;"}
{"prompt": "What are the most common words in open-ended feedback for the digital literacy survey (survey_id = 101)?", "response": "SELECT answer_text FROM Answers a JOIN Questions q ON a.question_id = q.question_id WHERE q.survey_id = 101 AND q.question_type = 'open_ended';"}
{"prompt": "How many responses were submitted for the digital literacy survey each day this week?", "response": "SELECT DATE(submitted_at) AS day, COUNT(*) AS count FROM Responses WHERE survey_id = 101 AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY day;"}
{"prompt": "What is the completion rate for the digital literacy survey (survey_id = 101)?", "response": "SELECT completion_rate FROM SurveyMetrics WHERE survey_id = 101 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which regions have the highest response rates for the digital literacy survey (survey_id = 101)?", "response": "SELECT u.region, COUNT(*) AS count FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id GROUP BY u.region ORDER BY count DESC LIMIT 5;"}
{"prompt": "What is the average age of all respondents for the digital literacy survey (survey_id = 101)?", "response": "SELECT AVG(u.age) AS avg_age FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id;"}
{"prompt": "How many responses were submitted by college-educated respondents for the digital literacy survey (survey_id = 101)?", "response": "SELECT COUNT(*) FROM (SELECT respondent_id FROM Responses WHERE survey_id = 101) r JOIN Users u ON r.respondent_id = u.user_id WHERE u.education_level = 'College';"}
{"prompt": "What are the most common issues mentioned in open-ended feedback for the digital literacy survey (survey_id = 101)?", "response": "SELECT answer_text FROM Answers a JOIN Questions q ON a.question_id = q.question_id WHERE q.survey_id = 101 AND q.question_type = 'open_ended';"}
{"prompt": "How many responses were submitted for the digital literacy survey in each region this month?", "response": "SELECT u.region, COUNT(*) AS count FROM (SELECT respondent_id, submitted_at FROM Responses WHERE survey_id = 101 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE())) r JOIN Users u ON r.respondent_id = u.user_id GROUP BY u.region;"}
{"prompt": "What is the total number of responses for all surveys I am analyzing?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id IN (101);"}
{"prompt": "What is the distribution of question types in the digital literacy survey (survey_id = 101)?", "response": "SELECT question_type, COUNT(*) AS count FROM Questions WHERE survey_id = 101 GROUP BY question_type;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query"}
{"prompt": "Which surveys have been created by educational institutions?", "response": "SELECT survey_id, title FROM Surveys WHERE category = 'Education';"}
{"prompt": "How many responses have been collected for the latest government-backed survey (survey_id = 33)?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 33;"}
{"prompt": "What is the completion rate for the government-backed survey (survey_id = 33)?", "response": "SELECT completion_rate FROM SurveyMetrics WHERE survey_id = 33 ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Which surveys have the highest response counts this year?", "response": "SELECT survey_id, response_count FROM SurveyMetrics WHERE YEAR(generated_on) = YEAR(CURDATE()) ORDER BY response_count DESC LIMIT 5;"}
{"prompt": "What are the most common categories of surveys run on the platform?", "response": "SELECT category, COUNT(*) AS count FROM Surveys GROUP BY category ORDER BY count DESC;"}
{"prompt": "Which users from NGOs have created surveys in the last 3 months?", "response": "SELECT user_id, name FROM Users WHERE organization LIKE '%NGO%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "Which surveys are currently open and accepting responses?", "response": "SELECT survey_id, title FROM Surveys WHERE status = 'open';"}
{"prompt": "How many new users registered this month?", "response": "SELECT COUNT(*) FROM Users WHERE MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE());"}
{"prompt": "What are the most recent support tickets about feature requests for marketing materials?", "response": "SELECT ticket_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%feature%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which surveys have been promoted via webinars? (Assuming 'webinar' in description)", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%webinar%';"}
{"prompt": "What is the average completion rate for surveys in the 'Research' category?", "response": "SELECT AVG(completion_rate) FROM SurveyMetrics WHERE survey_id IN (SELECT survey_id FROM Surveys WHERE category = 'Research');"}
{"prompt": "Which users have the role 'creator' and are active on the platform?", "response": "SELECT user_id, name FROM Users WHERE role = 'creator' AND status = 'active';"}
{"prompt": "How many responses have been submitted this week for the government-backed survey (survey_id = 33)?", "response": "SELECT COUNT(*) FROM Responses WHERE survey_id = 33 AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most common issues reported by organizations in support tickets?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE user_id IN (SELECT user_id FROM Users WHERE organization IS NOT NULL) GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which surveys have multilingual promotional material? (Assuming 'multilingual' in description)", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%multilingual%';"}
{"prompt": "What is the trend in new user registrations over the past month?", "response": "SELECT DATE(created_at) AS day, COUNT(*) AS registrations FROM Users WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "Which surveys highlight GDPR compliance in their descriptions?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%GDPR%';"}
{"prompt": "How many responses have been submitted by users from research firms?", "response": "SELECT COUNT(*) FROM Responses WHERE respondent_id IN (SELECT user_id FROM Users WHERE organization LIKE '%Research Firm%');"}
{"prompt": "Which surveys have the highest average time spent by respondents?", "response": "SELECT survey_id, avg_time_spent FROM SurveyMetrics ORDER BY avg_time_spent DESC LIMIT 5;"}
{"prompt": "What are the most recent audit log entries related to marketing campaigns? (Assuming 'marketing' in action)", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE action LIKE '%marketing%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Sahil’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent system-related actions recorded in the audit logs?", "response": "SELECT * FROM AuditLogs WHERE table_name = 'System' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users have performed the most critical or security-related actions in the past 7 days?", "response": "SELECT user_id, COUNT(*) AS action_count FROM AuditLogs WHERE (action LIKE '%security%' OR action LIKE '%firewall%' OR action LIKE '%patch%') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY user_id ORDER BY action_count DESC;"}
{"prompt": "What actions related to load balancing and infrastructure configuration have been logged this month?", "response": "SELECT * FROM AuditLogs WHERE (action LIKE '%load balancer%' OR table_name = 'Infrastructure') AND MONTH(timestamp) = MONTH(CURDATE()) AND YEAR(timestamp) = YEAR(CURDATE());"}
{"prompt": "What compliance actions have been logged for GDPR or HIPAA in the last 30 days?", "response": "SELECT * FROM ComplianceLogs WHERE (action LIKE '%GDPR%' OR action LIKE '%HIPAA%') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"}
{"prompt": "Which users have applied security patches in the last month?", "response": "SELECT DISTINCT performed_by FROM ComplianceLogs WHERE action LIKE '%security patch%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"}
{"prompt": "What are the latest backup and disaster recovery actions performed?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%backup%' OR action LIKE '%disaster recovery%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many database backup operations have been performed this week?", "response": "SELECT COUNT(*) FROM AuditLogs WHERE action LIKE '%backup%' AND table_name = 'Database' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most recent performance monitoring actions logged during peak hours today?", "response": "SELECT * FROM AuditLogs WHERE (action LIKE '%performance%' OR action LIKE '%CPU%' OR action LIKE '%error spike%') AND DATE(timestamp) = CURDATE() ORDER BY timestamp DESC;"}
{"prompt": "Which users have performed database backup or verification operations in the past 24 hours?", "response": "SELECT DISTINCT user_id FROM AuditLogs WHERE (action LIKE '%backup%' OR action LIKE '%verification%') AND table_name = 'Database' AND timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What are the most recent actions related to firewall or security rule updates?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%firewall%' OR action LIKE '%security rule%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users have monitored system performance in the last 3 days?", "response": "SELECT DISTINCT user_id FROM AuditLogs WHERE action LIKE '%system performance%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 DAY);"}
{"prompt": "What are the most recent compliance log entries about data protection or policy reviews?", "response": "SELECT * FROM ComplianceLogs WHERE action LIKE '%data protection%' OR action LIKE '%policy%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many audit log entries were generated during the last 24 hours?", "response": "SELECT COUNT(*) FROM AuditLogs WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 1 DAY);"}
{"prompt": "What are the most recent audit log entries for database actions?", "response": "SELECT * FROM AuditLogs WHERE table_name = 'Database' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What error spikes or CPU usage issues have been detected today?", "response": "SELECT * FROM AuditLogs WHERE (action LIKE '%error spike%' OR action LIKE '%CPU usage%') AND DATE(timestamp) = CURDATE();"}
{"prompt": "Which users have performed load balancer configuration actions in the last month?", "response": "SELECT DISTINCT user_id FROM AuditLogs WHERE action LIKE '%load balancer%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most recent disaster recovery drills logged in the system?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%disaster recovery%' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "Which users have performed backup verification in the last week?", "response": "SELECT DISTINCT user_id FROM AuditLogs WHERE action LIKE '%backup verification%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the latest audit log entries for actions performed by user_id = 3?", "response": "SELECT * FROM AuditLogs WHERE user_id = 3 ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many compliance log entries have been recorded this month?", "response": "SELECT COUNT(*) FROM ComplianceLogs WHERE MONTH(timestamp) = MONTH(CURDATE()) AND YEAR(timestamp) = YEAR(CURDATE());"}
{"prompt": "Compliance / Quality Assurance Team", "response": "nan"}
{"prompt": "Natural Language Question (Divya’s POV)", "response": "SQL Query"}
{"prompt": "Which newly submitted surveys need review for ethical compliance?", "response": "SELECT survey_id, title, created_by, start_date FROM Surveys WHERE status = 'submitted' ORDER BY start_date DESC;"}
{"prompt": "What surveys include informed consent sections in their description or instructions?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%informed consent%' OR description LIKE '%consent%';"}
{"prompt": "Which surveys have been flagged for potential bias in language or content?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%bias%' OR title LIKE '%bias%';"}
{"prompt": "What compliance actions related to GDPR have been logged recently?", "response": "SELECT action, performed_by, timestamp FROM ComplianceLogs WHERE action LIKE '%GDPR%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What compliance actions related to HIPAA have been logged recently?", "response": "SELECT action, performed_by, timestamp FROM ComplianceLogs WHERE action LIKE '%HIPAA%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What compliance actions related to COPPA have been logged recently?", "response": "SELECT action, performed_by, timestamp FROM ComplianceLogs WHERE action LIKE '%COPPA%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which surveys have encryption protocols verified for response data?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%encryption%' OR description LIKE '%encrypted%';"}
{"prompt": "Which surveys have access controls documented in their metadata or description?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%access control%' OR description LIKE '%restricted access%';"}
{"prompt": "Which surveys have anonymization processes mentioned in their data handling?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%anonymization%' OR description LIKE '%anonymous%';"}
{"prompt": "What surveys have reported issues with skip logic or branching?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%skip logic issue%' OR description LIKE '%branching error%';"}
{"prompt": "Which surveys have accessibility barriers reported in support tickets?", "response": "SELECT DISTINCT s.survey_id, s.title FROM SupportTickets st JOIN Surveys s ON st.user_id = s.created_by WHERE st.subject LIKE '%accessibility%' OR st.subject LIKE '%disability%';"}
{"prompt": "What surveys have been signed off by the compliance team after checklist review?", "response": "SELECT survey_id, title FROM Surveys WHERE status = 'approved';"}
{"prompt": "Which compliance actions were performed by user_id = 4 in the last 7 days?", "response": "SELECT action, campaign_id, timestamp FROM ComplianceLogs WHERE performed_by = 4 AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the recent audit log entries related to survey compliance checks?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE action LIKE '%compliance%' OR action LIKE '%check%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which surveys have missing or incomplete data handling disclaimers?", "response": "SELECT survey_id, title FROM Surveys WHERE description NOT LIKE '%data handling%' OR description NOT LIKE '%privacy%';"}
{"prompt": "What support tickets have been raised about survey data privacy concerns?", "response": "SELECT ticket_id, user_id, subject, status FROM SupportTickets WHERE subject LIKE '%data privacy%' ORDER BY created_at DESC;"}
{"prompt": "Which surveys have been flagged for legal or regulatory review?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%legal review%' OR description LIKE '%regulatory review%';"}
{"prompt": "What is the status of surveys pending quality assurance checks?", "response": "SELECT survey_id, title, status FROM Surveys WHERE status = 'pending_qa';"}
{"prompt": "Which surveys have reported formatting or usability issues?", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%formatting issue%' OR description LIKE '%usability problem%';"}
{"prompt": "What are the recent compliance and quality assurance related support tickets?", "response": "SELECT ticket_id, user_id, subject, status, created_at FROM SupportTickets WHERE subject LIKE '%compliance%' OR subject LIKE '%quality assurance%' ORDER BY created_at DESC LIMIT 20;"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "Natural Language Question (Riya’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent support tickets about feature requests from users?", "response": "SELECT ticket_id, user_id, subject, description, created_at FROM SupportTickets WHERE subject LIKE '%feature request%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which users have submitted the most support tickets about product improvements this year?", "response": "SELECT user_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE subject LIKE '%improvement%' AND YEAR(created_at) = YEAR(CURDATE()) GROUP BY user_id ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What are the most common subjects in support tickets this month?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE()) GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which surveys have the highest completion rates this quarter?", "response": "SELECT survey_id, completion_rate FROM SurveyMetrics WHERE QUARTER(generated_on) = QUARTER(CURDATE()) AND YEAR(generated_on) = YEAR(CURDATE()) ORDER BY completion_rate DESC LIMIT 5;"}
{"prompt": "What is the average response count for surveys created in the last month?", "response": "SELECT AVG(response_count) FROM SurveyMetrics WHERE survey_id IN (SELECT survey_id FROM Surveys WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"}
{"prompt": "Which users have the role 'creator' and are active on the platform?", "response": "SELECT user_id, name FROM Users WHERE role = 'creator' AND status = 'active';"}
{"prompt": "How many new surveys were launched this month?", "response": "SELECT COUNT(*) FROM Surveys WHERE MONTH(start_date) = MONTH(CURDATE()) AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "What are the most recent audit log entries related to product updates or releases?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE action LIKE '%update%' OR action LIKE '%release%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which surveys have the most responses from mobile devices? (Assuming 'mobile' in description)", "response": "SELECT survey_id, title FROM Surveys WHERE description LIKE '%mobile%';"}
{"prompt": "What is the trend in customer satisfaction support tickets over the past month?", "response": "SELECT DATE(created_at) AS day, COUNT(*) AS ticket_count FROM SupportTickets WHERE subject LIKE '%satisfaction%' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "Which surveys have the highest average time spent by respondents?", "response": "SELECT survey_id, avg_time_spent FROM SurveyMetrics ORDER BY avg_time_spent DESC LIMIT 5;"}
{"prompt": "How many support tickets about data visualization have been submitted this year?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%visualization%' AND YEAR(created_at) = YEAR(CURDATE());"}
{"prompt": "What are the most common requests about survey logic from survey creators?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE subject LIKE '%survey logic%' GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which users have the role 'analyst' and are currently active?", "response": "SELECT user_id, name FROM Users WHERE role = 'analyst' AND status = 'active';"}
{"prompt": "What is the average completion rate for surveys in the 'Healthcare' category?", "response": "SELECT AVG(completion_rate) FROM SurveyMetrics WHERE survey_id IN (SELECT survey_id FROM Surveys WHERE category = 'Healthcare');"}
{"prompt": "Which surveys have been launched by educational institutions in the last 3 months?", "response": "SELECT survey_id, title FROM Surveys WHERE category = 'Education' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"prompt": "What are the most recent support tickets about mobile responsiveness?", "response": "SELECT ticket_id, user_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%mobile%' ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "How many surveys are currently open and accepting responses?", "response": "SELECT COUNT(*) FROM Surveys WHERE status = 'open';"}
{"prompt": "Which users have submitted support tickets about accessibility or usability?", "response": "SELECT DISTINCT user_id FROM SupportTickets WHERE subject LIKE '%accessibility%' OR subject LIKE '%usability%';"}
{"prompt": "What are the most recent audit log entries for actions performed by me? (user_id = 21)", "response": "SELECT * FROM AuditLogs WHERE user_id = 21 ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "FoodDeliveryApp", "response": "nan"}
{"prompt": "Customers", "response": "nan"}
{"prompt": "Natural Language Question (Anita’s POV)", "response": "SQL Query"}
{"prompt": "Which restaurants are available near me with their user ratings?", "response": "SELECT restaurant_id, name, address, contact_number, status FROM Restaurants WHERE status = 'active';"}
{"prompt": "What are the menu items and their prices for a selected restaurant (restaurant_id = 10)?", "response": "SELECT name, description, price, category, availability FROM MenuItems WHERE restaurant_id = 10;"}
{"prompt": "Can I see the user ratings and feedback for recent deliveries from a restaurant (restaurant_id = 10)?", "response": "SELECT d.delivery_id, d.rating_by_customer, o.order_id FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 10 AND d.rating_by_customer IS NOT NULL ORDER BY d.delivered_at DESC LIMIT 10;"}
{"prompt": "How can I customize my meal with extra toppings or special instructions at a restaurant (restaurant_id = 10)?", "response": "SELECT item_id, name, description FROM MenuItems WHERE restaurant_id = 10 AND availability = true;"}
{"prompt": "What are my recent orders and their statuses?", "response": "SELECT order_id, restaurant_id, order_date, status, total_amount FROM Orders WHERE customer_id = 3 ORDER BY order_date DESC LIMIT 5;"}
{"prompt": "How do I select a preferred delivery time for my order?", "response": "SELECT order_id, order_date, status FROM Orders WHERE customer_id = 3 ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "Can I track the real-time status of my current delivery?", "response": "SELECT d.status, d.assigned_at, d.delivered_at FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.customer_id = 3 ORDER BY d.assigned_at DESC LIMIT 1;"}
{"prompt": "What ratings have I given for my past deliveries?", "response": "SELECT d.delivery_id, d.rating_by_customer FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.customer_id = 3;"}
{"prompt": "How can I leave feedback for a delivery or food item?", "response": "SELECT ticket_id, issue, status FROM SupportTickets WHERE user_id = 3 ORDER BY submitted_at DESC;"}
{"prompt": "What discounts or campaigns are currently active on the platform?", "response": "SELECT name, discount_percent, start_date, end_date FROM Campaigns WHERE end_date >= CURDATE();"}
{"prompt": "Which delivery partners have the best ratings?", "response": "SELECT delivery_partner_id, AVG(rating_by_customer) AS avg_rating FROM Deliveries WHERE rating_by_customer IS NOT NULL GROUP BY delivery_partner_id ORDER BY avg_rating DESC LIMIT 5;"}
{"prompt": "What is the average delivery time reported in recent performance metrics?", "response": "SELECT avg_delivery_time FROM PerformanceMetrics ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "How many orders have I placed in the last month?", "response": "SELECT COUNT(*) FROM Orders WHERE customer_id = 3 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the most popular menu items in my favorite restaurant (restaurant_id = 10)?", "response": "SELECT mi.name, SUM(oi.quantity) AS total_ordered FROM OrderItems oi JOIN MenuItems mi ON oi.item_id = mi.item_id WHERE mi.restaurant_id = 10 GROUP BY mi.name ORDER BY total_ordered DESC LIMIT 5;"}
{"prompt": "Can I see the details of my last order including items and quantities?", "response": "SELECT mi.name, oi.quantity, oi.price FROM OrderItems oi JOIN MenuItems mi ON oi.item_id = mi.item_id WHERE oi.order_id = (SELECT order_id FROM Orders WHERE customer_id = 3 ORDER BY order_date DESC LIMIT 1);"}
{"prompt": "What is the status of my current delivery and estimated delivery time?", "response": "SELECT d.status, d.assigned_at, d.delivered_at FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.customer_id = 3 ORDER BY d.assigned_at DESC LIMIT 1;"}
{"prompt": "How do I update my delivery address for an upcoming order?", "response": "SELECT order_id, delivery_address FROM Orders WHERE customer_id = 3 AND status = 'pending' ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "What payment methods have I used for my orders?", "response": "SELECT DISTINCT payment_method FROM Payments WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id = 3);"}
{"prompt": "What is the total amount I have spent on QuickEats so far?", "response": "SELECT SUM(total_amount) FROM Orders WHERE customer_id = 3;"}
{"prompt": "How can I report an issue with my order or delivery?", "response": "SELECT ticket_id, issue, status FROM SupportTickets WHERE user_id = 3 ORDER BY submitted_at DESC;"}
{"prompt": "Delivery Partners / Riders", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query"}
{"prompt": "What deliveries are currently assigned to me?", "response": "SELECT delivery_id, order_id, assigned_at, status FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'assigned';"}
{"prompt": "Which orders did I deliver today?", "response": "SELECT delivery_id, order_id, delivered_at FROM Deliveries WHERE delivery_partner_id = 7 AND DATE(delivered_at) = CURDATE();"}
{"prompt": "How many deliveries have I completed this week?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND delivered_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the status of my most recent delivery?", "response": "SELECT delivery_id, status, delivered_at FROM Deliveries WHERE delivery_partner_id = 7 ORDER BY assigned_at DESC LIMIT 1;"}
{"prompt": "Which restaurants do I pick up from most often?", "response": "SELECT o.restaurant_id, COUNT(*) AS pickup_count FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE d.delivery_partner_id = 7 GROUP BY o.restaurant_id ORDER BY pickup_count DESC;"}
{"prompt": "How have customers rated my deliveries?", "response": "SELECT delivery_id, rating_by_customer FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL;"}
{"prompt": "What is my average customer rating?", "response": "SELECT AVG(rating_by_customer) AS avg_rating FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL;"}
{"prompt": "How much have I earned from completed deliveries this month?", "response": "SELECT SUM(p.amount) AS total_earnings FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id JOIN Payments p ON o.order_id = p.order_id WHERE d.delivery_partner_id = 7 AND d.status = 'delivered' AND MONTH(d.delivered_at) = MONTH(CURDATE()) AND YEAR(d.delivered_at) = YEAR(CURDATE());"}
{"prompt": "What are the details of my last five completed deliveries?", "response": "SELECT delivery_id, order_id, assigned_at, delivered_at, status FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered' ORDER BY delivered_at DESC LIMIT 5;"}
{"prompt": "Which of my deliveries received the highest customer rating?", "response": "SELECT delivery_id, rating_by_customer FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL ORDER BY rating_by_customer DESC LIMIT 1;"}
{"prompt": "How many deliveries have I completed so far?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered';"}
{"prompt": "Are there any deliveries still pending or in progress for me?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND status IN ('assigned', 'in_progress');"}
{"prompt": "What issues have customers reported for my deliveries?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE resolved_by = 7 GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "What is my average delivery time?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, assigned_at, delivered_at)) AS avg_delivery_time FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered';"}
{"prompt": "On which days of the week do I complete the most deliveries?", "response": "SELECT DAYNAME(delivered_at) AS day, COUNT(*) AS deliveries FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered' GROUP BY day ORDER BY deliveries DESC;"}
{"prompt": "What are the details of orders I am currently delivering?", "response": "SELECT d.delivery_id, o.order_id, o.restaurant_id, o.delivery_address, d.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE d.delivery_partner_id = 7 AND d.status IN ('assigned', 'in_progress');"}
{"prompt": "What is the status of my support tickets submitted this month?", "response": "SELECT ticket_id, issue, status FROM SupportTickets WHERE user_id = 7 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "How many deliveries did I complete yesterday?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND DATE(delivered_at) = DATE_SUB(CURDATE(), INTERVAL 1 DAY);"}
{"prompt": "What are the most recent audit log entries for my account?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = 7 ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which of my completed deliveries have not yet been rated by customers?", "response": "SELECT delivery_id, order_id FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NULL AND status = 'delivered';"}
{"prompt": "Restaurant Owners / Managers", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "What menu items are currently available at my restaurant?", "response": "SELECT item_id, name, description, price, category, availability FROM MenuItems WHERE restaurant_id = 15;"}
{"prompt": "What are the most recent orders placed at my restaurant?", "response": "SELECT order_id, customer_id, order_date, status, total_amount FROM Orders WHERE restaurant_id = 15 ORDER BY order_date DESC LIMIT 10;"}
{"prompt": "Which delivery partners have been assigned to my orders recently, and what is their delivery status?", "response": "SELECT d.delivery_id, d.order_id, d.delivery_partner_id, d.assigned_at, d.delivered_at, d.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 15 ORDER BY d.assigned_at DESC LIMIT 10;"}
{"prompt": "What ratings and feedback have customers left for my restaurant’s recent deliveries?", "response": "SELECT d.delivery_id, d.rating_by_customer, st.issue, st.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id LEFT JOIN SupportTickets st ON st.user_id = o.customer_id WHERE o.restaurant_id = 15 AND d.rating_by_customer IS NOT NULL ORDER BY d.delivered_at DESC LIMIT 20;"}
{"prompt": "What are the daily and hourly sales and order counts for my restaurant over the last month?", "response": "SELECT DATE(order_date) AS order_day, HOUR(order_date) AS order_hour, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_sales FROM Orders WHERE restaurant_id = 15 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY order_day, order_hour ORDER BY order_day DESC, order_hour DESC LIMIT 50;"}
{"prompt": "Which menu items are marked as unavailable right now?", "response": "SELECT item_id, name FROM MenuItems WHERE restaurant_id = 15 AND availability = false;"}
{"prompt": "What are the prices and descriptions of all menu items at my restaurant?", "response": "SELECT name, description, price FROM MenuItems WHERE restaurant_id = 15;"}
{"prompt": "Which orders are currently pending or in progress at my restaurant?", "response": "SELECT order_id, customer_id, order_date, status FROM Orders WHERE restaurant_id = 15 AND status IN ('pending', 'in_progress');"}
{"prompt": "What are the most popular dishes at my restaurant based on order quantities?", "response": "SELECT mi.name, SUM(oi.quantity) AS total_ordered FROM OrderItems oi JOIN MenuItems mi ON oi.item_id = mi.item_id WHERE mi.restaurant_id = 15 GROUP BY mi.name ORDER BY total_ordered DESC LIMIT 5;"}
{"prompt": "How many orders did my restaurant receive today?", "response": "SELECT COUNT(*) FROM Orders WHERE restaurant_id = 15 AND DATE(order_date) = CURDATE();"}
{"prompt": "What is the average customer rating for my restaurant’s deliveries?", "response": "SELECT AVG(d.rating_by_customer) AS avg_rating FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 15 AND d.rating_by_customer IS NOT NULL;"}
{"prompt": "Which delivery partners have delivered the most orders for my restaurant?", "response": "SELECT d.delivery_partner_id, COUNT(*) AS deliveries FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 15 GROUP BY d.delivery_partner_id ORDER BY deliveries DESC LIMIT 5;"}
{"prompt": "What feedback or issues have customers reported for my restaurant’s orders?", "response": "SELECT st.ticket_id, st.issue, st.status, st.submitted_at FROM SupportTickets st JOIN Orders o ON st.user_id = o.customer_id WHERE o.restaurant_id = 15 ORDER BY st.submitted_at DESC;"}
{"prompt": "What are the details of the last five completed deliveries from my restaurant?", "response": "SELECT d.delivery_id, d.order_id, d.delivered_at, d.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 15 AND d.status = 'delivered' ORDER BY d.delivered_at DESC LIMIT 5;"}
{"prompt": "How much revenue has my restaurant generated in the last month?", "response": "SELECT SUM(total_amount) FROM Orders WHERE restaurant_id = 15 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the average delivery time for orders from my restaurant?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, d.assigned_at, d.delivered_at)) AS avg_delivery_time FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 15 AND d.delivered_at IS NOT NULL;"}
{"prompt": "What are the busiest hours for my restaurant based on order volume in the last week?", "response": "SELECT HOUR(order_date) AS hour, COUNT(*) AS order_count FROM Orders WHERE restaurant_id = 15 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY hour ORDER BY order_count DESC;"}
{"prompt": "Which menu items have not been ordered in the past month?", "response": "SELECT mi.item_id, mi.name FROM MenuItems mi WHERE mi.restaurant_id = 15 AND mi.item_id NOT IN (SELECT oi.item_id FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.restaurant_id = 15 AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"}
{"prompt": "What are the statuses of all orders placed at my restaurant today?", "response": "SELECT order_id, status FROM Orders WHERE restaurant_id = 15 AND DATE(order_date) = CURDATE();"}
{"prompt": "What actions have been logged for my restaurant in the audit logs?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = (SELECT owner_id FROM Restaurants WHERE restaurant_id = 15) ORDER BY timestamp DESC;"}
{"prompt": "Delivery Partners / Riders", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query"}
{"prompt": "What deliveries are currently assigned to me?", "response": "SELECT delivery_id, order_id, assigned_at, status FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'assigned';"}
{"prompt": "Which orders have I delivered most recently?", "response": "SELECT order_id, restaurant_id, delivery_address, order_date, status, total_amount FROM Orders WHERE order_id IN (SELECT order_id FROM Deliveries WHERE delivery_partner_id = 7) ORDER BY order_date DESC LIMIT 10;"}
{"prompt": "How have customers rated my recent deliveries?", "response": "SELECT delivery_id, rating_by_customer FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL ORDER BY delivered_at DESC LIMIT 10;"}
{"prompt": "What is my average customer rating?", "response": "SELECT AVG(rating_by_customer) AS avg_rating FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL;"}
{"prompt": "How much have I earned from completed deliveries this month?", "response": "SELECT SUM(p.amount) AS total_earnings FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id JOIN Payments p ON o.order_id = p.order_id WHERE d.delivery_partner_id = 7 AND d.status = 'delivered' AND MONTH(d.delivered_at) = MONTH(CURDATE()) AND YEAR(d.delivered_at) = YEAR(CURDATE());"}
{"prompt": "What issues have customers reported about my deliveries?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE resolved_by = 7 ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "What were my most recent actions on the platform?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = 7 ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many deliveries have I completed this week?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND delivered_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which restaurants do I pick up from most often?", "response": "SELECT o.restaurant_id, COUNT(*) AS pickup_count FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE d.delivery_partner_id = 7 GROUP BY o.restaurant_id ORDER BY pickup_count DESC;"}
{"prompt": "How many deliveries are still pending or in progress for me?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND status IN ('assigned', 'in_progress');"}
{"prompt": "What is my average delivery time for completed deliveries?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, assigned_at, delivered_at)) AS avg_delivery_time FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered';"}
{"prompt": "Which of my deliveries received the highest customer rating?", "response": "SELECT delivery_id, rating_by_customer FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL ORDER BY rating_by_customer DESC LIMIT 1;"}
{"prompt": "What are the details of my last five completed deliveries?", "response": "SELECT delivery_id, order_id, assigned_at, delivered_at, status FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered' ORDER BY delivered_at DESC LIMIT 5;"}
{"prompt": "On which days of the week do I complete the most deliveries?", "response": "SELECT DAYNAME(delivered_at) AS day, COUNT(*) AS deliveries FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered' GROUP BY day ORDER BY deliveries DESC;"}
{"prompt": "What are the details of orders I am currently delivering?", "response": "SELECT d.delivery_id, o.order_id, o.restaurant_id, o.delivery_address, d.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE d.delivery_partner_id = 7 AND d.status IN ('assigned', 'in_progress');"}
{"prompt": "How many deliveries did I complete yesterday?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND DATE(delivered_at) = DATE_SUB(CURDATE(), INTERVAL 1 DAY);"}
{"prompt": "What incentives or bonuses have I earned for high customer ratings?", "response": "SELECT c.name, c.discount_percent, c.start_date, c.end_date FROM Campaigns c JOIN Deliveries d ON d.delivery_partner_id = 7 WHERE d.rating_by_customer >= 5 AND c.end_date >= CURDATE();"}
{"prompt": "Which of my completed deliveries have not yet been rated by customers?", "response": "SELECT delivery_id, order_id FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NULL AND status = 'delivered';"}
{"prompt": "What is the status of my support tickets submitted this month?", "response": "SELECT ticket_id, issue, status FROM SupportTickets WHERE user_id = 7 AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "How many deliveries have I completed so far?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND status = 'delivered';"}
{"prompt": "Restaurant Owners / Managers", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "What menu items are currently available at SpiceHouse (restaurant_id = 22)?", "response": "SELECT item_id, name, description, price, category, availability FROM MenuItems WHERE restaurant_id = 22 AND availability = true;"}
{"prompt": "Which menu items are marked as unavailable at SpiceHouse (restaurant_id = 22)?", "response": "SELECT item_id, name FROM MenuItems WHERE restaurant_id = 22 AND availability = false;"}
{"prompt": "What are the prices and descriptions of all menu items at my restaurant?", "response": "SELECT name, description, price FROM MenuItems WHERE restaurant_id = 22;"}
{"prompt": "Which dishes have I added to the menu in the last week (restaurant_id = 22)?", "response": "SELECT item_id, name, description, price FROM MenuItems WHERE restaurant_id = 22 AND DATE(created_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the most recent orders placed at SpiceHouse (restaurant_id = 22)?", "response": "SELECT order_id, customer_id, order_date, status, total_amount FROM Orders WHERE restaurant_id = 22 ORDER BY order_date DESC LIMIT 10;"}
{"prompt": "Which orders are currently pending or in progress at my restaurant?", "response": "SELECT order_id, customer_id, order_date, status FROM Orders WHERE restaurant_id = 22 AND status IN ('pending', 'in_progress');"}
{"prompt": "What are the details of the last five completed deliveries from SpiceHouse?", "response": "SELECT d.delivery_id, d.order_id, d.delivered_at, d.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 22 AND d.status = 'delivered' ORDER BY d.delivered_at DESC LIMIT 5;"}
{"prompt": "How much revenue has SpiceHouse (restaurant_id = 22) generated in the last month?", "response": "SELECT SUM(total_amount) FROM Orders WHERE restaurant_id = 22 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the busiest hours for SpiceHouse based on order volume in the last week?", "response": "SELECT HOUR(order_date) AS hour, COUNT(*) AS order_count FROM Orders WHERE restaurant_id = 22 AND order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY hour ORDER BY order_count DESC;"}
{"prompt": "Which menu items have not been ordered in the past month at SpiceHouse (restaurant_id = 22)?", "response": "SELECT mi.item_id, mi.name FROM MenuItems mi WHERE mi.restaurant_id = 22 AND mi.item_id NOT IN (SELECT oi.item_id FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.restaurant_id = 22 AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"}
{"prompt": "What are the statuses of all orders placed at my restaurant today?", "response": "SELECT order_id, status FROM Orders WHERE restaurant_id = 22 AND DATE(order_date) = CURDATE();"}
{"prompt": "What ratings and feedback have customers left for SpiceHouse’s recent deliveries?", "response": "SELECT d.delivery_id, d.rating_by_customer, st.issue, st.status FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id LEFT JOIN SupportTickets st ON st.user_id = o.customer_id WHERE o.restaurant_id = 22 AND d.rating_by_customer IS NOT NULL ORDER BY d.delivered_at DESC LIMIT 20;"}
{"prompt": "What is the average customer rating for SpiceHouse deliveries?", "response": "SELECT AVG(d.rating_by_customer) AS avg_rating FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 22 AND d.rating_by_customer IS NOT NULL;"}
{"prompt": "Which delivery partners have delivered the most orders for SpiceHouse (restaurant_id = 22)?", "response": "SELECT d.delivery_partner_id, COUNT(*) AS deliveries FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 22 GROUP BY d.delivery_partner_id ORDER BY deliveries DESC LIMIT 5;"}
{"prompt": "What feedback or issues have customers reported for my restaurant’s orders?", "response": "SELECT st.ticket_id, st.issue, st.status, st.submitted_at FROM SupportTickets st JOIN Orders o ON st.user_id = o.customer_id WHERE o.restaurant_id = 22 ORDER BY st.submitted_at DESC;"}
{"prompt": "What are the most popular dishes at SpiceHouse based on order quantities?", "response": "SELECT mi.name, SUM(oi.quantity) AS total_ordered FROM OrderItems oi JOIN MenuItems mi ON oi.item_id = mi.item_id WHERE mi.restaurant_id = 22 GROUP BY mi.name ORDER BY total_ordered DESC LIMIT 5;"}
{"prompt": "What is the average delivery time for orders from SpiceHouse (restaurant_id = 22)?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, d.assigned_at, d.delivered_at)) AS avg_delivery_time FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE o.restaurant_id = 22 AND d.delivered_at IS NOT NULL;"}
{"prompt": "Which menu items are marked as daily specials at SpiceHouse (category = 'Special', restaurant_id = 22)?", "response": "SELECT item_id, name, price FROM MenuItems WHERE restaurant_id = 22 AND category = 'Special';"}
{"prompt": "What actions have been logged for SpiceHouse in the audit logs?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = (SELECT owner_id FROM Restaurants WHERE restaurant_id = 22) ORDER BY timestamp DESC;"}
{"prompt": "What are the compliance-related support tickets for SpiceHouse (restaurant_id = 22)?", "response": "SELECT st.ticket_id, st.issue, st.status, st.submitted_at FROM SupportTickets st JOIN Orders o ON st.user_id = o.customer_id WHERE o.restaurant_id = 22 AND st.issue LIKE '%compliance%' ORDER BY st.submitted_at DESC;"}
{"prompt": "Order Management Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Arjun’s POV)", "response": "SQL Query"}
{"prompt": "What are all the new orders placed today?", "response": "SELECT order_id, customer_id, restaurant_id, order_date, status, total_amount FROM Orders WHERE DATE(order_date) = CURDATE();"}
{"prompt": "Which orders have a pending payment status?", "response": "SELECT o.order_id, o.customer_id, o.restaurant_id, p.payment_status FROM Orders o JOIN Payments p ON o.order_id = p.order_id WHERE p.payment_status = 'pending';"}
{"prompt": "What is the current status of order_id = 105? (order_id = 105)", "response": "SELECT status FROM Orders WHERE order_id = 105;"}
{"prompt": "Which orders have been canceled in the last week?", "response": "SELECT order_id, customer_id, restaurant_id, order_date FROM Orders WHERE status = 'canceled' AND order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the details of orders currently assigned to delivery partners but not yet delivered?", "response": "SELECT d.delivery_id, d.order_id, d.delivery_partner_id, d.status FROM Deliveries d WHERE d.status NOT IN ('delivered', 'canceled');"}
{"prompt": "Which restaurants have the highest number of active orders right now?", "response": "SELECT restaurant_id, COUNT(*) AS active_orders FROM Orders WHERE status IN ('pending', 'in_progress') GROUP BY restaurant_id ORDER BY active_orders DESC LIMIT 5;"}
{"prompt": "What are the most common reasons for support tickets related to order issues?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE issue LIKE '%order%' GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "How many orders are currently in progress across the platform?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'in_progress';"}
{"prompt": "What are the payment methods used for today’s orders?", "response": "SELECT DISTINCT p.payment_method FROM Payments p JOIN Orders o ON p.order_id = o.order_id WHERE DATE(o.order_date) = CURDATE();"}
{"prompt": "Which delivery partners have the most orders assigned to them right now?", "response": "SELECT delivery_partner_id, COUNT(*) AS assigned_orders FROM Deliveries WHERE status IN ('assigned', 'in_progress') GROUP BY delivery_partner_id ORDER BY assigned_orders DESC LIMIT 5;"}
{"prompt": "What are the details of orders that failed to be delivered in the last month?", "response": "SELECT d.delivery_id, d.order_id, d.status, d.delivered_at FROM Deliveries d WHERE d.status = 'failed' AND d.delivered_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "Which orders have been refunded this month?", "response": "SELECT o.order_id, o.customer_id, p.amount, p.payment_status FROM Orders o JOIN Payments p ON o.order_id = p.order_id WHERE p.payment_status = 'refunded' AND MONTH(p.payment_date) = MONTH(CURDATE()) AND YEAR(p.payment_date) = YEAR(CURDATE());"}
{"prompt": "What is the average delivery time for completed orders this week?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, d.assigned_at, d.delivered_at)) AS avg_delivery_time FROM Deliveries d WHERE d.status = 'delivered' AND d.delivered_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which restaurants (restaurant_id) have the most canceled orders this month?", "response": "SELECT restaurant_id, COUNT(*) AS canceled_orders FROM Orders WHERE status = 'canceled' AND MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE()) GROUP BY restaurant_id ORDER BY canceled_orders DESC LIMIT 5;"}
{"prompt": "What are the details of orders with customer complaints submitted this week?", "response": "SELECT o.order_id, o.customer_id, st.issue, st.status FROM SupportTickets st JOIN Orders o ON st.user_id = o.customer_id WHERE st.submitted_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND st.issue LIKE '%complaint%';"}
{"prompt": "How many orders have been placed during today’s lunch hours (12pm-3pm)?", "response": "SELECT COUNT(*) FROM Orders WHERE HOUR(order_date) BETWEEN 12 AND 15 AND DATE(order_date) = CURDATE();"}
{"prompt": "What is the status of deliveries that are currently delayed?", "response": "SELECT d.delivery_id, d.order_id, d.status FROM Deliveries d WHERE d.status = 'delayed';"}
{"prompt": "Which orders have been marked for contactless delivery this week? (Assuming 'contactless' in delivery_address)", "response": "SELECT order_id, customer_id, delivery_address FROM Orders WHERE delivery_address LIKE '%contactless%' AND order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What are the details of orders that have been assigned to delivery_partner_id = 11 but not yet delivered? (delivery_partner_id = 11)", "response": "SELECT d.delivery_id, d.order_id, d.status FROM Deliveries d WHERE d.delivery_partner_id = 11 AND d.status NOT IN ('delivered', 'canceled');"}
{"prompt": "What are the most recent audit log entries related to order status changes?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Orders' AND action LIKE '%status%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Natural Language Question (Sana’s POV)", "response": "SQL Query"}
{"prompt": "What are the most common customer issues reported in support tickets?", "response": "SELECT issue, COUNT(*) AS issue_count FROM SupportTickets GROUP BY issue ORDER BY issue_count DESC LIMIT 10;"}
{"prompt": "Which recent support tickets have I handled? (user_id = 9)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE user_id = 9 ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "What are the latest support tickets about delayed deliveries?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%delayed delivery%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Which support tickets have been escalated to supervisors or technical teams?", "response": "SELECT ticket_id, issue, status, submitted_at, resolved_by FROM SupportTickets WHERE status = 'escalated' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "What are my recent support tickets related to customer feedback or suggestions? (user_id = 9)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE user_id = 9 AND (issue LIKE '%feedback%' OR issue LIKE '%improvement%' OR issue LIKE '%suggestion%') ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "What support tickets about missing items have been submitted today?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%missing item%' AND DATE(submitted_at) = CURDATE();"}
{"prompt": "Which support tickets about payment problems are still unresolved?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%payment%' AND status != 'resolved';"}
{"prompt": "What are the statuses of support tickets about incorrect orders this week?", "response": "SELECT ticket_id, status, submitted_at FROM SupportTickets WHERE issue LIKE '%incorrect order%' AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which customers have submitted multiple support tickets this month?", "response": "SELECT user_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE()) GROUP BY user_id HAVING ticket_count > 1;"}
{"prompt": "What are the most recent support tickets about app navigation issues?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%navigation%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Which of my support tickets are still open? (user_id = 9)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE user_id = 9 AND status = 'open';"}
{"prompt": "What are the details of support tickets that resulted in refunds this month?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%refund%' AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "Which support tickets have been resolved by me? (resolved_by = 9)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE resolved_by = 9 AND status = 'resolved';"}
{"prompt": "What are the most frequent issues reported on weekends?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE DAYOFWEEK(submitted_at) IN (1,7) GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which support tickets have been open for more than three days?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE status != 'resolved' AND submitted_at <= DATE_SUB(CURDATE(), INTERVAL 3 DAY);"}
{"prompt": "What are the latest support tickets about contactless delivery requests?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%contactless%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Which customers have submitted complaints about delivery delays more than once?", "response": "SELECT user_id, COUNT(*) AS delay_tickets FROM SupportTickets WHERE issue LIKE '%delayed delivery%' GROUP BY user_id HAVING delay_tickets > 1;"}
{"prompt": "What are the most recent tickets about missing or incorrect items?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%missing item%' OR issue LIKE '%incorrect order%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Which support tickets have been escalated and are still unresolved?", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE status = 'escalated';"}
{"prompt": "What are the most recent support tickets I have submitted about app improvements? (user_id = 9)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE user_id = 9 AND issue LIKE '%improvement%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Marketing Team POV)", "response": "SQL Query"}
{"prompt": "What marketing campaigns are currently running on the QuickEats app?", "response": "SELECT campaign_id, name, start_date, end_date, discount_percent FROM Campaigns WHERE platform = 'QuickEats' AND end_date >= CURDATE();"}
{"prompt": "Which campaigns are targeted at new customers? (target_audience = 'new users')", "response": "SELECT campaign_id, name, start_date, end_date FROM Campaigns WHERE target_audience = 'new users';"}
{"prompt": "What are the details of the latest festival discount campaign?", "response": "SELECT name, discount_percent, start_date, end_date FROM Campaigns WHERE name LIKE '%festival%' ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "How many active users did QuickEats have last week?", "response": "SELECT active_users FROM PerformanceMetrics WHERE report_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY report_date DESC;"}
{"prompt": "What is the average click-through rate for campaigns run this month? (Assuming impressions/clicks are tracked in another table)", "response": "-- Not in schema; skip or use available metrics."}
{"prompt": "Which campaigns have the highest discount percentage this year?", "response": "SELECT name, discount_percent FROM Campaigns WHERE YEAR(start_date) = YEAR(CURDATE()) ORDER BY discount_percent DESC LIMIT 5;"}
{"prompt": "What are the start and end dates for all current co-branded campaigns with restaurant partners?", "response": "SELECT campaign_id, name, start_date, end_date FROM Campaigns WHERE name LIKE '%co-branded%' AND end_date >= CURDATE();"}
{"prompt": "Which campaigns have ended in the last month?", "response": "SELECT campaign_id, name, end_date FROM Campaigns WHERE end_date < CURDATE() AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many total orders were placed during the last campaign period (campaign_id = 12)?", "response": "SELECT COUNT(*) FROM Orders WHERE order_date BETWEEN (SELECT start_date FROM Campaigns WHERE campaign_id = 12) AND (SELECT end_date FROM Campaigns WHERE campaign_id = 12);"}
{"prompt": "Which campaigns are currently offering a discount of 20% or more?", "response": "SELECT campaign_id, name, discount_percent FROM Campaigns WHERE discount_percent >= 20 AND end_date >= CURDATE();"}
{"prompt": "What are the most popular platforms for running campaigns?", "response": "SELECT platform, COUNT(*) AS campaign_count FROM Campaigns GROUP BY platform ORDER BY campaign_count DESC;"}
{"prompt": "Which campaigns were targeted at existing customers last quarter? (target_audience = 'existing users')", "response": "SELECT campaign_id, name, start_date, end_date FROM Campaigns WHERE target_audience = 'existing users' AND QUARTER(start_date) = QUARTER(CURDATE())-1 AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "What are the details of the most recent email marketing campaign? (platform = 'email')", "response": "SELECT campaign_id, name, start_date, end_date FROM Campaigns WHERE platform = 'email' ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "How many orders were placed on the app during the current campaign period? (campaign_id = 15)", "response": "SELECT COUNT(*) FROM Orders WHERE order_date BETWEEN (SELECT start_date FROM Campaigns WHERE campaign_id = 15) AND (SELECT end_date FROM Campaigns WHERE campaign_id = 15);"}
{"prompt": "What are the top five campaigns with the longest duration?", "response": "SELECT campaign_id, name, DATEDIFF(end_date, start_date) AS duration_days FROM Campaigns ORDER BY duration_days DESC LIMIT 5;"}
{"prompt": "Which campaigns are running on both app and web platforms?", "response": "SELECT campaign_id, name FROM Campaigns WHERE platform LIKE '%app%' AND platform LIKE '%web%' AND end_date >= CURDATE();"}
{"prompt": "What is the total number of campaigns launched this year?", "response": "SELECT COUNT(*) FROM Campaigns WHERE YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "Which campaigns have the highest discount for festival seasons?", "response": "SELECT name, discount_percent FROM Campaigns WHERE name LIKE '%festival%' ORDER BY discount_percent DESC LIMIT 3;"}
{"prompt": "What are the most recent campaigns that included exclusive meal bundles?", "response": "SELECT campaign_id, name, start_date FROM Campaigns WHERE name LIKE '%exclusive meal bundle%' ORDER BY start_date DESC LIMIT 5;"}
{"prompt": "How many active users and total orders were recorded on the last report date?", "response": "SELECT active_users, total_orders FROM PerformanceMetrics ORDER BY report_date DESC LIMIT 1;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "Natural Language Question (Anil’s POV)", "response": "SQL Query"}
{"prompt": "What is the breakdown of incoming payments by payment method and status?", "response": "SELECT payment_method, payment_status, COUNT(*) AS payment_count, SUM(amount) AS total_amount FROM Payments GROUP BY payment_method, payment_status;"}
{"prompt": "How do completed orders reconcile with received payments?", "response": "SELECT o.order_id, o.total_amount, p.amount, p.payment_status FROM Orders o LEFT JOIN Payments p ON o.order_id = p.order_id WHERE o.status = 'completed';"}
{"prompt": "What is the total commission paid to each restaurant owner?", "response": "SELECT r.owner_id AS restaurant_owner_id, SUM(p.amount) AS total_commission_paid FROM Payments p JOIN Orders o ON p.order_id = o.order_id JOIN Restaurants r ON o.restaurant_id = r.restaurant_id WHERE p.payment_status = 'completed' GROUP BY r.owner_id;"}
{"prompt": "How much has been paid out to each delivery partner for completed deliveries?", "response": "SELECT d.delivery_partner_id, SUM(p.amount) AS total_payout FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id JOIN Payments p ON o.order_id = p.order_id WHERE p.payment_status = 'completed' AND d.status = 'delivered' GROUP BY d.delivery_partner_id;"}
{"prompt": "What are the total marketing expenses incurred so far? (from Campaigns budget)", "response": "SELECT SUM(budget) AS total_marketing_expenses FROM Campaigns;"}
{"prompt": "What are the latest platform performance metrics for financial reporting?", "response": "SELECT report_date, active_users, total_orders, avg_delivery_time FROM PerformanceMetrics ORDER BY report_date DESC LIMIT 5;"}
{"prompt": "What are the most recent financial-related audit log entries?", "response": "SELECT log_id, user_id, role, action, table_name, timestamp FROM AuditLogs WHERE table_name IN ('Payments', 'Orders', 'Deliveries') ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "How many orders were completed this month?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'completed' AND MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE());"}
{"prompt": "What is the total revenue collected from completed orders this month?", "response": "SELECT SUM(total_amount) FROM Orders WHERE status = 'completed' AND MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE());"}
{"prompt": "Which payment methods are most frequently used by customers?", "response": "SELECT payment_method, COUNT(*) AS usage_count FROM Payments GROUP BY payment_method ORDER BY usage_count DESC;"}
{"prompt": "What is the total amount of refunds issued this month?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_status = 'refunded' AND MONTH(payment_date) = MONTH(CURDATE()) AND YEAR(payment_date) = YEAR(CURDATE());"}
{"prompt": "How many vendor payments (to restaurants and delivery partners) have been processed this month?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_status = 'completed' AND MONTH(payment_date) = MONTH(CURDATE()) AND YEAR(payment_date) = YEAR(CURDATE());"}
{"prompt": "What are the total expenses on current marketing campaigns?", "response": "SELECT SUM(budget) FROM Campaigns WHERE end_date >= CURDATE();"}
{"prompt": "What are the most recent payments flagged for review or fraud? (Assuming 'flagged' in payment_status)", "response": "SELECT payment_id, order_id, payment_method, amount, payment_status FROM Payments WHERE payment_status = 'flagged' ORDER BY payment_date DESC LIMIT 10;"}
{"prompt": "What are the operational costs for the last quarter? (from Campaigns budget)", "response": "SELECT SUM(budget) FROM Campaigns WHERE QUARTER(start_date) = QUARTER(CURDATE()) AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "What is the trend in total orders and average delivery time over the past month?", "response": "SELECT report_date, total_orders, avg_delivery_time FROM PerformanceMetrics ORDER BY report_date DESC LIMIT 30;"}
{"prompt": "Which restaurants have the highest total order value this year?", "response": "SELECT restaurant_id, SUM(total_amount) AS total_sales FROM Orders WHERE YEAR(order_date) = YEAR(CURDATE()) GROUP BY restaurant_id ORDER BY total_sales DESC LIMIT 5;"}
{"prompt": "What are the most recent audit log entries related to vendor payments? (table_name = 'Payments')", "response": "SELECT log_id, user_id, role, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Payments' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many completed orders have not yet been paid for?", "response": "SELECT COUNT(*) FROM Orders o LEFT JOIN Payments p ON o.order_id = p.order_id WHERE o.status = 'completed' AND (p.payment_status IS NULL OR p.payment_status != 'completed');"}
{"prompt": "What is the total revenue and number of orders for the last financial year?", "response": "SELECT SUM(total_amount) AS total_revenue, COUNT(*) AS total_orders FROM Orders WHERE status = 'completed' AND YEAR(order_date) = YEAR(CURDATE()) - 1;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Riya’s POV)", "response": "SQL Query"}
{"prompt": "What are the top 10 most popular menu items by total quantity ordered?", "response": "SELECT mi.name AS menu_item, SUM(oi.quantity) AS total_ordered FROM OrderItems oi JOIN MenuItems mi ON oi.item_id = mi.item_id GROUP BY mi.name ORDER BY total_ordered DESC LIMIT 10;"}
{"prompt": "During which hours do we see the highest volume of orders?", "response": "SELECT HOUR(order_date) AS order_hour, COUNT(*) AS order_count FROM Orders GROUP BY order_hour ORDER BY order_hour;"}
{"prompt": "Which cuisines are most popular on the platform?", "response": "SELECT category, COUNT(*) AS item_count FROM MenuItems GROUP BY category ORDER BY item_count DESC;"}
{"prompt": "What is the average delivery time for completed deliveries?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, d.assigned_at, d.delivered_at)) AS avg_delivery_time FROM Deliveries d WHERE d.delivered_at IS NOT NULL;"}
{"prompt": "What is the customer retention rate for QuickEats?", "response": "SELECT COUNT(DISTINCT customer_id) AS total_customers, COUNT(DISTINCT CASE WHEN order_count > 1 THEN customer_id END) AS returning_customers FROM (SELECT customer_id, COUNT(order_id) AS order_count FROM Orders GROUP BY customer_id) sub;"}
{"prompt": "What is the average order value across all orders?", "response": "SELECT AVG(total_amount) AS avg_order_value FROM Orders;"}
{"prompt": "What is the delivery success rate for all deliveries?", "response": "SELECT COUNT(*) AS total_deliveries, COUNT(CASE WHEN status = 'delivered' THEN 1 END) AS successful_deliveries FROM Deliveries;"}
{"prompt": "How many orders were placed before and after the launch of campaign_id = 15? (campaign_id = 15)", "response": "SELECT count(*) AS orders_before FROM Orders WHERE order_date < (SELECT start_date FROM Campaigns WHERE campaign_id = 15);"}
{"prompt": "nan", "response": "SELECT count(*) AS orders_after FROM Orders WHERE order_date >= (SELECT start_date FROM Campaigns WHERE campaign_id = 15);"}
{"prompt": "How did the average order value change before and after the launch of campaign_id = 15? (campaign_id = 15)", "response": "SELECT AVG(total_amount) AS avg_value_before FROM Orders WHERE order_date < (SELECT start_date FROM Campaigns WHERE campaign_id = 15);"}
{"prompt": "nan", "response": "SELECT AVG(total_amount) AS avg_value_after FROM Orders WHERE order_date >= (SELECT start_date FROM Campaigns WHERE campaign_id = 15);"}
{"prompt": "What is the historical trend of daily order counts for the last 30 days?", "response": "SELECT DATE(order_date) AS order_day, COUNT(*) AS order_count FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY order_day ORDER BY order_day;"}
{"prompt": "What is the forecasted daily order count for the upcoming festival period (2025-06-20 to 2025-06-30)?", "response": "-- Calculate avg daily orders from last 30 days, then multiply by 1.2 for festival forecast (see code logic)"}
{"prompt": "What are the predicted order counts for the next 7 days based on recent trends?", "response": "-- Use linear regression on daily order counts for last 30 days to predict next 7 days (see code logic)"}
{"prompt": "What is the total number of customers who placed more than one order?", "response": "SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 1) sub;"}
{"prompt": "What is the average number of orders per customer?", "response": "SELECT AVG(order_count) FROM (SELECT customer_id, COUNT(order_id) AS order_count FROM Orders GROUP BY customer_id) sub;"}
{"prompt": "What is the most common order status across all orders?", "response": "SELECT status, COUNT(*) AS count FROM Orders GROUP BY status ORDER BY count DESC LIMIT 1;"}
{"prompt": "What is the average rating given by customers for deliveries?", "response": "SELECT AVG(rating_by_customer) FROM Deliveries WHERE rating_by_customer IS NOT NULL;"}
{"prompt": "Which menu items have seen the largest increase in orders after a recent campaign? (campaign_id = 15)", "response": "SELECT mi.name, SUM(oi.quantity) AS total_ordered FROM OrderItems oi JOIN MenuItems mi ON oi.item_id = mi.item_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date >= (SELECT start_date FROM Campaigns WHERE campaign_id = 15) GROUP BY mi.name ORDER BY total_ordered DESC LIMIT 10;"}
{"prompt": "What is the distribution of payment methods used for orders this month?", "response": "SELECT payment_method, COUNT(*) AS count FROM Payments WHERE MONTH(payment_date) = MONTH(CURDATE()) AND YEAR(payment_date) = YEAR(CURDATE()) GROUP BY payment_method;"}
{"prompt": "How many orders were delivered successfully during the last festival campaign? (campaign_id = 12)", "response": "SELECT COUNT(*) FROM Deliveries d JOIN Orders o ON d.order_id = o.order_id WHERE d.status = 'delivered' AND o.order_date BETWEEN (SELECT start_date FROM Campaigns WHERE campaign_id = 12) AND (SELECT end_date FROM Campaigns WHERE campaign_id = 12);"}
{"prompt": "What is the trend in customer feedback issues reported in support tickets over the past month?", "response": "SELECT DATE(submitted_at) AS day, COUNT(*) AS ticket_count FROM SupportTickets WHERE issue LIKE '%feedback%' AND submitted_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY day ORDER BY day;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Natural Language Question (Karan’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent system-related actions recorded in the audit logs?", "response": "SELECT * FROM AuditLogs WHERE table_name = 'System' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What compliance or security-related actions about firewalls and intrusion detection have been logged in the last 30 days?", "response": "SELECT * FROM ComplianceLogs WHERE (action LIKE '%firewall%' OR action LIKE '%intrusion%' OR action LIKE '%security%') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) ORDER BY timestamp DESC;"}
{"prompt": "What are the latest activities related to backups, disaster recovery, or system performance monitoring?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%backup%' OR action LIKE '%disaster recovery%' OR action LIKE '%performance%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "Which administrators have applied security patches or updates in the last month?", "response": "SELECT DISTINCT user_id, action, timestamp FROM AuditLogs WHERE (action LIKE '%patch%' OR action LIKE '%update%' OR action LIKE '%security%') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY timestamp DESC;"}
{"prompt": "What are the most recent audit log entries for database actions?", "response": "SELECT * FROM AuditLogs WHERE table_name = 'Database' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What actions related to cloud infrastructure scaling or load balancing have been logged this month?", "response": "SELECT * FROM AuditLogs WHERE (action LIKE '%scaling%' OR action LIKE '%autoscale%' OR action LIKE '%load balancer%') AND MONTH(timestamp) = MONTH(CURDATE()) AND YEAR(timestamp) = YEAR(CURDATE()) ORDER BY timestamp DESC;"}
{"prompt": "What are the most recent compliance logs about data protection or privacy?", "response": "SELECT * FROM ComplianceLogs WHERE action LIKE '%data protection%' OR action LIKE '%privacy%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users have performed backup or recovery operations in the last week?", "response": "SELECT DISTINCT user_id, action, timestamp FROM AuditLogs WHERE (action LIKE '%backup%' OR action LIKE '%recovery%') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY timestamp DESC;"}
{"prompt": "What are the most recent audit log entries for API performance or downtime?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%API%' OR action LIKE '%downtime%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "How many security-related incidents have been logged in the last month?", "response": "SELECT COUNT(*) FROM ComplianceLogs WHERE action LIKE '%security%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the latest actions related to user access control or permission changes?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%access control%' OR action LIKE '%permission%' ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "What are the most recent log entries for device management or software licensing?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%device management%' OR action LIKE '%licensing%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What critical errors or bugs have been reported by the technical support team in the last week?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%error%' OR action LIKE '%bug%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ORDER BY timestamp DESC;"}
{"prompt": "What are the most recent audit log entries for system rollbacks or patch reversals?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%rollback%' OR action LIKE '%patch reversal%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users have performed system migrations or upgrades in the last quarter?", "response": "SELECT DISTINCT user_id, action, timestamp FROM AuditLogs WHERE (action LIKE '%migration%' OR action LIKE '%upgrade%') AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ORDER BY timestamp DESC;"}
{"prompt": "What are the most recent compliance log entries for regulatory or legal audits?", "response": "SELECT * FROM ComplianceLogs WHERE action LIKE '%audit%' OR action LIKE '%regulatory%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What are the latest actions related to integration with third-party services?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%integration%' OR action LIKE '%third-party%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the trend of backup operations performed each day over the past week?", "response": "SELECT DATE(timestamp) AS backup_day, COUNT(*) AS backup_count FROM AuditLogs WHERE action LIKE '%backup%' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY backup_day ORDER BY backup_day;"}
{"prompt": "What are the most recent audit log entries for device management activities?", "response": "SELECT * FROM AuditLogs WHERE action LIKE '%device management%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What are the most recent compliance log entries for intrusion detection activities?", "response": "SELECT * FROM ComplianceLogs WHERE action LIKE '%intrusion%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Operations Managers", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "What is the current order fulfillment rate across the platform?", "response": "SELECT (SELECT count(*) FROM Orders WHERE status = 'completed') / (SELECT count(*) FROM Orders) AS order_fulfillment_rate;"}
{"prompt": "What is the average delivery time for completed deliveries?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, assigned_at, delivered_at)) AS avg_delivery_time FROM Deliveries WHERE delivered_at IS NOT NULL;"}
{"prompt": "What is the cancellation rate for all orders?", "response": "SELECT (SELECT count(*) FROM Orders WHERE status = 'canceled') / (SELECT count(*) FROM Orders) AS cancellation_rate;"}
{"prompt": "How many customer complaints have been submitted this month?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "How many deliveries have been assigned to a specific delivery partner (delivery_partner_id = 7) this week?", "response": "SELECT COUNT(*) FROM Deliveries WHERE delivery_partner_id = 7 AND assigned_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the average customer rating for a delivery partner (delivery_partner_id = 7)?", "response": "SELECT AVG(rating_by_customer) FROM Deliveries WHERE delivery_partner_id = 7 AND rating_by_customer IS NOT NULL;"}
{"prompt": "How many complaints have been reported about a delivery partner (resolved_by = 7)?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE resolved_by = 7;"}
{"prompt": "How many restaurants have been onboarded in the past week?", "response": "SELECT COUNT(*) FROM Restaurants WHERE status = 'active' AND created_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What percentage of menu items are currently available at a restaurant (restaurant_id = 15)?", "response": "SELECT (SELECT count(*) FROM MenuItems WHERE restaurant_id = 15 AND availability = true) / (SELECT count(*) FROM MenuItems WHERE restaurant_id = 15) AS menu_accuracy;"}
{"prompt": "What is the average preparation time for menu items at a restaurant (restaurant_id = 15)?", "response": "SELECT AVG(preparation_time) FROM MenuItems WHERE restaurant_id = 15;"}
{"prompt": "What is the cancellation rate for orders during a campaign (campaign_id = 2)?", "response": "SELECT (SELECT count(*) FROM Orders WHERE campaign_id = 2 AND status = 'canceled') / (SELECT count(*) FROM Orders WHERE campaign_id = 2) AS cancellation_rate;"}
{"prompt": "How much has been processed in refunds this month?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_status = 'refunded' AND MONTH(payment_date) = MONTH(CURDATE()) AND YEAR(payment_date) = YEAR(CURDATE());"}
{"prompt": "What are the top five reasons for customer complaints this month?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE()) GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "What is the average time taken to resolve support tickets this month?", "response": "SELECT AVG(TIMESTAMPDIFF(MINUTE, submitted_at, resolved_at)) AS avg_resolution_time FROM SupportTickets WHERE MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE()) AND status = 'resolved';"}
{"prompt": "How many orders were completed during a campaign (campaign_id = 1)?", "response": "SELECT COUNT(*) FROM Orders WHERE campaign_id = 1 AND status = 'completed';"}
{"prompt": "What are the most recent audit log entries for operational changes to orders or deliveries?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name IN ('Orders', 'Deliveries') ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many orders are currently in progress across the platform?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'in_progress';"}
{"prompt": "Which delivery partners have the most orders assigned to them right now?", "response": "SELECT delivery_partner_id, COUNT(*) AS assigned_orders FROM Deliveries WHERE status IN ('assigned', 'in_progress') GROUP BY delivery_partner_id ORDER BY assigned_orders DESC LIMIT 5;"}
{"prompt": "What are the payment methods used for today’s orders?", "response": "SELECT DISTINCT p.payment_method FROM Payments p JOIN Orders o ON p.order_id = o.order_id WHERE DATE(o.order_date) = CURDATE();"}
{"prompt": "What is the historical trend of daily order counts for the last 30 days?", "response": "SELECT DATE(order_date) AS order_day, COUNT(*) AS order_count FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY order_day ORDER BY order_day;"}
{"prompt": "nan", "response": "nan"}
{"prompt": "OnlineStore", "response": "nan"}
{"prompt": "Customers", "response": "nan"}
{"prompt": "Natural Language Question (Priya’s POV)", "response": "SQL Query"}
{"prompt": "What audio devices are currently available in the Electronics category?", "response": "SELECT product_id, name, price, stock_quantity FROM Products WHERE category = 'Electronics > Audio Devices' AND status = 'active';"}
{"prompt": "Which products in the Audio Devices category have a rating of 4 stars or higher?", "response": "-- Not in schema (ratings not present), so this cannot be answered directly."}
{"prompt": "What are the details and price of the noise-canceling headphones I found? (product_id = 101)", "response": "SELECT name, description, price FROM Products WHERE product_id = 101;"}
{"prompt": "How many items are left in stock for the headphones I want to buy? (product_id = 101)", "response": "SELECT stock_quantity FROM Products WHERE product_id = 101;"}
{"prompt": "What is the return policy and warranty information for the headphones? (product_id = 101)", "response": "SELECT description FROM Products WHERE product_id = 101;"}
{"prompt": "What are the steps to add a product to my cart?", "response": "-- Not in schema (cart not present), so this cannot be answered directly."}
{"prompt": "What orders have I placed recently? (user_id = 5)", "response": "SELECT order_id, order_date, total_amount, status FROM Orders WHERE customer_id = 5 ORDER BY order_date DESC LIMIT 10;"}
{"prompt": "What items were included in my last order? (user_id = 5)", "response": "SELECT oi.product_id, p.name, oi.quantity, oi.price FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.customer_id = 5 ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "How can I apply a promo code or discount to my purchase?", "response": "-- Not in schema (promo code not present), so this cannot be answered directly."}
{"prompt": "What payment methods have I used for my orders? (user_id = 5)", "response": "SELECT DISTINCT payment_method FROM Payments WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id = 5);"}
{"prompt": "What is the status of my most recent order? (user_id = 5)", "response": "SELECT status FROM Orders WHERE customer_id = 5 ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "When was my last order delivered? (user_id = 5)", "response": "SELECT s.delivered_date FROM Shipments s JOIN Orders o ON s.order_id = o.order_id WHERE o.customer_id = 5 ORDER BY s.delivered_date DESC LIMIT 1;"}
{"prompt": "What is the delivery address for my latest order? (user_id = 5)", "response": "SELECT delivery_address FROM Orders WHERE customer_id = 5 ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "How do I track the shipment status of my order? (order_id = 2001)", "response": "SELECT status, dispatched_date, delivered_date FROM Shipments WHERE order_id = 2001;"}
{"prompt": "What support tickets have I submitted recently? (user_id = 5)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE user_id = 5 ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "What is the total amount I have spent on UrbanGadgets.in? (user_id = 5)", "response": "SELECT SUM(total_amount) FROM Orders WHERE customer_id = 5;"}
{"prompt": "What is the warranty status of a product I purchased? (product_id = 101)", "response": "SELECT description FROM Products WHERE product_id = 101;"}
{"prompt": "What are the most popular products in the Audio Devices category?", "response": "-- Not in schema (popularity/rating not present), so this cannot be answered directly."}
{"prompt": "How do I leave a review for a product I purchased?", "response": "-- Not in schema (reviews not present), so this cannot be answered directly."}
{"prompt": "What are the most recent marketing campaigns targeting students?", "response": "SELECT name, platform, start_date, end_date FROM MarketingCampaigns WHERE target_segment LIKE '%student%' ORDER BY start_date DESC LIMIT 5;"}
{"prompt": "Sellers / Vendors", "response": "nan"}
{"prompt": "Natural Language Question (Aarav’s POV)", "response": "SQL Query"}
{"prompt": "What products have I listed on CraftBazaar.com?", "response": "SELECT product_id, name, description, price, stock_quantity, status FROM Products WHERE seller_id = 12;"}
{"prompt": "Which of my products are currently in stock?", "response": "SELECT product_id, name, stock_quantity FROM Products WHERE seller_id = 12 AND stock_quantity > 0 AND status = 'active';"}
{"prompt": "What are the details of my latest order?", "response": "SELECT order_id, order_date, total_amount, status, delivery_address FROM Orders WHERE order_id IN (SELECT order_id FROM OrderItems WHERE product_id IN (SELECT product_id FROM Products WHERE seller_id = 12)) ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "Which products have sold the most in the past month?", "response": "SELECT p.product_id, p.name, SUM(oi.quantity) AS total_sold FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 AND oi.order_id IN (SELECT order_id FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY p.product_id, p.name ORDER BY total_sold DESC LIMIT 5;"}
{"prompt": "How many orders have I fulfilled this month?", "response": "SELECT COUNT(DISTINCT o.order_id) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 AND o.status = 'delivered' AND MONTH(o.order_date) = MONTH(CURDATE()) AND YEAR(o.order_date) = YEAR(CURDATE());"}
{"prompt": "What is the total revenue from my sales this year?", "response": "SELECT SUM(oi.price * oi.quantity) AS total_revenue FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 AND oi.order_id IN (SELECT order_id FROM Orders WHERE YEAR(order_date) = YEAR(CURDATE()));"}
{"prompt": "What is the status of my most recent shipment?", "response": "SELECT s.status, s.dispatched_date, s.delivered_date FROM Shipments s JOIN Orders o ON s.order_id = o.order_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 ORDER BY s.dispatched_date DESC LIMIT 1;"}
{"prompt": "Which customers have placed bulk orders for my products?", "response": "SELECT o.customer_id, COUNT(oi.order_item_id) AS items_ordered FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 GROUP BY o.customer_id HAVING items_ordered > 5;"}
{"prompt": "What discounts or marketing campaigns have featured my products?", "response": "SELECT mc.name, mc.platform, mc.start_date, mc.end_date FROM MarketingCampaigns mc JOIN Products p ON mc.target_segment LIKE CONCAT('%', p.name, '%') WHERE p.seller_id = 12;"}
{"prompt": "What is my average product rating?", "response": "-- Not in schema (ratings not present), so this cannot be answered directly."}
{"prompt": "How many support tickets have I received from customers about my products?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE user_id IN (SELECT DISTINCT o.customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12);"}
{"prompt": "What are the most common issues reported by customers for my products?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE user_id IN (SELECT DISTINCT o.customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12) GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "What inventory changes have been logged for my products this week?", "response": "SELECT product_id, change_type, quantity_changed, timestamp FROM InventoryLogs WHERE product_id IN (SELECT product_id FROM Products WHERE seller_id = 12) AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "Which of my products are currently out of stock?", "response": "SELECT product_id, name FROM Products WHERE seller_id = 12 AND stock_quantity = 0;"}
{"prompt": "What is the growth in my sales compared to last month?", "response": "SELECT (SELECT SUM(oi.price * oi.quantity) FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 AND oi.order_id IN (SELECT order_id FROM Orders WHERE MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE()))) AS current_month_sales, (SELECT SUM(oi.price * oi.quantity) FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 AND oi.order_id IN (SELECT order_id FROM Orders WHERE MONTH(order_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(order_date) = YEAR(CURDATE()))) AS last_month_sales;"}
{"prompt": "How many products have I listed as a seller?", "response": "SELECT COUNT(*) FROM Products WHERE seller_id = 12;"}
{"prompt": "What are the details of my last five fulfilled orders?", "response": "SELECT o.order_id, o.order_date, o.total_amount, s.status FROM Orders o JOIN Shipments s ON o.order_id = s.order_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.seller_id = 12 AND s.status = 'delivered' ORDER BY o.order_date DESC LIMIT 5;"}
{"prompt": "Which of my products have been included in recent analytics reports as top sellers?", "response": "SELECT report_id, generated_on, top_selling_products FROM Analytics WHERE top_selling_products LIKE CONCAT('%', (SELECT name FROM Products WHERE seller_id = 12 LIMIT 1), '%');"}
{"prompt": "What actions have been logged for my seller account in the audit logs?", "response": "SELECT action, table_name, timestamp FROM AuditLogs WHERE user_id = 12 ORDER BY timestamp DESC;"}
{"prompt": "How many new users joined the platform this month?", "response": "SELECT COUNT(*) FROM Users WHERE MONTH(joined_on) = MONTH(CURDATE()) AND YEAR(joined_on) = YEAR(CURDATE());"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "Natural Language Question (Meera’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent orders that were abandoned at the payment selection stage?", "response": "SELECT order_id, customer_id, order_date, total_amount, status FROM Orders WHERE status = 'abandoned' ORDER BY order_date DESC LIMIT 10;"}
{"prompt": "How many orders have been completed this month?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'completed' AND MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE());"}
{"prompt": "What is the total sales amount for completed orders this month?", "response": "SELECT SUM(total_amount) FROM Orders WHERE status = 'completed' AND MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE());"}
{"prompt": "Which payment methods are most frequently used by customers?", "response": "SELECT payment_method, COUNT(*) as usage_count FROM Payments GROUP BY payment_method ORDER BY usage_count DESC;"}
{"prompt": "How many orders used 'Cashback Wallet' as the payment method this month?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_method = 'Cashback Wallet' AND MONTH(payment_date) = MONTH(CURDATE()) AND YEAR(payment_date) = YEAR(CURDATE());"}
{"prompt": "What is the status of my most recent order? (customer_id = 5)", "response": "SELECT status FROM Orders WHERE customer_id = 5 ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "What is the average delivery time for orders delivered this month?", "response": "SELECT AVG(DATEDIFF(s.delivered_date, s.dispatched_date)) AS avg_delivery_days FROM Shipments s JOIN Orders o ON s.order_id = o.order_id WHERE s.status = 'delivered' AND MONTH(s.delivered_date) = MONTH(CURDATE()) AND YEAR(s.delivered_date) = YEAR(CURDATE());"}
{"prompt": "How many support tickets about payment issues were submitted this month?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE issue LIKE '%payment%' AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "What are the most common issues reported by customers in support tickets?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which products in the 'Electronics > Audio Devices' category are currently available?", "response": "SELECT product_id, name, price, stock_quantity FROM Products WHERE category = 'Electronics > Audio Devices' AND status = 'active';"}
{"prompt": "How many orders were placed using a promo code this month? (Assuming promo code info is in Payments table, if available)", "response": "-- Not in schema; skip or adjust if promo code field exists."}
{"prompt": "What is the total number of orders abandoned this month?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'abandoned' AND MONTH(order_date) = MONTH(CURDATE()) AND YEAR(order_date) = YEAR(CURDATE());"}
{"prompt": "What is the average order value for completed orders?", "response": "SELECT AVG(total_amount) FROM Orders WHERE status = 'completed';"}
{"prompt": "How many orders selected same-day delivery this month? (Assuming same-day delivery is in delivery_address or status)", "response": "-- Not in schema; skip or adjust if delivery type field exists."}
{"prompt": "What is the total number of support tickets resolved this month?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status = 'resolved' AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE());"}
{"prompt": "What is the most recent feedback about the checkout process?", "response": "SELECT issue, submitted_at FROM SupportTickets WHERE issue LIKE '%checkout%' ORDER BY submitted_at DESC LIMIT 1;"}
{"prompt": "Which products are currently on discount or limited-time offer? (Assuming such info is in the description)", "response": "SELECT product_id, name, price FROM Products WHERE description LIKE '%discount%' OR description LIKE '%limited-time%';"}
{"prompt": "What are the details of orders that were completed after receiving an AI-powered cart reminder? (Assume flag in Orders)", "response": "-- Not in schema; skip or adjust if such a flag exists."}
{"prompt": "What is the total number of users who joined this month?", "response": "SELECT COUNT(*) FROM Users WHERE MONTH(joined_on) = MONTH(CURDATE()) AND YEAR(joined_on) = YEAR(CURDATE());"}
{"prompt": "What are the most recent audit log entries related to order status changes?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Orders' AND action LIKE '%status%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Order Fulfillment Specialists", "response": "nan"}
{"prompt": "Natural Language Question (Rahul’s POV)", "response": "SQL Query"}
{"prompt": "What are the most recent high-priority orders that need to be fulfilled?", "response": "SELECT order_id, customer_id, order_date, status, total_amount FROM Orders WHERE status = 'pending' ORDER BY order_date DESC LIMIT 20;"}
{"prompt": "How many electronics orders are currently pending?", "response": "SELECT COUNT(*) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.status = 'pending' AND p.category LIKE '%Electronics%';"}
{"prompt": "Which orders are scheduled for same-day delivery today?", "response": "SELECT order_id, customer_id, order_date, status FROM Orders WHERE status = 'pending' AND DATE(order_date) = CURDATE();"}
{"prompt": "What is the total number of orders placed during the flash sale for electronics?", "response": "SELECT COUNT(*) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category LIKE '%Electronics%' AND DATE(o.order_date) = CURDATE();"}
{"prompt": "Which products are currently low in stock in the warehouse?", "response": "SELECT product_id, name, stock_quantity FROM Products WHERE stock_quantity < 10 AND status = 'active';"}
{"prompt": "What are the details of the laptop order with a SKU mismatch? (Assume product_id = 301)", "response": "SELECT o.order_id, oi.product_id, oi.quantity, oi.price FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id WHERE oi.product_id = 301 AND o.status = 'pending';"}
{"prompt": "Which fragile items need special packing today?", "response": "SELECT product_id, name FROM Products WHERE description LIKE '%fragile%' AND status = 'active';"}
{"prompt": "What are the batch-wise invoices for today’s shipments?", "response": "SELECT order_id, customer_id, total_amount FROM Orders WHERE DATE(order_date) = CURDATE() AND status = 'pending';"}
{"prompt": "Which orders have been flagged for review due to mismatched SKUs?", "response": "SELECT order_id, status FROM Orders WHERE status = 'flagged';"}
{"prompt": "What percentage of sale-day orders have been fulfilled?", "response": "SELECT (SELECT count(*) FROM Orders WHERE status = 'completed' AND DATE(order_date) = CURDATE()) / (SELECT count(*) FROM Orders WHERE DATE(order_date) = CURDATE()) * 100 AS fulfillment_percentage;"}
{"prompt": "Which courier partners are assigned to today’s shipments? (Assume fulfillment_specialist_id = 8)", "response": "SELECT DISTINCT fulfillment_specialist_id FROM Shipments WHERE dispatched_date = CURDATE();"}
{"prompt": "What is the average fulfillment time for electronics orders today?", "response": "SELECT AVG(DATEDIFF(s.delivered_date, o.order_date)) AS avg_fulfillment_days FROM Orders o JOIN Shipments s ON o.order_id = s.order_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category LIKE '%Electronics%' AND DATE(o.order_date) = CURDATE() AND s.status = 'delivered';"}
{"prompt": "What are the most common reasons for order returns this month?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE issue LIKE '%return%' AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE()) GROUP BY issue ORDER BY count DESC;"}
{"prompt": "Which orders are pending dispatch as of now?", "response": "SELECT order_id, customer_id, status FROM Orders WHERE order_id NOT IN (SELECT order_id FROM Shipments WHERE status = 'dispatched');"}
{"prompt": "How many orders were delivered on time today?", "response": "SELECT COUNT(*) FROM Shipments WHERE delivered_date = CURDATE() AND status = 'delivered';"}
{"prompt": "What is the total value of electronics orders fulfilled today?", "response": "SELECT SUM(o.total_amount) FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category LIKE '%Electronics%' AND o.status = 'completed' AND DATE(o.order_date) = CURDATE();"}
{"prompt": "Which packers were assigned to today’s orders? (Assume fulfillment_specialist_id is used for packers)", "response": "SELECT DISTINCT fulfillment_specialist_id FROM Shipments WHERE dispatched_date = CURDATE();"}
{"prompt": "How many orders were completed with no issues reported today?", "response": "SELECT COUNT(*) FROM Orders o WHERE o.status = 'completed' AND o.order_id NOT IN (SELECT order_id FROM SupportTickets WHERE submitted_at >= CURDATE());"}
{"prompt": "What actions have been logged for order fulfillment operations today?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Orders' AND DATE(timestamp) = CURDATE();"}
{"prompt": "What is the current on-time delivery rate for today’s orders?", "response": "SELECT (SELECT count(*) FROM Shipments WHERE delivered_date = CURDATE() AND status = 'delivered') / (SELECT count(*) FROM Shipments WHERE dispatched_date = CURDATE()) * 100 AS on_time_delivery_rate;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Natural Language Question (Ananya’s POV)", "response": "SQL Query"}
{"prompt": "What are the details of Rajesh’s recent order for wireless earphones? (customer_id = 8)", "response": "SELECT o.order_id, o.order_date, o.status, oi.product_id, p.name, oi.quantity, oi.price FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.customer_id = 8 AND p.name LIKE '%wireless earphones%' ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "What is the current status of Rajesh’s order? (order_id = 2002)", "response": "SELECT status FROM Orders WHERE order_id = 2002;"}
{"prompt": "What images or documents has Rajesh uploaded for his support ticket? (ticket_id = 501)", "response": "-- Not in schema (no attachment field), so this cannot be answered directly."}
{"prompt": "What are the most recent support tickets submitted by Rajesh? (user_id = 8)", "response": "SELECT ticket_id, issue, status, submitted_at FROM SupportTickets WHERE user_id = 8 ORDER BY submitted_at DESC LIMIT 5;"}
{"prompt": "Which product variant was shipped for Rajesh’s order? (order_id = 2002)", "response": "SELECT p.name, p.description FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_id = 2002;"}
{"prompt": "Which fulfillment specialist processed Rajesh’s order? (order_id = 2002)", "response": "SELECT s.fulfillment_specialist_id FROM Shipments s WHERE s.order_id = 2002;"}
{"prompt": "What is the status of the replacement shipment for Rajesh’s order? (order_id = 2002)", "response": "SELECT status, dispatched_date, delivered_date FROM Shipments WHERE order_id = 2002 ORDER BY dispatched_date DESC LIMIT 1;"}
{"prompt": "What are the details of the ticket escalation for Rajesh’s support case? (ticket_id = 501)", "response": "SELECT status, resolved_by FROM SupportTickets WHERE ticket_id = 501;"}
{"prompt": "What credits or wallet adjustments have been applied to Rajesh’s account? (user_id = 8)", "response": "-- Not in schema (no wallet/credit field), so this cannot be answered directly."}
{"prompt": "What is the email address for Rajesh? (user_id = 8)", "response": "SELECT email FROM Users WHERE user_id = 8;"}
{"prompt": "What are the most recent support tickets about incorrect item shipments?", "response": "SELECT ticket_id, user_id, issue, status, submitted_at FROM SupportTickets WHERE issue LIKE '%wrong item%' OR issue LIKE '%incorrect%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Which orders have been flagged for priority replacement this week?", "response": "SELECT order_id, customer_id, status FROM Orders WHERE status = 'priority_replacement' AND order_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the status of the pickup for the incorrect item in Rajesh’s order? (order_id = 2002)", "response": "SELECT status, dispatched_date, delivered_date FROM Shipments WHERE order_id = 2002 AND status LIKE '%pickup%';"}
{"prompt": "What are the most common issues reported by frequent customers?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE user_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 5) GROUP BY issue ORDER BY count DESC LIMIT 5;"}
{"prompt": "How many orders has Rajesh placed in the past year? (customer_id = 8)", "response": "SELECT COUNT(*) FROM Orders WHERE customer_id = 8 AND YEAR(order_date) = YEAR(CURDATE());"}
{"prompt": "What are the most recent customer reviews for wireless earphones?", "response": "-- Not in schema (no reviews table), so this cannot be answered directly."}
{"prompt": "What are the details of Rajesh’s last five orders? (customer_id = 8)", "response": "SELECT order_id, order_date, total_amount, status FROM Orders WHERE customer_id = 8 ORDER BY order_date DESC LIMIT 5;"}
{"prompt": "What is the status of all support tickets assigned to me today? (resolved_by = 9)", "response": "SELECT ticket_id, user_id, issue, status FROM SupportTickets WHERE resolved_by = 9 AND DATE(submitted_at) = CURDATE();"}
{"prompt": "What actions have been logged for Rajesh’s order in the audit logs? (order_id = 2002)", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Orders' AND action LIKE '%2002%';"}
{"prompt": "What are the most common reasons for product replacements this month?", "response": "SELECT issue, COUNT(*) AS count FROM SupportTickets WHERE issue LIKE '%replacement%' AND MONTH(submitted_at) = MONTH(CURDATE()) AND YEAR(submitted_at) = YEAR(CURDATE()) GROUP BY issue ORDER BY count DESC;"}
{"prompt": "Inventory Managers", "response": "nan"}
{"prompt": "Natural Language Question (Vivek’s POV)", "response": "SQL Query"}
{"prompt": "Which products currently have stock levels below 15% of their optimal threshold?", "response": "SELECT product_id, name, stock_quantity, (stock_quantity / optimal_stock_level) * 100 AS stock_percentage FROM Products WHERE (stock_quantity / optimal_stock_level) < 0.15;"}
{"prompt": "What are the reorder levels set for fast-moving SKUs?", "response": "SELECT product_id, name, reorder_level FROM Products WHERE is_fast_moving = TRUE;"}
{"prompt": "How many low stock alerts have been flagged in the system this month?", "response": "SELECT COUNT(*) FROM InventoryLogs WHERE change_type = 'low_stock_alert' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the current stock quantity for smart home devices like LED lights and Alexa-enabled speakers?", "response": "SELECT product_id, name, stock_quantity FROM Products WHERE category = 'Smart Home Devices' AND name IN ('LED lights', 'Alexa-enabled speakers');"}
{"prompt": "What are the recent inventory changes for top-selling products?", "response": "SELECT product_id, change_type, quantity_changed, timestamp FROM InventoryLogs WHERE product_id IN (SELECT product_id FROM Products WHERE is_top_selling = TRUE) ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "How many orders were canceled due to stockouts during the last Diwali Festival Sale?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'canceled' AND cancel_reason = 'stockout' AND order_date BETWEEN '2024-10-01' AND '2024-10-15';"}
{"prompt": "What is the YoY sales increase percentage for smart home devices during the Diwali Festival Sale?", "response": "SELECT ((SUM(CASE WHEN YEAR(order_date) = 2025 THEN total_amount ELSE 0 END) - SUM(CASE WHEN YEAR(order_date) = 2024 THEN total_amount ELSE 0 END)) / SUM(CASE WHEN YEAR(order_date) = 2024 THEN total_amount ELSE 0 END)) * 100 AS yoy_increase_percentage FROM Orders WHERE product_id IN (SELECT product_id FROM Products WHERE category = 'Smart Home Devices') AND order_date BETWEEN '2024-10-01' AND '2024-10-15';"}
{"prompt": "Which products have the highest reorder frequency in the last 3 months?", "response": "SELECT product_id, COUNT(*) AS reorder_count FROM InventoryLogs WHERE change_type = 'reorder' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY product_id ORDER BY reorder_count DESC LIMIT 10;"}
{"prompt": "What is the current customer satisfaction rating during the Diwali Festival Sale?", "response": "SELECT AVG(rating) AS avg_customer_satisfaction FROM CustomerFeedback WHERE sale_event = 'Diwali Festival Sale' AND feedback_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "How many shipments were expedited by the Procurement Team in the last month?", "response": "SELECT COUNT(*) FROM Shipments WHERE expedited = TRUE AND dispatched_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the real-time stock levels for products flagged as 'Only Few Left' in the online catalog?", "response": "SELECT product_id, name, stock_quantity FROM Products WHERE stock_flag = 'Only Few Left';"}
{"prompt": "What is the average time between reorder and restock for fast-moving SKUs?", "response": "SELECT AVG(DATEDIFF(restock_date, reorder_date)) AS avg_reorder_to_restock_days FROM ReorderHistory WHERE product_id IN (SELECT product_id FROM Products WHERE is_fast_moving = TRUE);"}
{"prompt": "Which products had the highest sales volume during the last Diwali Festival Sale?", "response": "SELECT product_id, SUM(quantity) AS total_sold FROM OrderItems WHERE order_id IN (SELECT order_id FROM Orders WHERE order_date BETWEEN '2024-10-01' AND '2024-10-15') GROUP BY product_id ORDER BY total_sold DESC LIMIT 10;"}
{"prompt": "How many canceled orders were due to stock unavailability in the last month?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'canceled' AND cancel_reason = 'stock_unavailability' AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the top 5 products with the most frequent stock alerts?", "response": "SELECT product_id, COUNT(*) AS alert_count FROM InventoryLogs WHERE change_type = 'stock_alert' GROUP BY product_id ORDER BY alert_count DESC LIMIT 5;"}
{"prompt": "What is the total revenue generated from smart home devices during the Diwali Festival Sale?", "response": "SELECT SUM(total_amount) FROM Orders WHERE product_id IN (SELECT product_id FROM Products WHERE category = 'Smart Home Devices') AND order_date BETWEEN '2024-10-01' AND '2024-10-15';"}
{"prompt": "How many products have reorder levels dynamically set in the system?", "response": "SELECT COUNT(*) FROM Products WHERE reorder_level IS NOT NULL;"}
{"prompt": "What is the trend of stock levels for top-selling products over the last 6 months?", "response": "SELECT product_id, DATE(timestamp) AS log_date, stock_quantity FROM InventoryLogs WHERE product_id IN (SELECT product_id FROM Products WHERE is_top_selling = TRUE) AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) ORDER BY product_id, log_date;"}
{"prompt": "How many real-time sync updates have been made between the warehouse and online catalog this week?", "response": "SELECT COUNT(*) FROM InventoryLogs WHERE change_type = 'sync_update' AND timestamp >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}
{"prompt": "What is the average stock percentage across all products right now?", "response": "SELECT AVG((stock_quantity / optimal_stock_level) * 100) AS avg_stock_percentage FROM Products WHERE optimal_stock_level > 0;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "Natural Language Question (Neha’s POV)", "response": "SQL Query"}
{"prompt": "What was the gross revenue recorded in the sales system during the Mega Clearance Sale in May 2025?", "response": "SELECT SUM(total_amount) AS gross_revenue FROM Orders WHERE order_date BETWEEN '2025-05-01' AND '2025-05-31';"}
{"prompt": "What is the net amount received in the company’s primary bank account for the Mega Clearance Sale in May 2025?", "response": "SELECT SUM(amount) AS net_amount_received FROM Payments WHERE payment_date BETWEEN '2025-05-01' AND '2025-05-31' AND payment_status = 'completed';"}
{"prompt": "What is the total settlement amount received from Razorpay during May 2025?", "response": "SELECT SUM(amount) AS razorpay_settlement FROM Payments WHERE payment_method = 'Razorpay' AND payment_status = 'completed' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "What is the total settlement amount received from PayU during May 2025?", "response": "SELECT SUM(amount) AS payu_settlement FROM Payments WHERE payment_method = 'PayU' AND payment_status = 'completed' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "How much is currently pending as refunds for May 2025?", "response": "SELECT SUM(amount) AS total_pending_refunds FROM Payments WHERE payment_status = 'pending_refund' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "What is the total value of failed transactions during May 2025?", "response": "SELECT SUM(amount) AS total_failed_transactions FROM Payments WHERE payment_status = 'failed' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "What are the details of bulk discount transactions during the Mega Clearance Sale in May 2025?", "response": "SELECT order_id, total_amount, status FROM Orders WHERE order_date BETWEEN '2025-05-01' AND '2025-05-31' AND description LIKE '%bulk discount%';"}
{"prompt": "What is the total value of refunds processed during May 2025?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_status = 'refunded' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "How many failed transactions occurred during May 2025?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_status = 'failed' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "What is the total value of completed transactions during May 2025?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_status = 'completed' AND MONTH(payment_date) = 5 AND YEAR(payment_date) = 2025;"}
{"prompt": "What are the most recent audit log entries related to payment processing?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Payments' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which orders from May 2025 are still pending payment?", "response": "SELECT order_id, customer_id, total_amount, status FROM Orders WHERE status = 'pending' AND order_date BETWEEN '2025-05-01' AND '2025-05-31';"}
{"prompt": "What is the discrepancy between gross revenue and net amount received for May 2025?", "response": "SELECT ( (SELECT SUM(total_amount) FROM Orders WHERE order_date BETWEEN '2025-05-01' AND '2025-05-31') - (SELECT SUM(amount) FROM Payments WHERE payment_date BETWEEN '2025-05-01' AND '2025-05-31' AND payment_status = 'completed') ) AS revenue_discrepancy;"}
{"prompt": "What is the total value of all orders placed during the Mega Clearance Sale?", "response": "SELECT SUM(total_amount) FROM Orders WHERE order_date BETWEEN '2025-05-01' AND '2025-05-31';"}
{"prompt": "What are the details of all payments settled after May 31, 2025, for orders placed during the Mega Clearance Sale?", "response": "SELECT p.payment_id, p.amount, p.payment_date FROM Payments p JOIN Orders o ON p.order_id = o.order_id WHERE o.order_date BETWEEN '2025-05-01' AND '2025-05-31' AND p.payment_date > '2025-05-31';"}
{"prompt": "How many orders were placed during the Mega Clearance Sale?", "response": "SELECT COUNT(*) FROM Orders WHERE order_date BETWEEN '2025-05-01' AND '2025-05-31';"}
{"prompt": "What is the total value of pending refunds for all time?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_status = 'pending_refund';"}
{"prompt": "What are the most recent audit log entries for orders?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Orders' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What is the total value of all failed transactions for all time?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_status = 'failed';"}
{"prompt": "What are the most recent audit log entries related to refunds?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE action LIKE '%refund%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Natural Language Question (Zara’s POV)", "response": "SQL Query"}
{"prompt": "What are the details of the current Diwali marketing campaign?", "response": "SELECT campaign_id, name, platform, start_date, end_date, conversion_rate FROM MarketingCampaigns WHERE name LIKE '%Diwali%' ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "How much was the budget for the “Ghar Wali Diwali” campaign?", "response": "SELECT budget FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali';"}
{"prompt": "Which platforms are being used for the Diwali campaign?", "response": "SELECT platform FROM MarketingCampaigns WHERE name LIKE '%Diwali%';"}
{"prompt": "What is the conversion rate for the “Ghar Wali Diwali” campaign?", "response": "SELECT conversion_rate FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali';"}
{"prompt": "How many app downloads were recorded during the campaign period?", "response": "SELECT user_growth FROM Analytics WHERE generated_on BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali');"}
{"prompt": "What are the top-selling products during the Diwali campaign?", "response": "SELECT top_selling_products FROM Analytics WHERE generated_on BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali');"}
{"prompt": "What is the total sales amount generated during the campaign?", "response": "SELECT SUM(total_sales) FROM Analytics WHERE generated_on BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali');"}
{"prompt": "How many marketing campaigns have targeted handcrafted goods in the past year?", "response": "SELECT COUNT(*) FROM MarketingCampaigns WHERE target_segment LIKE '%handcrafted%' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}
{"prompt": "What are the most recent analytics reports for campaign performance?", "response": "SELECT report_id, generated_on, total_sales, top_selling_products, user_growth FROM Analytics ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "Which influencers or micro-influencers were involved in the Diwali campaign? (Assuming influencer info in description)", "response": "SELECT name, platform FROM MarketingCampaigns WHERE name LIKE '%Diwali%' AND description LIKE '%influencer%';"}
{"prompt": "What is the trend in user growth during the Diwali campaign?", "response": "SELECT generated_on, user_growth FROM Analytics WHERE generated_on BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') ORDER BY generated_on;"}
{"prompt": "How many posts or stories used the hashtag #GharWaliDiwali? (Assuming this is tracked in campaign description)", "response": "SELECT COUNT(*) FROM MarketingCampaigns WHERE description LIKE '%#GharWaliDiwali%';"}
{"prompt": "What are the most popular product categories during the campaign?", "response": "SELECT category, COUNT(*) AS count FROM Products WHERE status = 'active' GROUP BY category ORDER BY count DESC LIMIT 5;"}
{"prompt": "What is the average conversion rate for all Diwali campaigns run in the last 3 years?", "response": "SELECT AVG(conversion_rate) FROM MarketingCampaigns WHERE name LIKE '%Diwali%' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR);"}
{"prompt": "What are the start and end dates for the “Ghar Wali Diwali” campaign?", "response": "SELECT start_date, end_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali';"}
{"prompt": "What is the total number of marketing campaigns launched this year?", "response": "SELECT COUNT(*) FROM MarketingCampaigns WHERE YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "Which campaigns had the highest conversion rates in the last year?", "response": "SELECT name, conversion_rate FROM MarketingCampaigns WHERE start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ORDER BY conversion_rate DESC LIMIT 5;"}
{"prompt": "What is the total sales amount for handcrafted décor and gift items during the campaign?", "response": "SELECT SUM(total_sales) FROM Analytics WHERE generated_on BETWEEN (SELECT start_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') AND (SELECT end_date FROM MarketingCampaigns WHERE name = 'Ghar Wali Diwali') AND top_selling_products LIKE '%décor%' OR top_selling_products LIKE '%gift%';"}
{"prompt": "What are the most recent audit log entries related to campaign launches?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'MarketingCampaigns' AND action LIKE '%launch%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What feedback or reviews did customers leave about the Diwali campaign? (Assuming feedback is in SupportTickets)", "response": "SELECT issue, submitted_at FROM SupportTickets WHERE issue LIKE '%Diwali%' OR issue LIKE '%campaign%' ORDER BY submitted_at DESC LIMIT 10;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Natural Language Question (Ayesha’s POV)", "response": "SQL Query"}
{"prompt": "How many customers have enrolled in the new loyalty program?", "response": "SELECT COUNT(DISTINCT user_id) FROM Users WHERE status = 'loyalty_member';"}
{"prompt": "What is the adoption rate of the loyalty program among all active users?", "response": "SELECT (SELECT count(*) FROM Users WHERE status = 'loyalty_member') / (SELECT count(*) FROM Users WHERE status = 'active') AS adoption_rate;"}
{"prompt": "What are the age demographics of loyalty program members?", "response": "SELECT age_group, COUNT(*) FROM (SELECT user_id, CASE WHEN YEAR(CURDATE()) - YEAR(joined_on) < 30 THEN 'Under 30' ELSE '30 and above' END AS age_group FROM Users WHERE status = 'loyalty_member') AS sub GROUP BY age_group;"}
{"prompt": "How many purchases have loyalty program members made in the last month?", "response": "SELECT COUNT(*) FROM Orders WHERE customer_id IN (SELECT user_id FROM Users WHERE status = 'loyalty_member') AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the average order value for loyalty program members compared to non-members?", "response": "SELECT AVG(total_amount) AS avg_loyalty FROM Orders WHERE customer_id IN (SELECT user_id FROM Users WHERE status = 'loyalty_member');"}
{"prompt": "nan", "response": "SELECT AVG(total_amount) AS avg_non_loyalty FROM Orders WHERE customer_id NOT IN (SELECT user_id FROM Users WHERE status = 'loyalty_member');"}
{"prompt": "How many users received personalized email recommendations this month?", "response": "SELECT COUNT(DISTINCT user_id) FROM MarketingCampaigns WHERE platform = 'email' AND target_segment LIKE '%personalized%' AND start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What is the engagement rate for users who received personalized email recommendations?", "response": "SELECT (SELECT COUNT(DISTINCT user_id) FROM Users WHERE status = 'engaged' AND user_id IN (SELECT user_id FROM MarketingCampaigns WHERE platform = 'email' AND target_segment LIKE '%personalized%')) / (SELECT COUNT(DISTINCT user_id) FROM MarketingCampaigns WHERE platform = 'email' AND target_segment LIKE '%personalized%') AS engagement_rate;"}
{"prompt": "Which customer segments prefer instant rewards like discount vouchers or free shipping?", "response": "SELECT segment, COUNT(*) FROM Users WHERE preferred_reward IN ('discount voucher', 'free shipping') GROUP BY segment;"}
{"prompt": "Which customer segments prefer accumulating points for bigger rewards?", "response": "SELECT segment, COUNT(*) FROM Users WHERE preferred_reward = 'points' GROUP BY segment;"}
{"prompt": "What is the correlation between receiving personalized emails and loyalty program engagement?", "response": "-- Not directly answerable in SQL; would require export for statistical analysis."}
{"prompt": "How many users have made repeat purchases since joining the loyalty program?", "response": "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id IN (SELECT user_id FROM Users WHERE status = 'loyalty_member') GROUP BY customer_id HAVING COUNT(order_id) > 1;"}
{"prompt": "What is the revenue from repeat customers in the last month?", "response": "SELECT SUM(total_amount) FROM Orders WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 1) AND order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"prompt": "What are the top five most popular rewards redeemed by loyalty program members?", "response": "-- Not in schema (rewards redemption not present), so this cannot be answered directly."}
{"prompt": "What is the trend in loyalty program engagement rates over the last three months?", "response": "SELECT MONTH(joined_on) AS month, COUNT(*) AS new_members FROM Users WHERE status = 'loyalty_member' AND joined_on >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY month ORDER BY month;"}
{"prompt": "How many users from each age group have engaged with the loyalty program?", "response": "SELECT age_group, COUNT(*) FROM (SELECT user_id, CASE WHEN YEAR(CURDATE()) - YEAR(joined_on) < 30 THEN 'Under 30' ELSE '30 and above' END AS age_group FROM Users WHERE status = 'loyalty_member') AS sub GROUP BY age_group;"}
{"prompt": "What is the average number of orders per loyalty program member?", "response": "SELECT AVG(order_count) FROM (SELECT customer_id, COUNT(order_id) AS order_count FROM Orders WHERE customer_id IN (SELECT user_id FROM Users WHERE status = 'loyalty_member') GROUP BY customer_id) AS sub;"}
{"prompt": "What is the total number of users who joined the loyalty program this month?", "response": "SELECT COUNT(*) FROM Users WHERE status = 'loyalty_member' AND MONTH(joined_on) = MONTH(CURDATE()) AND YEAR(joined_on) = YEAR(CURDATE());"}
{"prompt": "What is the most common preferred reward type among loyalty program members?", "response": "SELECT preferred_reward, COUNT(*) AS count FROM Users WHERE status = 'loyalty_member' GROUP BY preferred_reward ORDER BY count DESC LIMIT 1;"}
{"prompt": "How many users have opted out of the loyalty program since launch?", "response": "SELECT COUNT(*) FROM Users WHERE status = 'opted_out' AND joined_on >= (SELECT MIN(joined_on) FROM Users WHERE status = 'loyalty_member');"}
{"prompt": "What are the most recent audit log entries related to loyalty program changes?", "response": "SELECT log_id, user_id, action, table_name, timestamp FROM AuditLogs WHERE table_name = 'Users' AND action LIKE '%loyalty%' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "SchoolTransport", "response": "nan"}
{"prompt": "Students", "response": "nan"}
{"prompt": "What is the assigned route and estimated time for Riya?", "response": "SELECT R.route_name, R.estimated_time FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id WHERE S.name = 'Riya';"}
{"prompt": "Which bus is Aarav assigned to and who is the driver?", "response": "SELECT B.vehicle_number, D.name AS driver_name FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id JOIN Buses B ON R.route_id = B.route_id JOIN Drivers D ON B.bus_id = D.assigned_bus_id WHERE S.name = 'Aarav';"}
{"prompt": "What are all the bus stops for Aarav’s route?", "response": "SELECT R.stops FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id WHERE S.name = 'Aarav';"}
{"prompt": "What is the capacity and status of the bus on Riya’s route?", "response": "SELECT B.capacity, B.status FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id JOIN Buses B ON R.route_id = B.route_id WHERE S.name = 'Riya';"}
{"prompt": "What payment records exist for Aarav?", "response": "SELECT amount, payment_date, status, method FROM Payments P JOIN Students S ON P.student_id = S.student_id WHERE S.name = 'Aarav';"}
{"prompt": "What complaints has Riya submitted and their status?", "response": "SELECT description, status FROM Complaints C JOIN Students S ON C.student_id = S.student_id WHERE S.name = 'Riya';"}
{"prompt": "Which route does the bus with vehicle number 'TN01AB1234' follow?", "response": "SELECT R.route_name FROM Buses B JOIN Routes R ON B.route_id = R.route_id WHERE B.vehicle_number = 'TN01AB1234';"}
{"prompt": "Which students are assigned to the route named 'North Circle Route'?", "response": "SELECT S.name FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id WHERE R.route_name = 'North Circle Route';"}
{"prompt": "What are the driver details of the bus assigned to the 'Field Trip Route'?", "response": "SELECT D.name, D.phone, D.license_number FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id JOIN Routes R ON B.route_id = R.route_id WHERE R.route_name = 'Field Trip Route';"}
{"prompt": "What is the maintenance status of the bus assigned to route ID 3?", "response": "SELECT M.status FROM MaintenanceLogs M JOIN Buses B ON M.bus_id = B.bus_id WHERE B.route_id = 3;"}
{"prompt": "What is the phone number and email of Aarav’s parent?", "response": "SELECT P.phone, P.email FROM Parents P JOIN Students S ON P.parent_id = S.parent_id WHERE S.name = 'Aarav';"}
{"prompt": "How many students are assigned to route ID 5?", "response": "SELECT COUNT(*) FROM Students WHERE assigned_route_id = 5;"}
{"prompt": "List all drivers working the morning shift.", "response": "SELECT name, phone FROM Drivers WHERE shift_time = 'Morning';"}
{"prompt": "What unresolved maintenance issues exist for bus ID 2?", "response": "SELECT issue_description FROM MaintenanceLogs WHERE bus_id = 2 AND status != 'Resolved';"}
{"prompt": "What are the names and routes of students picked up from 'Green Park'?", "response": "SELECT name, assigned_route_id FROM Students WHERE pickup_location = 'Green Park';"}
{"prompt": "Which buses are currently inactive?", "response": "SELECT vehicle_number FROM Buses WHERE status = 'Inactive';"}
{"prompt": "What are the names of parents living in 'Sunset Colony'?", "response": "SELECT name FROM Parents WHERE address = 'Sunset Colony';"}
{"prompt": "Which students have not completed payment?", "response": "SELECT S.name FROM Students S JOIN Payments P ON S.student_id = P.student_id WHERE P.status != 'Completed';"}
{"prompt": "What is the most recent complaint submitted by Riya?", "response": "SELECT description FROM Complaints C JOIN Students S ON C.student_id = S.student_id WHERE S.name = 'Riya' ORDER BY submitted_at DESC LIMIT 1;"}
{"prompt": "Which bus has the highest capacity?", "response": "SELECT vehicle_number FROM Buses ORDER BY capacity DESC LIMIT 1;"}
{"prompt": "Parents / Guardians", "response": "nan"}
{"prompt": "What route is assigned to Meena’s children and how long does it take?", "response": "SELECT S.name, R.route_name, R.estimated_time FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What is the current status of the bus assigned to Meena’s children?", "response": "SELECT S.name, B.status FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id JOIN Buses B ON R.route_id = B.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What is the vehicle number of the bus used by Meena’s children?", "response": "SELECT S.name, B.vehicle_number FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id JOIN Buses B ON R.route_id = B.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "Who is the driver assigned to Meena’s children's bus?", "response": "SELECT D.name FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id JOIN Routes R ON B.route_id = R.route_id JOIN Students S ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What is the phone number of the bus driver for Meena’s children?", "response": "SELECT D.phone FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id JOIN Routes R ON B.route_id = R.route_id JOIN Students S ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What stops are included in the route assigned to Meena’s children?", "response": "SELECT R.stops FROM Routes R JOIN Students S ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What are the pickup and drop locations for Meena’s children?", "response": "SELECT name, pickup_location, drop_location FROM Students WHERE parent_id = (SELECT parent_id FROM Parents WHERE name = 'Meena');"}
{"prompt": "Has Meena submitted any complaints regarding her children?", "response": "SELECT C.description, C.status FROM Complaints C JOIN Students S ON C.student_id = S.student_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What is the most recent complaint submitted by Meena?", "response": "SELECT C.description FROM Complaints C JOIN Students S ON C.student_id = S.student_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena' ORDER BY C.submitted_at DESC LIMIT 1;"}
{"prompt": "What payment records exist for Meena’s children?", "response": "SELECT S.name, amount, payment_date, method, status FROM Payments P JOIN Students S ON P.student_id = S.student_id JOIN Parents Pa ON S.parent_id = Pa.parent_id WHERE Pa.name = 'Meena';"}
{"prompt": "What are the names and classes of Meena’s children?", "response": "SELECT name, class FROM Students WHERE parent_id = (SELECT parent_id FROM Parents WHERE name = 'Meena');"}
{"prompt": "What is Meena's phone number and email address?", "response": "SELECT phone, email FROM Parents WHERE name = 'Meena';"}
{"prompt": "What is the estimated time and stops for the 'Field Trip Route'?", "response": "SELECT estimated_time, stops FROM Routes WHERE route_name = 'Field Trip Route';"}
{"prompt": "Are there any unresolved maintenance issues for Meena’s children’s bus?", "response": "SELECT M.issue_description FROM MaintenanceLogs M JOIN Buses B ON M.bus_id = B.bus_id JOIN Routes R ON B.route_id = R.route_id JOIN Students S ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena' AND M.status != 'Resolved';"}
{"prompt": "Has the bus assigned to Meena’s children undergone recent maintenance?", "response": "SELECT M.reported_at, M.status FROM MaintenanceLogs M JOIN Buses B ON M.bus_id = B.bus_id JOIN Routes R ON B.route_id = R.route_id JOIN Students S ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What route and bus status is assigned to buses going to BrightFuture Academy?", "response": "SELECT R.route_name, B.status FROM Buses B JOIN Routes R ON B.route_id = R.route_id WHERE R.end_point = 'BrightFuture Academy';"}
{"prompt": "Which students are assigned to the same bus as Meena’s children?", "response": "SELECT S2.name FROM Students S1 JOIN Routes R1 ON S1.assigned_route_id = R1.route_id JOIN Students S2 ON S2.assigned_route_id = R1.route_id JOIN Parents P ON S1.parent_id = P.parent_id WHERE P.name = 'Meena' AND S2.name != S1.name;"}
{"prompt": "What is the license number and shift time of the driver assigned to Meena’s children's bus?", "response": "SELECT D.license_number, D.shift_time FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id JOIN Routes R ON B.route_id = R.route_id JOIN Students S ON S.assigned_route_id = R.route_id JOIN Parents P ON S.parent_id = P.parent_id WHERE P.name = 'Meena';"}
{"prompt": "What is the current payment status for each of Meena’s children?", "response": "SELECT S.name, P.status FROM Payments P JOIN Students S ON P.student_id = S.student_id JOIN Parents Pa ON S.parent_id = Pa.parent_id WHERE Pa.name = 'Meena';"}
{"prompt": "Which bus has the highest number of students assigned and is it at full capacity?", "response": "SELECT B.bus_id, B.vehicle_number, COUNT(S.student_id) AS student_count, B.capacity FROM Buses B JOIN Routes R ON B.route_id = R.route_id JOIN Students S ON S.assigned_route_id = R.route_id GROUP BY B.bus_id HAVING COUNT(S.student_id) >= B.capacity;"}
{"prompt": "Drivers", "response": "nan"}
{"prompt": "What is my assigned bus and its vehicle number?", "response": "SELECT bus_id, vehicle_number FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi');"}
{"prompt": "What is the route assigned to my bus?", "response": "SELECT R.route_name FROM Routes R JOIN Buses B ON R.route_id = B.route_id WHERE B.bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi');"}
{"prompt": "How many students are assigned to my route?", "response": "SELECT COUNT(*) FROM Students WHERE assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What are the names of students on my assigned route?", "response": "SELECT name FROM Students WHERE assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What are the pickup locations for students on my route?", "response": "SELECT name, pickup_location FROM Students WHERE assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What are the drop locations for students on my route?", "response": "SELECT name, drop_location FROM Students WHERE assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "Who are the parents of the students on my route?", "response": "SELECT DISTINCT P.name, P.phone FROM Parents P JOIN Students S ON P.parent_id = S.parent_id WHERE S.assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What are the emergency contact details for each student’s parent?", "response": "SELECT S.name, P.phone, P.email FROM Students S JOIN Parents P ON S.parent_id = P.parent_id WHERE S.assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What is the estimated travel time for my current route?", "response": "SELECT estimated_time FROM Routes WHERE route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What are the stop names along my assigned route?", "response": "SELECT stops FROM Routes WHERE route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "Has my bus reported any unresolved maintenance issues?", "response": "SELECT issue_description FROM MaintenanceLogs WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi') AND status != 'Resolved';"}
{"prompt": "What is the most recent maintenance report for my bus?", "response": "SELECT issue_description, reported_at FROM MaintenanceLogs WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi') ORDER BY reported_at DESC LIMIT 1;"}
{"prompt": "What is the current status of my assigned bus?", "response": "SELECT status FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi');"}
{"prompt": "What is my current shift time?", "response": "SELECT shift_time FROM Drivers WHERE name = 'Ravi';"}
{"prompt": "What is my bus license number?", "response": "SELECT license_number FROM Drivers WHERE name = 'Ravi';"}
{"prompt": "What are the names and classes of all students I transport?", "response": "SELECT name, class FROM Students WHERE assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "Are there any complaints raised by students I transport?", "response": "SELECT C.description, C.status FROM Complaints C JOIN Students S ON C.student_id = S.student_id WHERE S.assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What is the total number of complaints related to my route?", "response": "SELECT COUNT(*) FROM Complaints C JOIN Students S ON C.student_id = S.student_id WHERE S.assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "Are all students I transport up-to-date with their payments?", "response": "SELECT S.name, P.status FROM Payments P JOIN Students S ON P.student_id = S.student_id WHERE S.assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "What methods were used by students on my route to pay fees?", "response": "SELECT DISTINCT P.method FROM Payments P JOIN Students S ON P.student_id = S.student_id WHERE S.assigned_route_id = (SELECT route_id FROM Buses WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE name = 'Ravi'));"}
{"prompt": "Transport Coordinators", "response": "nan"}
{"prompt": "Which buses are currently marked as inactive or under maintenance?", "response": "SELECT bus_id, vehicle_number FROM Buses WHERE status != 'Active';"}
{"prompt": "Which bus has the highest student load capacity?", "response": "SELECT bus_id, vehicle_number, capacity FROM Buses ORDER BY capacity DESC LIMIT 1;"}
{"prompt": "What are the details of all buses assigned to each route?", "response": "SELECT B.bus_id, B.vehicle_number, R.route_name FROM Buses B JOIN Routes R ON B.route_id = R.route_id;"}
{"prompt": "What is the full list of all route names with their start and end points?", "response": "SELECT route_name, start_point, end_point FROM Routes;"}
{"prompt": "Which routes have more than 5 stops?", "response": "SELECT route_name FROM Routes WHERE LENGTH(stops) - LENGTH(REPLACE(stops, ',', '')) + 1 > 5;"}
{"prompt": "Which drivers are assigned to which buses?", "response": "SELECT name, assigned_bus_id FROM Drivers;"}
{"prompt": "Which drivers are scheduled for the morning shift?", "response": "SELECT name FROM Drivers WHERE shift_time = 'Morning';"}
{"prompt": "What are the license numbers and contact details of all drivers?", "response": "SELECT name, license_number, phone FROM Drivers;"}
{"prompt": "Which students are assigned to a specific route, say Route ID = 3?", "response": "SELECT name, class FROM Students WHERE assigned_route_id = 3;"}
{"prompt": "What are the student pickup and drop locations for Route ID = 2?", "response": "SELECT name, pickup_location, drop_location FROM Students WHERE assigned_route_id = 2;"}
{"prompt": "How many buses are assigned to each route?", "response": "SELECT route_id, COUNT(*) AS bus_count FROM Buses GROUP BY route_id;"}
{"prompt": "Are there any unresolved maintenance issues?", "response": "SELECT bus_id, issue_description FROM MaintenanceLogs WHERE status != 'Resolved';"}
{"prompt": "What is the most recent reported maintenance issue for any bus?", "response": "SELECT bus_id, issue_description, reported_at FROM MaintenanceLogs ORDER BY reported_at DESC LIMIT 1;"}
{"prompt": "Which students have not completed their payments?", "response": "SELECT S.name, P.status FROM Payments P JOIN Students S ON P.student_id = S.student_id WHERE P.status != 'Completed';"}
{"prompt": "What payment methods are being used by parents?", "response": "SELECT DISTINCT method FROM Payments;"}
{"prompt": "Which students have submitted complaints about transportation issues?", "response": "SELECT S.name, C.description FROM Complaints C JOIN Students S ON C.student_id = S.student_id;"}
{"prompt": "How many complaints are currently unresolved?", "response": "SELECT COUNT(*) FROM Complaints WHERE status != 'Resolved';"}
{"prompt": "What are the phone numbers and email addresses of all parents for communication?", "response": "SELECT name, phone, email FROM Parents;"}
{"prompt": "Which drivers are responsible for buses with unresolved maintenance issues?", "response": "SELECT D.name FROM Drivers D JOIN MaintenanceLogs M ON D.assigned_bus_id = M.bus_id WHERE M.status != 'Resolved';"}
{"prompt": "What are the total number of students assigned per route?", "response": "SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "What is the current status of bus assigned to student 'Aarav'?", "response": "SELECT B.status FROM Buses B JOIN Students S ON B.route_id = S.assigned_route_id WHERE S.name = 'Aarav';"}
{"prompt": "What is the real-time estimated travel time for Aarav’s bus route?", "response": "SELECT R.estimated_time FROM Routes R JOIN Students S ON R.route_id = S.assigned_route_id WHERE S.name = 'Aarav';"}
{"prompt": "What is the vehicle number of the bus assigned to student ID 101?", "response": "SELECT B.vehicle_number FROM Buses B JOIN Students S ON B.route_id = S.assigned_route_id WHERE S.student_id = 101;"}
{"prompt": "What is the name and contact of the driver for a specific student 'Rahul'?", "response": "SELECT D.name, D.phone FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id JOIN Students S ON B.route_id = S.assigned_route_id WHERE S.name = 'Rahul';"}
{"prompt": "Are there any unresolved complaints from student 'Riya'?", "response": "SELECT description FROM Complaints WHERE student_id = (SELECT student_id FROM Students WHERE name = 'Riya') AND status != 'Resolved';"}
{"prompt": "What are the most recent complaints filed by students?", "response": "SELECT student_id, description, submitted_at FROM Complaints ORDER BY submitted_at DESC LIMIT 5;"}
{"prompt": "What is the phone number and email of parent 'Mr. Sharma'?", "response": "SELECT phone, email FROM Parents WHERE name = 'Mr. Sharma';"}
{"prompt": "Which students are children of Mr. Sharma?", "response": "SELECT name FROM Students WHERE parent_id = (SELECT parent_id FROM Parents WHERE name = 'Mr. Sharma');"}
{"prompt": "What is the drop location of student 'Neha'?", "response": "SELECT drop_location FROM Students WHERE name = 'Neha';"}
{"prompt": "Has student ID 105 completed their payment?", "response": "SELECT status FROM Payments WHERE student_id = 105;"}
{"prompt": "What payment method did student 'Sohan' use recently?", "response": "SELECT method FROM Payments WHERE student_id = (SELECT student_id FROM Students WHERE name = 'Sohan') ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "Are there any open maintenance issues for the bus used by 'Aarav'?", "response": "SELECT issue_description FROM MaintenanceLogs WHERE bus_id = (SELECT assigned_bus_id FROM Drivers WHERE driver_id = (SELECT D.driver_id FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id JOIN Students S ON B.route_id = S.assigned_route_id WHERE S.name = 'Aarav')) AND status != 'Resolved';"}
{"prompt": "What are the assigned pickup and drop locations for student 'Ishita'?", "response": "SELECT pickup_location, drop_location FROM Students WHERE name = 'Ishita';"}
{"prompt": "What route is assigned to student ID 204?", "response": "SELECT route_id FROM Students WHERE student_id = 204;"}
{"prompt": "What is the estimated time and stops for Route ID 4?", "response": "SELECT estimated_time, stops FROM Routes WHERE route_id = 4;"}
{"prompt": "Which students have raised complaints in the last 3 days?", "response": "SELECT student_id, description FROM Complaints WHERE submitted_at >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "What are the details of payments made today?", "response": "SELECT student_id, amount, method FROM Payments WHERE DATE(payment_date) = CURRENT_DATE;"}
{"prompt": "Which students are assigned to Route ID 2?", "response": "SELECT name FROM Students WHERE assigned_route_id = 2;"}
{"prompt": "What is the assigned bus ID and route name for student 'Tina'?", "response": "SELECT B.bus_id, R.route_name FROM Students S JOIN Buses B ON S.assigned_route_id = B.route_id JOIN Routes R ON B.route_id = R.route_id WHERE S.name = 'Tina';"}
{"prompt": "What are the phone numbers of all parents whose students are on Route ID 3?", "response": "SELECT DISTINCT P.phone FROM Parents P JOIN Students S ON P.parent_id = S.parent_id WHERE S.assigned_route_id = 3;"}
{"prompt": "Route Planners", "response": "nan"}
{"prompt": "What are all the routes currently in the system with their start and end points?", "response": "SELECT route_id, route_name, start_point, end_point FROM Routes;"}
{"prompt": "Which route has the longest estimated time?", "response": "SELECT route_id, route_name, estimated_time FROM Routes ORDER BY estimated_time DESC LIMIT 1;"}
{"prompt": "What are the stops included in Route ID 3?", "response": "SELECT stops FROM Routes WHERE route_id = 3;"}
{"prompt": "How many students are assigned to each route?", "response": "SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id;"}
{"prompt": "Which bus is assigned to Route ID 2?", "response": "SELECT bus_id, vehicle_number FROM Buses WHERE route_id = 2;"}
{"prompt": "Which students are assigned to Route ID 1?", "response": "SELECT name FROM Students WHERE assigned_route_id = 1;"}
{"prompt": "What is the average capacity of buses assigned per route?", "response": "SELECT route_id, AVG(capacity) AS avg_capacity FROM Buses GROUP BY route_id;"}
{"prompt": "Are there any routes with no students assigned?", "response": "SELECT route_id, route_name FROM Routes WHERE route_id NOT IN (SELECT DISTINCT assigned_route_id FROM Students);"}
{"prompt": "Which drivers are operating buses on Route ID 4?", "response": "SELECT D.name FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id WHERE B.route_id = 4;"}
{"prompt": "What are the pickup and drop locations of all students on Route ID 5?", "response": "SELECT name, pickup_location, drop_location FROM Students WHERE assigned_route_id = 5;"}
{"prompt": "Which routes have more than 5 stops?", "response": "SELECT route_id, route_name FROM Routes WHERE LENGTH(stops) - LENGTH(REPLACE(stops, ',', '')) + 1 > 5;"}
{"prompt": "Which buses are currently marked as ‘Inactive’?", "response": "SELECT bus_id, vehicle_number FROM Buses WHERE status = 'Inactive';"}
{"prompt": "Which buses have ongoing maintenance issues that could affect routes?", "response": "SELECT bus_id FROM MaintenanceLogs WHERE status != 'Resolved';"}
{"prompt": "What is the number of buses available per route (active only)?", "response": "SELECT route_id, COUNT(*) AS active_buses FROM Buses WHERE status = 'Active' GROUP BY route_id;"}
{"prompt": "Which route has the highest number of students assigned?", "response": "SELECT assigned_route_id FROM Students GROUP BY assigned_route_id ORDER BY COUNT(*) DESC LIMIT 1;"}
{"prompt": "What are the estimated times for all current routes?", "response": "SELECT route_id, route_name, estimated_time FROM Routes;"}
{"prompt": "Which buses are assigned to more congested or longer routes (time > '45 mins')?", "response": "SELECT B.bus_id, B.vehicle_number, R.route_name FROM Buses B JOIN Routes R ON B.route_id = R.route_id WHERE R.estimated_time > '45 mins';"}
{"prompt": "What is the total number of routes planned this semester?", "response": "SELECT COUNT(*) FROM Routes;"}
{"prompt": "Are there any drivers who are not assigned a bus yet?", "response": "SELECT name FROM Drivers WHERE assigned_bus_id IS NULL;"}
{"prompt": "List all student names along with their assigned route and estimated travel time.", "response": "SELECT S.name, R.route_name, R.estimated_time FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "What is the total amount collected from transport payments so far?", "response": "SELECT SUM(amount) AS total_collected FROM Payments WHERE status = 'Paid';"}
{"prompt": "How many students have made their transport payment this month?", "response": "SELECT COUNT(*) FROM Payments WHERE MONTH(payment_date) = MONTH(CURRENT_DATE) AND status = 'Paid';"}
{"prompt": "List all pending transport payments with student IDs.", "response": "SELECT student_id, amount FROM Payments WHERE status = 'Pending';"}
{"prompt": "What are the total transport payments received per month?", "response": "SELECT MONTH(payment_date) AS month, SUM(amount) AS total FROM Payments WHERE status = 'Paid' GROUP BY MONTH(payment_date);"}
{"prompt": "Which students have made payments above ₹5000?", "response": "SELECT student_id, amount FROM Payments WHERE amount > 5000 AND status = 'Paid';"}
{"prompt": "What is the average amount paid by students for transport?", "response": "SELECT AVG(amount) AS average_payment FROM Payments WHERE status = 'Paid';"}
{"prompt": "Show all failed or incomplete payments.", "response": "SELECT * FROM Payments WHERE status NOT IN ('Paid');"}
{"prompt": "What payment methods are most commonly used by parents?", "response": "SELECT method, COUNT(*) AS usage_count FROM Payments GROUP BY method ORDER BY usage_count DESC;"}
{"prompt": "List all payments made by Student ID 102.", "response": "SELECT * FROM Payments WHERE student_id = 102;"}
{"prompt": "Which buses have maintenance logs with unresolved issues?", "response": "SELECT DISTINCT bus_id FROM MaintenanceLogs WHERE status != 'Resolved';"}
{"prompt": "What is the total number of maintenance issues reported this quarter?", "response": "SELECT COUNT(*) FROM MaintenanceLogs WHERE QUARTER(reported_at) = QUARTER(CURRENT_DATE);"}
{"prompt": "List all maintenance logs with status 'Pending'.", "response": "SELECT * FROM MaintenanceLogs WHERE status = 'Pending';"}
{"prompt": "What is the average number of days taken to resolve maintenance issues?", "response": "SELECT AVG(DATEDIFF(resolved_at, reported_at)) AS avg_resolution_days FROM MaintenanceLogs WHERE resolved_at IS NOT NULL;"}
{"prompt": "Which bus has had the highest number of maintenance issues?", "response": "SELECT bus_id, COUNT(*) AS issue_count FROM MaintenanceLogs GROUP BY bus_id ORDER BY issue_count DESC LIMIT 1;"}
{"prompt": "List all resolved maintenance issues for Bus ID 5.", "response": "SELECT * FROM MaintenanceLogs WHERE bus_id = 5 AND status = 'Resolved';"}
{"prompt": "Which day had the highest transport revenue?", "response": "SELECT payment_date, SUM(amount) AS total FROM Payments WHERE status = 'Paid' GROUP BY payment_date ORDER BY total DESC LIMIT 1;"}
{"prompt": "List student names and their payment amounts by joining with the student table.", "response": "SELECT S.name, P.amount FROM Students S JOIN Payments P ON S.student_id = P.student_id WHERE P.status = 'Paid';"}
{"prompt": "What is the payment trend over the past 6 months?", "response": "SELECT MONTH(payment_date) AS month, SUM(amount) AS total FROM Payments WHERE status = 'Paid' AND payment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY MONTH(payment_date);"}
{"prompt": "Which parents have paid transport fees for more than one student?", "response": "SELECT parent_id FROM Students GROUP BY parent_id HAVING COUNT(student_id) > 1;"}
{"prompt": "How many students haven’t made any payment yet?", "response": "SELECT COUNT(*) FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Payments WHERE status = 'Paid');"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which buses are currently marked as ‘Out of Service’ in the system?", "response": "SELECT * FROM Buses WHERE status = 'Out of Service';"}
{"prompt": "How many complaints were submitted in the last 7 days?", "response": "SELECT COUNT(*) FROM Complaints WHERE submitted_at >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the details of the most recent system complaint?", "response": "SELECT * FROM Complaints ORDER BY submitted_at DESC LIMIT 1;"}
{"prompt": "Which drivers are assigned to which buses currently?", "response": "SELECT name, assigned_bus_id FROM Drivers;"}
{"prompt": "How many unresolved complaints are currently in the system?", "response": "SELECT COUNT(*) FROM Complaints WHERE status != 'Resolved';"}
{"prompt": "Which buses had more than 3 maintenance logs in the past month?", "response": "SELECT bus_id, COUNT(*) AS issue_count FROM MaintenanceLogs WHERE reported_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY bus_id HAVING issue_count > 3;"}
{"prompt": "Show me all maintenance logs where the issue is still pending.", "response": "SELECT * FROM MaintenanceLogs WHERE status = 'Pending';"}
{"prompt": "How long (in days) did it take to resolve each maintenance issue?", "response": "SELECT log_id, DATEDIFF(resolved_at, reported_at) AS resolution_days FROM MaintenanceLogs WHERE resolved_at IS NOT NULL;"}
{"prompt": "Which driver is assigned to Bus ID 10?", "response": "SELECT name FROM Drivers WHERE assigned_bus_id = 10;"}
{"prompt": "Show all parent contact details for students assigned to Route ID 3.", "response": "SELECT P.name, P.phone, P.email FROM Parents P JOIN Students S ON P.parent_id = S.parent_id WHERE S.assigned_route_id = 3;"}
{"prompt": "Which students are using Route 5 currently?", "response": "SELECT name FROM Students WHERE assigned_route_id = 5;"}
{"prompt": "What is the full route detail (start to end) for Route ID 2?", "response": "SELECT * FROM Routes WHERE route_id = 2;"}
{"prompt": "How many total students are there per route?", "response": "SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id;"}
{"prompt": "List students and their assigned bus numbers.", "response": "SELECT S.name, B.vehicle_number FROM Students S JOIN Buses B ON S.assigned_route_id = B.route_id;"}
{"prompt": "Which routes take more than 60 minutes according to estimated_time?", "response": "SELECT * FROM Routes WHERE estimated_time > '01:00:00';"}
{"prompt": "Show all drivers working the morning shift.", "response": "SELECT name FROM Drivers WHERE shift_time LIKE '%morning%';"}
{"prompt": "List students who get picked up from 'Main Street'.", "response": "SELECT name FROM Students WHERE pickup_location = 'Main Street';"}
{"prompt": "What are the top 5 most common pickup locations?", "response": "SELECT pickup_location, COUNT(*) AS count FROM Students GROUP BY pickup_location ORDER BY count DESC LIMIT 5;"}
{"prompt": "How many complaints were submitted by parents?", "response": "SELECT COUNT(*) FROM Complaints WHERE submitted_by = 'Parent';"}
{"prompt": "List all logs where maintenance was resolved within 1 day.", "response": "SELECT * FROM MaintenanceLogs WHERE DATEDIFF(resolved_at, reported_at) <= 1;"}
{"prompt": "School Administrators", "response": "nan"}
{"prompt": "How many students are assigned to each route?", "response": "SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id;"}
{"prompt": "What are the names and contact numbers of all bus drivers?", "response": "SELECT name, phone FROM Drivers;"}
{"prompt": "Which buses are currently marked as 'Inactive'?", "response": "SELECT bus_id, vehicle_number FROM Buses WHERE status = 'Inactive';"}
{"prompt": "What is the total capacity of all buses assigned to Route ID 3?", "response": "SELECT SUM(capacity) FROM Buses WHERE route_id = 3;"}
{"prompt": "Show all students along with their pickup and drop locations.", "response": "SELECT name, pickup_location, drop_location FROM Students;"}
{"prompt": "How many complaints have been submitted this month?", "response": "SELECT COUNT(*) FROM Complaints WHERE MONTH(submitted_at) = MONTH(CURRENT_DATE) AND YEAR(submitted_at) = YEAR(CURRENT_DATE);"}
{"prompt": "Which routes start at 'BrightFuture Circle'?", "response": "SELECT * FROM Routes WHERE start_point = 'BrightFuture Circle';"}
{"prompt": "List the names of students assigned to Route ID 5.", "response": "SELECT name FROM Students WHERE assigned_route_id = 5;"}
{"prompt": "Which parents haven’t provided an email address?", "response": "SELECT name, phone FROM Parents WHERE email IS NULL OR email = '';"}
{"prompt": "What is the status of all maintenance issues reported this week?", "response": "SELECT * FROM MaintenanceLogs WHERE WEEK(reported_at) = WEEK(CURRENT_DATE) AND YEAR(reported_at) = YEAR(CURRENT_DATE);"}
{"prompt": "How many complaints are still unresolved?", "response": "SELECT COUNT(*) FROM Complaints WHERE status != 'Resolved';"}
{"prompt": "List all drivers and the buses they are assigned to.", "response": "SELECT D.name AS driver_name, B.vehicle_number FROM Drivers D JOIN Buses B ON D.assigned_bus_id = B.bus_id;"}
{"prompt": "Which buses have a capacity greater than 60?", "response": "SELECT vehicle_number FROM Buses WHERE capacity > 60;"}
{"prompt": "How many students belong to each class?", "response": "SELECT class, COUNT(*) AS total_students FROM Students GROUP BY class;"}
{"prompt": "Show payment details of students who paid via 'Cash'.", "response": "SELECT student_id, amount, payment_date FROM Payments WHERE method = 'Cash';"}
{"prompt": "Which students have made a payment in the last 7 days?", "response": "SELECT S.name FROM Students S JOIN Payments P ON S.student_id = P.student_id WHERE P.payment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY);"}
{"prompt": "What are the route names and estimated time for each route?", "response": "SELECT route_name, estimated_time FROM Routes;"}
{"prompt": "Which students are picked up from 'Rose Garden Stop'?", "response": "SELECT name FROM Students WHERE pickup_location = 'Rose Garden Stop';"}
{"prompt": "What is the total amount collected in payments this month?", "response": "SELECT SUM(amount) FROM Payments WHERE MONTH(payment_date) = MONTH(CURRENT_DATE) AND YEAR(payment_date) = YEAR(CURRENT_DATE);"}
{"prompt": "List names of students whose bus route ends at 'Stadium Grounds'.", "response": "SELECT S.name FROM Students S JOIN Routes R ON S.assigned_route_id = R.route_id WHERE R.end_point = 'Stadium Grounds';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which routes have the longest estimated travel time?", "response": "SELECT route_id, route_name, estimated_time FROM Routes ORDER BY estimated_time DESC;"}
{"prompt": "What is the average capacity of all buses?", "response": "SELECT AVG(capacity) AS average_capacity FROM Buses;"}
{"prompt": "How many students are assigned to each bus route?", "response": "SELECT assigned_route_id, COUNT(*) AS total_students FROM Students GROUP BY assigned_route_id;"}
{"prompt": "Which buses are assigned to overcrowded routes (more students than capacity)?", "response": "SELECT B.bus_id, B.vehicle_number FROM Buses B JOIN (SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id) S ON B.route_id = S.assigned_route_id WHERE S.student_count > B.capacity;"}
{"prompt": "What is the average number of students per route?", "response": "SELECT AVG(student_count) FROM (SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id) AS counts;"}
{"prompt": "How many buses are underutilized (less than 50% capacity used)?", "response": "SELECT COUNT(*) FROM Buses B JOIN (SELECT assigned_route_id, COUNT(*) AS student_count FROM Students GROUP BY assigned_route_id) S ON B.route_id = S.assigned_route_id WHERE student_count < (0.5 * B.capacity);"}
{"prompt": "Which drivers are working the morning shift?", "response": "SELECT name FROM Drivers WHERE shift_time LIKE '%morning%';"}
{"prompt": "How many complaints were submitted in the last 30 days?", "response": "SELECT COUNT(*) FROM Complaints WHERE submitted_at >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);"}
{"prompt": "What is the most common complaint status?", "response": "SELECT status, COUNT(*) AS count FROM Complaints GROUP BY status ORDER BY count DESC LIMIT 1;"}
{"prompt": "Which routes have fewer than 10 students assigned?", "response": "SELECT assigned_route_id FROM Students GROUP BY assigned_route_id HAVING COUNT(*) < 10;"}
{"prompt": "What is the total payment collected this year?", "response": "SELECT SUM(amount) FROM Payments WHERE YEAR(payment_date) = YEAR(CURRENT_DATE);"}
{"prompt": "What are the average payment amounts by method?", "response": "SELECT method, AVG(amount) AS avg_payment FROM Payments GROUP BY method;"}
{"prompt": "Which buses had maintenance issues unresolved?", "response": "SELECT bus_id, issue_description FROM MaintenanceLogs WHERE status != 'Resolved';"}
{"prompt": "How many issues were reported and resolved on the same day?", "response": "SELECT COUNT(*) FROM MaintenanceLogs WHERE DATE(reported_at) = DATE(resolved_at);"}
{"prompt": "Which students have not made any payments?", "response": "SELECT student_id, name FROM Students WHERE student_id NOT IN (SELECT student_id FROM Payments);"}
{"prompt": "How many buses are currently marked as ‘Active’?", "response": "SELECT COUNT(*) FROM Buses WHERE status = 'Active';"}
{"prompt": "What’s the most frequently used route based on student assignment?", "response": "SELECT assigned_route_id, COUNT(*) AS total_students FROM Students GROUP BY assigned_route_id ORDER BY total_students DESC LIMIT 1;"}
{"prompt": "What are the peak complaint days in the past month?", "response": "SELECT DATE(submitted_at) AS date, COUNT(*) AS total_complaints FROM Complaints WHERE submitted_at >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY DATE(submitted_at) ORDER BY total_complaints DESC;"}
{"prompt": "Which parent submitted the most complaints?", "response": "SELECT submitted_by, COUNT(*) AS total FROM Complaints GROUP BY submitted_by ORDER BY total DESC LIMIT 1;"}
{"prompt": "List buses and the number of issues reported for each.", "response": "SELECT bus_id, COUNT(*) AS total_issues FROM MaintenanceLogs GROUP BY bus_id;"}
{"prompt": "GamingLeaderboard", "response": "nan"}
{"prompt": "Players / Gamers", "response": "nan"}
{"prompt": "What's my current global ranking?", "response": "sql SELECT ranking FROM Players WHERE username = 'Arjun';"}
{"prompt": "Which games have I played and what were my highest scores in each?", "response": "sql SELECT G.title, MAX(S.score) AS highest_score FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Players P ON S.player_id = P.player_id WHERE P.username = 'Arjun' GROUP BY G.title;"}
{"prompt": "When did I achieve my highest score in BattleQuest?", "response": "sql SELECT S.score, S.achieved_at FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Players P ON S.player_id = P.player_id WHERE P.username = 'Arjun' AND G.title = 'BattleQuest' ORDER BY S.score DESC LIMIT 1;"}
{"prompt": "Which tournaments have I participated in and what were my final positions?", "response": "sql SELECT T.name AS tournament_name, TP.position FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "What rewards did I earn from tournaments or gameplay?", "response": "sql SELECT reward_type, amount, issued_date FROM Rewards R JOIN Players P ON R.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "Who developed BattleQuest and when was it released?", "response": "sql SELECT G.title, G.release_date, D.name AS developer_name, D.company FROM Games G JOIN Developers D ON G.developer_id = D.developer_id WHERE G.title = 'BattleQuest';"}
{"prompt": "Who were the top 10 ranked players globally?", "response": "sql SELECT username, ranking FROM Players ORDER BY ranking ASC LIMIT 10;"}
{"prompt": "Which tournament had the highest prize pool?", "response": "sql SELECT name, prize_pool FROM Tournaments ORDER BY prize_pool DESC LIMIT 1;"}
{"prompt": "When did I join the BattleQuest community?", "response": "sql SELECT join_date FROM Players WHERE username = 'Arjun';"}
{"prompt": "Did I report any players during the tournament weekend?", "response": "sql SELECT R.reported_player_id, R.reason, R.status, R.reported_at FROM Reports R JOIN Players P ON R.reported_by = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "What was my latest score in BattleQuest?", "response": "sql SELECT S.score, S.achieved_at FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Players P ON S.player_id = P.player_id WHERE P.username = 'Arjun' AND G.title = 'BattleQuest' ORDER BY S.achieved_at DESC LIMIT 1;"}
{"prompt": "How many games have I played in total?", "response": "sql SELECT COUNT(DISTINCT game_id) AS total_games FROM Scores S JOIN Players P ON S.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "What's the total reward amount I've earned so far?", "response": "sql SELECT SUM(amount) AS total_rewards FROM Rewards R JOIN Players P ON R.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "List all tournaments I've joined and the rewards I got from each.", "response": "sql SELECT T.name AS tournament_name, TP.reward FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "Which developers have made the games I've played?", "response": "sql SELECT DISTINCT D.name, D.company FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Developers D ON G.developer_id = D.developer_id JOIN Players P ON S.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "What are the genres of games I have played?", "response": "sql SELECT DISTINCT G.genre FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Players P ON S.player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "How many reports have I filed?", "response": "sql SELECT COUNT(*) AS total_reports FROM Reports R JOIN Players P ON R.reported_by = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "How many times have I been reported by others?", "response": "sql SELECT COUNT(*) AS times_reported FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id WHERE P.username = 'Arjun';"}
{"prompt": "What was my best tournament finish and in which tournament?", "response": "sql SELECT T.name, TP.position FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE P.username = 'Arjun' ORDER BY TP.position ASC LIMIT 1;"}
{"prompt": "In which month and year did I earn the highest reward?", "response": "sql SELECT EXTRACT(YEAR FROM issued_date) AS year, EXTRACT(MONTH FROM issued_date) AS month, MAX(amount) AS max_reward FROM Rewards R JOIN Players P ON R.player_id = P.player_id WHERE P.username = 'Arjun' GROUP BY year, month ORDER BY max_reward DESC LIMIT 1;"}
{"prompt": "Game Developers", "response": "nan"}
{"prompt": "Which players are currently in the top 10 rankings globally?", "response": "sql SELECT username, ranking FROM Players ORDER BY ranking ASC LIMIT 10;"}
{"prompt": "How many players have joined BattleQuest since its release?", "response": "sql SELECT COUNT(DISTINCT P.player_id) AS total_players FROM Players P JOIN Scores S ON P.player_id = S.player_id JOIN Games G ON S.game_id = G.game_id WHERE G.title = 'BattleQuest';"}
{"prompt": "What are the top 5 highest scores ever achieved in BattleQuest?", "response": "sql SELECT P.username, S.score, S.achieved_at FROM Scores S JOIN Players P ON S.player_id = P.player_id JOIN Games G ON S.game_id = G.game_id WHERE G.title = 'BattleQuest' ORDER BY S.score DESC LIMIT 5;"}
{"prompt": "Which countries have the most top 100 ranked players?", "response": "sql SELECT country, COUNT(*) AS top_players FROM Players WHERE ranking <= 100 GROUP BY country ORDER BY top_players DESC;"}
{"prompt": "What is the average score achieved in BattleQuest?", "response": "sql SELECT AVG(S.score) AS average_score FROM Scores S JOIN Games G ON S.game_id = G.game_id WHERE G.title = 'BattleQuest';"}
{"prompt": "How many players joined the platform each month this year?", "response": "sql SELECT EXTRACT(MONTH FROM join_date) AS month, COUNT(*) AS total_joined FROM Players WHERE EXTRACT(YEAR FROM join_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY month ORDER BY month;"}
{"prompt": "How many distinct players participated in the last tournament?", "response": "sql SELECT COUNT(DISTINCT player_id) AS participants FROM TournamentParticipants WHERE tournament_id = (SELECT MAX(tournament_id) FROM Tournaments);"}
{"prompt": "Which player has earned the highest total rewards?", "response": "sql SELECT P.username, SUM(R.amount) AS total_rewards FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.username ORDER BY total_rewards DESC LIMIT 1;"}
{"prompt": "What was the average position of players in the last tournament?", "response": "sql SELECT AVG(position) AS average_position FROM TournamentParticipants WHERE tournament_id = (SELECT MAX(tournament_id) FROM Tournaments);"}
{"prompt": "How many players scored above 10,000 in BattleQuest?", "response": "sql SELECT COUNT(DISTINCT S.player_id) AS high_scorers FROM Scores S JOIN Games G ON S.game_id = G.game_id WHERE G.title = 'BattleQuest' AND S.score > 10000;"}
{"prompt": "Which games have been developed by PixelForge Studios?", "response": "sql SELECT G.title FROM Games G JOIN Developers D ON G.developer_id = D.developer_id WHERE D.company = 'PixelForge Studios';"}
{"prompt": "What’s the total prize pool awarded across all tournaments so far?", "response": "sql SELECT SUM(prize_pool) AS total_prize_pool FROM Tournaments;"}
{"prompt": "Which player participated in the most tournaments?", "response": "sql SELECT P.username, COUNT(*) AS tournaments_played FROM TournamentParticipants TP JOIN Players P ON TP.player_id = P.player_id GROUP BY P.username ORDER BY tournaments_played DESC LIMIT 1;"}
{"prompt": "How many active reports are pending review?", "response": "sql SELECT COUNT(*) AS pending_reports FROM Reports WHERE status = 'pending';"}
{"prompt": "Which players have received the most reports against them?", "response": "sql SELECT P.username, COUNT(*) AS report_count FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id GROUP BY P.username ORDER BY report_count DESC LIMIT 5;"}
{"prompt": "What are the top 5 most played games by score submissions?", "response": "sql SELECT G.title, COUNT(*) AS total_scores FROM Scores S JOIN Games G ON S.game_id = G.game_id GROUP BY G.title ORDER BY total_scores DESC LIMIT 5;"}
{"prompt": "What is the most recent reward given to a player?", "response": "sql SELECT R.player_id, R.reward_type, R.amount, R.issued_date FROM Rewards R ORDER BY issued_date DESC LIMIT 1;"}
{"prompt": "What were the top 3 tournaments with the most participants?", "response": "sql SELECT T.name, COUNT(*) AS participant_count FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id GROUP BY T.name ORDER BY participant_count DESC LIMIT 3;"}
{"prompt": "How many different players have reported someone for misconduct?", "response": "sql SELECT COUNT(DISTINCT reported_by) AS distinct_reporters FROM Reports;"}
{"prompt": "Which day had the highest number of score submissions in BattleQuest?", "response": "sql SELECT DATE(achieved_at) AS day, COUNT(*) AS score_count FROM Scores S JOIN Games G ON S.game_id = G.game_id WHERE G.title = 'BattleQuest' GROUP BY day ORDER BY score_count DESC LIMIT 1;"}
{"prompt": "Tournament Organizers", "response": "nan"}
{"prompt": "Which tournaments did I organize for BattleQuest?", "response": "sql SELECT name, start_date, end_date FROM Tournaments WHERE organizer_id = [RAVI_ID];"}
{"prompt": "How many players participated in each of my tournaments?", "response": "sql SELECT T.name, COUNT(DISTINCT TP.player_id) AS participants FROM Tournaments T JOIN TournamentParticipants TP ON T.tournament_id = TP.tournament_id WHERE T.organizer_id = [RAVI_ID] GROUP BY T.name;"}
{"prompt": "What is the prize pool for each tournament I conducted?", "response": "sql SELECT name, prize_pool FROM Tournaments WHERE organizer_id = [RAVI_ID];"}
{"prompt": "Who won the last tournament I managed?", "response": "sql SELECT P.username FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] AND TP.position = 1 ORDER BY T.end_date DESC LIMIT 1;"}
{"prompt": "Which players have participated in the most tournaments I organized?", "response": "sql SELECT P.username, COUNT(*) AS total FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] GROUP BY P.username ORDER BY total DESC LIMIT 5;"}
{"prompt": "What was the average number of participants in my tournaments?", "response": "sql SELECT AVG(cnt) AS avg_participants FROM (SELECT COUNT(*) AS cnt FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id WHERE T.organizer_id = [RAVI_ID] GROUP BY TP.tournament_id) AS sub;"}
{"prompt": "How many unique players participated across all my tournaments?", "response": "sql SELECT COUNT(DISTINCT TP.player_id) AS unique_players FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id WHERE T.organizer_id = [RAVI_ID];"}
{"prompt": "How many tournaments did I organize this year?", "response": "sql SELECT COUNT(*) AS total FROM Tournaments WHERE organizer_id = [RAVI_ID] AND EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "What’s the total reward amount given to players in my tournaments?", "response": "sql SELECT SUM(TP.reward) AS total_rewards FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id WHERE T.organizer_id = [RAVI_ID];"}
{"prompt": "Which tournament had the highest number of players?", "response": "sql SELECT T.name, COUNT(TP.player_id) AS total FROM Tournaments T JOIN TournamentParticipants TP ON T.tournament_id = TP.tournament_id WHERE T.organizer_id = [RAVI_ID] GROUP BY T.name ORDER BY total DESC LIMIT 1;"}
{"prompt": "What are the top 3 player rewards in my latest tournament?", "response": "sql SELECT P.username, TP.reward FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] AND T.tournament_id = (SELECT MAX(tournament_id) FROM Tournaments WHERE organizer_id = [RAVI_ID]) ORDER BY TP.reward DESC LIMIT 3;"}
{"prompt": "Which players ranked in the top 10 in my tournaments?", "response": "sql SELECT DISTINCT P.username, TP.position FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] AND TP.position <= 10 ORDER BY TP.position ASC;"}
{"prompt": "How many tournaments I organized had a prize pool above 50,000?", "response": "sql SELECT COUNT(*) AS high_prize_tournaments FROM Tournaments WHERE organizer_id = [RAVI_ID] AND prize_pool > 50000;"}
{"prompt": "List all rewards issued to players in my tournaments sorted by date.", "response": "sql SELECT R.player_id, R.reward_type, R.amount, R.issued_date FROM Rewards R WHERE R.player_id IN (SELECT TP.player_id FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id WHERE T.organizer_id = [RAVI_ID]) ORDER BY R.issued_date DESC;"}
{"prompt": "Which player has the best average position in my tournaments?", "response": "sql SELECT P.username, AVG(TP.position) AS avg_position FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] GROUP BY P.username ORDER BY avg_position ASC LIMIT 1;"}
{"prompt": "What were the start and end dates of my last 5 tournaments?", "response": "sql SELECT name, start_date, end_date FROM Tournaments WHERE organizer_id = [RAVI_ID] ORDER BY start_date DESC LIMIT 5;"}
{"prompt": "What’s the total number of tournaments I’ve organized till now?", "response": "sql SELECT COUNT(*) AS total_tournaments FROM Tournaments WHERE organizer_id = [RAVI_ID];"}
{"prompt": "Which player earned the highest reward in my tournaments?", "response": "sql SELECT P.username, MAX(TP.reward) AS highest_reward FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] GROUP BY P.username ORDER BY highest_reward DESC LIMIT 1;"}
{"prompt": "Which of my tournaments had the fewest participants?", "response": "sql SELECT T.name, COUNT(TP.player_id) AS total FROM Tournaments T JOIN TournamentParticipants TP ON T.tournament_id = TP.tournament_id WHERE T.organizer_id = [RAVI_ID] GROUP BY T.name ORDER BY total ASC LIMIT 1;"}
{"prompt": "How many players from India participated in my tournaments?", "response": "sql SELECT COUNT(DISTINCT TP.player_id) AS indian_players FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id JOIN Players P ON TP.player_id = P.player_id WHERE T.organizer_id = [RAVI_ID] AND P.country = 'India';"}
{"prompt": "Moderators / Admins", "response": "nan"}
{"prompt": "Which players have been reported the most?", "response": "sql SELECT P.username, COUNT(*) AS report_count FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id GROUP BY P.username ORDER BY report_count DESC;"}
{"prompt": "What are the latest reports I need to review?", "response": "sql SELECT R.report_id, P.username AS reported_player, R.reason, R.status, R.reported_at FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id ORDER BY R.reported_at DESC LIMIT 10;"}
{"prompt": "Who reported the player with the most recent cheating case?", "response": "sql SELECT RP.username AS reporter, R.reason, R.reported_at FROM Reports R JOIN Players RP ON R.reported_by = RP.player_id WHERE R.reason LIKE '%cheat%' ORDER BY R.reported_at DESC LIMIT 1;"}
{"prompt": "How many reports were filed in the last 30 days?", "response": "sql SELECT COUNT(*) FROM Reports WHERE reported_at >= NOW() - INTERVAL '30 days';"}
{"prompt": "Which reported cases are still unresolved?", "response": "sql SELECT report_id, reason, reported_at FROM Reports WHERE status != 'Resolved';"}
{"prompt": "What are the most common reasons players are reported?", "response": "sql SELECT reason, COUNT(*) AS frequency FROM Reports GROUP BY reason ORDER BY frequency DESC;"}
{"prompt": "List all players who were reported for toxic behavior.", "response": "sql SELECT DISTINCT P.username FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id WHERE R.reason LIKE '%toxic%';"}
{"prompt": "Which players were reported more than 3 times?", "response": "sql SELECT P.username, COUNT(*) AS reports FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id GROUP BY P.username HAVING COUNT(*) > 3;"}
{"prompt": "When was the last time a report was submitted?", "response": "sql SELECT MAX(reported_at) AS last_report_time FROM Reports;"}
{"prompt": "What’s the total number of reports ever submitted?", "response": "sql SELECT COUNT(*) AS total_reports FROM Reports;"}
{"prompt": "Which players were banned or had scores removed due to cheating? (Assuming “Resolved” implies action taken)", "response": "sql SELECT P.username FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id WHERE R.status = 'Resolved' AND R.reason LIKE '%cheat%';"}
{"prompt": "Who are the top 5 most frequently reported players for harassment?", "response": "sql SELECT P.username, COUNT(*) AS reports FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id WHERE R.reason LIKE '%harass%' GROUP BY P.username ORDER BY reports DESC LIMIT 5;"}
{"prompt": "How many reports were submitted by each player?", "response": "sql SELECT P.username, COUNT(*) AS submitted_reports FROM Reports R JOIN Players P ON R.reported_by = P.player_id GROUP BY P.username ORDER BY submitted_reports DESC;"}
{"prompt": "Which countries have the most reported players?", "response": "sql SELECT P.country, COUNT(*) AS reports FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id GROUP BY P.country ORDER BY reports DESC;"}
{"prompt": "How many cheating-related reports were received last month?", "response": "sql SELECT COUNT(*) FROM Reports WHERE reason LIKE '%cheat%' AND reported_at >= date_trunc('month', CURRENT_DATE - INTERVAL '1 month') AND reported_at < date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which players were reported multiple times but still have an active account? (Assuming no ban column, we consider “Unresolved” as still active)", "response": "sql SELECT P.username, COUNT(*) AS report_count FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id WHERE R.status != 'Resolved' GROUP BY P.username HAVING COUNT(*) > 1;"}
{"prompt": "Which player was reported most recently for using hacks?", "response": "sql SELECT P.username, R.reported_at FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id WHERE R.reason LIKE '%hack%' ORDER BY R.reported_at DESC LIMIT 1;"}
{"prompt": "Which of my reports are still pending review? (If Anika's ID is known)", "response": "sql SELECT report_id, reported_player_id, reason FROM Reports WHERE reported_by = [ANIKA_ID] AND status = 'Pending';"}
{"prompt": "What percentage of reports are resolved?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE status = 'Resolved') * 100.0 / COUNT(*)), 2) AS resolved_percentage FROM Reports;"}
{"prompt": "List of all reports submitted in the last tournament week. (Assume you define tournament week by a given date range)", "response": "sql SELECT report_id, reported_player_id, reason FROM Reports WHERE reported_at BETWEEN '2025-06-01' AND '2025-06-07';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "What is the current ranking of the player who just submitted a complaint?", "response": "sql SELECT username, ranking FROM Players WHERE player_id = [PLAYER_ID];"}
{"prompt": "Show me the recent scores of the player who reported a leaderboard issue.", "response": "sql SELECT score, achieved_at FROM Scores WHERE player_id = [PLAYER_ID] ORDER BY achieved_at DESC LIMIT 5;"}
{"prompt": "Which tournaments did this player participate in recently?", "response": "sql SELECT T.name, T.start_date, T.end_date FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id WHERE TP.player_id = [PLAYER_ID] ORDER BY T.start_date DESC;"}
{"prompt": "What position did this player finish in the last tournament?", "response": "sql SELECT position FROM TournamentParticipants WHERE player_id = [PLAYER_ID] ORDER BY tournament_id DESC LIMIT 1;"}
{"prompt": "Has this player received any tournament rewards?", "response": "sql SELECT reward FROM TournamentParticipants WHERE player_id = [PLAYER_ID];"}
{"prompt": "What is the player's highest score ever?", "response": "sql SELECT MAX(score) AS highest_score FROM Scores WHERE player_id = [PLAYER_ID];"}
{"prompt": "When did this player join the game?", "response": "sql SELECT join_date FROM Players WHERE player_id = [PLAYER_ID];"}
{"prompt": "How many games has the player played in total?", "response": "sql SELECT COUNT(*) AS games_played FROM Scores WHERE player_id = [PLAYER_ID];"}
{"prompt": "Has this player ever been reported by others?", "response": "sql SELECT COUNT(*) FROM Reports WHERE reported_player_id = [PLAYER_ID];"}
{"prompt": "What are the issues this player has been reported for, if any?", "response": "sql SELECT reason, reported_at FROM Reports WHERE reported_player_id = [PLAYER_ID];"}
{"prompt": "Which developers are responsible for the game BattleQuest?", "response": "sql SELECT D.name, D.company FROM Games G JOIN Developers D ON G.developer_id = D.developer_id WHERE G.title = 'BattleQuest';"}
{"prompt": "What are the total rewards earned by this player across all types?", "response": "sql SELECT SUM(amount) AS total_rewards FROM Rewards WHERE player_id = [PLAYER_ID];"}
{"prompt": "Show all tournaments that offered a prize pool above 10,000.", "response": "sql SELECT name, prize_pool FROM Tournaments WHERE prize_pool > 10000;"}
{"prompt": "List all the rewards this player has received.", "response": "sql SELECT reward_type, amount, issued_date FROM Rewards WHERE player_id = [PLAYER_ID];"}
{"prompt": "Has the player faced any technical issues during recent tournaments? (Assume issues are logged via reports)", "response": "sql SELECT reason, reported_at FROM Reports WHERE reported_player_id = [PLAYER_ID] AND reason LIKE '%technical%';"}
{"prompt": "Provide the average score for this player.", "response": "sql SELECT AVG(score) AS average_score FROM Scores WHERE player_id = [PLAYER_ID];"}
{"prompt": "Who are the top 10 ranked players right now?", "response": "sql SELECT username, ranking FROM Players ORDER BY ranking ASC LIMIT 10;"}
{"prompt": "Did the player's ranking improve after the last tournament? (Assuming we store snapshots manually or infer change via score data)", "response": "(Needs time-based snapshot tracking or audit logs, not in current schema)"}
{"prompt": "Show me all the leaderboard disputes reported in the last 7 days.", "response": "sql SELECT R.report_id, RP.username AS reported_player, R.reason, R.status FROM Reports R JOIN Players RP ON R.reported_player_id = RP.player_id WHERE R.reason LIKE '%leaderboard%' AND R.reported_at >= NOW() - INTERVAL '7 days';"}
{"prompt": "How many total players are registered in the system?", "response": "sql SELECT COUNT(*) AS total_players FROM Players;"}
{"prompt": "Community Managers", "response": "nan"}
{"prompt": "How many players have joined the BattleQuest community in the last 30 days?", "response": "sql SELECT COUNT(*) FROM Players WHERE join_date >= NOW() - INTERVAL '30 days';"}
{"prompt": "Who are the top 10 players on the current leaderboard?", "response": "sql SELECT username, ranking FROM Players ORDER BY ranking ASC LIMIT 10;"}
{"prompt": "Which countries have the most active players in BattleQuest?", "response": "sql SELECT country, COUNT(*) AS player_count FROM Players GROUP BY country ORDER BY player_count DESC;"}
{"prompt": "Who are the top 5 scorers in the latest tournament?", "response": "sql SELECT P.username, TP.position FROM TournamentParticipants TP JOIN Players P ON TP.player_id = P.player_id WHERE TP.tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1) ORDER BY TP.position ASC LIMIT 5;"}
{"prompt": "What rewards did players receive in the latest tournament?", "response": "sql SELECT P.username, TP.reward FROM TournamentParticipants TP JOIN Players P ON TP.player_id = P.player_id WHERE TP.tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "How many players participated in the last tournament?", "response": "sql SELECT COUNT(*) FROM TournamentParticipants WHERE tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "What was the prize pool of the most recent tournament?", "response": "sql SELECT prize_pool FROM Tournaments ORDER BY end_date DESC LIMIT 1;"}
{"prompt": "Which players have shown consistent top rankings across multiple tournaments?", "response": "sql SELECT player_id, COUNT(*) AS top_positions FROM TournamentParticipants WHERE position <= 10 GROUP BY player_id HAVING COUNT(*) >= 3;"}
{"prompt": "Which players have scored over 10,000 in any game?", "response": "sql SELECT DISTINCT P.username FROM Scores S JOIN Players P ON S.player_id = P.player_id WHERE S.score > 10000;"}
{"prompt": "Who joined BattleQuest in the first week of this month?", "response": "sql SELECT username, join_date FROM Players WHERE DATE_TRUNC('month', join_date) = DATE_TRUNC('month', CURRENT_DATE) AND join_date <= CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Which players have received the highest reward amounts?", "response": "sql SELECT P.username, SUM(R.amount) AS total_rewards FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.username ORDER BY total_rewards DESC LIMIT 10;"}
{"prompt": "Who earned a reward in the past 7 days?", "response": "sql SELECT P.username, R.reward_type, R.amount FROM Rewards R JOIN Players P ON R.player_id = P.player_id WHERE R.issued_date >= NOW() - INTERVAL '7 days';"}
{"prompt": "Who submitted feedback or reports recently?", "response": "sql SELECT P.username, R.reason, R.reported_at FROM Reports R JOIN Players P ON R.reported_by = P.player_id ORDER BY R.reported_at DESC LIMIT 10;"}
{"prompt": "What types of issues are players most frequently reporting?", "response": "sql SELECT reason, COUNT(*) AS frequency FROM Reports GROUP BY reason ORDER BY frequency DESC;"}
{"prompt": "Which players were reported more than 2 times?", "response": "sql SELECT P.username, COUNT(*) AS reports FROM Reports R JOIN Players P ON R.reported_player_id = P.player_id GROUP BY P.username HAVING COUNT(*) > 2;"}
{"prompt": "List the top 3 most popular game genres among players.", "response": "sql SELECT genre, COUNT(*) AS game_count FROM Games GROUP BY genre ORDER BY game_count DESC LIMIT 3;"}
{"prompt": "Who are the developers of the most-played games? (Assuming play counts tracked via Scores)", "response": "sql SELECT D.name, D.company, COUNT(*) AS play_count FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Developers D ON G.developer_id = D.developer_id GROUP BY D.name, D.company ORDER BY play_count DESC LIMIT 3;"}
{"prompt": "What are the latest rewards issued across all players?", "response": "sql SELECT P.username, R.reward_type, R.amount, R.issued_date FROM Rewards R JOIN Players P ON R.player_id = P.player_id ORDER BY R.issued_date DESC LIMIT 10;"}
{"prompt": "Which player has earned the highest single score ever?", "response": "sql SELECT P.username, S.score FROM Scores S JOIN Players P ON S.player_id = P.player_id ORDER BY S.score DESC LIMIT 1;"}
{"prompt": "How many total players are currently ranked in the system?", "response": "sql SELECT COUNT(*) FROM Players WHERE ranking IS NOT NULL;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "How many new players joined in the last 7 days?", "response": "sql SELECT COUNT(*) FROM Players WHERE join_date >= NOW() - INTERVAL '7 days';"}
{"prompt": "What’s the total number of registered BattleQuest players?", "response": "sql SELECT COUNT(*) FROM Players;"}
{"prompt": "Which countries have the most new player signups this month?", "response": "sql SELECT country, COUNT(*) AS new_signups FROM Players WHERE DATE_TRUNC('month', join_date) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY country ORDER BY new_signups DESC;"}
{"prompt": "Who are the top 10 most active players based on total scores submitted?", "response": "sql SELECT P.username, COUNT(S.score_id) AS total_scores FROM Scores S JOIN Players P ON S.player_id = P.player_id GROUP BY P.username ORDER BY total_scores DESC LIMIT 10;"}
{"prompt": "What are the most played games based on total scores?", "response": "sql SELECT G.title, COUNT(*) AS play_count FROM Scores S JOIN Games G ON S.game_id = G.game_id GROUP BY G.title ORDER BY play_count DESC LIMIT 5;"}
{"prompt": "How many players participated in tournaments this quarter?", "response": "sql SELECT COUNT(DISTINCT player_id) FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id WHERE T.start_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which recent tournaments had the highest participation?", "response": "sql SELECT T.name, COUNT(TP.player_id) AS participant_count FROM TournamentParticipants TP JOIN Tournaments T ON TP.tournament_id = T.tournament_id GROUP BY T.name ORDER BY participant_count DESC LIMIT 5;"}
{"prompt": "What’s the total reward amount distributed in the last tournament?", "response": "sql SELECT SUM(reward) AS total_reward FROM TournamentParticipants WHERE tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "Which players earned the highest rewards this season?", "response": "sql SELECT P.username, SUM(R.amount) AS total_earned FROM Rewards R JOIN Players P ON R.player_id = P.player_id WHERE R.issued_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY P.username ORDER BY total_earned DESC LIMIT 10;"}
{"prompt": "How many players received rewards in the last 30 days?", "response": "sql SELECT COUNT(DISTINCT player_id) FROM Rewards WHERE issued_date >= NOW() - INTERVAL '30 days';"}
{"prompt": "Who earned more than 500 in total rewards?", "response": "sql SELECT P.username, SUM(R.amount) AS total_rewards FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.username HAVING SUM(R.amount) > 500;"}
{"prompt": "Which developers have the highest-played games?", "response": "sql SELECT D.name, COUNT(*) AS play_count FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Developers D ON G.developer_id = D.developer_id GROUP BY D.name ORDER BY play_count DESC LIMIT 5;"}
{"prompt": "How many reports have been filed in the past week?", "response": "sql SELECT COUNT(*) FROM Reports WHERE reported_at >= NOW() - INTERVAL '7 days';"}
{"prompt": "What are the most common reasons players are reporting others?", "response": "sql SELECT reason, COUNT(*) AS frequency FROM Reports GROUP BY reason ORDER BY frequency DESC LIMIT 5;"}
{"prompt": "Which game genres are currently most popular among players?", "response": "sql SELECT genre, COUNT(*) AS genre_count FROM Games G JOIN Scores S ON G.game_id = S.game_id GROUP BY genre ORDER BY genre_count DESC LIMIT 3;"}
{"prompt": "How many tournaments were held this year so far?", "response": "sql SELECT COUNT(*) FROM Tournaments WHERE start_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "What was the average prize pool for tournaments last quarter?", "response": "sql SELECT AVG(prize_pool) AS avg_pool FROM Tournaments WHERE start_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter' AND start_date < DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which players improved their ranking significantly after the last tournament?", "response": "(Not directly trackable without ranking history/snapshot table; schema needs enhancement for this)"}
{"prompt": "What’s the average number of games played per player?", "response": "sql SELECT AVG(game_count) FROM (SELECT COUNT(*) AS game_count FROM Scores GROUP BY player_id) AS counts;"}
{"prompt": "Which players have participated in the most tournaments?", "response": "sql SELECT P.username, COUNT(*) AS tournaments_played FROM TournamentParticipants TP JOIN Players P ON TP.player_id = P.player_id GROUP BY P.username ORDER BY tournaments_played DESC LIMIT 10;"}
{"prompt": "Finance / Rewards Management Staff", "response": "nan"}
{"prompt": "How much total reward money has been issued this season?", "response": "sql SELECT SUM(amount) FROM Rewards WHERE issued_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "How many players received rewards in the last tournament?", "response": "sql SELECT COUNT(DISTINCT player_id) FROM TournamentParticipants WHERE tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "What’s the total reward payout for the most recent tournament?", "response": "sql SELECT SUM(reward) FROM TournamentParticipants WHERE tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "Which players received more than 1000 in total rewards?", "response": "sql SELECT player_id, SUM(amount) AS total_rewards FROM Rewards GROUP BY player_id HAVING SUM(amount) > 1000;"}
{"prompt": "What is the average reward issued per player this season?", "response": "sql SELECT AVG(amount) FROM Rewards WHERE issued_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "List top 5 players who earned the highest total rewards.", "response": "sql SELECT P.username, SUM(R.amount) AS total_rewards FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.username ORDER BY total_rewards DESC LIMIT 5;"}
{"prompt": "How many rewards have been issued in the past month?", "response": "sql SELECT COUNT(*) FROM Rewards WHERE issued_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the total prize pool distributed in the last 6 months?", "response": "sql SELECT SUM(prize_pool) FROM Tournaments WHERE end_date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "What’s the average reward per participant in the last tournament?", "response": "sql SELECT AVG(reward) FROM TournamentParticipants WHERE tournament_id = (SELECT tournament_id FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "How many players earned rewards from more than one tournament?", "response": "sql SELECT player_id FROM TournamentParticipants GROUP BY player_id HAVING COUNT(DISTINCT tournament_id) > 1;"}
{"prompt": "Which tournaments had a prize pool greater than 10,000?", "response": "sql SELECT name, prize_pool FROM Tournaments WHERE prize_pool > 10000;"}
{"prompt": "What is the total number of unique players who received any reward?", "response": "sql SELECT COUNT(DISTINCT player_id) FROM Rewards;"}
{"prompt": "Which countries have the highest number of rewarded players?", "response": "sql SELECT P.country, COUNT(DISTINCT R.player_id) AS rewarded_players FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.country ORDER BY rewarded_players DESC;"}
{"prompt": "What is the trend of reward distribution over the past 6 months?", "response": "sql SELECT DATE_TRUNC('month', issued_date) AS month, SUM(amount) AS total_issued FROM Rewards WHERE issued_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "What is the average reward per player by country?", "response": "sql SELECT P.country, AVG(R.amount) AS avg_reward FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.country ORDER BY avg_reward DESC;"}
{"prompt": "List players who earned rewards but never participated in tournaments.", "response": "sql SELECT DISTINCT R.player_id FROM Rewards R WHERE R.player_id NOT IN (SELECT player_id FROM TournamentParticipants);"}
{"prompt": "How many tournaments offered a prize pool between 5,000 and 20,000?", "response": "sql SELECT COUNT(*) FROM Tournaments WHERE prize_pool BETWEEN 5000 AND 20000;"}
{"prompt": "Which players got the highest position (1st place) in tournaments and their rewards?", "response": "sql SELECT P.username, TP.reward FROM TournamentParticipants TP JOIN Players P ON TP.player_id = P.player_id WHERE TP.position = 1;"}
{"prompt": "What is the total amount of reward issued on the busiest reward day?", "response": "sql SELECT issued_date, SUM(amount) AS total_issued FROM Rewards GROUP BY issued_date ORDER BY total_issued DESC LIMIT 1;"}
{"prompt": "How many rewards were issued per tournament on average?", "response": "sql SELECT AVG(reward_count) FROM (SELECT tournament_id, COUNT(*) AS reward_count FROM TournamentParticipants GROUP BY tournament_id) AS sub;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which time periods had the highest number of score submissions?", "response": "sql SELECT DATE_TRUNC('hour', achieved_at) AS hour_block, COUNT(*) AS score_count FROM Scores GROUP BY hour_block ORDER BY score_count DESC;"}
{"prompt": "What’s the total number of score records in the database?", "response": "sql SELECT COUNT(*) FROM Scores;"}
{"prompt": "How many unique players submitted scores during the last tournament?", "response": "sql SELECT COUNT(DISTINCT player_id) FROM Scores WHERE achieved_at BETWEEN (SELECT start_date FROM Tournaments ORDER BY end_date DESC LIMIT 1) AND (SELECT end_date FROM Tournaments ORDER BY end_date DESC LIMIT 1);"}
{"prompt": "Which games generate the most scoring activity?", "response": "sql SELECT G.title, COUNT(S.score_id) AS score_count FROM Scores S JOIN Games G ON S.game_id = G.game_id GROUP BY G.title ORDER BY score_count DESC;"}
{"prompt": "How many score updates were made today?", "response": "sql SELECT COUNT(*) FROM Scores WHERE achieved_at::date = CURRENT_DATE;"}
{"prompt": "Are there any scores submitted by players who are not in the Players table?", "response": "sql SELECT score_id FROM Scores WHERE player_id NOT IN (SELECT player_id FROM Players);"}
{"prompt": "Which player submitted the highest score and in which game?", "response": "sql SELECT P.username, G.title, S.score FROM Scores S JOIN Players P ON S.player_id = P.player_id JOIN Games G ON S.game_id = G.game_id ORDER BY S.score DESC LIMIT 1;"}
{"prompt": "How frequently are scores submitted (average per day)?", "response": "sql SELECT COUNT(*) / COUNT(DISTINCT achieved_at::date) AS avg_scores_per_day FROM Scores;"}
{"prompt": "List peak hours of leaderboard activity based on score submissions.", "response": "sql SELECT EXTRACT(HOUR FROM achieved_at) AS hour, COUNT(*) AS score_count FROM Scores GROUP BY hour ORDER BY score_count DESC;"}
{"prompt": "What is the average system load implied by score submissions per minute during the last tournament?", "response": "sql SELECT COUNT(*) / EXTRACT(EPOCH FROM (end_date - start_date)) * 60 AS scores_per_minute FROM Scores, (SELECT start_date, end_date FROM Tournaments ORDER BY end_date DESC LIMIT 1) AS T WHERE achieved_at BETWEEN T.start_date AND T.end_date;"}
{"prompt": "Which players are submitting the most scores (possible spam/bot check)?", "response": "sql SELECT player_id, COUNT(*) AS score_count FROM Scores GROUP BY player_id ORDER BY score_count DESC LIMIT 10;"}
{"prompt": "Are there any duplicate score entries (same player, game, and timestamp)?", "response": "sql SELECT player_id, game_id, achieved_at, COUNT(*) FROM Scores GROUP BY player_id, game_id, achieved_at HAVING COUNT(*) > 1;"}
{"prompt": "How many distinct games have active score submissions?", "response": "sql SELECT COUNT(DISTINCT game_id) FROM Scores;"}
{"prompt": "Which day saw the maximum number of score updates?", "response": "sql SELECT achieved_at::date AS day, COUNT(*) AS score_count FROM Scores GROUP BY day ORDER BY score_count DESC LIMIT 1;"}
{"prompt": "Show failed leaderboard sync attempts (if applicable) – assume we mark failures via NULL scores.", "response": "sql SELECT * FROM Scores WHERE score IS NULL;"}
{"prompt": "What are the top 5 peak leaderboard activity days in terms of score count?", "response": "sql SELECT achieved_at::date AS day, COUNT(*) AS score_count FROM Scores GROUP BY day ORDER BY score_count DESC LIMIT 5;"}
{"prompt": "What is the total number of tournaments hosted to date?", "response": "sql SELECT COUNT(*) FROM Tournaments;"}
{"prompt": "What’s the number of score entries per tournament timeframe?", "response": "sql SELECT T.name, COUNT(S.score_id) AS score_count FROM Tournaments T JOIN Scores S ON S.achieved_at BETWEEN T.start_date AND T.end_date GROUP BY T.name ORDER BY score_count DESC;"}
{"prompt": "Are any developers associated with games that have no scores?", "response": "sql SELECT D.name FROM Developers D WHERE developer_id IN (SELECT developer_id FROM Games WHERE game_id NOT IN (SELECT DISTINCT game_id FROM Scores));"}
{"prompt": "Which country has the most leaderboard activity (via scores submitted)?", "response": "sql SELECT P.country, COUNT(S.score_id) AS total_scores FROM Scores S JOIN Players P ON S.player_id = P.player_id GROUP BY P.country ORDER BY total_scores DESC;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which players have shown the highest increase in score over time?", "response": "sql SELECT player_id, MAX(score) - MIN(score) AS score_growth FROM Scores GROUP BY player_id ORDER BY score_growth DESC LIMIT 10;"}
{"prompt": "What is the average score per game?", "response": "sql SELECT game_id, AVG(score) AS average_score FROM Scores GROUP BY game_id;"}
{"prompt": "Which countries have the highest average player ranking?", "response": "sql SELECT country, AVG(ranking) AS avg_rank FROM Players GROUP BY country ORDER BY avg_rank ASC;"}
{"prompt": "What is the total number of active players per country?", "response": "sql SELECT country, COUNT(*) AS player_count FROM Players GROUP BY country ORDER BY player_count DESC;"}
{"prompt": "What are the average scores achieved during tournaments vs. regular play?", "response": "sql SELECT 'Tournament' AS type, AVG(S.score) AS avg_score FROM Scores S JOIN Tournaments T ON S.achieved_at BETWEEN T.start_date AND T.end_date UNION SELECT 'Regular' AS type, AVG(score) FROM Scores WHERE achieved_at NOT BETWEEN (SELECT MIN(start_date) FROM Tournaments) AND (SELECT MAX(end_date) FROM Tournaments);"}
{"prompt": "How does score distribution vary across different game genres?", "response": "sql SELECT G.genre, AVG(S.score) AS avg_score FROM Scores S JOIN Games G ON S.game_id = G.game_id GROUP BY G.genre ORDER BY avg_score DESC;"}
{"prompt": "Which tournaments had the highest number of participants?", "response": "sql SELECT T.name, COUNT(TP.player_id) AS participants FROM Tournaments T JOIN TournamentParticipants TP ON T.tournament_id = TP.tournament_id GROUP BY T.name ORDER BY participants DESC;"}
{"prompt": "What are the top 5 most rewarding tournaments based on prize_pool?", "response": "sql SELECT name, prize_pool FROM Tournaments ORDER BY prize_pool DESC LIMIT 5;"}
{"prompt": "Which players have earned the highest total rewards?", "response": "sql SELECT player_id, SUM(amount) AS total_rewards FROM Rewards GROUP BY player_id ORDER BY total_rewards DESC LIMIT 10;"}
{"prompt": "How many players earned rewards in the past month?", "response": "sql SELECT COUNT(DISTINCT player_id) FROM Rewards WHERE issued_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the average leaderboard ranking of players who participated in tournaments?", "response": "sql SELECT AVG(P.ranking) AS avg_ranking FROM TournamentParticipants TP JOIN Players P ON TP.player_id = P.player_id;"}
{"prompt": "Which game has the highest player engagement based on total scores submitted?", "response": "sql SELECT G.title, COUNT(S.score_id) AS total_scores FROM Scores S JOIN Games G ON S.game_id = G.game_id GROUP BY G.title ORDER BY total_scores DESC LIMIT 1;"}
{"prompt": "What percentage of players have participated in at least one tournament?", "response": "sql SELECT ROUND((COUNT(DISTINCT TP.player_id) * 100.0) / (SELECT COUNT(*) FROM Players), 2) AS participation_percentage FROM TournamentParticipants TP;"}
{"prompt": "Are there any developers whose games have consistently high scoring patterns?", "response": "sql SELECT D.name, AVG(S.score) AS avg_score FROM Scores S JOIN Games G ON S.game_id = G.game_id JOIN Developers D ON G.developer_id = D.developer_id GROUP BY D.name ORDER BY avg_score DESC;"}
{"prompt": "What are the common reasons players are reported, and how frequently?", "response": "sql SELECT reason, COUNT(*) AS report_count FROM Reports GROUP BY reason ORDER BY report_count DESC;"}
{"prompt": "How many reports are still unresolved?", "response": "sql SELECT COUNT(*) FROM Reports WHERE status NOT IN ('Resolved', 'Closed');"}
{"prompt": "When do player activities (score submissions) peak during the day?", "response": "sql SELECT EXTRACT(HOUR FROM achieved_at) AS hour, COUNT(*) AS score_count FROM Scores GROUP BY hour ORDER BY score_count DESC;"}
{"prompt": "What is the trend in new player registrations over the last 6 months?", "response": "sql SELECT DATE_TRUNC('month', join_date) AS month, COUNT(*) AS new_players FROM Players WHERE join_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "How does player ranking correlate with reward earnings?", "response": "sql SELECT P.ranking, SUM(R.amount) AS total_rewards FROM Rewards R JOIN Players P ON R.player_id = P.player_id GROUP BY P.ranking ORDER BY P.ranking ASC;"}
{"prompt": "Which players have been reported the most?", "response": "sql SELECT reported_player_id, COUNT(*) AS total_reports FROM Reports GROUP BY reported_player_id ORDER BY total_reports DESC LIMIT 5;"}
{"prompt": "TicketingSystem", "response": "nan"}
{"prompt": "Customers / Ticket Buyers", "response": "nan"}
{"prompt": "I recently bought a ticket for a concert. Can you show me the event details like venue, time, and organizer? (Riya's POV)", "response": "SELECT E.name AS event_name, E.start_datetime, E.end_datetime, V.name AS venue_name, O.name AS organizer_name FROM Tickets T JOIN Events E ON T.event_id = E.event_id JOIN Venues V ON E.venue_id = V.venue_id JOIN Organizers O ON E.organizer_id = O.organizer_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Riya' AND T.status = 'confirmed' ORDER BY T.purchase_date DESC LIMIT 1;"}
{"prompt": "Can I see the status of all my purchased tickets? (Riya's POV)", "response": "SELECT T.ticket_id, T.status, T.purchase_date, E.name AS event_name FROM Tickets T JOIN Events E ON T.event_id = E.event_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Riya';"}
{"prompt": "I want to see all upcoming events I’m organizing. (Arjun's POV)", "response": "SELECT name, start_datetime, end_datetime, status FROM Events WHERE organizer_id = (SELECT organizer_id FROM Organizers WHERE name = 'Arjun') AND start_datetime > CURRENT_TIMESTAMP;"}
{"prompt": "Can I view all the events I’ve attended before? (Meena's POV)", "response": "SELECT E.name, E.start_datetime, E.category FROM Tickets T JOIN Events E ON T.event_id = E.event_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Meena' AND E.end_datetime < CURRENT_TIMESTAMP;"}
{"prompt": "Show me unresolved security issues for any event. (David - Security Head)", "response": "SELECT log_id, event_id, issue_description, timestamp FROM SecurityLogs WHERE resolved = FALSE;"}
{"prompt": "Have I submitted any feedback for past events? (Riya's POV)", "response": "SELECT E.name, F.rating, F.comment, F.submitted_at FROM Feedback F JOIN Events E ON F.event_id = E.event_id JOIN Customers C ON F.customer_id = C.customer_id WHERE C.name = 'Riya';"}
{"prompt": "List all events scheduled at my venue next week. (Venue Manager's POV)", "response": "SELECT E.name, E.start_datetime, E.end_datetime FROM Events E JOIN Venues V ON E.venue_id = V.venue_id WHERE V.manager_id = [manager_id] AND E.start_datetime BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "What are the payment methods I’ve used recently? (Ravi's POV)", "response": "SELECT DISTINCT method FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Ravi';"}
{"prompt": "Show me all events I’m assigned to. (Neha - Agent)", "response": "SELECT name, start_datetime FROM Events WHERE event_id IN (SELECT CAST(value AS INT) FROM UNNEST(string_to_array((SELECT assigned_events FROM Agents WHERE name = 'Neha'), ',')) AS value);"}
{"prompt": "How many tickets have been sold for each upcoming event? (Organizer Team POV)", "response": "SELECT E.name, COUNT(T.ticket_id) AS tickets_sold FROM Events E LEFT JOIN Tickets T ON E.event_id = T.event_id WHERE E.start_datetime > CURRENT_TIMESTAMP GROUP BY E.name;"}
{"prompt": "What’s the average rating for the concert I attended last week? (Anjali's POV)", "response": "SELECT AVG(rating) FROM Feedback F JOIN Events E ON F.event_id = E.event_id JOIN Customers C ON F.customer_id = C.customer_id WHERE C.name = 'Anjali' AND E.end_datetime BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Show total revenue from confirmed ticket payments. (Ticketing Admin POV)", "response": "SELECT SUM(P.amount) AS total_revenue FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id WHERE T.status = 'confirmed';"}
{"prompt": "Show me the feedback I gave along with event names. (Riya's POV)", "response": "SELECT E.name, F.rating, F.comment FROM Feedback F JOIN Events E ON F.event_id = E.event_id JOIN Customers C ON F.customer_id = C.customer_id WHERE C.name = 'Riya';"}
{"prompt": "List all payments made through credit card last month. (Vikram - Finance)", "response": "SELECT P.payment_id, P.amount, P.payment_date FROM Payments P WHERE P.method = 'Credit Card' AND P.payment_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "I want to know how much I’ve spent on tickets overall. (Aarav's POV)", "response": "SELECT SUM(P.amount) AS total_spent FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Aarav';"}
{"prompt": "How many events are scheduled at my venue this month? (Venue Manager's POV)", "response": "SELECT COUNT(*) FROM Events E JOIN Venues V ON E.venue_id = V.venue_id WHERE V.manager_id = [manager_id] AND EXTRACT(MONTH FROM E.start_datetime) = EXTRACT(MONTH FROM CURRENT_DATE);"}
{"prompt": "Did I buy tickets for any event that got cancelled? (Riya's POV)", "response": "SELECT E.name, E.status FROM Tickets T JOIN Events E ON T.event_id = E.event_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Riya' AND E.status = 'cancelled';"}
{"prompt": "What’s the feedback summary for each event I organized? (Arjun's POV)", "response": "SELECT E.name, AVG(F.rating) AS avg_rating FROM Events E JOIN Feedback F ON E.event_id = F.event_id WHERE E.organizer_id = (SELECT organizer_id FROM Organizers WHERE name = 'Arjun') GROUP BY E.name;"}
{"prompt": "List security logs that happened during an ongoing event. (Security Officer's POV)", "response": "SELECT SL.* FROM SecurityLogs SL JOIN Events E ON SL.event_id = E.event_id WHERE CURRENT_TIMESTAMP BETWEEN E.start_datetime AND E.end_datetime;"}
{"prompt": "Can I get my most recent ticket and payment details? (Riya's POV)", "response": "SELECT T.ticket_id, E.name AS event_name, P.amount, P.payment_date FROM Tickets T JOIN Events E ON T.event_id = E.event_id JOIN Payments P ON T.ticket_id = P.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE C.name = 'Riya' ORDER BY P.payment_date DESC LIMIT 1;"}
{"prompt": "Event Organizers", "response": "nan"}
{"prompt": "How many tickets have been sold for my upcoming tech conference?", "response": "SELECT COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference' AND organizer_id = (SELECT organizer_id FROM Organizers WHERE name = 'Aman'));"}
{"prompt": "What is the total revenue from ticket sales for my event?", "response": "SELECT SUM(P.amount) AS total_revenue FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference' AND organizer_id = (SELECT organizer_id FROM Organizers WHERE name = 'Aman'));"}
{"prompt": "Can I get a breakdown of ticket sales by ticket status?", "response": "SELECT status, COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') GROUP BY status;"}
{"prompt": "How many attendees chose the VIP ticket?", "response": "SELECT COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') AND price >= 5000;"}
{"prompt": "What’s the list of attendees with confirmed tickets?", "response": "SELECT C.name, C.email, C.phone FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') AND T.status = 'confirmed';"}
{"prompt": "Show me the customer details who bought early bird tickets (priced below ₹2000).", "response": "SELECT C.name, C.email FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') AND T.price < 2000;"}
{"prompt": "How many students have registered using student discount tickets (below ₹1000)?", "response": "SELECT COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') AND price < 1000;"}
{"prompt": "Which ticket types are the most popular based on price ranges?", "response": "SELECT price, COUNT(*) AS ticket_count FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') GROUP BY price ORDER BY ticket_count DESC;"}
{"prompt": "What is the average ticket price for my event?", "response": "SELECT AVG(price) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "Are there any security incidents logged during my event?", "response": "SELECT issue_description, timestamp FROM SecurityLogs WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "How many payments have been made for my event, and which methods were used?", "response": "SELECT method, COUNT(*) FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') GROUP BY method;"}
{"prompt": "What is the feedback summary from attendees of my event?", "response": "SELECT AVG(rating) AS avg_rating, COUNT(*) AS total_feedback FROM Feedback WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "Can I view individual feedback comments from attendees?", "response": "SELECT C.name, F.rating, F.comment FROM Feedback F JOIN Customers C ON F.customer_id = C.customer_id WHERE F.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "Which agents were assigned to my event?", "response": "SELECT name, email FROM Agents WHERE assigned_events LIKE CONCAT('%,', (SELECT event_id FROM Events WHERE name = 'Tech Conference'), ',%') OR assigned_events LIKE CONCAT((SELECT event_id FROM Events WHERE name = 'Tech Conference'), ',%') OR assigned_events LIKE CONCAT('%,', (SELECT event_id FROM Events WHERE name = 'Tech Conference')) OR assigned_events = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "What is the venue capacity for my event?", "response": "SELECT V.name, V.capacity FROM Venues V JOIN Events E ON V.venue_id = E.venue_id WHERE E.name = 'Tech Conference';"}
{"prompt": "List all tickets purchased in the last 7 days for my event.", "response": "SELECT T.ticket_id, C.name, T.purchase_date FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') AND T.purchase_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Can I export a list of attendees with their payment details?", "response": "SELECT C.name, C.email, P.amount, P.method FROM Tickets T JOIN Payments P ON T.ticket_id = P.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "Are there any unresolved security issues from my event?", "response": "SELECT issue_description, timestamp FROM SecurityLogs WHERE resolved = FALSE AND event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference');"}
{"prompt": "Show a time-wise breakdown of ticket purchases to monitor peak registration times.", "response": "SELECT EXTRACT(HOUR FROM purchase_date) AS hour_of_day, COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') GROUP BY hour_of_day ORDER BY hour_of_day;"}
{"prompt": "What’s the number of group tickets (price > ₹10,000) sold?", "response": "SELECT COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'Tech Conference') AND price > 10000;"}
{"prompt": "Ticketing Agents", "response": "nan"}
{"prompt": "Which events are scheduled to happen this week at the auditorium?", "response": "SELECT name, start_datetime, end_datetime FROM Events WHERE start_datetime >= CURRENT_DATE AND start_datetime < CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Show all customers who booked tickets today.", "response": "SELECT C.name, C.email FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id WHERE T.purchase_date = CURRENT_DATE;"}
{"prompt": "How many available seats remain for the upcoming play?", "response": "SELECT V.capacity - COUNT(T.ticket_id) AS available_seats FROM Events E JOIN Venues V ON E.venue_id = V.venue_id JOIN Tickets T ON E.event_id = T.event_id WHERE E.name = 'Children’s Play' GROUP BY V.capacity;"}
{"prompt": "Which customers received senior citizen discounts (ticket price < ₹500)?", "response": "SELECT C.name, T.price FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id WHERE T.price < 500;"}
{"prompt": "Get me the list of customers who booked seats near the exit (section-specific filter hypothetical).", "response": "Schema doesn’t support seat section data directly, so this is not applicable unless extended."}
{"prompt": "Show all ticket purchases that happened at the venue counter today.", "response": "Schema doesn’t track source (online vs counter), so this is not applicable without extension."}
{"prompt": "Can I get details of a customer who requested a ticket exchange?", "response": "Schema doesn’t track exchanges directly; requires new table or flag."}
{"prompt": "List all customers who booked more than one ticket for a single event.", "response": "SELECT customer_id, event_id, COUNT(*) AS ticket_count FROM Tickets GROUP BY customer_id, event_id HAVING COUNT(*) > 1;"}
{"prompt": "Are there any suspicious payments (above ₹10,000)?", "response": "SELECT P.payment_id, C.name, P.amount FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE P.amount > 10000;"}
{"prompt": "Which events are sold out?", "response": "SELECT E.name FROM Events E JOIN Venues V ON E.venue_id = V.venue_id JOIN Tickets T ON E.event_id = T.event_id GROUP BY E.event_id, E.name, V.capacity HAVING COUNT(T.ticket_id) >= V.capacity;"}
{"prompt": "Get me a list of all failed or pending payments.", "response": "SELECT P.payment_id, C.name, P.status FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE P.status IN ('failed', 'pending');"}
{"prompt": "What is the total number of attendees for today’s events?", "response": "SELECT COUNT(*) AS total_attendees FROM Tickets T JOIN Events E ON T.event_id = E.event_id WHERE DATE(E.start_datetime) = CURRENT_DATE;"}
{"prompt": "Which customers have tickets for sports events?", "response": "SELECT DISTINCT C.name FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id JOIN Events E ON T.event_id = E.event_id WHERE E.category = 'Sports';"}
{"prompt": "Who were the last 5 customers who booked tickets?", "response": "SELECT C.name, T.purchase_date FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id ORDER BY T.purchase_date DESC LIMIT 5;"}
{"prompt": "Show me all tickets that were booked for events happening in Mumbai.", "response": "SELECT T.ticket_id, C.name, E.name AS event_name FROM Tickets T JOIN Customers C ON T.customer_id = C.customer_id JOIN Events E ON T.event_id = E.event_id JOIN Venues V ON E.venue_id = V.venue_id WHERE V.location = 'Mumbai';"}
{"prompt": "List customers who submitted feedback about the children’s play.", "response": "SELECT C.name, F.rating, F.comment FROM Feedback F JOIN Customers C ON F.customer_id = C.customer_id WHERE F.event_id = (SELECT event_id FROM Events WHERE name = 'Children’s Play');"}
{"prompt": "How many tickets were refunded or canceled for any event?", "response": "SELECT COUNT(*) FROM Tickets WHERE status IN ('refunded', 'canceled');"}
{"prompt": "What is the busiest hour for ticket purchases today?", "response": "SELECT EXTRACT(HOUR FROM purchase_date) AS hour, COUNT(*) AS purchases FROM Tickets WHERE purchase_date::date = CURRENT_DATE GROUP BY hour ORDER BY purchases DESC LIMIT 1;"}
{"prompt": "List all ongoing events right now.", "response": "SELECT name FROM Events WHERE start_datetime <= NOW() AND end_datetime >= NOW();"}
{"prompt": "Which customers made bookings using cash as a payment method?", "response": "SELECT DISTINCT C.name FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Customers C ON T.customer_id = C.customer_id WHERE P.method = 'cash';"}
{"prompt": "Venue Managers", "response": "nan"}
{"prompt": "What are the upcoming events scheduled at Sunset Arena?", "response": "SELECT name, start_datetime, end_datetime FROM Events WHERE venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') AND start_datetime > NOW();"}
{"prompt": "How many tickets have been sold for the next event at my venue?", "response": "SELECT COUNT(*) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') ORDER BY start_datetime LIMIT 1);"}
{"prompt": "Which event at Sunset Arena has the highest expected attendance?", "response": "SELECT E.name, COUNT(T.ticket_id) AS total_tickets FROM Events E JOIN Tickets T ON E.event_id = T.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') GROUP BY E.event_id, E.name ORDER BY total_tickets DESC LIMIT 1;"}
{"prompt": "Which upcoming events are likely to reach full capacity soon?", "response": "SELECT E.name, COUNT(T.ticket_id) AS sold, V.capacity FROM Events E JOIN Tickets T ON E.event_id = T.event_id JOIN Venues V ON E.venue_id = V.venue_id WHERE V.name = 'Sunset Arena' GROUP BY E.event_id, E.name, V.capacity HAVING COUNT(T.ticket_id) >= 0.9 * V.capacity;"}
{"prompt": "What is the total capacity of Sunset Arena?", "response": "SELECT capacity FROM Venues WHERE name = 'Sunset Arena';"}
{"prompt": "Show the real-time check-ins for today’s events at Sunset Arena.", "response": "Schema lacks check-in status directly; would require a new table or column like checked_in."}
{"prompt": "Which event had the most feedback from attendees at Sunset Arena?", "response": "SELECT E.name, COUNT(F.feedback_id) AS feedback_count FROM Events E JOIN Feedback F ON E.event_id = F.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') GROUP BY E.name ORDER BY feedback_count DESC LIMIT 1;"}
{"prompt": "What was the average rating for each event hosted at Sunset Arena?", "response": "SELECT E.name, ROUND(AVG(F.rating), 2) AS avg_rating FROM Events E JOIN Feedback F ON E.event_id = F.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') GROUP BY E.name;"}
{"prompt": "How many VIP tickets have been sold for the recent rock concert?", "response": "Assumes a 'VIP' keyword is in event or ticket info. If ticket type isn't tracked, this can't be filtered without schema extension."}
{"prompt": "Which organizer has hosted the most events at Sunset Arena?", "response": "SELECT O.name, COUNT(*) AS event_count FROM Events E JOIN Organizers O ON E.organizer_id = O.organizer_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') GROUP BY O.name ORDER BY event_count DESC LIMIT 1;"}
{"prompt": "Show all events held at Sunset Arena in the past 30 days.", "response": "SELECT name, start_datetime FROM Events WHERE venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') AND start_datetime >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "How much total revenue was generated from events at Sunset Arena?", "response": "SELECT SUM(P.amount) AS total_revenue FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Events E ON T.event_id = E.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena');"}
{"prompt": "List all events that exceeded venue capacity (overbooking).", "response": "SELECT E.name FROM Events E JOIN Tickets T ON E.event_id = T.event_id JOIN Venues V ON E.venue_id = V.venue_id WHERE V.name = 'Sunset Arena' GROUP BY E.event_id, E.name, V.capacity HAVING COUNT(T.ticket_id) > V.capacity;"}
{"prompt": "Which events at Sunset Arena had reported security issues?", "response": "SELECT DISTINCT E.name FROM Events E JOIN SecurityLogs S ON E.event_id = S.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena');"}
{"prompt": "What types of security issues were reported during recent events?", "response": "SELECT issue_description, COUNT(*) AS occurrences FROM SecurityLogs S JOIN Events E ON S.event_id = E.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') GROUP BY issue_description;"}
{"prompt": "How many events are scheduled this weekend at Sunset Arena?", "response": "SELECT COUNT(*) FROM Events WHERE venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') AND start_datetime::date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '2 days';"}
{"prompt": "Which gate (entry point) faced the most crowding during check-in?", "response": "Schema lacks gate-level entry/check-in logs—would require an extension to support this."}
{"prompt": "How many resolved vs unresolved security issues were reported at Sunset Arena?", "response": "SELECT resolved, COUNT(*) FROM SecurityLogs S JOIN Events E ON S.event_id = E.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') GROUP BY resolved;"}
{"prompt": "Which events at Sunset Arena received poor ratings (≤ 2)?", "response": "SELECT E.name, F.rating FROM Events E JOIN Feedback F ON E.event_id = F.event_id WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena') AND F.rating <= 2;"}
{"prompt": "Which agents are assigned to events at Sunset Arena?", "response": "SELECT DISTINCT A.name FROM Agents A JOIN Events E ON POSITION(CAST(E.event_id AS TEXT) IN A.assigned_events) > 0 WHERE E.venue_id = (SELECT venue_id FROM Venues WHERE name = 'Sunset Arena');"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Can I find all the tickets purchased by a customer who didn’t receive a confirmation email?", "response": "SELECT * FROM Tickets WHERE customer_id = (SELECT customer_id FROM Customers WHERE email = 'customer@example.com');"}
{"prompt": "Which customer hasn’t received their e-ticket yet (status is not 'Confirmed')?", "response": "SELECT C.name, C.email, T.status FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id WHERE T.status != 'Confirmed';"}
{"prompt": "Show the payment details for a ticket when a user calls with ticket ID.", "response": "SELECT * FROM Payments WHERE ticket_id = 1234;"}
{"prompt": "How can I verify if a customer’s payment went through for a specific ticket?", "response": "SELECT status FROM Payments WHERE ticket_id = 1234;"}
{"prompt": "List all bookings made today.", "response": "SELECT * FROM Tickets WHERE purchase_date = CURRENT_DATE;"}
{"prompt": "Which customers booked tickets for the music festival event?", "response": "SELECT C.name, C.email FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'Music Festival');"}
{"prompt": "What are the event details for a customer’s ticket if they don’t remember the event name?", "response": "SELECT E.name, E.start_datetime, E.venue_id FROM Events E JOIN Tickets T ON E.event_id = T.event_id WHERE T.customer_id = (SELECT customer_id FROM Customers WHERE email = 'customer@example.com');"}
{"prompt": "Which tickets have failed payments?", "response": "SELECT T.ticket_id, P.status FROM Tickets T JOIN Payments P ON T.ticket_id = P.ticket_id WHERE P.status != 'Success';"}
{"prompt": "Can I find the total number of tickets purchased by a customer so far?", "response": "SELECT COUNT(*) FROM Tickets WHERE customer_id = (SELECT customer_id FROM Customers WHERE email = 'customer@example.com');"}
{"prompt": "What is the total amount paid by a customer across all events?", "response": "SELECT SUM(P.amount) FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id WHERE T.customer_id = (SELECT customer_id FROM Customers WHERE email = 'customer@example.com');"}
{"prompt": "Which customers have requested refunds or ticket cancellations?", "response": "SELECT DISTINCT C.name, T.status FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id WHERE T.status = 'Cancelled';"}
{"prompt": "List all feedback submitted by a particular customer.", "response": "SELECT * FROM Feedback WHERE customer_id = (SELECT customer_id FROM Customers WHERE email = 'customer@example.com');"}
{"prompt": "Which event received the lowest feedback rating from customers recently?", "response": "SELECT E.name, AVG(F.rating) AS avg_rating FROM Feedback F JOIN Events E ON F.event_id = E.event_id GROUP BY E.name ORDER BY avg_rating ASC LIMIT 1;"}
{"prompt": "What is the average feedback rating received by Ticketerra events overall?", "response": "SELECT ROUND(AVG(rating), 2) FROM Feedback;"}
{"prompt": "How many open/unresolved security issues are pending for current events?", "response": "SELECT COUNT(*) FROM SecurityLogs WHERE resolved = FALSE;"}
{"prompt": "Which event currently has the most customer complaints (low ratings)?", "response": "SELECT E.name, COUNT(*) AS low_ratings FROM Events E JOIN Feedback F ON E.event_id = F.event_id WHERE F.rating <= 2 GROUP BY E.name ORDER BY low_ratings DESC LIMIT 1;"}
{"prompt": "How many tickets are purchased daily on average in the past 7 days?", "response": "SELECT ROUND(COUNT(*) / 7.0, 2) FROM Tickets WHERE purchase_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List customers who booked tickets but haven’t made payment yet.", "response": "SELECT C.name, C.email FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id LEFT JOIN Payments P ON T.ticket_id = P.ticket_id WHERE P.status IS NULL;"}
{"prompt": "What are the most commonly used payment methods?", "response": "SELECT method, COUNT(*) AS usage_count FROM Payments GROUP BY method ORDER BY usage_count DESC;"}
{"prompt": "Which events have customers given feedback about accessibility or seating issues?", "response": "SELECT DISTINCT E.name FROM Feedback F JOIN Events E ON F.event_id = E.event_id WHERE F.comment LIKE '%access%' OR F.comment LIKE '%seating%';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Which cities had the highest number of ticket sales for past events?", "response": "SELECT V.location, COUNT(*) AS total_sales FROM Tickets T JOIN Events E ON T.event_id = E.event_id JOIN Venues V ON E.venue_id = V.venue_id GROUP BY V.location ORDER BY total_sales DESC;"}
{"prompt": "What was the total revenue generated by each city?", "response": "SELECT V.location, SUM(P.amount) AS total_revenue FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id JOIN Events E ON T.event_id = E.event_id JOIN Venues V ON E.venue_id = V.venue_id GROUP BY V.location ORDER BY total_revenue DESC;"}
{"prompt": "Which events had the fastest ticket sales?", "response": "SELECT E.name, COUNT(*) AS ticket_count FROM Events E JOIN Tickets T ON E.event_id = T.event_id GROUP BY E.name ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "What is the sales trend over the last 30 days?", "response": "SELECT purchase_date, COUNT(*) AS daily_sales FROM Tickets WHERE purchase_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY purchase_date ORDER BY purchase_date;"}
{"prompt": "How many early-bird tickets were sold for the music tour?", "response": "SELECT COUNT(*) FROM Tickets WHERE status = 'Confirmed' AND price < (SELECT AVG(price) FROM Tickets WHERE event_id = (SELECT event_id FROM Events WHERE name = 'International Music Tour'));"}
{"prompt": "Which venues typically sell out the quickest?", "response": "SELECT V.name, COUNT(*) AS sold_tickets FROM Venues V JOIN Events E ON V.venue_id = E.venue_id JOIN Tickets T ON E.event_id = T.event_id GROUP BY V.name ORDER BY sold_tickets DESC LIMIT 5;"}
{"prompt": "What are the top 5 most purchased ticket categories by event type?", "response": "SELECT E.category, COUNT(T.ticket_id) AS total_tickets FROM Events E JOIN Tickets T ON E.event_id = T.event_id GROUP BY E.category ORDER BY total_tickets DESC LIMIT 5;"}
{"prompt": "Which customers bought tickets for multiple events in the past 60 days?", "response": "SELECT customer_id, COUNT(DISTINCT event_id) AS event_count FROM Tickets WHERE purchase_date >= CURRENT_DATE - INTERVAL '60 days' GROUP BY customer_id HAVING COUNT(DISTINCT event_id) > 1;"}
{"prompt": "Which events generated the highest revenue?", "response": "SELECT E.name, SUM(P.amount) AS revenue FROM Events E JOIN Tickets T ON E.event_id = T.event_id JOIN Payments P ON T.ticket_id = P.ticket_id GROUP BY E.name ORDER BY revenue DESC;"}
{"prompt": "What’s the average ticket price per event category?", "response": "SELECT E.category, ROUND(AVG(T.price), 2) AS avg_price FROM Events E JOIN Tickets T ON E.event_id = T.event_id GROUP BY E.category;"}
{"prompt": "Which customers were the first to buy tickets for a major event?", "response": "SELECT C.name, T.purchase_date FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id WHERE T.event_id = (SELECT event_id FROM Events WHERE name = 'International Music Tour') ORDER BY T.purchase_date ASC LIMIT 10;"}
{"prompt": "What percentage of tickets were sold through the early-access promo?", "response": "SELECT ROUND((COUNT(*) * 100.0) / (SELECT COUNT(*) FROM Tickets WHERE event_id = 101), 2) AS early_access_percent FROM Tickets WHERE event_id = 101 AND status = 'Confirmed' AND purchase_date < (SELECT start_datetime FROM Events WHERE event_id = 101);"}
{"prompt": "Which campaigns led to high ticket sales by payment method?", "response": "SELECT P.method, COUNT(*) AS total_sales FROM Payments P JOIN Tickets T ON P.ticket_id = T.ticket_id GROUP BY P.method ORDER BY total_sales DESC;"}
{"prompt": "Which events had more than 500 tickets sold but low average ratings?", "response": "SELECT E.name, COUNT(T.ticket_id) AS ticket_count, AVG(F.rating) AS avg_rating FROM Events E JOIN Tickets T ON E.event_id = T.event_id JOIN Feedback F ON E.event_id = F.event_id GROUP BY E.name HAVING COUNT(T.ticket_id) > 500 AND AVG(F.rating) < 3;"}
{"prompt": "Who are our most loyal customers based on ticket purchase count?", "response": "SELECT C.name, COUNT(T.ticket_id) AS total_tickets FROM Customers C JOIN Tickets T ON C.customer_id = T.customer_id GROUP BY C.name ORDER BY total_tickets DESC LIMIT 10;"}
{"prompt": "What was the total number of unique customers reached in the last 3 events?", "response": "SELECT COUNT(DISTINCT customer_id) FROM Tickets WHERE event_id IN (SELECT event_id FROM Events ORDER BY start_datetime DESC LIMIT 3);"}
{"prompt": "How many tickets were sold per price tier for an event?", "response": "SELECT price, COUNT(*) AS ticket_count FROM Tickets WHERE event_id = 101 GROUP BY price ORDER BY price;"}
{"prompt": "Which events had the highest number of first-time buyers?", "response": "SELECT E.name, COUNT(DISTINCT T.customer_id) AS new_buyers FROM Events E JOIN Tickets T ON E.event_id = T.event_id WHERE T.customer_id IN (SELECT customer_id FROM Tickets GROUP BY customer_id HAVING MIN(purchase_date) = MAX(purchase_date)) GROUP BY E.name ORDER BY new_buyers DESC;"}
{"prompt": "Which categories of events show the highest engagement (sales + feedback)?", "response": "SELECT E.category, COUNT(DISTINCT T.ticket_id) + COUNT(DISTINCT F.feedback_id) AS engagement_score FROM Events E LEFT JOIN Tickets T ON E.event_id = T.event_id LEFT JOIN Feedback F ON E.event_id = F.event_id GROUP BY E.category ORDER BY engagement_score DESC;"}
{"prompt": "Which events performed below expectations (low sales & low rating)?", "response": "SELECT E.name FROM Events E LEFT JOIN Tickets T ON E.event_id = T.event_id LEFT JOIN Feedback F ON E.event_id = F.event_id GROUP BY E.name HAVING COUNT(T.ticket_id) < 100 AND AVG(F.rating) < 3;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which days had the highest number of total transactions?", "response": "SELECT purchase_date, COUNT(*) AS transaction_count FROM Tickets GROUP BY purchase_date ORDER BY transaction_count DESC LIMIT 5;"}
{"prompt": "What is the average response time of the system during peak ticket hours? (Assuming log table)", "response": "SELECT AVG(response_time_ms) FROM SystemLogs WHERE EXTRACT(HOUR FROM log_time) BETWEEN 18 AND 22;"}
{"prompt": "Which payment gateway had the most failures in the past 7 days?", "response": "SELECT gateway_name, COUNT(*) AS failures FROM PaymentLogs WHERE status = 'Failed' AND log_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY gateway_name ORDER BY failures DESC;"}
{"prompt": "How many users logged into the platform today? (Assuming login logs)", "response": "SELECT COUNT(DISTINCT user_id) FROM LoginLogs WHERE login_time::date = CURRENT_DATE;"}
{"prompt": "What are the top 3 hours with the most ticket bookings?", "response": "SELECT EXTRACT(HOUR FROM purchase_date) AS hour, COUNT(*) AS bookings FROM Tickets GROUP BY hour ORDER BY bookings DESC LIMIT 3;"}
{"prompt": "What percentage of total traffic is mobile vs desktop? (Assuming device logs)", "response": "SELECT device_type, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM AccessLogs), 2) AS percent FROM AccessLogs GROUP BY device_type;"}
{"prompt": "Which customers had multiple failed payment attempts?", "response": "SELECT customer_id, COUNT(*) AS failed_attempts FROM Payments WHERE status = 'Failed' GROUP BY customer_id HAVING COUNT(*) > 1;"}
{"prompt": "When was the last successful backup completed? (Assuming backup logs)", "response": "SELECT MAX(backup_time) AS last_backup FROM BackupLogs WHERE status = 'Success';"}
{"prompt": "Which events experienced the highest concurrency in ticket sales?", "response": "SELECT event_id, COUNT(*) AS concurrent_sales FROM Tickets GROUP BY event_id ORDER BY concurrent_sales DESC LIMIT 5;"}
{"prompt": "How many tickets were booked in the past hour?", "response": "SELECT COUNT(*) FROM Tickets WHERE purchase_date >= NOW() - INTERVAL '1 hour';"}
{"prompt": "What are the top IP addresses generating traffic on the platform? (Assuming access logs)", "response": "SELECT ip_address, COUNT(*) AS request_count FROM AccessLogs GROUP BY ip_address ORDER BY request_count DESC LIMIT 10;"}
{"prompt": "How many transactions failed in the last 24 hours?", "response": "SELECT COUNT(*) FROM Payments WHERE status = 'Failed' AND payment_time >= NOW() - INTERVAL '24 hours';"}
{"prompt": "Which events had high traffic but low conversion? (Assuming event views table)", "response": "SELECT EV.event_id, EV.view_count, COUNT(T.ticket_id) AS sales FROM EventViews EV LEFT JOIN Tickets T ON EV.event_id = T.event_id GROUP BY EV.event_id, EV.view_count HAVING COUNT(T.ticket_id) < EV.view_count / 10;"}
{"prompt": "What is the most common error code logged in the system this week? (Assuming error logs)", "response": "SELECT error_code, COUNT(*) AS occurrences FROM ErrorLogs WHERE log_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY error_code ORDER BY occurrences DESC LIMIT 1;"}
{"prompt": "How many new customer registrations occurred in the last 48 hours?", "response": "SELECT COUNT(*) FROM Customers WHERE registration_date >= NOW() - INTERVAL '48 hours';"}
{"prompt": "How many customers have more than 5 successful transactions?", "response": "SELECT customer_id, COUNT(*) AS success_count FROM Payments WHERE status = 'Success' GROUP BY customer_id HAVING COUNT(*) > 5;"}
{"prompt": "What is the average time taken from login to successful ticket purchase? (Assuming user session logs)", "response": "SELECT ROUND(AVG(EXTRACT(EPOCH FROM (T.purchase_date - L.login_time)) / 60), 2) AS avg_minutes FROM Tickets T JOIN LoginLogs L ON T.customer_id = L.user_id WHERE L.login_time < T.purchase_date;"}
{"prompt": "Which events saw sudden traffic surges (spikes in access within a 10-min window)? (Assuming detailed access logs)", "response": "SELECT event_id, COUNT(*) AS hits FROM AccessLogs WHERE access_time >= NOW() - INTERVAL '10 minutes' GROUP BY event_id HAVING COUNT(*) > 1000;"}
{"prompt": "How many QR codes were successfully scanned at each entry gate today? (Assuming scan logs)", "response": "SELECT gate_id, COUNT(*) AS scans FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE GROUP BY gate_id ORDER BY scans DESC;"}
{"prompt": "What is the ratio of successful to failed payments for the last blockbuster event?", "response": "SELECT (SELECT COUNT(*) FROM Payments WHERE status = 'Success' AND ticket_id IN (SELECT ticket_id FROM Tickets WHERE event_id = 101)) AS successful, (SELECT COUNT(*) FROM Payments WHERE status = 'Failed' AND ticket_id IN (SELECT ticket_id FROM Tickets WHERE event_id = 101)) AS failed;"}
{"prompt": "Access Control / Security Staff", "response": "nan"}
{"prompt": "How many attendees entered through each gate today?", "response": "SELECT gate_id, COUNT(*) AS total_entries FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE GROUP BY gate_id;"}
{"prompt": "How many total ticket scans were successful today?", "response": "SELECT COUNT(*) FROM QRScanLogs WHERE status = 'Valid' AND scan_time::date = CURRENT_DATE;"}
{"prompt": "How many tickets were flagged as duplicates at the entry?", "response": "SELECT COUNT(*) FROM QRScanLogs WHERE status = 'Duplicate' AND scan_time::date = CURRENT_DATE;"}
{"prompt": "What is the peak hour of guest entry today?", "response": "SELECT EXTRACT(HOUR FROM scan_time) AS hour, COUNT(*) AS entries FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE GROUP BY hour ORDER BY entries DESC LIMIT 1;"}
{"prompt": "Which gate experienced the most congestion (highest entry count)?", "response": "SELECT gate_id, COUNT(*) AS entry_count FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE GROUP BY gate_id ORDER BY entry_count DESC LIMIT 1;"}
{"prompt": "How many scanned tickets were marked as invalid or fake today?", "response": "SELECT COUNT(*) FROM QRScanLogs WHERE status IN ('Invalid', 'Fake') AND scan_time::date = CURRENT_DATE;"}
{"prompt": "How many guests tried to re-enter with the same ticket?", "response": "SELECT ticket_id, COUNT(*) FROM QRScanLogs GROUP BY ticket_id HAVING COUNT(*) > 1;"}
{"prompt": "What is the percentage of valid vs invalid scans today?", "response": "SELECT status, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE), 2) AS percentage FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE GROUP BY status;"}
{"prompt": "How many tickets were scanned in the first hour after gates opened?", "response": "SELECT COUNT(*) FROM QRScanLogs WHERE scan_time BETWEEN '2025-06-12 10:00:00' AND '2025-06-12 11:00:00'; (replace with actual gate open time)"}
{"prompt": "Which security staff member scanned the most tickets?", "response": "SELECT staff_id, COUNT(*) AS scans FROM QRScanLogs WHERE scan_time::date = CURRENT_DATE GROUP BY staff_id ORDER BY scans DESC LIMIT 1;"}
{"prompt": "How many duplicate scan attempts were made per gate?", "response": "SELECT gate_id, COUNT(*) AS duplicate_attempts FROM QRScanLogs WHERE status = 'Duplicate' GROUP BY gate_id;"}
{"prompt": "What was the average scanning success rate across all gates?", "response": "SELECT gate_id, ROUND(SUM(CASE WHEN status = 'Valid' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS success_rate FROM QRScanLogs GROUP BY gate_id;"}
{"prompt": "Are there any tickets that were scanned but marked as unpaid or canceled?", "response": "SELECT Q.ticket_id FROM QRScanLogs Q JOIN Tickets T ON Q.ticket_id = T.ticket_id WHERE T.status IN ('Canceled', 'Unpaid');"}
{"prompt": "What’s the total number of attendees checked in vs total tickets sold for the event?", "response": "SELECT (SELECT COUNT(DISTINCT ticket_id) FROM QRScanLogs WHERE status = 'Valid') AS checked_in, (SELECT COUNT(*) FROM Tickets WHERE event_id = 1001) AS total_sold;"}
{"prompt": "How many fake QR attempts were recorded this week?", "response": "SELECT COUNT(*) FROM QRScanLogs WHERE status = 'Fake' AND scan_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which events had the highest number of entry issues (invalid or duplicate)?", "response": "SELECT event_id, COUNT(*) AS issues FROM QRScanLogs WHERE status IN ('Invalid', 'Duplicate') GROUP BY event_id ORDER BY issues DESC LIMIT 5;"}
{"prompt": "Which users attempted to enter without a valid ticket?", "response": "SELECT DISTINCT Q.customer_id FROM QRScanLogs Q JOIN Tickets T ON Q.ticket_id = T.ticket_id WHERE T.status != 'Valid';"}
{"prompt": "How many attendees scanned in after the scheduled event start time?", "response": "SELECT COUNT(*) FROM QRScanLogs WHERE scan_time > (SELECT start_time FROM Events WHERE event_id = 1001);"}
{"prompt": "What is the average entry processing time per attendee? (if entry timestamps are available)", "response": "SELECT ROUND(AVG(EXTRACT(EPOCH FROM (scan_time - entry_queue_time)) / 60), 2) AS avg_wait_minutes FROM QRScanLogs WHERE entry_queue_time IS NOT NULL;"}
{"prompt": "Which gates had the highest rate of invalid scans?", "response": "SELECT gate_id, ROUND(SUM(CASE WHEN status != 'Valid' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS invalid_rate FROM QRScanLogs GROUP BY gate_id ORDER BY invalid_rate DESC;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "What percentage of last-minute purchases were made from mobile devices?", "response": "SELECT ROUND(COUNT(*) FILTER (WHERE device = 'Mobile') * 100.0 / COUNT(*), 2) AS mobile_last_min_pct FROM Tickets WHERE purchase_time >= event_date - INTERVAL '1 day';"}
{"prompt": "Which age group bought the most tickets for the cultural festival?", "response": "SELECT age_group, COUNT(*) AS total_sales FROM TicketSales GROUP BY age_group ORDER BY total_sales DESC;"}
{"prompt": "What time of day had the highest ticket booking activity?", "response": "SELECT EXTRACT(HOUR FROM purchase_time) AS hour, COUNT(*) AS total_bookings FROM Tickets GROUP BY hour ORDER BY total_bookings DESC LIMIT 1;"}
{"prompt": "What is the average refund rate per event?", "response": "SELECT event_id, ROUND(SUM(CASE WHEN status = 'Refunded' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS refund_rate FROM Tickets GROUP BY event_id;"}
{"prompt": "How much higher were ticket sales for events with seating charts?", "response": "SELECT seating_chart, AVG(ticket_count) FROM (SELECT event_id, COUNT(*) AS ticket_count, has_seating_chart AS seating_chart FROM Tickets JOIN Events USING (event_id) GROUP BY event_id, has_seating_chart) AS sub GROUP BY seating_chart;"}
{"prompt": "Which venues consistently receive the lowest ratings?", "response": "SELECT venue_id, AVG(rating) AS avg_rating FROM EventFeedback GROUP BY venue_id ORDER BY avg_rating ASC LIMIT 5;"}
{"prompt": "What was the average wait time at entry for each venue?", "response": "SELECT venue_id, ROUND(AVG(entry_time - scan_time), 2) AS avg_wait_mins FROM EntryLogs WHERE entry_time IS NOT NULL GROUP BY venue_id;"}
{"prompt": "Which marketing campaign led to the highest ticket conversion rate?", "response": "SELECT campaign_id, ROUND(SUM(CASE WHEN converted = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS conversion_rate FROM CampaignTracking GROUP BY campaign_id ORDER BY conversion_rate DESC LIMIT 1;"}
{"prompt": "What are the top 5 cities by ticket sales for the last month?", "response": "SELECT city, COUNT(*) AS tickets_sold FROM Tickets WHERE purchase_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY city ORDER BY tickets_sold DESC LIMIT 5;"}
{"prompt": "What is the trend of ticket sales over the past 6 months?", "response": "SELECT DATE_TRUNC('month', purchase_time) AS month, COUNT(*) AS tickets_sold FROM Tickets WHERE purchase_time >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "What proportion of bookings are made on mobile vs desktop?", "response": "SELECT device, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Tickets), 2) AS pct FROM Tickets GROUP BY device;"}
{"prompt": "How many tickets were sold for each ticket type (early bird, VIP, etc.)?", "response": "SELECT ticket_type, COUNT(*) AS total_sold FROM Tickets GROUP BY ticket_type ORDER BY total_sold DESC;"}
{"prompt": "What’s the average rating per event category?", "response": "SELECT category, ROUND(AVG(rating), 2) AS avg_rating FROM Events E JOIN EventFeedback F ON E.event_id = F.event_id GROUP BY category;"}
{"prompt": "Which day of the week sees the most ticket purchases?", "response": "SELECT TO_CHAR(purchase_time, 'Day') AS day, COUNT(*) AS total FROM Tickets GROUP BY day ORDER BY total DESC;"}
{"prompt": "What is the average lead time between booking and event date?", "response": "SELECT ROUND(AVG(event_date - purchase_time), 1) AS avg_lead_days FROM Tickets;"}
{"prompt": "What are the top 3 events with the highest revenue generated?", "response": "SELECT event_id, SUM(price) AS total_revenue FROM Tickets GROUP BY event_id ORDER BY total_revenue DESC LIMIT 3;"}
{"prompt": "How many users buy more than 3 tickets per transaction on average?", "response": "SELECT COUNT(*) FROM (SELECT user_id, AVG(ticket_count) AS avg_tickets FROM TicketTransactions GROUP BY user_id HAVING AVG(ticket_count) > 3) AS high_volume_buyers;"}
{"prompt": "Which device type has the highest average transaction value?", "response": "SELECT device, ROUND(AVG(price), 2) AS avg_value FROM Tickets GROUP BY device ORDER BY avg_value DESC;"}
{"prompt": "What percentage of customers are repeat buyers?", "response": "SELECT ROUND(COUNT(*) FILTER (WHERE purchase_count > 1) * 100.0 / COUNT(*), 2) AS repeat_buyer_pct FROM (SELECT user_id, COUNT(*) AS purchase_count FROM Tickets GROUP BY user_id) AS user_purchases;"}
{"prompt": "How many tickets were sold within 24 hours of the event start time?", "response": "SELECT COUNT(*) FROM Tickets WHERE event_date - purchase_time <= INTERVAL '1 day';"}
{"prompt": "PharmacyDB", "response": "nan"}
{"prompt": "Customers / Patients", "response": "nan"}
{"prompt": "What are all my past prescriptions, especially for insulin?", "response": "sql SELECT p.prescription_id, p.date_issued, pd.dosage, pd.frequency, m.name AS medication_name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.patient_id = 1 AND m.name LIKE '%insulin%';"}
{"prompt": "Which pharmacies have insulin in stock today?", "response": "sql SELECT m.name, m.manufacturer, i.stock_quantity FROM Medications m JOIN Inventory i ON m.medication_id = i.medication_id WHERE m.name LIKE '%insulin%' AND i.stock_quantity > 0;"}
{"prompt": "What was the delivery status of my most recent insulin order?", "response": "sql SELECT o.delivery_status FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Medications m ON oi.medication_id = m.medication_id WHERE o.customer_id = 1 AND m.name LIKE '%insulin%' ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "What was the total amount I paid for today’s insulin order?", "response": "sql SELECT b.amount_paid FROM Orders o JOIN Billing b ON o.order_id = b.order_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Medications m ON oi.medication_id = m.medication_id WHERE o.customer_id = 1 AND m.name LIKE '%insulin%' AND o.order_date = CURRENT_DATE;"}
{"prompt": "Which payment method did I use for my recent order?", "response": "sql SELECT b.payment_method FROM Orders o JOIN Billing b ON o.order_id = b.order_id WHERE o.customer_id = 1 ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "How many insulin prescriptions have I had this year?", "response": "sql SELECT COUNT(*) FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.patient_id = 1 AND m.name LIKE '%insulin%' AND EXTRACT(YEAR FROM p.date_issued) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "When was my last prescription issued by the doctor?", "response": "sql SELECT MAX(p.date_issued) FROM Prescriptions p WHERE p.patient_id = 1;"}
{"prompt": "What dosage and duration were prescribed for my last insulin refill?", "response": "sql SELECT pd.dosage, pd.duration_days FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.patient_id = 1 AND m.name LIKE '%insulin%' ORDER BY p.date_issued DESC LIMIT 1;"}
{"prompt": "Which doctor prescribed my most recent medication?", "response": "sql SELECT d.first_name, d.last_name, d.specialization FROM Prescriptions p JOIN Doctors d ON p.doctor_id = d.doctor_id WHERE p.patient_id = 1 ORDER BY p.date_issued DESC LIMIT 1;"}
{"prompt": "What medications have I been prescribed in the last 30 days?", "response": "sql SELECT DISTINCT m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.patient_id = 1 AND p.date_issued >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What are the stock levels for all medications I’ve ordered before?", "response": "sql SELECT DISTINCT m.name, i.stock_quantity FROM Medications m JOIN Inventory i ON m.medication_id = i.medication_id JOIN OrderItems oi ON m.medication_id = oi.medication_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.customer_id = 1;"}
{"prompt": "How many orders have I placed so far?", "response": "sql SELECT COUNT(*) FROM Orders WHERE customer_id = 1;"}
{"prompt": "How many units of insulin have I ordered to date?", "response": "sql SELECT SUM(oi.quantity) FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id JOIN Medications m ON oi.medication_id = m.medication_id WHERE o.customer_id = 1 AND m.name LIKE '%insulin%';"}
{"prompt": "What prescriptions have not been fulfilled yet?", "response": "sql SELECT p.prescription_id, p.date_issued, p.status FROM Prescriptions p WHERE p.patient_id = 1 AND p.status != 'Fulfilled';"}
{"prompt": "What is the expiry date of insulin currently in stock?", "response": "sql SELECT m.name, m.expiry_date FROM Medications m WHERE m.name LIKE '%insulin%';"}
{"prompt": "What’s the manufacturer of the insulin I ordered last?", "response": "sql SELECT m.manufacturer FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id JOIN Medications m ON oi.medication_id = m.medication_id WHERE o.customer_id = 1 AND m.name LIKE '%insulin%' ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "Which medications in my last order are low in stock?", "response": "sql SELECT m.name, i.stock_quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Medications m ON oi.medication_id = m.medication_id JOIN Inventory i ON m.medication_id = i.medication_id WHERE o.customer_id = 1 ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "Did I raise any support tickets recently?", "response": "sql SELECT subject, status, created_at FROM SupportTickets WHERE customer_id = 1 ORDER BY created_at DESC LIMIT 5;"}
{"prompt": "What was the last health tip PharmacyDB showed me?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'ramesh52') AND action LIKE '%health tip%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What marketing campaigns have targeted diabetic patients recently?", "response": "sql SELECT name, start_date, end_date FROM MarketingCampaigns WHERE target_audience LIKE '%diabetic%';"}
{"prompt": "Pharmacists", "response": "nan"}
{"prompt": "What are the current stock levels of the cholesterol medicine requested by Mrs. Sharma?", "response": "sql SELECT m.name, i.stock_quantity FROM Medications m JOIN Inventory i ON m.medication_id = i.medication_id WHERE m.name LIKE '%cholesterol%';"}
{"prompt": "What other medications has Mrs. Sharma been prescribed recently?", "response": "sql SELECT m.name, p.date_issued FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.patient_id = (SELECT customer_id FROM Customers WHERE last_name = 'Sharma') ORDER BY p.date_issued DESC;"}
{"prompt": "Are there any interaction alerts logged for my user recently?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE action LIKE '%interaction alert%' AND user_id = (SELECT user_id FROM Users WHERE username = 'priya');"}
{"prompt": "What is the contact information of the doctor who issued Mrs. Sharma’s latest prescription?", "response": "sql SELECT d.first_name, d.last_name, d.email, d.phone FROM Prescriptions p JOIN Doctors d ON p.doctor_id = d.doctor_id WHERE p.patient_id = (SELECT customer_id FROM Customers WHERE last_name = 'Sharma') ORDER BY p.date_issued DESC LIMIT 1;"}
{"prompt": "What were the notes on Mrs. Sharma’s last prescription?", "response": "sql SELECT notes FROM Prescriptions WHERE patient_id = (SELECT customer_id FROM Customers WHERE last_name = 'Sharma') ORDER BY date_issued DESC LIMIT 1;"}
{"prompt": "Which prescriptions have I verified today?", "response": "sql SELECT p.prescription_id, p.date_issued, c.first_name, c.last_name FROM Prescriptions p JOIN Customers c ON p.patient_id = c.customer_id WHERE p.date_issued = CURRENT_DATE;"}
{"prompt": "Which patients requested prescription refills in the past 7 days?", "response": "sql SELECT DISTINCT c.first_name, c.last_name, p.date_issued FROM Prescriptions p JOIN Customers c ON p.patient_id = c.customer_id WHERE p.date_issued >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which medications are currently below the reorder level?", "response": "sql SELECT m.name, i.stock_quantity, i.reorder_level FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.stock_quantity < i.reorder_level;"}
{"prompt": "How many interaction alerts did I receive this month?", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'priya') AND action LIKE '%interaction alert%' AND timestamp >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which prescriptions were modified with doctor approval today?", "response": "sql SELECT p.prescription_id, p.date_issued, p.status FROM Prescriptions p WHERE p.status LIKE '%Modified%' AND p.date_issued = CURRENT_DATE;"}
{"prompt": "What is Mrs. Sharma’s contact information for a follow-up?", "response": "sql SELECT first_name, last_name, phone, email FROM Customers WHERE last_name = 'Sharma';"}
{"prompt": "Which prescriptions were flagged for potential safety issues this month?", "response": "sql SELECT DISTINCT p.prescription_id, p.date_issued, c.first_name, c.last_name FROM Prescriptions p JOIN Customers c ON p.patient_id = c.customer_id JOIN SystemLogs s ON s.timestamp::date = p.date_issued AND s.action LIKE '%interaction%' WHERE s.timestamp >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What medications did I dispense today that had logged alerts?", "response": "sql SELECT DISTINCT m.name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Medications m ON oi.medication_id = m.medication_id JOIN SystemLogs s ON s.timestamp::date = CURRENT_DATE AND s.action LIKE '%interaction%' WHERE o.order_date = CURRENT_DATE;"}
{"prompt": "How many prescriptions did I handle in the past week?", "response": "sql SELECT COUNT(*) FROM Prescriptions WHERE date_issued >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What medications are in stock right now at CityLife Pharmacy?", "response": "sql SELECT m.name, m.description, i.stock_quantity FROM Medications m JOIN Inventory i ON m.medication_id = i.medication_id WHERE i.stock_quantity > 0;"}
{"prompt": "What is my pharmacist license number?", "response": "sql SELECT license_number FROM Pharmacists WHERE email = 'priya@citylifepharmacy.com';"}
{"prompt": "What prescriptions were recently approved after intervention?", "response": "sql SELECT p.prescription_id, p.date_issued, p.status FROM Prescriptions p WHERE p.status LIKE '%Approved%' AND p.date_issued >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What labels did I print today for dispatched medications?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'priya') AND action LIKE '%label printed%' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "Which prescriptions did I resolve as 'Resolved with Intervention'?", "response": "sql SELECT prescription_id, date_issued FROM Prescriptions WHERE status = 'Resolved with Intervention';"}
{"prompt": "What is my current Pharmacist Safety Score from the latest analytics report?", "response": "sql SELECT data FROM Analytics WHERE report_name = 'Pharmacist Safety Score' ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Doctors / Prescribers", "response": "nan"}
{"prompt": "What prescriptions have I issued this week?", "response": "sql SELECT prescription_id, patient_id, date_issued FROM Prescriptions WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND date_issued >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What medications did I prescribe to Mrs. Leela today?", "response": "sql SELECT m.name, pd.dosage, pd.frequency FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.patient_id = (SELECT customer_id FROM Customers WHERE last_name = 'Leela') AND p.date_issued = CURRENT_DATE;"}
{"prompt": "What was the last prescription I issued?", "response": "sql SELECT prescription_id, patient_id, date_issued FROM Prescriptions WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') ORDER BY date_issued DESC LIMIT 1;"}
{"prompt": "Which patients received prescriptions from me today?", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM Prescriptions p JOIN Customers c ON p.patient_id = c.customer_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued = CURRENT_DATE;"}
{"prompt": "Which medications have I prescribed most frequently in the last 30 days?", "response": "sql SELECT m.name, COUNT(*) AS frequency FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued >= CURRENT_DATE - INTERVAL '30 days' GROUP BY m.name ORDER BY frequency DESC;"}
{"prompt": "What are the names of all patients I’ve treated this month?", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM Prescriptions p JOIN Customers c ON p.patient_id = c.customer_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What is my license number?", "response": "sql SELECT license_number FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah';"}
{"prompt": "What dosage and frequency did I prescribe for Mrs. Leela’s iron tablets?", "response": "sql SELECT m.name, pd.dosage, pd.frequency FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.patient_id = (SELECT customer_id FROM Customers WHERE last_name = 'Leela') AND m.name LIKE '%iron%' AND p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah');"}
{"prompt": "Which of my elderly patients (age ≥ 60) received prescriptions this week?", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM Customers c JOIN Prescriptions p ON c.customer_id = p.patient_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND AGE(CURRENT_DATE, c.dob) >= INTERVAL '60 years' AND p.date_issued >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What medications are low in stock that I recently prescribed?", "response": "sql SELECT DISTINCT m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id JOIN Inventory i ON m.medication_id = i.medication_id WHERE i.stock_quantity <= i.reorder_level AND p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah');"}
{"prompt": "What are all the prescriptions I’ve issued to Mrs. Leela so far?", "response": "sql SELECT p.prescription_id, p.date_issued FROM Prescriptions p WHERE p.patient_id = (SELECT customer_id FROM Customers WHERE last_name = 'Leela') AND p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah');"}
{"prompt": "Which medications did I prescribe this week that are marked out of stock?", "response": "sql SELECT DISTINCT m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id JOIN Inventory i ON m.medication_id = i.medication_id WHERE i.stock_quantity = 0 AND p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which patients have I set follow-up reminders for recently? (Assuming stored in logs)", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM Customers c JOIN SystemLogs s ON s.user_id = (SELECT user_id FROM Users WHERE username = 'dr.sameer') WHERE s.action LIKE '%follow-up%' AND c.customer_id = ANY (SELECT patient_id FROM Prescriptions WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah'));"}
{"prompt": "What was the most prescribed medication in the last week by me?", "response": "sql SELECT m.name, COUNT(*) AS times_prescribed FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued >= CURRENT_DATE - INTERVAL '7 days' GROUP BY m.name ORDER BY times_prescribed DESC LIMIT 1;"}
{"prompt": "What prescriptions did I write today that are pending fulfillment? (Assuming “status” in Prescriptions)", "response": "sql SELECT prescription_id FROM Prescriptions WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND date_issued = CURRENT_DATE AND status != 'Fulfilled';"}
{"prompt": "Which vitamins and supplements have I prescribed in the last month?", "response": "sql SELECT DISTINCT m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND m.name LIKE '%vitamin%' OR m.name LIKE '%supplement%';"}
{"prompt": "How many prescriptions did I issue in total this month?", "response": "sql SELECT COUNT(*) FROM Prescriptions WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND date_issued >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which medications have I prescribed to diabetic patients this month? (Assuming diabetic condition known via medication keywords)", "response": "sql SELECT DISTINCT m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE m.name LIKE '%insulin%' AND p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which prescriptions of mine were updated after a drug interaction alert? (Assuming logged in SystemLogs)", "response": "sql SELECT DISTINCT p.prescription_id FROM Prescriptions p JOIN SystemLogs s ON s.action LIKE '%interaction%' WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND s.timestamp::date = p.date_issued;"}
{"prompt": "Which of my patients were issued a digital prescription today?", "response": "sql SELECT c.first_name, c.last_name FROM Customers c JOIN Prescriptions p ON c.customer_id = p.patient_id WHERE p.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Sameer' AND last_name = 'Shah') AND p.date_issued = CURRENT_DATE;"}
{"prompt": "Pharmacy Technicians", "response": "nan"}
{"prompt": "What new prescriptions were submitted online today?", "response": "sql SELECT * FROM Prescriptions WHERE date_issued = CURRENT_DATE;"}
{"prompt": "Which of today’s prescriptions include medications that are out of stock?", "response": "sql SELECT DISTINCT p.prescription_id, m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Inventory i ON pd.medication_id = i.medication_id JOIN Medications m ON m.medication_id = i.medication_id WHERE p.date_issued = CURRENT_DATE AND i.stock_quantity = 0;"}
{"prompt": "Which medications are currently out of stock?", "response": "sql SELECT m.name FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.stock_quantity = 0;"}
{"prompt": "What is the current stock quantity of all medications?", "response": "sql SELECT m.name, i.stock_quantity FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id;"}
{"prompt": "What medications are below their reorder level?", "response": "sql SELECT m.name, i.stock_quantity, i.reorder_level FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.stock_quantity < i.reorder_level;"}
{"prompt": "What prescriptions did I process today? (Assuming tracking via SystemLogs)", "response": "sql SELECT p.* FROM Prescriptions p JOIN SystemLogs s ON s.action LIKE '%processed%' AND s.timestamp::date = CURRENT_DATE WHERE s.user_id = (SELECT user_id FROM Users WHERE username = 'neha');"}
{"prompt": "Which prescriptions today included refrigerated medications? (Assuming 'refrigerated' in description)", "response": "sql SELECT DISTINCT p.prescription_id, m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.date_issued = CURRENT_DATE AND m.description LIKE '%refrigerated%';"}
{"prompt": "What is the stock status of the medication with the most recent order?", "response": "sql SELECT m.name, i.stock_quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Medications m ON oi.medication_id = m.medication_id JOIN Inventory i ON m.medication_id = i.medication_id ORDER BY o.order_date DESC LIMIT 1;"}
{"prompt": "Which medications were used most frequently in today’s prescriptions?", "response": "sql SELECT m.name, COUNT(*) AS count FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.date_issued = CURRENT_DATE GROUP BY m.name ORDER BY count DESC;"}
{"prompt": "What prescriptions include dosage details with “once daily”?", "response": "sql SELECT p.prescription_id, m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE pd.frequency LIKE '%once daily%';"}
{"prompt": "What are the details of the last walk-in prescription I entered? (Assuming tracked in logs or flagged in notes)", "response": "sql SELECT p.* FROM Prescriptions p WHERE notes LIKE '%walk-in%' ORDER BY date_issued DESC LIMIT 1;"}
{"prompt": "What medications have an expiry date within the next 30 days?", "response": "sql SELECT name, expiry_date FROM Medications WHERE expiry_date <= CURRENT_DATE + INTERVAL '30 days';"}
{"prompt": "What was the last inventory update I made? (Assuming tracked in logs)", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'neha') AND action LIKE '%inventory update%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which medications were added to prescriptions today but are missing from inventory?", "response": "sql SELECT DISTINCT m.name FROM Prescriptions p JOIN PrescriptionDetails pd ON p.prescription_id = pd.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id LEFT JOIN Inventory i ON m.medication_id = i.medication_id WHERE p.date_issued = CURRENT_DATE AND i.medication_id IS NULL;"}
{"prompt": "Which prescriptions have already been fulfilled today? (Assuming status = 'Fulfilled')", "response": "sql SELECT * FROM Prescriptions WHERE date_issued = CURRENT_DATE AND status = 'Fulfilled';"}
{"prompt": "Which medications need to be reordered immediately?", "response": "sql SELECT m.name FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.stock_quantity <= i.reorder_level;"}
{"prompt": "What are the most common durations prescribed for medications this week?", "response": "sql SELECT duration_days, COUNT(*) AS count FROM PrescriptionDetails WHERE prescription_id IN (SELECT prescription_id FROM Prescriptions WHERE date_issued >= CURRENT_DATE - INTERVAL '7 days') GROUP BY duration_days ORDER BY count DESC;"}
{"prompt": "Which medications had stock quantity updated today? (Assuming logs track changes)", "response": "sql SELECT DISTINCT m.name FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id JOIN SystemLogs s ON s.action LIKE '%inventory updated%' AND s.timestamp::date = CURRENT_DATE WHERE s.user_id = (SELECT user_id FROM Users WHERE username = 'neha');"}
{"prompt": "Which medication went above the safe temperature limit today? (Assuming logged incidents)", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%temperature%' AND timestamp::date = CURRENT_DATE AND user_id = (SELECT user_id FROM Users WHERE username = 'neha');"}
{"prompt": "What are the top 5 most frequently dispensed medicines in the past week?", "response": "sql SELECT m.name, COUNT(*) AS dispensed_count FROM PrescriptionDetails pd JOIN Prescriptions p ON pd.prescription_id = p.prescription_id JOIN Medications m ON pd.medication_id = m.medication_id WHERE p.date_issued >= CURRENT_DATE - INTERVAL '7 days' GROUP BY m.name ORDER BY dispensed_count DESC LIMIT 5;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "What is the current delivery status of Mrs. Sharma’s last order?", "response": "sql SELECT delivery_status FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE last_name = 'Sharma') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "When was Mrs. Sharma’s most recent order placed?", "response": "sql SELECT order_date FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE last_name = 'Sharma') ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "Which orders today have delayed delivery status?", "response": "sql SELECT * FROM Orders WHERE delivery_status = 'Delayed' AND order_date = CURRENT_DATE;"}
{"prompt": "How many support tickets were created today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE created_at::date = CURRENT_DATE;"}
{"prompt": "What are the unresolved support tickets from this week?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which customers have open support tickets?", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM SupportTickets s JOIN Customers c ON s.customer_id = c.customer_id WHERE s.status != 'Resolved';"}
{"prompt": "What is the status of the latest support ticket raised by Mrs. Sharma?", "response": "sql SELECT status FROM SupportTickets WHERE customer_id = (SELECT customer_id FROM Customers WHERE last_name = 'Sharma') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "How many support tickets have been resolved today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status = 'Resolved' AND resolved_at::date = CURRENT_DATE;"}
{"prompt": "What were the reasons for order delays this week? (Assuming reasons are in delivery_status notes)", "response": "sql SELECT DISTINCT delivery_status FROM Orders WHERE delivery_status != 'Delivered' AND order_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which support tickets were resolved in less than an hour?", "response": "sql SELECT * FROM SupportTickets WHERE resolved_at IS NOT NULL AND resolved_at - created_at <= INTERVAL '1 hour';"}
{"prompt": "Which customers called in today for delivery issues? (Assuming delivery issue tickets are categorized in subject)", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM SupportTickets s JOIN Customers c ON s.customer_id = c.customer_id WHERE s.subject LIKE '%delivery%' AND s.created_at::date = CURRENT_DATE;"}
{"prompt": "What prescriptions were updated today? (Assuming modified prescriptions are marked in notes or tracked separately)", "response": "sql SELECT * FROM Prescriptions WHERE notes LIKE '%updated%' AND date_issued = CURRENT_DATE;"}
{"prompt": "What was the total number of customer orders placed today?", "response": "sql SELECT COUNT(*) FROM Orders WHERE order_date = CURRENT_DATE;"}
{"prompt": "Which customers placed refill orders today? (Assuming notes indicate refills)", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE o.order_date = CURRENT_DATE AND EXISTS (SELECT 1 FROM SupportTickets s WHERE s.customer_id = c.customer_id AND s.subject LIKE '%refill%');"}
{"prompt": "How many app usage issues have been reported this week?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%app%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which doctors contacted support this week? (Assuming ticket description mentions 'doctor')", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM SupportTickets s JOIN Customers c ON s.customer_id = c.customer_id WHERE s.description LIKE '%doctor%' AND s.created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the most common support ticket subjects in the past 7 days?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY subject ORDER BY count DESC;"}
{"prompt": "What are the pending support tickets that are older than 3 days?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND created_at < CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "Which customers received tutorial links for app features this week? (Assuming description mentions 'tutorial')", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM SupportTickets s JOIN Customers c ON s.customer_id = c.customer_id WHERE s.description LIKE '%tutorial%' AND s.created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many total support interactions has Ravi handled today? (Assuming Ravi's user_id = 101)", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE user_id = 101 AND action LIKE '%support%' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "Inventory Managers", "response": "nan"}
{"prompt": "Which medications are currently low in stock?", "response": "sql SELECT * FROM Inventory WHERE stock_quantity <= reorder_level;"}
{"prompt": "Which medications will expire in the next two weeks?", "response": "sql SELECT * FROM Medications WHERE expiry_date <= CURRENT_DATE + INTERVAL '14 days';"}
{"prompt": "What is the current stock level of Paracetamol?", "response": "sql SELECT i.stock_quantity FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE m.name = 'Paracetamol';"}
{"prompt": "Which medications have expired?", "response": "sql SELECT * FROM Medications WHERE expiry_date < CURRENT_DATE;"}
{"prompt": "What are the reorder levels for all medications?", "response": "sql SELECT m.name, i.reorder_level FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id;"}
{"prompt": "What is the list of medications that need to be reordered today?", "response": "sql SELECT m.name FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.stock_quantity <= i.reorder_level;"}
{"prompt": "When was the last restock date for Paracetamol?", "response": "sql SELECT last_restock_date FROM Inventory WHERE medication_id = (SELECT medication_id FROM Medications WHERE name = 'Paracetamol');"}
{"prompt": "What medications are stored in stock but are nearing expiry within 30 days?", "response": "sql SELECT * FROM Medications WHERE expiry_date <= CURRENT_DATE + INTERVAL '30 days';"}
{"prompt": "How many boxes of cough syrup are close to expiry?", "response": "sql SELECT stock_quantity FROM Inventory WHERE medication_id = (SELECT medication_id FROM Medications WHERE name LIKE '%cough syrup%') AND EXISTS (SELECT 1 FROM Medications WHERE medication_id = Inventory.medication_id AND expiry_date <= CURRENT_DATE + INTERVAL '14 days');"}
{"prompt": "Which medication batches were restocked today?", "response": "sql SELECT m.name, i.last_restock_date FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.last_restock_date = CURRENT_DATE;"}
{"prompt": "List all medications and their current stock levels.", "response": "sql SELECT m.name, i.stock_quantity FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id;"}
{"prompt": "What is the manufacturer of the medication that expires the soonest?", "response": "sql SELECT manufacturer FROM Medications WHERE expiry_date = (SELECT MIN(expiry_date) FROM Medications);"}
{"prompt": "What is the total quantity of antibiotics currently in stock? (Assuming “antibiotics” is part of the name or description)", "response": "sql SELECT SUM(i.stock_quantity) FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE m.name LIKE '%antibiotic%' OR m.description LIKE '%antibiotic%';"}
{"prompt": "Which medications were restocked in the past week?", "response": "sql SELECT m.name, i.last_restock_date FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.last_restock_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What medications have not been restocked in the last 30 days?", "response": "sql SELECT m.name FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id WHERE i.last_restock_date < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the price of Paracetamol?", "response": "sql SELECT price FROM Medications WHERE name = 'Paracetamol';"}
{"prompt": "Which medications cost more than ₹500?", "response": "sql SELECT name, price FROM Medications WHERE price > 500;"}
{"prompt": "How many medications are currently available in stock (not expired)?", "response": "sql SELECT COUNT(*) FROM Medications WHERE expiry_date > CURRENT_DATE AND medication_id IN (SELECT medication_id FROM Inventory WHERE stock_quantity > 0);"}
{"prompt": "Which medication has the highest stock currently?", "response": "sql SELECT m.name, i.stock_quantity FROM Inventory i JOIN Medications m ON i.medication_id = m.medication_id ORDER BY i.stock_quantity DESC LIMIT 1;"}
{"prompt": "What is the average stock quantity across all medications?", "response": "sql SELECT AVG(stock_quantity) FROM Inventory;"}
{"prompt": "Finance / Billing Staff", "response": "nan"}
{"prompt": "What are all the payments received yesterday?", "response": "sql SELECT * FROM Billing WHERE billing_date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "Which orders have pending payments?", "response": "sql SELECT * FROM Orders WHERE payment_status = 'Pending';"}
{"prompt": "Show all orders paid using insurance claims.", "response": "sql SELECT * FROM Billing WHERE insurance_claim_id IS NOT NULL;"}
{"prompt": "Which insurance claims were rejected or have missing IDs?", "response": "sql SELECT * FROM Billing WHERE insurance_claim_id IS NULL;"}
{"prompt": "List all payments made through UPI.", "response": "sql SELECT * FROM Billing WHERE payment_method = 'UPI';"}
{"prompt": "What is the total sales amount for this month?", "response": "sql SELECT SUM(total_amount) FROM Orders WHERE order_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which customers have outstanding payments?", "response": "sql SELECT DISTINCT c.customer_id, c.first_name, c.last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.payment_status = 'Pending';"}
{"prompt": "Show detailed billing information for Order ID 1005.", "response": "sql SELECT * FROM Billing WHERE order_id = 1005;"}
{"prompt": "What are the most recent 10 transactions processed?", "response": "sql SELECT * FROM Billing ORDER BY billing_date DESC LIMIT 10;"}
{"prompt": "Generate a report of all payments made by credit card last week.", "response": "sql SELECT * FROM Billing WHERE payment_method = 'Credit Card' AND billing_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which orders were paid partially through insurance? (Assuming partial payments are recorded with non-null insurance_claim_id and non-zero amount_paid)", "response": "sql SELECT * FROM Billing WHERE insurance_claim_id IS NOT NULL AND amount_paid > 0;"}
{"prompt": "What is the average billing amount per order this month?", "response": "sql SELECT AVG(amount_paid) FROM Billing WHERE billing_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List all billing entries for a specific customer, say 'Raj Malhotra'.", "response": "sql SELECT b.* FROM Billing b JOIN Orders o ON b.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.first_name = 'Raj' AND c.last_name = 'Malhotra';"}
{"prompt": "How many orders have been fully paid?", "response": "sql SELECT COUNT(*) FROM Orders WHERE payment_status = 'Paid';"}
{"prompt": "What is the total revenue generated by digital wallets?", "response": "sql SELECT SUM(amount_paid) FROM Billing WHERE payment_method = 'Digital Wallet';"}
{"prompt": "List all unpaid orders along with customer names.", "response": "sql SELECT o.order_id, c.first_name, c.last_name, o.total_amount FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE o.payment_status = 'Pending';"}
{"prompt": "Show the billing records for all orders delivered but not yet paid.", "response": "sql SELECT b.* FROM Billing b JOIN Orders o ON b.order_id = o.order_id WHERE o.delivery_status = 'Delivered' AND o.payment_status != 'Paid';"}
{"prompt": "Which billing transactions occurred between June 1 and June 10, 2025?", "response": "sql SELECT * FROM Billing WHERE billing_date BETWEEN '2025-06-01' AND '2025-06-10';"}
{"prompt": "What are the top 5 highest-value orders this year?", "response": "sql SELECT * FROM Orders WHERE order_date >= date_trunc('year', CURRENT_DATE) ORDER BY total_amount DESC LIMIT 5;"}
{"prompt": "Find all billing records where the amount paid is less than ₹500.", "response": "sql SELECT * FROM Billing WHERE amount_paid < 500;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Show me all active marketing campaigns.", "response": "sql SELECT * FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "List all campaigns that targeted diabetic patients.", "response": "sql SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%diabetic%';"}
{"prompt": "How many campaigns ran in the last 6 months?", "response": "sql SELECT COUNT(*) FROM MarketingCampaigns WHERE start_date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "Show details of the seasonal flu vaccine campaign.", "response": "sql SELECT * FROM MarketingCampaigns WHERE name LIKE '%flu vaccine%';"}
{"prompt": "What is the budget for all campaigns this year?", "response": "sql SELECT SUM(budget) FROM MarketingCampaigns WHERE start_date >= date_trunc('year', CURRENT_DATE);"}
{"prompt": "List campaigns that ended in the past month.", "response": "sql SELECT * FROM MarketingCampaigns WHERE end_date BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE;"}
{"prompt": "Which campaigns had a budget over ₹50,000?", "response": "sql SELECT * FROM MarketingCampaigns WHERE budget > 50000;"}
{"prompt": "When did the “Healthy Heart Month” campaign run?", "response": "sql SELECT start_date, end_date FROM MarketingCampaigns WHERE name = 'Healthy Heart Month';"}
{"prompt": "What is the average campaign budget for the last 3 campaigns?", "response": "sql SELECT AVG(budget) FROM (SELECT budget FROM MarketingCampaigns ORDER BY start_date DESC LIMIT 3) AS recent_budgets;"}
{"prompt": "How many campaigns are targeting senior citizens?", "response": "sql SELECT COUNT(*) FROM MarketingCampaigns WHERE target_audience LIKE '%senior%';"}
{"prompt": "Show all campaigns that started in 2025.", "response": "sql SELECT * FROM MarketingCampaigns WHERE EXTRACT(YEAR FROM start_date) = 2025;"}
{"prompt": "List campaigns with a duration longer than 30 days.", "response": "sql SELECT * FROM MarketingCampaigns WHERE end_date - start_date > 30;"}
{"prompt": "Which campaign started most recently?", "response": "sql SELECT * FROM MarketingCampaigns ORDER BY start_date DESC LIMIT 1;"}
{"prompt": "Find all campaigns that are currently inactive.", "response": "sql SELECT * FROM MarketingCampaigns WHERE end_date < CURRENT_DATE;"}
{"prompt": "What’s the earliest campaign recorded in the system?", "response": "sql SELECT * FROM MarketingCampaigns ORDER BY start_date ASC LIMIT 1;"}
{"prompt": "Which campaigns had “vaccine” in their name?", "response": "sql SELECT * FROM MarketingCampaigns WHERE name LIKE '%vaccine%';"}
{"prompt": "Show campaign names and their budgets.", "response": "sql SELECT name, budget FROM MarketingCampaigns;"}
{"prompt": "How many different target audiences have we used in campaigns?", "response": "sql SELECT COUNT(DISTINCT target_audience) FROM MarketingCampaigns;"}
{"prompt": "Which campaign had the highest budget?", "response": "sql SELECT * FROM MarketingCampaigns ORDER BY budget DESC LIMIT 1;"}
{"prompt": "List all campaigns targeting women.", "response": "sql SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%women%';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Show all user login records for today.", "response": "sql SELECT * FROM SystemLogs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Which users logged in from IP address 192.168.1.101?", "response": "sql SELECT DISTINCT user_id FROM SystemLogs WHERE ip_address = '192.168.1.101';"}
{"prompt": "What were the last 10 actions performed in the system?", "response": "sql SELECT * FROM SystemLogs ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Which users performed more than 50 actions this week?", "response": "sql SELECT user_id, COUNT(*) AS action_count FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY user_id HAVING COUNT(*) > 50;"}
{"prompt": "List all system actions done by user ID 12.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = 12;"}
{"prompt": "Find users who haven’t logged in during the past 30 days.", "response": "sql SELECT * FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Show all roles currently in the system.", "response": "sql SELECT DISTINCT role FROM Users;"}
{"prompt": "Display all actions related to 'password changes'.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%password%';"}
{"prompt": "Which IP addresses were used by more than one user?", "response": "sql SELECT ip_address FROM SystemLogs GROUP BY ip_address HAVING COUNT(DISTINCT user_id) > 1;"}
{"prompt": "What actions were performed outside of working hours (before 8 AM or after 8 PM)?", "response": "sql SELECT * FROM SystemLogs WHERE EXTRACT(HOUR FROM timestamp) < 8 OR EXTRACT(HOUR FROM timestamp) > 20;"}
{"prompt": "Which user accounts have never logged in?", "response": "sql SELECT * FROM Users WHERE last_login IS NULL;"}
{"prompt": "Show last login timestamp for every user.", "response": "sql SELECT user_id, MAX(timestamp) AS last_login FROM SystemLogs GROUP BY user_id;"}
{"prompt": "Find the most frequently performed action in the system.", "response": "sql SELECT action, COUNT(*) AS total FROM SystemLogs GROUP BY action ORDER BY total DESC LIMIT 1;"}
{"prompt": "How many actions were taken in the last 24 hours?", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE timestamp >= NOW() - INTERVAL '1 day';"}
{"prompt": "What were the 5 most recent logins from user ID 7?", "response": "sql SELECT * FROM SystemLogs WHERE user_id = 7 AND action = 'login' ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "Which users have logged in from more than 3 IP addresses?", "response": "sql SELECT user_id FROM SystemLogs GROUP BY user_id HAVING COUNT(DISTINCT ip_address) > 3;"}
{"prompt": "List all users with the role ‘pharmacist’.", "response": "sql SELECT * FROM Users WHERE role = 'pharmacist';"}
{"prompt": "Which users performed an action on June 10, 2025?", "response": "sql SELECT DISTINCT user_id FROM SystemLogs WHERE DATE(timestamp) = '2025-06-10';"}
{"prompt": "Find users who haven’t accessed the system in over 90 days.", "response": "sql SELECT * FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '90 days';"}
{"prompt": "Show the action history for a specific user and IP (e.g., user_id = 8, ip = '10.0.0.8').", "response": "sql SELECT * FROM SystemLogs WHERE user_id = 8 AND ip_address = '10.0.0.8';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Show the top 5 most prescribed medicines in the last 6 months.", "response": "sql SELECT medicine_name, COUNT(*) AS prescription_count FROM Prescriptions WHERE prescription_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY medicine_name ORDER BY prescription_count DESC LIMIT 5;"}
{"prompt": "Which medicines had the highest sales during flu season (Nov to Feb)?", "response": "sql SELECT medicine_name, SUM(quantity) AS total_sold FROM Sales WHERE EXTRACT(MONTH FROM sale_date) IN (11, 12, 1, 2) GROUP BY medicine_name ORDER BY total_sold DESC;"}
{"prompt": "List clinics with the highest number of patient visits in the past 3 months.", "response": "sql SELECT clinic_id, COUNT(*) AS visit_count FROM Visits WHERE visit_date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY clinic_id ORDER BY visit_count DESC;"}
{"prompt": "How many patients did not refill their prescriptions within 30 days?", "response": "sql SELECT COUNT(DISTINCT patient_id) FROM Prescriptions WHERE chronic_med = TRUE AND refill_date IS NULL AND CURRENT_DATE - prescription_date > 30;"}
{"prompt": "Which medicines ran out of stock most frequently in the last year?", "response": "sql SELECT medicine_name, COUNT(*) AS stockouts FROM InventoryLogs WHERE event = 'stockout' AND event_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY medicine_name ORDER BY stockouts DESC;"}
{"prompt": "What is the average time between a prescription and its refill for chronic patients?", "response": "sql SELECT AVG(refill_date - prescription_date) AS avg_days FROM Prescriptions WHERE chronic_med = TRUE AND refill_date IS NOT NULL;"}
{"prompt": "Identify months with the highest prescription activity.", "response": "sql SELECT TO_CHAR(prescription_date, 'YYYY-MM') AS month, COUNT(*) AS total FROM Prescriptions GROUP BY month ORDER BY total DESC;"}
{"prompt": "Show medicine sales trends by region in the past 6 months.", "response": "sql SELECT region, medicine_name, SUM(quantity) AS total_sold FROM Sales WHERE sale_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY region, medicine_name ORDER BY region, total_sold DESC;"}
{"prompt": "How many patients received reminders but still missed their refill?", "response": "sql SELECT COUNT(*) FROM RefillReminders rr LEFT JOIN Prescriptions p ON rr.prescription_id = p.id WHERE p.refill_date IS NULL AND CURRENT_DATE - p.prescription_date > 30;"}
{"prompt": "Which doctors prescribe the most flu-related medicines?", "response": "sql SELECT doctor_id, COUNT(*) AS flu_meds FROM Prescriptions WHERE medicine_category = 'flu' GROUP BY doctor_id ORDER BY flu_meds DESC;"}
{"prompt": "Find the most common dosage prescribed for Paracetamol.", "response": "sql SELECT dosage, COUNT(*) FROM Prescriptions WHERE medicine_name = 'Paracetamol' GROUP BY dosage ORDER BY COUNT(*) DESC LIMIT 1;"}
{"prompt": "Which patient age groups refill chronic medicines the least?", "response": "sql SELECT age_group, COUNT(*) AS missed_refills FROM (SELECT patient_id, CASE WHEN age < 18 THEN 'Under 18' WHEN age BETWEEN 18 AND 40 THEN '18-40' WHEN age BETWEEN 41 AND 60 THEN '41-60' ELSE '60+' END AS age_group FROM Patients) p JOIN Prescriptions pr ON p.patient_id = pr.patient_id WHERE pr.chronic_med = TRUE AND pr.refill_date IS NULL GROUP BY age_group ORDER BY missed_refills DESC;"}
{"prompt": "Show sales of vitamins during the last quarter.", "response": "sql SELECT medicine_name, SUM(quantity) FROM Sales WHERE category = 'vitamin' AND sale_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' GROUP BY medicine_name;"}
{"prompt": "Which cities had the highest flu cases based on prescriptions?", "response": "sql SELECT city, COUNT(*) AS flu_cases FROM Prescriptions WHERE medicine_category = 'flu' GROUP BY city ORDER BY flu_cases DESC;"}
{"prompt": "What is the total revenue from antibiotic sales in the last 3 months?", "response": "sql SELECT SUM(price * quantity) AS revenue FROM Sales WHERE category = 'antibiotic' AND sale_date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "List all medicines with refill gaps longer than 60 days.", "response": "sql SELECT patient_id, medicine_name, (refill_date - prescription_date) AS gap FROM Prescriptions WHERE refill_date - prescription_date > 60;"}
{"prompt": "Which supplier delivered the most flu-related medicines?", "response": "sql SELECT supplier_name, COUNT(*) AS deliveries FROM InventoryLogs WHERE medicine_category = 'flu' AND event = 'received' GROUP BY supplier_name ORDER BY deliveries DESC;"}
{"prompt": "Show the weekly trend of chronic medicine prescriptions.", "response": "sql SELECT DATE_TRUNC('week', prescription_date) AS week, COUNT(*) AS chronic_prescriptions FROM Prescriptions WHERE chronic_med = TRUE GROUP BY week ORDER BY week;"}
{"prompt": "What percent of patients refilled prescriptions within 7 days?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE refill_date - prescription_date <= 7) * 100.0 / COUNT(*)), 2) AS percent_on_time FROM Prescriptions WHERE chronic_med = TRUE AND refill_date IS NOT NULL;"}
{"prompt": "List doctors whose patients frequently miss refills.", "response": "sql SELECT doctor_id, COUNT(*) AS missed_refills FROM Prescriptions WHERE chronic_med = TRUE AND refill_date IS NULL GROUP BY doctor_id ORDER BY missed_refills DESC;"}
{"prompt": "BankLoanSystem", "response": "nan"}
{"prompt": "Loan Applicants / Customers", "response": "nan"}
{"prompt": "“What is the current status of my home loan application?”", "response": "sql SELECT status FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“When did I apply for the loan?”", "response": "sql SELECT application_date FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“What loan amount was approved for me?”", "response": "sql SELECT loan_amount FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“What interest rate was applied to my loan?”", "response": "sql SELECT interest_rate FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“How long is my loan term in months?”", "response": "sql SELECT term_months FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“Can I see the details of my monthly loan payments?”", "response": "sql SELECT payment_date, amount, payment_status FROM Payments WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“Have I made any failed or pending payments?”", "response": "sql SELECT * FROM Payments WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) AND payment_status != 'Completed';"}
{"prompt": "“Which officer reviewed my loan?”", "response": "sql SELECT lo.first_name, lo.last_name FROM LoanOfficers lo JOIN LoanReviews lr ON lr.reviewer_role = 'LoanOfficer' WHERE lr.loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) LIMIT 1;"}
{"prompt": "“Has any credit analyst evaluated my loan?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' AND loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“What decision was made in the last loan review?”", "response": "sql SELECT decision FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "“What were the comments given in my loan reviews?”", "response": "sql SELECT comments FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“When was the last review conducted for my loan?”", "response": "sql SELECT review_date FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "“Is my loan compliant with regulations?”", "response": "sql SELECT status FROM ComplianceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY compliance_date DESC LIMIT 1;"}
{"prompt": "“Have there been any compliance checks on my loan?”", "response": "sql SELECT compliance_date, details FROM ComplianceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“Have I raised any support tickets?”", "response": "sql SELECT * FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“How many support tickets of mine are still unresolved?”", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') AND status != 'Resolved';"}
{"prompt": "“When did I last raise a support ticket?”", "response": "sql SELECT created_at FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "“What is my annual income as per my application?”", "response": "sql SELECT annual_income FROM LoanApplicants WHERE first_name = 'Rajesh';"}
{"prompt": "“Can I view reports generated for loans like mine?”", "response": "sql SELECT report_name, generated_on FROM Analytics WHERE report_name LIKE '%loan%';"}
{"prompt": "“What actions have been logged under my user account?”", "response": "sql SELECT action, timestamp, ip_address FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Rajesh');"}
{"prompt": "Loan Officers", "response": "nan"}
{"prompt": "“Which loan applications were submitted overnight?”", "response": "sql SELECT * FROM Loans WHERE application_date = CURRENT_DATE;"}
{"prompt": "“What are the details of Rajesh’s loan application?”", "response": "sql SELECT * FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“Which documents are still pending for Rajesh?”", "response": "Not available – document tracking not defined in schema."}
{"prompt": "“What is Rajesh’s annual income?”", "response": "sql SELECT annual_income FROM LoanApplicants WHERE first_name = 'Rajesh';"}
{"prompt": "“What is Rajesh’s employment status?”", "response": "sql SELECT employment_status FROM LoanApplicants WHERE first_name = 'Rajesh';"}
{"prompt": "“Which applications are missing employment details?”", "response": "sql SELECT * FROM LoanApplicants WHERE employment_status IS NULL OR employment_status = '';"}
{"prompt": "“Has Rajesh's loan been reviewed by the credit committee?”", "response": "sql SELECT * FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) AND reviewer_role = 'CreditAnalyst';"}
{"prompt": "“What was the last decision taken on Rajesh's application?”", "response": "sql SELECT decision FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "“What comments did reviewers leave on Rajesh’s application?”", "response": "sql SELECT comments FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“Which loan applications are currently pending approval?”", "response": "sql SELECT * FROM Loans WHERE status = 'Pending';"}
{"prompt": "“What is the interest rate and term for Rajesh’s approved loan?”", "response": "sql SELECT interest_rate, term_months FROM Loans WHERE status = 'Approved' AND applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“Which loans were approved in the last 7 days?”", "response": "sql SELECT * FROM Loans WHERE status = 'Approved' AND application_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“How many payments has Rajesh made?”", "response": "sql SELECT COUNT(*) FROM Payments WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“Are there any delayed payments for Rajesh?”", "response": "sql SELECT * FROM Payments WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) AND payment_status != 'Completed';"}
{"prompt": "“Show me all support tickets related to Rajesh.”", "response": "sql SELECT * FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“Which loans have unresolved support tickets?”", "response": "sql SELECT DISTINCT applicant_id FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "“Which payments are due today for all customers?”", "response": "sql SELECT * FROM Payments WHERE payment_date = CURRENT_DATE AND payment_status != 'Completed';"}
{"prompt": "“What loans did I (Anita) review recently?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'LoanOfficer' ORDER BY review_date DESC;"}
{"prompt": "“How many total loan reviews did I perform?”", "response": "sql SELECT COUNT(*) FROM LoanReviews WHERE reviewer_role = 'LoanOfficer';"}
{"prompt": "“Which loans have been fully paid off?”", "response": "sql SELECT loan_id FROM Loans WHERE loan_id NOT IN (SELECT loan_id FROM Payments WHERE payment_status != 'Completed');"}
{"prompt": "Credit Analysts", "response": "nan"}
{"prompt": "“What are the latest loan applications I need to assess today?”", "response": "sql SELECT * FROM Loans WHERE application_date = CURRENT_DATE;"}
{"prompt": "“What are the financial details of Rajesh's loan application?”", "response": "sql SELECT loan_amount, loan_type, interest_rate, term_months FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“What is Rajesh’s declared annual income?”", "response": "sql SELECT annual_income FROM LoanApplicants WHERE first_name = 'Rajesh';"}
{"prompt": "“What is Rajesh's employment status?”", "response": "sql SELECT employment_status FROM LoanApplicants WHERE first_name = 'Rajesh';"}
{"prompt": "“Have any reviews already been conducted on Rajesh’s loan?”", "response": "sql SELECT * FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“What was the last decision taken regarding Rajesh’s loan?”", "response": "sql SELECT decision FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "“Which loans are currently pending my review?”", "response": "sql SELECT * FROM Loans WHERE loan_id NOT IN (SELECT loan_id FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst');"}
{"prompt": "“Which loans did I review this week?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' AND review_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“How many loans have I reviewed overall?”", "response": "sql SELECT COUNT(*) FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst';"}
{"prompt": "“What comments have I written in my past reviews?”", "response": "sql SELECT comments FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst';"}
{"prompt": "“What were the decisions for loans I recommended in the past?”", "response": "sql SELECT decision FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst';"}
{"prompt": "“Which loans were flagged with ‘Conditional Approval’ in my past reviews?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' AND decision = 'Conditional Approval';"}
{"prompt": "“List loans where income vs tax record mismatch was flagged (comments).”", "response": "sql SELECT loan_id, comments FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' AND comments LIKE '%income%tax%';"}
{"prompt": "“What is the current status of Rajesh’s loan in the system?”", "response": "sql SELECT status FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“Which loan applicants have annual income below ₹300,000?”", "response": "sql SELECT * FROM LoanApplicants WHERE annual_income < 300000;"}
{"prompt": "“Which applicants are employed but still got denied?”", "response": "sql SELECT la.first_name, la.last_name FROM LoanApplicants la JOIN Loans l ON la.applicant_id = l.applicant_id WHERE la.employment_status IS NOT NULL AND l.status = 'Denied';"}
{"prompt": "“Which loans are awaiting decision from credit analysts?”", "response": "sql SELECT * FROM Loans WHERE loan_id NOT IN (SELECT loan_id FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst');"}
{"prompt": "“What are the risk comments added by all analysts in the last 3 days?”", "response": "sql SELECT comments FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' AND review_date >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "“List all loans I’ve marked for further investigation.”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' AND comments LIKE '%further investigation%';"}
{"prompt": "“Which loans reviewed by me were ultimately approved?”", "response": "sql SELECT lr.loan_id FROM LoanReviews lr JOIN Loans l ON lr.loan_id = l.loan_id WHERE lr.reviewer_role = 'CreditAnalyst' AND l.status = 'Approved';"}
{"prompt": "Underwriters", "response": "nan"}
{"prompt": "“Which loan applications are waiting for final underwriting approval?”", "response": "sql SELECT * FROM Loans WHERE status = 'Pending Underwriting';"}
{"prompt": "“What is the full profile of Rajesh’s loan application?”", "response": "sql SELECT * FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "“What documents and comments were submitted in earlier reviews for Rajesh's loan?”", "response": "sql SELECT comments, review_date, reviewer_role FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“Have I already reviewed Rajesh's application?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "“What is the interest rate and term of Rajesh’s approved loan?”", "response": "sql SELECT interest_rate, term_months FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') AND status = 'Approved';"}
{"prompt": "“Which loans have I reviewed this month?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND review_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "“What comments did I write in my most recent review?”", "response": "sql SELECT comments FROM LoanReviews WHERE reviewer_role = 'Underwriter' ORDER BY review_date DESC LIMIT 1;"}
{"prompt": "“Which loans have I marked for re-evaluation due to appraisal issues?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND comments LIKE '%appraisal%re-evaluation%';"}
{"prompt": "“What are the most recent underwriting decisions I made?”", "response": "sql SELECT loan_id, decision FROM LoanReviews WHERE reviewer_role = 'Underwriter' ORDER BY review_date DESC;"}
{"prompt": "“Which loans were denied after my review?”", "response": "sql SELECT lr.loan_id FROM LoanReviews lr JOIN Loans l ON lr.loan_id = l.loan_id WHERE lr.reviewer_role = 'Underwriter' AND l.status = 'Denied';"}
{"prompt": "“Which approved loans had property appraisal issues flagged during review?”", "response": "sql SELECT lr.loan_id FROM LoanReviews lr JOIN Loans l ON lr.loan_id = l.loan_id WHERE lr.comments LIKE '%appraisal%' AND l.status = 'Approved';"}
{"prompt": "“What’s the current approval status of all loans I’ve reviewed?”", "response": "sql SELECT lr.loan_id, l.status FROM LoanReviews lr JOIN Loans l ON lr.loan_id = l.loan_id WHERE lr.reviewer_role = 'Underwriter';"}
{"prompt": "“Which loans are pending final decision after underwriting review?”", "response": "sql SELECT * FROM Loans WHERE status = 'Pending Final Approval';"}
{"prompt": "“What is the average loan amount I’ve approved?”", "response": "sql SELECT AVG(l.loan_amount) FROM LoanReviews lr JOIN Loans l ON lr.loan_id = l.loan_id WHERE lr.reviewer_role = 'Underwriter' AND l.status = 'Approved';"}
{"prompt": "“Show me all reviews by underwriters in the past week.”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND review_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“What is the maximum loan amount I’ve approved so far?”", "response": "sql SELECT MAX(l.loan_amount) FROM LoanReviews lr JOIN Loans l ON lr.loan_id = l.loan_id WHERE lr.reviewer_role = 'Underwriter' AND l.status = 'Approved';"}
{"prompt": "“Which loans had underwriting comments about insurance documents?”", "response": "sql SELECT loan_id, comments FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND comments LIKE '%insurance%';"}
{"prompt": "“Which loans did I review today?”", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND review_date = CURRENT_DATE;"}
{"prompt": "“What is the complete decision trail for Rajesh’s loan?”", "response": "sql SELECT reviewer_role, review_date, decision FROM LoanReviews WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY review_date;"}
{"prompt": "“Which loans were flagged by both Credit Analyst and Underwriter?”", "response": "sql SELECT loan_id FROM LoanReviews WHERE reviewer_role = 'CreditAnalyst' INTERSECT SELECT loan_id FROM LoanReviews WHERE reviewer_role = 'Underwriter';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "What support tickets are currently open for Rajesh?", "response": "sql SELECT * FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') AND status != 'Resolved';"}
{"prompt": "How many support tickets are unresolved right now?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "When did Rajesh raise his last support ticket?", "response": "sql SELECT MAX(created_at) FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "Which support tickets were resolved today?", "response": "sql SELECT * FROM SupportTickets WHERE resolved_at::date = CURRENT_DATE;"}
{"prompt": "What are the common issues applicants raise?", "response": "sql SELECT subject, COUNT(*) AS issue_count FROM SupportTickets GROUP BY subject ORDER BY issue_count DESC;"}
{"prompt": "Which applicants have more than 2 open tickets?", "response": "sql SELECT applicant_id, COUNT(*) FROM SupportTickets WHERE status != 'Resolved' GROUP BY applicant_id HAVING COUNT(*) > 2;"}
{"prompt": "How long does it usually take to resolve a support ticket?", "response": "sql SELECT AVG(resolved_at - created_at) AS avg_resolution_time FROM SupportTickets WHERE status = 'Resolved';"}
{"prompt": "Which support tickets mention login or document upload issues?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%login%' OR description LIKE '%upload%';"}
{"prompt": "How many support tickets were created in the last 7 days?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE created_at >= CURRENT_TIMESTAMP - INTERVAL '7 days';"}
{"prompt": "What is the current status of Rajesh’s loan application?", "response": "sql SELECT status FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh');"}
{"prompt": "Who are the applicants with the highest number of support tickets?", "response": "sql SELECT applicant_id, COUNT(*) AS total_tickets FROM SupportTickets GROUP BY applicant_id ORDER BY total_tickets DESC LIMIT 5;"}
{"prompt": "What’s the repayment status of Rajesh’s latest payment?", "response": "sql SELECT payment_status FROM Payments WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "How many payments has Rajesh made so far?", "response": "sql SELECT COUNT(*) FROM Payments WHERE loan_id = (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "Which support tickets have not been resolved for more than 3 days?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND created_at < CURRENT_TIMESTAMP - INTERVAL '3 days';"}
{"prompt": "Which support tickets were closed in the last month?", "response": "sql SELECT * FROM SupportTickets WHERE status = 'Resolved' AND resolved_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What’s the latest support update for Rajesh?", "response": "sql SELECT * FROM SupportTickets WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "Which customers have both support tickets and approved loans?", "response": "sql SELECT DISTINCT s.applicant_id FROM SupportTickets s JOIN Loans l ON s.applicant_id = l.applicant_id WHERE l.status = 'Approved';"}
{"prompt": "Which loans have had failed payments?", "response": "sql SELECT DISTINCT loan_id FROM Payments WHERE payment_status = 'Failed';"}
{"prompt": "How many support tickets are still pending from this week?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status != 'Resolved' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which applicants raised more than one ticket today?", "response": "sql SELECT applicant_id, COUNT(*) FROM SupportTickets WHERE created_at::date = CURRENT_DATE GROUP BY applicant_id HAVING COUNT(*) > 1;"}
{"prompt": "Branch Managers", "response": "nan"}
{"prompt": "Which loan applications were submitted by applicants at my branch?", "response": "sql SELECT * FROM Loans WHERE applicant_id IN (SELECT applicant_id FROM LoanApplicants); -- Assuming applicant-branch mapping exists or all applicants belong to this branch"}
{"prompt": "What is the total amount of loans disbursed this month by my branch?", "response": "sql SELECT SUM(loan_amount) FROM Loans WHERE application_date >= date_trunc('month', CURRENT_DATE) AND status = 'Approved';"}
{"prompt": "Who are the loan officers working under my branch?", "response": "sql SELECT * FROM LoanOfficers; -- Assuming loan officers are assigned to branch, would filter by branch_id if present"}
{"prompt": "How many loans have been approved in my branch this quarter?", "response": "sql SELECT COUNT(*) FROM Loans WHERE status = 'Approved' AND application_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Which applicants have loans pending for more than 7 days?", "response": "sql SELECT * FROM Loans WHERE status = 'Pending' AND application_date < CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the compliance issues flagged in my branch this month?", "response": "sql SELECT * FROM ComplianceRecords WHERE compliance_date >= date_trunc('month', CURRENT_DATE) AND status != 'Compliant';"}
{"prompt": "Which loans have been reviewed by underwriters this week?", "response": "sql SELECT * FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND review_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which loan applications from Rajesh had documentation issues?", "response": "sql SELECT * FROM LoanReviews WHERE loan_id IN (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh')) AND comments LIKE '%document%';"}
{"prompt": "Who are the top-performing officers based on number of approved loans?", "response": "sql SELECT officer_id, COUNT(*) AS approved_loans FROM Loans WHERE status = 'Approved' GROUP BY officer_id ORDER BY approved_loans DESC; -- Requires officer_id in Loans table"}
{"prompt": "What is the average interest rate on approved loans this month?", "response": "sql SELECT AVG(interest_rate) FROM Loans WHERE status = 'Approved' AND application_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which branch staff resolved the most support tickets?", "response": "sql SELECT applicant_id, COUNT(*) AS resolved_count FROM SupportTickets WHERE status = 'Resolved' GROUP BY applicant_id ORDER BY resolved_count DESC LIMIT 5; -- No agent column in schema, assuming applicant_id for now"}
{"prompt": "Are there any support tickets open for more than 5 days?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND created_at < CURRENT_TIMESTAMP - INTERVAL '5 days';"}
{"prompt": "Which compliance cases were marked non-compliant this year?", "response": "sql SELECT * FROM ComplianceRecords WHERE status = 'Non-Compliant' AND compliance_date >= date_trunc('year', CURRENT_DATE);"}
{"prompt": "What is the average loan processing time in my branch?", "response": "sql SELECT AVG(review_date - application_date) AS avg_processing_time FROM Loans JOIN LoanReviews USING (loan_id);"}
{"prompt": "How many payments were missed this month?", "response": "sql SELECT COUNT(*) FROM Payments WHERE payment_status = 'Failed' AND payment_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What’s the total repayment collected this quarter?", "response": "sql SELECT SUM(amount) FROM Payments WHERE payment_status = 'Successful' AND payment_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Which applicants have repeated compliance issues?", "response": "sql SELECT loan_id, COUNT(*) FROM ComplianceRecords WHERE status != 'Compliant' GROUP BY loan_id HAVING COUNT(*) > 1;"}
{"prompt": "How many loan applications were handled by underwriters last month?", "response": "sql SELECT COUNT(*) FROM LoanReviews WHERE reviewer_role = 'Underwriter' AND review_date >= date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' AND review_date < date_trunc('month', CURRENT_DATE);"}
{"prompt": "What is the list of pending support tickets in my branch?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved'; -- Filter by branch_id if available in SupportTickets or applicants table"}
{"prompt": "Which day this month had the highest number of loan applications?", "response": "sql SELECT application_date, COUNT(*) AS applications FROM Loans WHERE application_date >= date_trunc('month', CURRENT_DATE) GROUP BY application_date ORDER BY applications DESC LIMIT 1;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "Show me all loan disbursements made this month.", "response": "sql SELECT * FROM Loans WHERE status = 'Approved' AND application_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What is the total loan amount disbursed so far this quarter?", "response": "sql SELECT SUM(loan_amount) FROM Loans WHERE status = 'Approved' AND application_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "List all payments received this month.", "response": "sql SELECT * FROM Payments WHERE payment_status = 'Successful' AND payment_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What is the total repayment amount received this month?", "response": "sql SELECT SUM(amount) FROM Payments WHERE payment_status = 'Successful' AND payment_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "How many payments were missed this month?", "response": "sql SELECT COUNT(*) FROM Payments WHERE payment_status != 'Successful' AND payment_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List overdue loan payments beyond 10 days.", "response": "sql SELECT * FROM Payments WHERE payment_status != 'Successful' AND payment_date < CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "What are the total outstanding payments for all loans?", "response": "sql SELECT loan_id, SUM(amount) AS total_due FROM Payments WHERE payment_status != 'Successful' GROUP BY loan_id;"}
{"prompt": "Show all payments for Rajesh's loans.", "response": "sql SELECT * FROM Payments WHERE loan_id IN (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh'));"}
{"prompt": "How much interest income has been earned this year?", "response": "sql SELECT SUM((loan_amount * interest_rate * term_months) / 1200) AS estimated_interest FROM Loans WHERE status = 'Approved' AND application_date >= date_trunc('year', CURRENT_DATE);"}
{"prompt": "List loans with monthly repayment schedule exceeding ₹50,000.", "response": "sql SELECT * FROM Loans WHERE (loan_amount * (interest_rate/1200)) / (1 - POWER(1 + interest_rate/1200, -term_months)) > 50000;"}
{"prompt": "Generate a list of all financial transactions (payments).", "response": "sql SELECT * FROM Payments ORDER BY payment_date DESC;"}
{"prompt": "Identify loans with no repayments made yet.", "response": "sql SELECT * FROM Loans WHERE loan_id NOT IN (SELECT DISTINCT loan_id FROM Payments WHERE payment_status = 'Successful');"}
{"prompt": "Which loan accounts have more than 3 failed payments?", "response": "sql SELECT loan_id, COUNT(*) AS failed_payments FROM Payments WHERE payment_status = 'Failed' GROUP BY loan_id HAVING COUNT(*) > 3;"}
{"prompt": "What is the total value of failed payments this quarter?", "response": "sql SELECT SUM(amount) FROM Payments WHERE payment_status = 'Failed' AND payment_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "What are the daily repayment collections for the past 7 days?", "response": "sql SELECT payment_date, SUM(amount) AS daily_total FROM Payments WHERE payment_status = 'Successful' AND payment_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY payment_date ORDER BY payment_date;"}
{"prompt": "List all successfully resolved support tickets related to payment issues.", "response": "sql SELECT * FROM SupportTickets WHERE status = 'Resolved' AND (subject LIKE '%payment%' OR description LIKE '%payment%');"}
{"prompt": "What is the average payment amount per transaction?", "response": "sql SELECT AVG(amount) FROM Payments WHERE payment_status = 'Successful';"}
{"prompt": "Show all payment methods used in successful payments.", "response": "sql SELECT DISTINCT payment_method FROM Payments WHERE payment_status = 'Successful';"}
{"prompt": "What is the total number of successful vs failed payments this month?", "response": "sql SELECT payment_status, COUNT(*) FROM Payments WHERE payment_date >= date_trunc('month', CURRENT_DATE) GROUP BY payment_status;"}
{"prompt": "List all payments and their method for Rajesh’s approved loans.", "response": "sql SELECT payment_date, amount, payment_method FROM Payments WHERE loan_id IN (SELECT loan_id FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') AND status = 'Approved');"}
{"prompt": "Compliance / Risk Management Team", "response": "nan"}
{"prompt": "Show all loan applications flagged for compliance issues.", "response": "sql SELECT * FROM Loans WHERE compliance_flag = TRUE;"}
{"prompt": "List all loans with missing KYC or verification documents.", "response": "sql SELECT * FROM Loans WHERE kyc_verified = FALSE OR income_verified = FALSE;"}
{"prompt": "How many loan applications failed compliance checks this month?", "response": "sql SELECT COUNT(*) FROM Loans WHERE compliance_flag = TRUE AND application_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List applicants flagged for potential fraud risk.", "response": "sql SELECT * FROM LoanApplicants WHERE fraud_flag = TRUE;"}
{"prompt": "What loans are under enhanced due diligence?", "response": "sql SELECT * FROM Loans WHERE due_diligence_level = 'Enhanced';"}
{"prompt": "Show all loan applications from high-risk zones.", "response": "sql SELECT * FROM Loans WHERE region IN (SELECT region FROM RiskZones WHERE risk_level = 'High');"}
{"prompt": "Find all loans where the applicant's credit score is below 600.", "response": "sql SELECT * FROM Loans WHERE credit_score < 600;"}
{"prompt": "What is the count of high-risk loans disbursed last quarter?", "response": "sql SELECT COUNT(*) FROM Loans WHERE risk_category = 'High' AND status = 'Approved' AND application_date >= date_trunc('quarter', CURRENT_DATE - INTERVAL '3 months');"}
{"prompt": "List loans with suspicious repayment behavior (frequent late payments).", "response": "sql SELECT loan_id FROM Payments WHERE payment_status = 'Failed' GROUP BY loan_id HAVING COUNT(*) >= 3;"}
{"prompt": "Show all loans under Rajesh that have raised compliance concerns.", "response": "sql SELECT * FROM Loans WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE first_name = 'Rajesh') AND compliance_flag = TRUE;"}
{"prompt": "How many loan applications are currently under review for AML checks?", "response": "sql SELECT COUNT(*) FROM Loans WHERE aml_check_status = 'Pending';"}
{"prompt": "List all applicants with document discrepancies.", "response": "sql SELECT * FROM LoanApplicants WHERE document_verified = FALSE;"}
{"prompt": "What are the most common reasons for loan rejections due to compliance?", "response": "sql SELECT rejection_reason, COUNT(*) FROM Loans WHERE status = 'Rejected' GROUP BY rejection_reason;"}
{"prompt": "Find all loans where the amount disbursed exceeds 90% of the property value.", "response": "sql SELECT * FROM Loans WHERE (loan_amount / property_value) > 0.9;"}
{"prompt": "Show all loans where the same applicant applied multiple times.", "response": "sql SELECT applicant_id, COUNT(*) FROM Loans GROUP BY applicant_id HAVING COUNT(*) > 1;"}
{"prompt": "List all approved loans that skipped document verification.", "response": "sql SELECT * FROM Loans WHERE status = 'Approved' AND (kyc_verified = FALSE OR income_verified = FALSE);"}
{"prompt": "What is the average credit score of applicants with rejected loans?", "response": "sql SELECT AVG(credit_score) FROM Loans WHERE status = 'Rejected';"}
{"prompt": "Show all loans associated with applicants flagged by the risk team.", "response": "sql SELECT * FROM Loans WHERE applicant_id IN (SELECT applicant_id FROM LoanApplicants WHERE risk_flag = TRUE);"}
{"prompt": "Identify loan applications submitted with duplicate identity proofs.", "response": "sql SELECT identity_proof, COUNT(*) FROM LoanApplicants GROUP BY identity_proof HAVING COUNT(*) > 1;"}
{"prompt": "Which regions show the highest frequency of loan compliance failures?", "response": "sql SELECT region, COUNT(*) AS compliance_issues FROM Loans WHERE compliance_flag = TRUE GROUP BY region ORDER BY compliance_issues DESC;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Show all users with admin-level access in the loan system.", "response": "sql SELECT username, role FROM Users WHERE role = 'Admin';"}
{"prompt": "List all failed login attempts in the past 24 hours.", "response": "sql SELECT * FROM LoginLogs WHERE status = 'Failed' AND login_time >= NOW() - INTERVAL '1 day';"}
{"prompt": "Find all users who accessed Rajesh's loan application data.", "response": "sql SELECT * FROM AccessLogs WHERE resource = 'LoanApplication' AND resource_id = (SELECT application_id FROM Loans WHERE applicant_name = 'Rajesh');"}
{"prompt": "Show system errors logged today in the loan management system.", "response": "sql SELECT * FROM SystemLogs WHERE log_level = 'ERROR' AND log_time >= CURRENT_DATE;"}
{"prompt": "Which servers experienced high CPU usage in the past hour?", "response": "sql SELECT * FROM ServerMetrics WHERE metric_type = 'CPU' AND value > 80 AND log_time >= NOW() - INTERVAL '1 hour';"}
{"prompt": "List all documents uploaded by Rajesh during loan application.", "response": "sql SELECT * FROM UploadedDocuments WHERE applicant_id = (SELECT applicant_id FROM LoanApplicants WHERE name = 'Rajesh');"}
{"prompt": "How many users have permission to edit loan status?", "response": "sql SELECT COUNT(*) FROM UserPermissions WHERE permission = 'edit_loan_status';"}
{"prompt": "Display the last backup timestamp of the loan database.", "response": "sql SELECT MAX(backup_time) FROM DatabaseBackups WHERE db_name = 'LoanDB';"}
{"prompt": "Identify all IP addresses with more than 10 login failures today.", "response": "sql SELECT ip_address, COUNT(*) AS failures FROM LoginLogs WHERE status = 'Failed' AND login_time >= CURRENT_DATE GROUP BY ip_address HAVING COUNT(*) > 10;"}
{"prompt": "List all active user sessions in the system.", "response": "sql SELECT * FROM UserSessions WHERE session_status = 'Active';"}
{"prompt": "Show logs of document upload errors in the last week.", "response": "sql SELECT * FROM SystemLogs WHERE log_message LIKE '%document upload%' AND log_level = 'ERROR' AND log_time >= NOW() - INTERVAL '7 days';"}
{"prompt": "Find all users who changed permissions in the past 7 days.", "response": "sql SELECT * FROM PermissionLogs WHERE change_date >= NOW() - INTERVAL '7 days';"}
{"prompt": "What are the most common system warnings in the past month?", "response": "sql SELECT log_message, COUNT(*) FROM SystemLogs WHERE log_level = 'WARNING' AND log_time >= NOW() - INTERVAL '1 month' GROUP BY log_message ORDER BY COUNT(*) DESC;"}
{"prompt": "Retrieve access history for credit analysts.", "response": "sql SELECT * FROM AccessLogs WHERE user_role = 'Credit Analyst';"}
{"prompt": "Check which tables are most accessed in the loan system.", "response": "sql SELECT table_name, COUNT(*) AS access_count FROM QueryLogs GROUP BY table_name ORDER BY access_count DESC;"}
{"prompt": "Show changes in role permissions over the past 30 days.", "response": "sql SELECT * FROM PermissionLogs WHERE change_type = 'Role Update' AND change_date >= NOW() - INTERVAL '30 days';"}
{"prompt": "List scheduled system maintenance events for this month.", "response": "sql SELECT * FROM MaintenanceSchedule WHERE maintenance_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "How many times was the disaster recovery system tested this quarter?", "response": "sql SELECT COUNT(*) FROM DisasterRecoveryLogs WHERE test_status = 'Completed' AND test_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Find system usage spikes based on concurrent user sessions.", "response": "sql SELECT log_time, COUNT(*) AS active_sessions FROM UserSessions GROUP BY log_time HAVING COUNT(*) > 100;"}
{"prompt": "Show the history of Rajesh’s document storage records.", "response": "sql SELECT * FROM DocumentStorage WHERE user_id = (SELECT applicant_id FROM LoanApplicants WHERE name = 'Rajesh');"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Show total number of loans approved this year.", "response": "sql SELECT COUNT(*) FROM Loans WHERE status = 'Approved' AND approval_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "List average loan amount by customer region.", "response": "sql SELECT region, AVG(loan_amount) FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id GROUP BY region;"}
{"prompt": "Get default rate per region.", "response": "sql SELECT region, ROUND(SUM(CASE WHEN status = 'Defaulted' THEN 1 ELSE 0 END)::numeric / COUNT(*) * 100, 2) AS default_rate FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id GROUP BY region;"}
{"prompt": "Find top 5 regions with highest loan default counts.", "response": "sql SELECT region, COUNT(*) AS defaults FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id WHERE status = 'Defaulted' GROUP BY region ORDER BY defaults DESC LIMIT 5;"}
{"prompt": "Show monthly loan approval trend for the past year.", "response": "sql SELECT DATE_TRUNC('month', approval_date) AS month, COUNT(*) AS approvals FROM Loans WHERE approval_date >= CURRENT_DATE - INTERVAL '12 months' GROUP BY month ORDER BY month;"}
{"prompt": "Identify customers with more than 2 previous defaults.", "response": "sql SELECT customer_id, COUNT(*) AS default_count FROM Loans WHERE status = 'Defaulted' GROUP BY customer_id HAVING COUNT(*) > 2;"}
{"prompt": "Compare approval rates between salaried and self-employed customers.", "response": "sql SELECT employment_type, ROUND(SUM(CASE WHEN status = 'Approved' THEN 1 ELSE 0 END)::numeric / COUNT(*) * 100, 2) AS approval_rate FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id GROUP BY employment_type;"}
{"prompt": "Get average repayment duration for approved loans.", "response": "sql SELECT AVG(repayment_duration_months) FROM Loans WHERE status = 'Approved';"}
{"prompt": "Which customer segment has the highest loan demand?", "response": "sql SELECT segment, COUNT(*) AS loan_count FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id GROUP BY segment ORDER BY loan_count DESC;"}
{"prompt": "List loan types and their average default rates.", "response": "sql SELECT loan_type, ROUND(SUM(CASE WHEN status = 'Defaulted' THEN 1 ELSE 0 END)::numeric / COUNT(*) * 100, 2) AS default_rate FROM Loans GROUP BY loan_type;"}
{"prompt": "Find high-risk customers (credit score < 600 and recent default).", "response": "sql SELECT customer_id FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id WHERE credit_score < 600 AND status = 'Defaulted';"}
{"prompt": "Show number of loans applied for during a marketing campaign.", "response": "sql SELECT campaign_id, COUNT(*) AS loan_count FROM Campaigns JOIN Loans ON Campaigns.campaign_id = Loans.campaign_id GROUP BY campaign_id;"}
{"prompt": "Find campaign with highest approval rate.", "response": "sql SELECT campaign_id, ROUND(SUM(CASE WHEN Loans.status = 'Approved' THEN 1 ELSE 0 END)::numeric / COUNT(*) * 100, 2) AS approval_rate FROM Campaigns JOIN Loans ON Campaigns.campaign_id = Loans.campaign_id GROUP BY campaign_id ORDER BY approval_rate DESC LIMIT 1;"}
{"prompt": "Display loan amounts and default status by age group.", "response": "sql SELECT age_group, AVG(loan_amount) AS avg_loan, SUM(CASE WHEN status = 'Defaulted' THEN 1 ELSE 0 END) AS defaults FROM (SELECT *, CASE WHEN age < 30 THEN 'Under 30' WHEN age BETWEEN 30 AND 50 THEN '30-50' ELSE 'Above 50' END AS age_group FROM Customers) AS C JOIN Loans ON C.customer_id = Loans.customer_id GROUP BY age_group;"}
{"prompt": "List customers who repaid their loans early.", "response": "sql SELECT customer_id, loan_id FROM Loans WHERE actual_repayment_date < expected_repayment_date;"}
{"prompt": "Find average loan term (in months) for different loan types.", "response": "sql SELECT loan_type, AVG(repayment_duration_months) FROM Loans GROUP BY loan_type;"}
{"prompt": "Which region has the best repayment behavior (least defaults)?", "response": "sql SELECT region, ROUND(SUM(CASE WHEN status = 'Defaulted' THEN 1 ELSE 0 END)::numeric / COUNT(*) * 100, 2) AS default_rate FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id GROUP BY region ORDER BY default_rate ASC LIMIT 1;"}
{"prompt": "How many customers defaulted within first 6 months of loan?", "response": "sql SELECT COUNT(*) FROM Loans WHERE status = 'Defaulted' AND EXTRACT(MONTH FROM age(actual_repayment_date, disbursement_date)) <= 6;"}
{"prompt": "Get percentage of repeat borrowers in total loan customers.", "response": "sql SELECT ROUND((COUNT(DISTINCT customer_id) FILTER (WHERE loan_count > 1)::numeric / COUNT(DISTINCT customer_id)) * 100, 2) AS repeat_borrower_percentage FROM (SELECT customer_id, COUNT(*) AS loan_count FROM Loans GROUP BY customer_id) AS LoanCounts;"}
{"prompt": "Show impact of Snehal’s flagged region on approval rate.", "response": "sql SELECT region, ROUND(SUM(CASE WHEN status = 'Approved' THEN 1 ELSE 0 END)::numeric / COUNT(*) * 100, 2) AS approval_rate FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id WHERE region = 'FlaggedRegion';"}
{"prompt": "WarehouseDB", "response": "nan"}
{"prompt": "Inventory Clerks", "response": "nan"}
{"prompt": "What are the current stock levels of all items in the inventory?", "response": "SELECT item_id, name, quantity_in_stock FROM InventoryItems;"}
{"prompt": "Which items have stock levels below their reorder threshold?", "response": "SELECT item_id, name, quantity_in_stock, reorder_level FROM InventoryItems WHERE quantity_in_stock < reorder_level;"}
{"prompt": "Show me the description and category for each inventory item.", "response": "SELECT name, description, category FROM InventoryItems;"}
{"prompt": "Which suppliers provide the items that are currently below reorder level?", "response": "SELECT DISTINCT s.supplier_id, s.name, s.contact_name FROM InventoryItems i JOIN Suppliers s ON i.supplier_id = s.supplier_id WHERE i.quantity_in_stock < i.reorder_level;"}
{"prompt": "What was the most recent order placed with any supplier?", "response": "SELECT * FROM Orders ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "For a given order, what items were ordered and in what quantity?", "response": "SELECT oi.item_id, ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = <ORDER_ID>;"}
{"prompt": "Which orders are still pending delivery?", "response": "SELECT * FROM Orders WHERE status != 'Delivered';"}
{"prompt": "Show me all shipments that were sent out today.", "response": "SELECT * FROM Shipping WHERE shipping_date = CURRENT_DATE;"}
{"prompt": "I want to review all items from the electronics category.", "response": "SELECT * FROM InventoryItems WHERE category = 'Electronics';"}
{"prompt": "List all support tickets I’ve raised in the system.", "response": "SELECT * FROM SupportTickets WHERE raised_by_id = <RINA_USER_ID>;"}
{"prompt": "Who are the suppliers I frequently coordinate with?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Orders o JOIN Suppliers s ON o.supplier_id = s.supplier_id;"}
{"prompt": "Which inventory items had the highest quantities ordered recently?", "response": "SELECT item_id, SUM(quantity) AS total_ordered FROM OrderItems GROUP BY item_id ORDER BY total_ordered DESC;"}
{"prompt": "Are there any unresolved support tickets related to inventory issues?", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved' AND subject LIKE '%inventory%';"}
{"prompt": "Which items arrived in the last shipment and what were their quantities?", "response": "SELECT oi.item_id, ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id JOIN Shipping s ON oi.order_id = s.order_id ORDER BY s.shipping_date DESC LIMIT 10;"}
{"prompt": "What’s the reorder status of items managed by our current supplier?", "response": "SELECT i.item_id, i.name, i.quantity_in_stock, i.reorder_level FROM InventoryItems i WHERE i.supplier_id = <SUPPLIER_ID> AND i.quantity_in_stock < i.reorder_level;"}
{"prompt": "Can I see the full contact details of all our suppliers?", "response": "SELECT name, contact_name, phone, email, address FROM Suppliers;"}
{"prompt": "What items have never been reordered despite being in low stock?", "response": "SELECT i.item_id, i.name FROM InventoryItems i WHERE i.quantity_in_stock < i.reorder_level AND i.item_id NOT IN (SELECT item_id FROM OrderItems);"}
{"prompt": "What is the total cost of orders placed this week?", "response": "SELECT SUM(total_cost) FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which warehouse manager is responsible for the current warehouse?", "response": "SELECT wm.first_name, wm.last_name, wm.email FROM Warehouses w JOIN WarehouseManagers wm ON w.manager_id = wm.manager_id WHERE w.warehouse_id = <WAREHOUSE_ID>;"}
{"prompt": "Are there any unusual transactions recorded by the finance team today?", "response": "SELECT * FROM Finance WHERE transaction_date = CURRENT_DATE AND (amount > 10000 OR transaction_type LIKE '%adjustment%');"}
{"prompt": "Warehouse Managers", "response": "nan"}
{"prompt": "What are the current inventory levels across all items?", "response": "SELECT item_id, name, quantity_in_stock FROM InventoryItems;"}
{"prompt": "Which orders are marked as urgent and need immediate attention?", "response": "SELECT * FROM Orders WHERE status = 'Urgent'; (if 'Urgent' is a custom status value)"}
{"prompt": "Show me the shipment schedule for the next 3 days.", "response": "SELECT * FROM Shipping WHERE shipping_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '3 days';"}
{"prompt": "Which inventory items are most frequently reordered?", "response": "SELECT item_id, COUNT(*) AS reorder_count FROM OrderItems GROUP BY item_id ORDER BY reorder_count DESC;"}
{"prompt": "What is the status of all ongoing orders?", "response": "SELECT order_id, status FROM Orders WHERE status NOT IN ('Delivered', 'Cancelled');"}
{"prompt": "Are there any shipments delayed beyond the expected delivery date?", "response": "SELECT o.order_id, s.shipping_date, o.expected_delivery_date FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.shipping_date > o.expected_delivery_date;"}
{"prompt": "What items have low turnover and are taking up too much space?", "response": "SELECT item_id, name, quantity_in_stock FROM InventoryItems WHERE quantity_in_stock > reorder_level * 3; (adjustable logic)"}
{"prompt": "List all warehouse managers and their contact details.", "response": "SELECT first_name, last_name, email, phone FROM WarehouseManagers;"}
{"prompt": "Which items have not been updated in inventory for a while?", "response": "SELECT i.item_id, i.name FROM InventoryItems i LEFT JOIN OrderItems oi ON i.item_id = oi.item_id GROUP BY i.item_id, i.name HAVING MAX(oi.order_id) IS NULL OR MAX(oi.order_id) < (SELECT MAX(order_id) - 10 FROM Orders);"}
{"prompt": "What are the total incoming shipments scheduled for this week?", "response": "SELECT COUNT(*) FROM Shipping WHERE shipping_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Which support tickets are open that may affect warehouse operations?", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%warehouse%' OR description LIKE '%warehouse%');"}
{"prompt": "Which orders are due for delivery today?", "response": "SELECT * FROM Orders WHERE expected_delivery_date = CURRENT_DATE;"}
{"prompt": "Show me the list of orders placed in the last 5 days.", "response": "SELECT * FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '5 days';"}
{"prompt": "Who are the logistics coordinators I should reach out to for today's dispatch?", "response": "SELECT first_name, last_name, email FROM LogisticsCoordinators;"}
{"prompt": "Are there any discrepancies between ordered quantities and received shipments?", "response": "SELECT oi.order_id, oi.item_id, oi.quantity AS ordered_qty, ii.quantity_in_stock FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.quantity > ii.quantity_in_stock; (hypothetical check)"}
{"prompt": "What is the average cost per order in the past month?", "response": "SELECT AVG(total_cost) FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which suppliers are responsible for the delayed shipments?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Orders o JOIN Shipping sh ON o.order_id = sh.order_id JOIN Suppliers s ON o.supplier_id = s.supplier_id WHERE sh.shipping_date > o.expected_delivery_date;"}
{"prompt": "Which orders are completely fulfilled and delivered?", "response": "SELECT * FROM Orders WHERE status = 'Delivered';"}
{"prompt": "How many orders have been processed by each warehouse clerk?", "response": "SELECT ic.clerk_id, ic.first_name, ic.last_name, COUNT(o.order_id) AS orders_handled FROM InventoryClerks ic JOIN SupportTickets st ON ic.clerk_id = st.raised_by_id JOIN Orders o ON st.ticket_id = o.order_id GROUP BY ic.clerk_id, ic.first_name, ic.last_name; (requires some role-based linking logic)"}
{"prompt": "Show me all finance transactions related to warehouse operations this month.", "response": "SELECT * FROM Finance WHERE description LIKE '%warehouse%' AND transaction_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Pickers / Packers", "response": "nan"}
{"prompt": "Which orders do I need to pick items for today?", "response": "SELECT * FROM Orders WHERE order_date = CURRENT_DATE AND status NOT IN ('Packed', 'Shipped');"}
{"prompt": "What items do I need to pick for a specific order?", "response": "SELECT oi.item_id, ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = <ORDER_ID>;"}
{"prompt": "Are any of the items I picked today below reorder level now?", "response": "SELECT item_id, name, quantity_in_stock, reorder_level FROM InventoryItems WHERE quantity_in_stock < reorder_level;"}
{"prompt": "Which orders have been packed and are ready for shipment?", "response": "SELECT * FROM Orders WHERE status = 'Packed';"}
{"prompt": "Show me all orders I helped pack today.", "response": "SELECT o.order_id, o.status FROM Orders o JOIN SupportTickets st ON o.order_id = st.ticket_id WHERE st.raised_by_id = <SONAL_USER_ID> AND st.created_at::date = CURRENT_DATE; (Assuming Sonal logs packing issues as tickets, due to schema limitations)"}
{"prompt": "How many different items do I need to pick for the current batch of orders?", "response": "SELECT COUNT(DISTINCT item_id) FROM OrderItems WHERE order_id IN (SELECT order_id FROM Orders WHERE order_date = CURRENT_DATE);"}
{"prompt": "Which items in today’s orders are out of stock?", "response": "SELECT ii.item_id, ii.name FROM InventoryItems ii JOIN OrderItems oi ON ii.item_id = oi.item_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date = CURRENT_DATE AND ii.quantity_in_stock = 0;"}
{"prompt": "Which orders still need to be picked and packed?", "response": "SELECT * FROM Orders WHERE status NOT IN ('Packed', 'Shipped', 'Delivered');"}
{"prompt": "What is the total quantity I picked today across all orders?", "response": "SELECT SUM(oi.quantity) FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date = CURRENT_DATE;"}
{"prompt": "Show me the picking list for the largest order today.", "response": "SELECT oi.item_id, ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = (SELECT order_id FROM OrderItems GROUP BY order_id ORDER BY SUM(quantity) DESC LIMIT 1);"}
{"prompt": "Which items are most frequently picked by our team?", "response": "SELECT item_id, COUNT(*) AS times_picked FROM OrderItems GROUP BY item_id ORDER BY times_picked DESC;"}
{"prompt": "Are there any discrepancies between picked quantities and inventory data?", "response": "SELECT oi.item_id, ii.name, oi.quantity, ii.quantity_in_stock FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.quantity > ii.quantity_in_stock;"}
{"prompt": "What is the status of all orders picked in the last 2 days?", "response": "SELECT o.order_id, o.status FROM Orders o WHERE o.order_date >= CURRENT_DATE - INTERVAL '2 days';"}
{"prompt": "What items should I be careful with due to low stock?", "response": "SELECT item_id, name, quantity_in_stock FROM InventoryItems WHERE quantity_in_stock < reorder_level * 1.5;"}
{"prompt": "Which suppliers provided items for today’s orders?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN InventoryItems i ON s.supplier_id = i.supplier_id JOIN OrderItems oi ON i.item_id = oi.item_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date = CURRENT_DATE;"}
{"prompt": "Which shipments are scheduled to leave today?", "response": "SELECT * FROM Shipping WHERE shipping_date = CURRENT_DATE;"}
{"prompt": "Are there any support tickets raised today related to packing issues?", "response": "SELECT * FROM SupportTickets WHERE created_at::date = CURRENT_DATE AND (subject LIKE '%pack%' OR description LIKE '%pack%');"}
{"prompt": "How many packages have I packed this week?", "response": "SELECT COUNT(*) FROM Orders WHERE status = 'Packed' AND order_date >= CURRENT_DATE - INTERVAL '7 days'; (Assuming she packed them all)"}
{"prompt": "Show me all the orders that I scanned and confirmed today.", "response": "SELECT o.order_id, o.status FROM Orders o JOIN SystemLogs sl ON o.order_id = sl.user_id WHERE sl.timestamp::date = CURRENT_DATE AND sl.action LIKE '%scanned%'; (Assumes barcode scanning is logged in SystemLogs)"}
{"prompt": "What are the most common categories of items I picked today?", "response": "SELECT i.category, COUNT(*) AS count FROM InventoryItems i JOIN OrderItems oi ON i.item_id = oi.item_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date = CURRENT_DATE GROUP BY i.category ORDER BY count DESC;"}
{"prompt": "Shipping & Receiving Staff", "response": "nan"}
{"prompt": "Which shipments are scheduled to arrive today?", "response": "SELECT * FROM Orders WHERE expected_delivery_date = CURRENT_DATE;"}
{"prompt": "What incoming shipments are delayed past their expected delivery date?", "response": "SELECT o.order_id, o.expected_delivery_date FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.shipping_date > o.expected_delivery_date;"}
{"prompt": "Show me the items received in the latest shipment.", "response": "SELECT oi.item_id, ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = (SELECT MAX(order_id) FROM Orders);"}
{"prompt": "Are there any received items flagged as damaged or missing?", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%damaged%' OR subject LIKE '%missing%' OR description LIKE '%damaged%' OR description LIKE '%missing%');"}
{"prompt": "What are the current outgoing shipments scheduled for today?", "response": "SELECT * FROM Shipping WHERE shipping_date = CURRENT_DATE;"}
{"prompt": "Which orders are ready for dispatch but not yet shipped?", "response": "SELECT * FROM Orders WHERE status = 'Packed';"}
{"prompt": "Show me all shipments sent this week.", "response": "SELECT * FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which carrier is handling today’s outgoing shipments?", "response": "SELECT DISTINCT carrier FROM Shipping WHERE shipping_date = CURRENT_DATE;"}
{"prompt": "What is the tracking number for order ID 101?", "response": "SELECT tracking_number FROM Shipping WHERE order_id = 101;"}
{"prompt": "List all orders I processed today.", "response": "SELECT o.order_id FROM Orders o JOIN SystemLogs sl ON o.order_id = sl.user_id WHERE sl.action LIKE '%received%' OR sl.action LIKE '%shipped%' AND sl.timestamp::date = CURRENT_DATE AND sl.user_id = <AMIT_USER_ID>; (Assumes activity is logged in SystemLogs)"}
{"prompt": "Which suppliers sent goods that arrived today?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN Orders o ON s.supplier_id = o.supplier_id WHERE o.expected_delivery_date = CURRENT_DATE;"}
{"prompt": "What is the status of all orders I helped ship in the past 2 days?", "response": "SELECT o.order_id, s.status FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.shipping_date >= CURRENT_DATE - INTERVAL '2 days';"}
{"prompt": "Are there any shipments that failed to leave on their scheduled date?", "response": "SELECT o.order_id, o.expected_delivery_date, s.shipping_date FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.shipping_date > o.expected_delivery_date;"}
{"prompt": "What items were included in a specific outgoing shipment?", "response": "SELECT oi.item_id, ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = <ORDER_ID>;"}
{"prompt": "How many shipments have been processed this month?", "response": "SELECT COUNT(*) FROM Shipping WHERE shipping_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which orders have been both received and shipped by today?", "response": "SELECT o.order_id FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE o.expected_delivery_date <= CURRENT_DATE AND s.shipping_date <= CURRENT_DATE;"}
{"prompt": "What is the total number of items received this week?", "response": "SELECT SUM(oi.quantity) FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.expected_delivery_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show me recent support tickets related to shipping delays.", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%delay%' OR description LIKE '%delay%') ORDER BY created_at DESC;"}
{"prompt": "Which pickers and packers helped with the last shipped order?", "response": "SELECT first_name, last_name FROM PickersPackers WHERE worker_id IN (SELECT raised_by_id FROM SupportTickets WHERE ticket_id = (SELECT MAX(order_id) FROM Orders)); (Workaround due to schema limits—assumes ticket logging)"}
{"prompt": "What’s the status of all shipping entries currently marked as “In Transit”?", "response": "SELECT * FROM Shipping WHERE status = 'In Transit';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "What is the current status of order ID 1025?", "response": "SELECT status FROM Orders WHERE order_id = 1025;"}
{"prompt": "Which items were included in a customer’s order?", "response": "SELECT ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = <ORDER_ID>;"}
{"prompt": "Is there any delay in shipping for a given order?", "response": "SELECT o.order_id, o.expected_delivery_date, s.shipping_date FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE o.order_id = <ORDER_ID> AND s.shipping_date > o.expected_delivery_date;"}
{"prompt": "Has the customer’s order been shipped?", "response": "SELECT status FROM Shipping WHERE order_id = <ORDER_ID>;"}
{"prompt": "What is the tracking number for a customer’s order?", "response": "SELECT tracking_number FROM Shipping WHERE order_id = <ORDER_ID>;"}
{"prompt": "Can I find out why a particular order was delayed?", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%delay%' AND ticket_id = <ORDER_ID>;"}
{"prompt": "Which orders have complaints or unresolved issues?", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "What are the most recent support tickets raised?", "response": "SELECT * FROM SupportTickets ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Which customer complaints are still pending resolution?", "response": "SELECT * FROM SupportTickets WHERE status = 'Open';"}
{"prompt": "Who raised a particular support ticket?", "response": "SELECT raised_by_id FROM SupportTickets WHERE ticket_id = <TICKET_ID>;"}
{"prompt": "What support tickets did I handle today?", "response": "SELECT * FROM SupportTickets WHERE created_at::date = CURRENT_DATE AND raised_by_id = <NEHA_USER_ID>;"}
{"prompt": "What is the email and phone number of the customer who raised a complaint?", "response": "SELECT u.username, u.user_id FROM Users u JOIN SupportTickets st ON u.user_id = st.raised_by_id WHERE st.ticket_id = <TICKET_ID>; (Assumes customer is a user in Users)"}
{"prompt": "Which orders are delayed due to stock shortage?", "response": "SELECT o.order_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE ii.quantity_in_stock < oi.quantity;"}
{"prompt": "What orders are marked as 'In Transit'?", "response": "SELECT * FROM Shipping WHERE status = 'In Transit';"}
{"prompt": "List all support tickets related to returns.", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%return%' OR description LIKE '%return%';"}
{"prompt": "Which staff handled a support ticket with ID 301?", "response": "SELECT * FROM SupportTickets WHERE ticket_id = 301; (If the handler is the one who raised it)"}
{"prompt": "What is the order history of a customer based on user ID?", "response": "SELECT * FROM Orders WHERE supplier_id IN (SELECT supplier_id FROM Suppliers WHERE name = (SELECT username FROM Users WHERE user_id = <USER_ID>)); (Workaround: assumes supplier = customer)"}
{"prompt": "Are there any recurring complaints about a specific item?", "response": "SELECT ii.name, COUNT(*) AS complaint_count FROM SupportTickets st JOIN OrderItems oi ON st.ticket_id = oi.order_id JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE st.subject LIKE '%issue%' OR st.description LIKE '%issue%' GROUP BY ii.name;"}
{"prompt": "What was the last action taken on a support ticket?", "response": "SELECT * FROM SystemLogs WHERE user_id = <NEHA_USER_ID> AND action LIKE '%ticket%' AND timestamp = (SELECT MAX(timestamp) FROM SystemLogs WHERE user_id = <NEHA_USER_ID>);"}
{"prompt": "What are the top 5 most frequently raised support topics?", "response": "SELECT subject, COUNT(*) AS freq FROM SupportTickets GROUP BY subject ORDER BY freq DESC LIMIT 5;"}
{"prompt": "Procurement Officers", "response": "nan"}
{"prompt": "Which items are currently below their reorder levels?", "response": "SELECT * FROM InventoryItems WHERE quantity_in_stock < reorder_level;"}
{"prompt": "What are the supplier details for items that need reordering?", "response": "SELECT ii.name AS item_name, s.* FROM InventoryItems ii JOIN Suppliers s ON ii.supplier_id = s.supplier_id WHERE ii.quantity_in_stock < ii.reorder_level;"}
{"prompt": "Show me all the purchase orders I placed this month.", "response": "SELECT * FROM Orders WHERE order_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What is the total cost of all orders placed this week?", "response": "SELECT SUM(total_cost) FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which suppliers have the highest number of orders placed?", "response": "SELECT supplier_id, COUNT(*) AS order_count FROM Orders GROUP BY supplier_id ORDER BY order_count DESC;"}
{"prompt": "Show me the most recent order placed with supplier ID 205.", "response": "SELECT * FROM Orders WHERE supplier_id = 205 ORDER BY order_date DESC LIMIT 1;"}
{"prompt": "What items were included in the latest order I placed?", "response": "SELECT ii.name, oi.quantity FROM OrderItems oi JOIN InventoryItems ii ON oi.item_id = ii.item_id WHERE oi.order_id = (SELECT MAX(order_id) FROM Orders);"}
{"prompt": "Which orders are still pending delivery?", "response": "SELECT * FROM Orders WHERE expected_delivery_date > CURRENT_DATE AND status != 'Delivered';"}
{"prompt": "What is the average price per unit for item ID 500 across all orders?", "response": "SELECT AVG(price_per_unit) FROM OrderItems WHERE item_id = 500;"}
{"prompt": "Which items have been ordered most frequently?", "response": "SELECT item_id, COUNT(*) AS times_ordered FROM OrderItems GROUP BY item_id ORDER BY times_ordered DESC;"}
{"prompt": "What is the total quantity ordered for each item in the last 30 days?", "response": "SELECT item_id, SUM(quantity) FROM OrderItems WHERE order_id IN (SELECT order_id FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '30 days') GROUP BY item_id;"}
{"prompt": "List suppliers who have delivered late shipments.", "response": "SELECT DISTINCT o.supplier_id FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.shipping_date > o.expected_delivery_date;"}
{"prompt": "Show analytics reports related to procurement generated this month.", "response": "SELECT * FROM Analytics WHERE report_name LIKE '%procurement%' AND generated_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What are the contact details of suppliers who sent goods last week?", "response": "SELECT DISTINCT s.name, s.contact_name, s.email, s.phone FROM Suppliers s JOIN Orders o ON s.supplier_id = o.supplier_id WHERE o.order_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which suppliers have pending support tickets?", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN SupportTickets st ON s.supplier_id = st.raised_by_id WHERE st.status != 'Resolved'; (Assumes supplier can raise tickets; else skip)"}
{"prompt": "Which items have never been reordered (ordered only once)?", "response": "SELECT item_id FROM OrderItems GROUP BY item_id HAVING COUNT(DISTINCT order_id) = 1;"}
{"prompt": "What is the delivery status of the order I placed on a specific date?", "response": "SELECT s.status FROM Shipping s JOIN Orders o ON s.order_id = o.order_id WHERE o.order_date = '2025-06-01';"}
{"prompt": "What are the average delivery delays for each supplier?", "response": "SELECT o.supplier_id, AVG(s.shipping_date - o.expected_delivery_date) AS avg_delay FROM Orders o JOIN Shipping s ON o.order_id = s.order_id GROUP BY o.supplier_id;"}
{"prompt": "Which items have the highest average unit cost?", "response": "SELECT item_id, AVG(price_per_unit) AS avg_price FROM OrderItems GROUP BY item_id ORDER BY avg_price DESC;"}
{"prompt": "What orders were marked as ‘Received’ but not yet shipped?", "response": "SELECT o.* FROM Orders o LEFT JOIN Shipping s ON o.order_id = s.order_id WHERE o.status = 'Received' AND s.order_id IS NULL;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "What are all the financial transactions recorded this month?", "response": "SELECT * FROM Finance WHERE transaction_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Show me the total spending on inventory purchases this quarter.", "response": "SELECT SUM(amount) FROM Finance WHERE transaction_type = 'Purchase' AND transaction_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "List all transactions labeled as operating expenses.", "response": "SELECT * FROM Finance WHERE transaction_type = 'Operating Expense';"}
{"prompt": "What was the total amount paid last week?", "response": "SELECT SUM(amount) FROM Finance WHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show the most recent vendor payment.", "response": "SELECT * FROM Finance WHERE transaction_type = 'Vendor Payment' ORDER BY transaction_date DESC LIMIT 1;"}
{"prompt": "What is the breakdown of transactions by type this month?", "response": "SELECT transaction_type, SUM(amount) FROM Finance WHERE transaction_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY transaction_type;"}
{"prompt": "Which transactions had amounts greater than ₹50,000?", "response": "SELECT * FROM Finance WHERE amount > 50000;"}
{"prompt": "What is the total expenditure recorded in the system?", "response": "SELECT SUM(amount) FROM Finance WHERE amount > 0;"}
{"prompt": "What is the average transaction amount for vendor payments?", "response": "SELECT AVG(amount) FROM Finance WHERE transaction_type = 'Vendor Payment';"}
{"prompt": "Show all transactions made on June 1st, 2025.", "response": "SELECT * FROM Finance WHERE transaction_date = '2025-06-01';"}
{"prompt": "Which purchases are still unmatched with shipment records?", "response": "SELECT o.order_id, o.total_cost FROM Orders o LEFT JOIN Shipping s ON o.order_id = s.order_id WHERE s.order_id IS NULL;"}
{"prompt": "What are the top 5 highest expense transactions this year?", "response": "SELECT * FROM Finance WHERE transaction_date >= DATE_TRUNC('year', CURRENT_DATE) ORDER BY amount DESC LIMIT 5;"}
{"prompt": "List transactions with the description containing ‘transport’.", "response": "SELECT * FROM Finance WHERE description LIKE '%transport%';"}
{"prompt": "What is the total cost of orders placed this financial year?", "response": "SELECT SUM(total_cost) FROM Orders WHERE order_date >= DATE '2025-04-01';"}
{"prompt": "Which suppliers had the highest transaction amounts associated with them?", "response": "SELECT o.supplier_id, SUM(o.total_cost) AS total_spent FROM Orders o GROUP BY o.supplier_id ORDER BY total_spent DESC;"}
{"prompt": "What is the total transaction amount per month in 2025?", "response": "SELECT DATE_TRUNC('month', transaction_date) AS month, SUM(amount) FROM Finance WHERE transaction_date >= '2025-01-01' GROUP BY month ORDER BY month;"}
{"prompt": "How many transactions were recorded by each transaction type?", "response": "SELECT transaction_type, COUNT(*) FROM Finance GROUP BY transaction_type;"}
{"prompt": "What transactions occurred within the last 10 days?", "response": "SELECT * FROM Finance WHERE transaction_date >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "Show me a summary of finance records for audit purposes.", "response": "SELECT transaction_type, COUNT(*) AS count, SUM(amount) AS total FROM Finance GROUP BY transaction_type;"}
{"prompt": "What was the total cost of all orders and how does it compare to finance logs?", "response": "SELECT (SELECT SUM(total_cost) FROM Orders) AS total_orders, (SELECT SUM(amount) FROM Finance) AS total_finance;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which users haven’t logged into the system in the last 30 days?", "response": "SELECT * FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Show me all login activity recorded in the last 24 hours.", "response": "SELECT * FROM SystemLogs WHERE timestamp >= NOW() - INTERVAL '1 day';"}
{"prompt": "What actions were performed by the user with ID 104?", "response": "SELECT * FROM SystemLogs WHERE user_id = 104;"}
{"prompt": "How many users are currently registered in the system?", "response": "SELECT COUNT(*) FROM Users;"}
{"prompt": "List all users along with their roles.", "response": "SELECT user_id, role, username FROM Users;"}
{"prompt": "What were the most common actions performed in the logs this week?", "response": "SELECT action, COUNT(*) FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY action ORDER BY COUNT(*) DESC;"}
{"prompt": "Which users accessed the system from a specific IP address (e.g., '192.168.1.100')?", "response": "SELECT * FROM SystemLogs WHERE ip_address = '192.168.1.100';"}
{"prompt": "Show the 10 most recent system actions.", "response": "SELECT * FROM SystemLogs ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What actions have been taken by finance team users?", "response": "SELECT sl.* FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE u.role = 'Finance';"}
{"prompt": "Which users have the role of ‘InventoryClerk’?", "response": "SELECT * FROM Users WHERE role = 'InventoryClerk';"}
{"prompt": "Find users who logged in today.", "response": "SELECT * FROM Users WHERE last_login::date = CURRENT_DATE;"}
{"prompt": "List all system logs related to failed login attempts (assuming stored in action).", "response": "SELECT * FROM SystemLogs WHERE action LIKE '%failed login%';"}
{"prompt": "Show how many users each role has.", "response": "SELECT role, COUNT(*) FROM Users GROUP BY role;"}
{"prompt": "Which users performed the ‘delete’ action in the system?", "response": "SELECT DISTINCT u.user_id, u.username FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action LIKE '%delete%';"}
{"prompt": "What’s the distribution of user activity by hour today?", "response": "SELECT DATE_PART('hour', timestamp) AS hour, COUNT(*) FROM SystemLogs WHERE timestamp::date = CURRENT_DATE GROUP BY hour ORDER BY hour;"}
{"prompt": "Retrieve all usernames who performed any action after midnight today.", "response": "SELECT DISTINCT u.username FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.timestamp >= CURRENT_DATE;"}
{"prompt": "Show all system logs for the past week sorted by user.", "response": "SELECT * FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' ORDER BY user_id, timestamp;"}
{"prompt": "Identify the IP addresses most commonly used to access the system.", "response": "SELECT ip_address, COUNT(*) FROM SystemLogs GROUP BY ip_address ORDER BY COUNT(*) DESC;"}
{"prompt": "Which users had their last login over 90 days ago?", "response": "SELECT * FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '90 days';"}
{"prompt": "Count of all actions logged in the system this month.", "response": "SELECT COUNT(*) FROM SystemLogs WHERE timestamp >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Logistics Coordinators", "response": "nan"}
{"prompt": "Which shipments are scheduled for dispatch today?", "response": "SELECT * FROM Shipping WHERE shipping_date = CURRENT_DATE;"}
{"prompt": "Show all orders that are currently marked as 'In Transit'.", "response": "SELECT * FROM Shipping WHERE status = 'In Transit';"}
{"prompt": "What are the details of the shipment with tracking number 'TRK902134'?", "response": "SELECT * FROM Shipping WHERE tracking_number = 'TRK902134';"}
{"prompt": "List all orders and their shipping carriers.", "response": "SELECT s.order_id, s.carrier FROM Shipping s;"}
{"prompt": "Which shipments were delayed (status still not 'Delivered' and shipping_date is past)?", "response": "SELECT * FROM Shipping WHERE status != 'Delivered' AND shipping_date < CURRENT_DATE;"}
{"prompt": "Show the most recently shipped orders.", "response": "SELECT * FROM Shipping ORDER BY shipping_date DESC LIMIT 10;"}
{"prompt": "Get a list of orders shipped by 'BlueDart'.", "response": "SELECT * FROM Shipping WHERE carrier = 'BlueDart';"}
{"prompt": "Which orders were shipped in the last 7 days?", "response": "SELECT * FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the total number of shipments scheduled this month?", "response": "SELECT COUNT(*) FROM Shipping WHERE DATE_TRUNC('month', shipping_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which orders are assigned to carrier ‘Delhivery’ and are still in transit?", "response": "SELECT * FROM Shipping WHERE carrier = 'Delhivery' AND status = 'In Transit';"}
{"prompt": "Find orders that are yet to be shipped.", "response": "SELECT o.* FROM Orders o LEFT JOIN Shipping s ON o.order_id = s.order_id WHERE s.order_id IS NULL;"}
{"prompt": "List the tracking numbers of all shipped orders with the status 'Delayed'.", "response": "SELECT tracking_number FROM Shipping WHERE status = 'Delayed';"}
{"prompt": "What are the details of shipments for order ID 205?", "response": "SELECT * FROM Shipping WHERE order_id = 205;"}
{"prompt": "Which carriers have been used in the last 30 days?", "response": "SELECT DISTINCT carrier FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Get a summary of how many shipments each carrier handled this week.", "response": "SELECT carrier, COUNT(*) AS shipment_count FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY carrier;"}
{"prompt": "Show all orders expected to arrive today (based on Orders.expected_delivery_date).", "response": "SELECT * FROM Orders WHERE expected_delivery_date = CURRENT_DATE;"}
{"prompt": "Find shipments that have not been assigned a tracking number.", "response": "SELECT * FROM Shipping WHERE tracking_number IS NULL OR tracking_number = '';"}
{"prompt": "Which orders have both order and shipping status marked as ‘Completed’ and ‘Delivered’?", "response": "SELECT o.order_id FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE o.status = 'Completed' AND s.status = 'Delivered';"}
{"prompt": "Which orders were shipped but didn’t reach on or before expected delivery date?", "response": "SELECT o.order_id, o.expected_delivery_date, s.shipping_date FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.status = 'Delivered' AND s.shipping_date > o.expected_delivery_date;"}
{"prompt": "Show the number of orders shipped per day over the last 5 days.", "response": "SELECT shipping_date, COUNT(*) FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '5 days' GROUP BY shipping_date ORDER BY shipping_date;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which inventory items have been in stock for more than 60 days without any movement?", "response": "SELECT i.item_id, i.name, i.quantity_in_stock FROM InventoryItems i WHERE i.quantity_in_stock > 0 AND i.item_id NOT IN (SELECT oi.item_id FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date >= CURRENT_DATE - INTERVAL '60 days');"}
{"prompt": "What is the total number of items shipped in the last 30 days?", "response": "SELECT SUM(oi.quantity) FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Show the top 5 products with the highest quantity in stock.", "response": "SELECT name, quantity_in_stock FROM InventoryItems ORDER BY quantity_in_stock DESC LIMIT 5;"}
{"prompt": "What are the average and maximum delivery times for shipped orders?", "response": "SELECT AVG(s.shipping_date - o.order_date) AS avg_delivery_time, MAX(s.shipping_date - o.order_date) AS max_delivery_time FROM Orders o JOIN Shipping s ON o.order_id = s.order_id WHERE s.status = 'Delivered';"}
{"prompt": "List all products currently below their reorder levels.", "response": "SELECT name, quantity_in_stock, reorder_level FROM InventoryItems WHERE quantity_in_stock < reorder_level;"}
{"prompt": "Identify which suppliers are associated with products that frequently run low.", "response": "SELECT DISTINCT s.supplier_id, s.name FROM Suppliers s JOIN InventoryItems i ON s.supplier_id = i.supplier_id WHERE i.quantity_in_stock < i.reorder_level;"}
{"prompt": "How many orders have been completed vs pending this month?", "response": "SELECT status, COUNT(*) FROM Orders WHERE DATE_TRUNC('month', order_date) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY status;"}
{"prompt": "What is the total cost of orders placed in the last quarter?", "response": "SELECT SUM(total_cost) FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Which warehouse managers are responsible for the most inventory?", "response": "SELECT wm.manager_id, wm.first_name, wm.last_name, COUNT(i.item_id) AS total_items FROM WarehouseManagers wm JOIN Warehouses w ON wm.manager_id = w.manager_id JOIN InventoryItems i ON i.supplier_id IS NOT NULL GROUP BY wm.manager_id, wm.first_name, wm.last_name ORDER BY total_items DESC;"}
{"prompt": "Find items that have never been ordered.", "response": "SELECT i.item_id, i.name FROM InventoryItems i LEFT JOIN OrderItems oi ON i.item_id = oi.item_id WHERE oi.item_id IS NULL;"}
{"prompt": "Show a trend of the number of orders placed per week over the last 8 weeks.", "response": "SELECT DATE_TRUNC('week', order_date) AS week_start, COUNT(*) AS order_count FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '8 weeks' GROUP BY week_start ORDER BY week_start;"}
{"prompt": "Which products had the most discrepancies in shipping vs ordered quantities?", "response": "SELECT oi.item_id, SUM(oi.quantity) AS ordered_qty FROM OrderItems oi GROUP BY oi.item_id ORDER BY ordered_qty DESC LIMIT 10;"}
{"prompt": "What is the average order value in the last month?", "response": "SELECT AVG(total_cost) FROM Orders WHERE order_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which days in the past month had the highest number of shipments?", "response": "SELECT shipping_date, COUNT(*) AS shipment_count FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY shipping_date ORDER BY shipment_count DESC;"}
{"prompt": "Show me the slowest moving items in terms of order frequency.", "response": "SELECT i.item_id, i.name, COUNT(oi.order_item_id) AS order_count FROM InventoryItems i LEFT JOIN OrderItems oi ON i.item_id = oi.item_id GROUP BY i.item_id, i.name ORDER BY order_count ASC LIMIT 10;"}
{"prompt": "Which suppliers delivered late based on expected delivery dates?", "response": "SELECT o.order_id, s.name AS supplier_name, o.expected_delivery_date, sh.shipping_date FROM Orders o JOIN Suppliers s ON o.supplier_id = s.supplier_id JOIN Shipping sh ON o.order_id = sh.order_id WHERE sh.shipping_date > o.expected_delivery_date;"}
{"prompt": "How many orders have been marked ‘Delayed’ in shipping status?", "response": "SELECT COUNT(*) FROM Shipping WHERE status = 'Delayed';"}
{"prompt": "Which categories of items are most commonly ordered?", "response": "SELECT i.category, COUNT(oi.order_item_id) AS order_count FROM InventoryItems i JOIN OrderItems oi ON i.item_id = oi.item_id GROUP BY i.category ORDER BY order_count DESC;"}
{"prompt": "What is the monthly shipping volume trend for the last 6 months?", "response": "SELECT DATE_TRUNC('month', shipping_date) AS month, COUNT(*) AS shipments FROM Shipping WHERE shipping_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "List the top 5 items contributing the most to total revenue.", "response": "SELECT i.name, SUM(oi.quantity * oi.price_per_unit) AS revenue FROM InventoryItems i JOIN OrderItems oi ON i.item_id = oi.item_id GROUP BY i.name ORDER BY revenue DESC LIMIT 5;"}
{"prompt": "PetClinicDB", "response": "nan"}
{"prompt": "Pet Owners", "response": "nan"}
{"prompt": "What is the full medical history of my pet Bruno?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "When did Bruno receive his last vaccination?", "response": "SELECT visit_date, treatment FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What are Bruno’s allergy notes mentioned in his records?", "response": "SELECT notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND notes LIKE '%allergy%';"}
{"prompt": "What appointments have I booked so far for Bruno?", "response": "SELECT * FROM Appointments WHERE owner_id = (SELECT owner_id FROM PetOwners WHERE first_name = 'Ravi') AND pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "Can I see the date and reason for Bruno's next appointment?", "response": "SELECT appointment_date, reason FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND appointment_date > CURRENT_TIMESTAMP ORDER BY appointment_date LIMIT 1;"}
{"prompt": "What is Bruno’s complete medical profile for reference during consultation?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "How can I check the billing status of Bruno’s last appointment?", "response": "SELECT * FROM Billing WHERE appointment_id = (SELECT appointment_id FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY appointment_date DESC LIMIT 1);"}
{"prompt": "What medication was prescribed for Bruno’s ear infection?", "response": "SELECT treatment FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND diagnosis LIKE '%ear infection%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "Who was the vet who treated Bruno last time?", "response": "SELECT V.first_name, V.last_name FROM Veterinarians V JOIN MedicalRecords M ON V.vet_id = M.vet_id WHERE M.pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY M.visit_date DESC LIMIT 1;"}
{"prompt": "What appointments are scheduled for this weekend?", "response": "SELECT * FROM Appointments WHERE DATE(appointment_date) BETWEEN DATE('2025-06-14') AND DATE('2025-06-16');"}
{"prompt": "Can I see all past medical visits for Bruno with diagnosis details?", "response": "SELECT visit_date, diagnosis FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY visit_date;"}
{"prompt": "What support tickets has Ravi raised recently?", "response": "SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT owner_id FROM PetOwners WHERE first_name = 'Ravi') AND role = 'PetOwner' ORDER BY created_at DESC;"}
{"prompt": "What logs are recorded for Ravi’s recent activity on the portal?", "response": "SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi') ORDER BY timestamp DESC;"}
{"prompt": "How much have I paid in total for Bruno’s treatments so far?", "response": "SELECT SUM(amount_paid) AS total_paid FROM Billing WHERE appointment_id IN (SELECT appointment_id FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno'));"}
{"prompt": "When was Bruno’s last vet visit and what was the diagnosis?", "response": "SELECT visit_date, diagnosis FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What’s the current status of Bruno’s upcoming appointment?", "response": "SELECT status FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND appointment_date > CURRENT_TIMESTAMP ORDER BY appointment_date LIMIT 1;"}
{"prompt": "What is the email and phone of the vet who treated Bruno?", "response": "SELECT V.email, V.phone FROM Veterinarians V JOIN MedicalRecords M ON V.vet_id = M.vet_id WHERE M.pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY M.visit_date DESC LIMIT 1;"}
{"prompt": "Which inventory items were used in Bruno’s last treatment?", "response": "SELECT I.name FROM Inventory I WHERE I.name IN (SELECT treatment FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY visit_date DESC LIMIT 1);"}
{"prompt": "What is the age and breed of Bruno?", "response": "SELECT dob, breed FROM Pets WHERE name = 'Bruno';"}
{"prompt": "What is the total number of appointments Bruno has had so far?", "response": "SELECT COUNT(*) FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "Veterinarians", "response": "nan"}
{"prompt": "What are all the appointments scheduled for me today?", "response": "SELECT * FROM Appointments WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "What is Bruno’s complete medical history?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "What previous vaccinations has Bruno received?", "response": "SELECT visit_date, treatment FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%';"}
{"prompt": "Does Bruno have any allergy notes in his medical records?", "response": "SELECT notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND notes LIKE '%allergy%';"}
{"prompt": "What was the diagnosis and treatment for Bruno’s recent ear infection?", "response": "SELECT diagnosis, treatment FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND diagnosis LIKE '%ear infection%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "How many pets have I treated so far?", "response": "SELECT COUNT(DISTINCT pet_id) FROM MedicalRecords WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal');"}
{"prompt": "What treatments did I administer during Bruno’s last visit?", "response": "SELECT treatment, notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "When is Bruno’s next vaccination due?", "response": "SELECT notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What is the contact information for Bruno’s owner?", "response": "SELECT PO.first_name, PO.last_name, PO.email, PO.phone FROM PetOwners PO JOIN Pets P ON PO.owner_id = P.owner_id WHERE P.name = 'Bruno';"}
{"prompt": "What pets are showing repeated seasonal illness patterns?", "response": "SELECT pet_id, COUNT(*) AS case_count FROM MedicalRecords WHERE diagnosis LIKE '%seasonal%' GROUP BY pet_id HAVING COUNT(*) > 1;"}
{"prompt": "What recurring seasonal illness cases have I handled in the past month?", "response": "SELECT * FROM MedicalRecords WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND diagnosis LIKE '%seasonal%' AND visit_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which pet owners have appointments with me this week?", "response": "SELECT DISTINCT PO.first_name, PO.last_name FROM Appointments A JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE A.vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND DATE(appointment_date) BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '6 days';"}
{"prompt": "What are all the diagnoses I've recorded this week?", "response": "SELECT diagnosis FROM MedicalRecords WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND visit_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "How many appointments have I completed so far this month?", "response": "SELECT COUNT(*) FROM Appointments WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND appointment_date BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE AND status = 'Completed';"}
{"prompt": "What are all the treatments I've provided today?", "response": "SELECT treatment FROM MedicalRecords WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND DATE(visit_date) = CURRENT_DATE;"}
{"prompt": "Who are the top 5 pets I’ve treated most frequently?", "response": "SELECT pet_id, COUNT(*) AS visits FROM MedicalRecords WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') GROUP BY pet_id ORDER BY visits DESC LIMIT 5;"}
{"prompt": "What is the list of follow-up messages from pet owners today?", "response": "SELECT * FROM SupportTickets WHERE status = 'Open' AND created_at::date = CURRENT_DATE;"}
{"prompt": "What is the last recorded diagnosis for Bruno?", "response": "SELECT diagnosis FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What are the details of today’s earliest appointment?", "response": "SELECT * FROM Appointments WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND DATE(appointment_date) = CURRENT_DATE ORDER BY appointment_date ASC LIMIT 1;"}
{"prompt": "How many pets with allergies have I treated this year?", "response": "SELECT COUNT(DISTINCT pet_id) FROM MedicalRecords WHERE vet_id = (SELECT vet_id FROM Veterinarians WHERE first_name = 'Meenal') AND notes LIKE '%allergy%' AND visit_date BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE;"}
{"prompt": "Veterinary Technicians", "response": "nan"}
{"prompt": "What are the pets scheduled for appointments today?", "response": "SELECT P.name, A.appointment_date FROM Appointments A JOIN Pets P ON A.pet_id = P.pet_id WHERE DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "What is Bruno’s weight and latest medication history?", "response": "SELECT notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What vaccination did Bruno receive during his last visit?", "response": "SELECT treatment FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "Which pets today require vaccinations?", "response": "SELECT P.name, A.appointment_date FROM Appointments A JOIN Pets P ON A.pet_id = P.pet_id WHERE A.reason LIKE '%vaccination%' AND DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "What are the batch numbers recorded for today's vaccines?", "response": "SELECT notes FROM MedicalRecords WHERE treatment LIKE '%vaccination%' AND visit_date::date = CURRENT_DATE;"}
{"prompt": "What notes were added about Bruno's reaction to the last vaccine?", "response": "SELECT notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What animals have had blood tests logged today?", "response": "SELECT P.name FROM Pets P JOIN MedicalRecords M ON P.pet_id = M.pet_id WHERE M.treatment LIKE '%blood%' AND visit_date::date = CURRENT_DATE;"}
{"prompt": "Which appointments are linked to blood test specimens today?", "response": "SELECT A.appointment_id, A.pet_id FROM Appointments A JOIN MedicalRecords M ON A.pet_id = M.pet_id WHERE M.treatment LIKE '%blood%' AND M.visit_date::date = CURRENT_DATE;"}
{"prompt": "How many pets have I assisted with today?", "response": "SELECT COUNT(DISTINCT pet_id) FROM MedicalRecords WHERE visit_date::date = CURRENT_DATE;"}
{"prompt": "What is the full medical history of Bruno for reference?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "Which vaccinations are due today across all pets?", "response": "SELECT P.name, M.notes FROM MedicalRecords M JOIN Pets P ON M.pet_id = P.pet_id WHERE M.notes LIKE '%next due%' AND M.visit_date = CURRENT_DATE;"}
{"prompt": "What appointments require lab support today?", "response": "SELECT * FROM Appointments WHERE reason LIKE '%test%' OR reason LIKE '%lab%' AND DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "What notes include vaccine injection site information today?", "response": "SELECT notes FROM MedicalRecords WHERE treatment LIKE '%vaccination%' AND visit_date::date = CURRENT_DATE AND notes LIKE '%injection site%';"}
{"prompt": "What is the owner contact info for pets receiving vaccines today?", "response": "SELECT DISTINCT PO.first_name, PO.last_name, PO.email, PO.phone FROM Appointments A JOIN Pets P ON A.pet_id = P.pet_id JOIN PetOwners PO ON P.owner_id = PO.owner_id WHERE A.reason LIKE '%vaccination%' AND DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "Which pets had abnormal test results flagged in the past 7 days?", "response": "SELECT pet_id, notes FROM MedicalRecords WHERE notes LIKE '%abnormal%' AND visit_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What treatments were recorded by the vet I assisted today?", "response": "SELECT treatment FROM MedicalRecords WHERE vet_id IN (SELECT vet_id FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE);"}
{"prompt": "How many pets have received vaccines this week?", "response": "SELECT COUNT(*) FROM MedicalRecords WHERE treatment LIKE '%vaccination%' AND visit_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "For which pets have I entered treatment notes today?", "response": "SELECT DISTINCT P.name FROM MedicalRecords M JOIN Pets P ON M.pet_id = P.pet_id WHERE DATE(M.visit_date) = CURRENT_DATE;"}
{"prompt": "What are the vaccine details and next due date for Bruno?", "response": "SELECT treatment, notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "Which pets had recent reactions or complications recorded?", "response": "SELECT pet_id, notes FROM MedicalRecords WHERE notes LIKE '%reaction%' OR notes LIKE '%complication%' ORDER BY visit_date DESC;"}
{"prompt": "Receptionists", "response": "nan"}
{"prompt": "What are today’s scheduled appointments?", "response": "SELECT appointment_id, pet_id, owner_id, appointment_date, reason FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "What is the contact information for Ravi, Bruno’s owner?", "response": "SELECT first_name, last_name, email, phone FROM PetOwners WHERE owner_id = (SELECT owner_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "Has Bruno received his vaccination in the past year?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND treatment LIKE '%vaccination%' AND visit_date >= CURRENT_DATE - INTERVAL '1 year';"}
{"prompt": "Which pet owners need to submit missing vaccination documents today?", "response": "SELECT DISTINCT PO.first_name, PO.last_name, PO.email FROM Appointments A JOIN PetOwners PO ON A.owner_id = PO.owner_id LEFT JOIN MedicalRecords M ON A.pet_id = M.pet_id WHERE A.reason LIKE '%vaccination%' AND DATE(A.appointment_date) = CURRENT_DATE AND M.treatment IS NULL;"}
{"prompt": "Which pets have an appointment next week?", "response": "SELECT pet_id, appointment_date FROM Appointments WHERE appointment_date BETWEEN CURRENT_DATE + INTERVAL '1 day' AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Who are today’s walk-in clients?", "response": "SELECT * FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE AND status = 'walk-in';"}
{"prompt": "What pets have special notes like allergies in their record?", "response": "SELECT pet_id, notes FROM MedicalRecords WHERE notes LIKE '%allergy%' ORDER BY visit_date DESC;"}
{"prompt": "Which pet owners need to be sent reminders today?", "response": "SELECT PO.email FROM Appointments A JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE DATE(A.appointment_date) = CURRENT_DATE + INTERVAL '1 day';"}
{"prompt": "What are Bruno’s appointment details for today?", "response": "SELECT * FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') AND DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "Who still has unpaid invoices from previous appointments?", "response": "SELECT B.billing_id, B.amount_due, B.amount_paid, PO.first_name, PO.last_name FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.status = 'unpaid';"}
{"prompt": "What consent forms were signed today?", "response": "SELECT owner_id, appointment_id FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE; -- (Assuming consent is linked to appointments; this might require additional schema in practice)"}
{"prompt": "Which appointments today include pets marked as nervous?", "response": "SELECT A.appointment_id, P.name FROM Appointments A JOIN Pets P ON A.pet_id = P.pet_id JOIN MedicalRecords M ON P.pet_id = M.pet_id WHERE M.notes LIKE '%nervous%' AND DATE(A.appointment_date) = CURRENT_DATE;"}
{"prompt": "Who paid in cash today?", "response": "SELECT billing_id, amount_paid FROM Billing WHERE payment_method = 'cash' AND payment_date = CURRENT_DATE;"}
{"prompt": "Which bills were fully paid today?", "response": "SELECT billing_id, amount_paid FROM Billing WHERE payment_date = CURRENT_DATE AND amount_due = amount_paid;"}
{"prompt": "What are all appointments handled by phone today?", "response": "SELECT * FROM Appointments WHERE status = 'booked' AND appointment_date = CURRENT_DATE; -- (Assuming phone bookings are marked booked)"}
{"prompt": "Which owners have more than one pet?", "response": "SELECT owner_id, COUNT(*) AS pet_count FROM Pets GROUP BY owner_id HAVING COUNT(*) > 1;"}
{"prompt": "What are the full details of Bruno’s owner?", "response": "SELECT * FROM PetOwners WHERE owner_id = (SELECT owner_id FROM Pets WHERE name = 'Bruno');"}
{"prompt": "What’s the total billing amount collected today?", "response": "SELECT SUM(amount_paid) FROM Billing WHERE payment_date = CURRENT_DATE;"}
{"prompt": "Which upcoming appointments require payment confirmation?", "response": "SELECT A.appointment_id, PO.first_name, PO.last_name FROM Appointments A JOIN Billing B ON A.appointment_id = B.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.status = 'unpaid' AND A.appointment_date >= CURRENT_DATE;"}
{"prompt": "What pets had appointments but didn’t show up this week?", "response": "SELECT pet_id, appointment_date FROM Appointments WHERE status = 'no-show' AND appointment_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Can I get Luna's latest vaccination record?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Luna') AND treatment LIKE '%vaccination%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "What is Maya’s registered email address?", "response": "SELECT email FROM PetOwners WHERE owner_id = (SELECT owner_id FROM Pets WHERE name = 'Luna');"}
{"prompt": "Which pets have pending vaccination appointments this week?", "response": "SELECT pet_id, appointment_date FROM Appointments WHERE reason LIKE '%vaccination%' AND appointment_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Are there any unresolved support tickets today?", "response": "SELECT * FROM SupportTickets WHERE status != 'resolved' AND DATE(created_at) = CURRENT_DATE;"}
{"prompt": "Who raised the most recent ticket regarding prescription refill?", "response": "SELECT raised_by_id, subject, description FROM SupportTickets WHERE subject LIKE '%prescription refill%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What are the notes left by vets for Luna’s recent visit?", "response": "SELECT notes FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Luna') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "Which tickets are open for more than 2 days?", "response": "SELECT * FROM SupportTickets WHERE status != 'resolved' AND created_at <= CURRENT_DATE - INTERVAL '2 days';"}
{"prompt": "Who was the vet assigned to Bruno’s last appointment?", "response": "SELECT vet_id FROM Appointments WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Bruno') ORDER BY appointment_date DESC LIMIT 1;"}
{"prompt": "What is the status of lab results for Luna?", "response": "SELECT * FROM MedicalRecords WHERE pet_id = (SELECT pet_id FROM Pets WHERE name = 'Luna') AND treatment LIKE '%lab%' ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "Which owners had billing issues in the past week?", "response": "SELECT PO.first_name, PO.last_name FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.status = 'unpaid' AND B.payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which support requests were resolved today?", "response": "SELECT * FROM SupportTickets WHERE status = 'resolved' AND DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "How many chats or support tickets were created this week?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE created_at BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Can I see all tickets raised by Maya?", "response": "SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT owner_id FROM PetOwners WHERE first_name = 'Maya');"}
{"prompt": "Which owner had the highest number of support requests?", "response": "SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets GROUP BY raised_by_id ORDER BY ticket_count DESC LIMIT 1;"}
{"prompt": "What pets had an appointment for allergies?", "response": "SELECT pet_id FROM Appointments WHERE reason LIKE '%allergy%';"}
{"prompt": "Which unresolved tickets were escalated by role = 'pet_owner'?", "response": "SELECT * FROM SupportTickets WHERE status != 'resolved' AND role = 'pet_owner';"}
{"prompt": "What is the most common issue from support tickets?", "response": "SELECT subject, COUNT(*) AS count FROM SupportTickets GROUP BY subject ORDER BY count DESC LIMIT 1;"}
{"prompt": "Can I check the notes left by vet for ear infection cases?", "response": "SELECT pet_id, notes FROM MedicalRecords WHERE diagnosis LIKE '%ear infection%';"}
{"prompt": "Which pets had vaccination + lab tests on the same day?", "response": "SELECT pet_id, visit_date FROM MedicalRecords WHERE treatment LIKE '%vaccination%' AND visit_date IN (SELECT visit_date FROM MedicalRecords WHERE treatment LIKE '%lab%');"}
{"prompt": "What are the details of the last support ticket Siddharth resolved?", "response": "SELECT * FROM SupportTickets WHERE status = 'resolved' AND resolved_at IS NOT NULL ORDER BY resolved_at DESC LIMIT 1;"}
{"prompt": "Clinic Managers", "response": "nan"}
{"prompt": "How many appointments are scheduled for today?", "response": "SELECT COUNT(*) FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "Which veterinarians have appointments scheduled for the weekend?", "response": "SELECT DISTINCT vet_id FROM Appointments WHERE EXTRACT(DOW FROM appointment_date) IN (0, 6);"}
{"prompt": "Which pets are overdue for their vaccinations?", "response": "SELECT pet_id FROM MedicalRecords WHERE treatment LIKE '%vaccination%' AND visit_date <= CURRENT_DATE - INTERVAL '1 year';"}
{"prompt": "What is the total revenue collected this month?", "response": "SELECT SUM(amount_paid) FROM Billing WHERE EXTRACT(MONTH FROM payment_date) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM payment_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "How many new pets were added to the system this month?", "response": "SELECT COUNT(*) FROM Pets WHERE EXTRACT(MONTH FROM dob) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM dob) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "What are the most common diagnoses recorded this month?", "response": "SELECT diagnosis, COUNT(*) AS count FROM MedicalRecords WHERE visit_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY diagnosis ORDER BY count DESC;"}
{"prompt": "Which inventory items are below the reorder level?", "response": "SELECT name, quantity FROM Inventory WHERE quantity <= reorder_level;"}
{"prompt": "How many appointments has each vet completed this month?", "response": "SELECT vet_id, COUNT(*) FROM Appointments WHERE EXTRACT(MONTH FROM appointment_date) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY vet_id;"}
{"prompt": "Which pet owners still have unpaid bills?", "response": "SELECT PO.first_name, PO.last_name FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.status != 'paid';"}
{"prompt": "Which days of the week tend to have the highest number of appointments?", "response": "SELECT EXTRACT(DOW FROM appointment_date) AS day_of_week, COUNT(*) FROM Appointments GROUP BY day_of_week ORDER BY COUNT(*) DESC;"}
{"prompt": "Who logged into the system today?", "response": "SELECT username FROM Users WHERE DATE(last_login) = CURRENT_DATE;"}
{"prompt": "Which user accessed the system the most this week?", "response": "SELECT user_id, COUNT(*) AS actions FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY user_id ORDER BY actions DESC LIMIT 1;"}
{"prompt": "Which user has not logged in for the longest time?", "response": "SELECT username FROM Users ORDER BY last_login ASC LIMIT 1;"}
{"prompt": "Which support tickets have been unresolved for more than two days?", "response": "SELECT * FROM SupportTickets WHERE status != 'resolved' AND created_at <= CURRENT_TIMESTAMP - INTERVAL '2 days';"}
{"prompt": "What are the current wait times for each appointment today?", "response": "(Requires wait_time column or join logic, otherwise unavailable in given schema)"}
{"prompt": "How many appointments were completed this week?", "response": "SELECT COUNT(*) FROM Appointments WHERE appointment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which medications or supplies are nearing expiration?", "response": "SELECT name, expiry_date FROM Inventory WHERE expiry_date <= CURRENT_DATE + INTERVAL '30 days';"}
{"prompt": "What are the busiest hours of the day for appointments?", "response": "SELECT EXTRACT(HOUR FROM appointment_date) AS hour, COUNT(*) FROM Appointments GROUP BY hour ORDER BY COUNT(*) DESC;"}
{"prompt": "How much is the clinic owed in unpaid bills?", "response": "SELECT SUM(amount_due - amount_paid) FROM Billing WHERE status != 'paid';"}
{"prompt": "What is the average number of appointments handled per vet per day?", "response": "SELECT AVG(appointment_count) FROM (SELECT vet_id, COUNT(*) AS appointment_count FROM Appointments GROUP BY vet_id, DATE(appointment_date)) AS daily_counts;"}
{"prompt": "Finance / Billing Staff", "response": "nan"}
{"prompt": "What were all the transactions processed yesterday?", "response": "SELECT * FROM Billing WHERE payment_date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "What are the details of Coco’s bills, including lab work and consultation?", "response": "SELECT B.* FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN Pets P ON A.pet_id = P.pet_id WHERE P.name = 'Coco';"}
{"prompt": "Which pet owners have outstanding balances?", "response": "SELECT PO.first_name, PO.last_name FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.status != 'paid';"}
{"prompt": "What is the total revenue collected this week?", "response": "SELECT SUM(amount_paid) FROM Billing WHERE payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the current outstanding balance for all unpaid bills?", "response": "SELECT SUM(amount_due - amount_paid) AS total_outstanding FROM Billing WHERE status != 'paid';"}
{"prompt": "How many payments were made using digital wallets this month?", "response": "SELECT COUNT(*) FROM Billing WHERE payment_method = 'digital wallet' AND EXTRACT(MONTH FROM payment_date) = EXTRACT(MONTH FROM CURRENT_DATE);"}
{"prompt": "What is the status of all bills associated with follow-up consultations?", "response": "SELECT B.* FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id WHERE A.reason LIKE '%follow-up%';"}
{"prompt": "How many invoices were generated today?", "response": "SELECT COUNT(*) FROM Billing WHERE payment_date = CURRENT_DATE;"}
{"prompt": "What is the average payment collected per appointment?", "response": "SELECT AVG(amount_paid) FROM Billing;"}
{"prompt": "Which payment methods are most frequently used?", "response": "SELECT payment_method, COUNT(*) FROM Billing GROUP BY payment_method ORDER BY COUNT(*) DESC;"}
{"prompt": "Which bills had discounts applied?", "response": "(Assuming discount tracking, which is not in the schema; not available unless extended)"}
{"prompt": "What are the total billings per day over the last 7 days?", "response": "SELECT payment_date, SUM(amount_paid) FROM Billing WHERE payment_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY payment_date ORDER BY payment_date;"}
{"prompt": "What appointments are linked to bills that are partially paid?", "response": "SELECT A.* FROM Appointments A JOIN Billing B ON A.appointment_id = B.appointment_id WHERE B.amount_paid < B.amount_due AND B.status != 'paid';"}
{"prompt": "Which pet owners paid in cash this week?", "response": "SELECT DISTINCT PO.first_name, PO.last_name FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.payment_method = 'cash' AND payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the total due amount categorized by payment method?", "response": "SELECT payment_method, SUM(amount_due) FROM Billing GROUP BY payment_method;"}
{"prompt": "Which bills were paid late (after appointment date)?", "response": "SELECT B.* FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id WHERE B.payment_date > A.appointment_date;"}
{"prompt": "What are the recent billing records for Coco?", "response": "SELECT B.* FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN Pets P ON A.pet_id = P.pet_id WHERE P.name = 'Coco' ORDER BY B.payment_date DESC LIMIT 5;"}
{"prompt": "Which pet owners have multiple unpaid bills?", "response": "SELECT PO.first_name, PO.last_name, COUNT(*) AS unpaid_count FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id JOIN PetOwners PO ON A.owner_id = PO.owner_id WHERE B.status != 'paid' GROUP BY PO.owner_id, PO.first_name, PO.last_name HAVING COUNT(*) > 1;"}
{"prompt": "Which appointments generated the highest revenue this month?", "response": "SELECT A.appointment_id, SUM(B.amount_paid) AS revenue FROM Billing B JOIN Appointments A ON B.appointment_id = A.appointment_id WHERE EXTRACT(MONTH FROM B.payment_date) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY A.appointment_id ORDER BY revenue DESC;"}
{"prompt": "What is the monthly revenue trend for the past 6 months?", "response": "SELECT DATE_TRUNC('month', payment_date) AS month, SUM(amount_paid) FROM Billing WHERE payment_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "Inventory Managers (Medical Supplies)", "response": "nan"}
{"prompt": "What are the current stock levels of all inventory items?", "response": "SELECT name, quantity FROM Inventory;"}
{"prompt": "Which items are below their reorder level?", "response": "SELECT name, quantity, reorder_level FROM Inventory WHERE quantity < reorder_level;"}
{"prompt": "What items are expiring within the next 30 days?", "response": "SELECT name, expiry_date FROM Inventory WHERE expiry_date <= CURRENT_DATE + INTERVAL '30 days';"}
{"prompt": "Show all items supplied by “VetHealth Pharma.”", "response": "SELECT * FROM Inventory WHERE supplier = 'VetHealth Pharma';"}
{"prompt": "Which item has the lowest stock right now?", "response": "SELECT name, quantity FROM Inventory ORDER BY quantity ASC LIMIT 1;"}
{"prompt": "List all expired items in stock.", "response": "SELECT name, expiry_date FROM Inventory WHERE expiry_date < CURRENT_DATE;"}
{"prompt": "Which items have exactly zero quantity left?", "response": "SELECT name FROM Inventory WHERE quantity = 0;"}
{"prompt": "How many items are due to expire this month?", "response": "SELECT COUNT(*) FROM Inventory WHERE EXTRACT(MONTH FROM expiry_date) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM expiry_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "What are the names and suppliers of items that are both low in stock and near expiry (next 15 days)?", "response": "SELECT name, supplier FROM Inventory WHERE quantity < reorder_level AND expiry_date <= CURRENT_DATE + INTERVAL '15 days';"}
{"prompt": "Get the full inventory list ordered by earliest expiry date.", "response": "SELECT * FROM Inventory ORDER BY expiry_date ASC;"}
{"prompt": "Which supplier provides the most items?", "response": "SELECT supplier, COUNT(*) AS item_count FROM Inventory GROUP BY supplier ORDER BY item_count DESC LIMIT 1;"}
{"prompt": "What is the average reorder level for all stocked items?", "response": "SELECT AVG(reorder_level) FROM Inventory;"}
{"prompt": "Which items should be reordered based on current stock levels?", "response": "SELECT name FROM Inventory WHERE quantity <= reorder_level;"}
{"prompt": "How many different types of items are currently in stock (quantity > 0)?", "response": "SELECT COUNT(*) FROM Inventory WHERE quantity > 0;"}
{"prompt": "What are the items expiring within this week?", "response": "SELECT name, expiry_date FROM Inventory WHERE expiry_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "Which item has the highest quantity in stock?", "response": "SELECT name, quantity FROM Inventory ORDER BY quantity DESC LIMIT 1;"}
{"prompt": "List all items with a reorder level greater than 50.", "response": "SELECT name, reorder_level FROM Inventory WHERE reorder_level > 50;"}
{"prompt": "What is the total quantity of all items currently in inventory?", "response": "SELECT SUM(quantity) AS total_quantity FROM Inventory;"}
{"prompt": "Are there any items missing an expiry date?", "response": "SELECT name FROM Inventory WHERE expiry_date IS NULL;"}
{"prompt": "List the top 5 items with the highest reorder levels.", "response": "SELECT name, reorder_level FROM Inventory ORDER BY reorder_level DESC LIMIT 5;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which users logged in most recently?", "response": "SELECT username, last_login FROM Users ORDER BY last_login DESC;"}
{"prompt": "Show all failed login attempts recorded in the system logs.", "response": "SELECT * FROM SystemLogs WHERE action = 'Failed Login';"}
{"prompt": "What are the most recent actions performed by users in the system?", "response": "SELECT user_id, action, timestamp FROM SystemLogs ORDER BY timestamp DESC LIMIT 20;"}
{"prompt": "How many distinct users have logged in today?", "response": "SELECT COUNT(DISTINCT user_id) FROM SystemLogs WHERE action = 'Login' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "List all users and their assigned roles.", "response": "SELECT username, role FROM Users;"}
{"prompt": "What are the top 5 most frequent actions logged in the system?", "response": "SELECT action, COUNT(*) AS frequency FROM SystemLogs GROUP BY action ORDER BY frequency DESC LIMIT 5;"}
{"prompt": "Find the IP addresses associated with suspicious login activity.", "response": "SELECT ip_address FROM SystemLogs WHERE action = 'Failed Login' GROUP BY ip_address HAVING COUNT(*) > 3;"}
{"prompt": "Which users have not logged in for the past 30 days?", "response": "SELECT username FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Get the full log of actions performed by a specific user (e.g., user_id = 5).", "response": "SELECT * FROM SystemLogs WHERE user_id = 5 ORDER BY timestamp DESC;"}
{"prompt": "How many users exist for each role type in the system?", "response": "SELECT role, COUNT(*) AS user_count FROM Users GROUP BY role;"}
{"prompt": "Show all IP addresses used by a given user_id.", "response": "SELECT DISTINCT ip_address FROM SystemLogs WHERE user_id = 5;"}
{"prompt": "Which users performed password change actions in the last 7 days?", "response": "SELECT DISTINCT user_id FROM SystemLogs WHERE action = 'Password Change' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the latest system actions done from a specific IP address?", "response": "SELECT * FROM SystemLogs WHERE ip_address = '192.168.1.100' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "List users who logged in more than 5 times in the past week.", "response": "SELECT user_id FROM SystemLogs WHERE action = 'Login' AND timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY user_id HAVING COUNT(*) > 5;"}
{"prompt": "What are all unique actions logged in the system?", "response": "SELECT DISTINCT action FROM SystemLogs;"}
{"prompt": "Which users performed admin-level actions recently?", "response": "SELECT user_id, action, timestamp FROM SystemLogs WHERE action LIKE '%Admin%' ORDER BY timestamp DESC;"}
{"prompt": "Show the number of log entries per user.", "response": "SELECT user_id, COUNT(*) AS log_count FROM SystemLogs GROUP BY user_id;"}
{"prompt": "Find users who have never logged in.", "response": "SELECT username FROM Users WHERE last_login IS NULL;"}
{"prompt": "How many system log entries were recorded today?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What actions were taken right before the system crash at a known timestamp (e.g., '2025-06-12 09:00:00')?", "response": "SELECT * FROM SystemLogs WHERE timestamp <= '2025-06-12 09:00:00' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "What are the most common pet diagnoses in the past 6 months?", "response": "SELECT diagnosis, COUNT(*) AS frequency FROM Diagnoses WHERE diagnosis_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY diagnosis ORDER BY frequency DESC;"}
{"prompt": "How many pets received vaccinations last month?", "response": "SELECT COUNT(*) FROM Vaccinations WHERE date_administered >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "What is the average wait time per day for appointments?", "response": "SELECT appointment_date, AVG(wait_time_minutes) AS avg_wait FROM Appointments GROUP BY appointment_date;"}
{"prompt": "Which pets visited the clinic more than once in the last 30 days?", "response": "SELECT pet_id FROM Appointments WHERE appointment_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY pet_id HAVING COUNT(*) > 1;"}
{"prompt": "How many missed appointments were recorded last week?", "response": "SELECT COUNT(*) FROM Appointments WHERE status = 'Missed' AND appointment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What hours of the day are busiest for appointments during weekdays?", "response": "SELECT EXTRACT(HOUR FROM appointment_time) AS hour, COUNT(*) FROM Appointments WHERE EXTRACT(DOW FROM appointment_date) BETWEEN 1 AND 5 GROUP BY hour ORDER BY COUNT(*) DESC;"}
{"prompt": "Which medications were prescribed most often?", "response": "SELECT medication_name, COUNT(*) FROM Prescriptions GROUP BY medication_name ORDER BY COUNT(*) DESC;"}
{"prompt": "What is the weekly trend of client satisfaction scores for the past 2 months?", "response": "SELECT DATE_TRUNC('week', survey_date) AS week, AVG(satisfaction_score) FROM ClientSurveys WHERE survey_date >= CURRENT_DATE - INTERVAL '2 months' GROUP BY week ORDER BY week;"}
{"prompt": "Which pets were diagnosed with respiratory infections during winter?", "response": "SELECT pet_id, diagnosis_date FROM Diagnoses WHERE diagnosis LIKE '%respiratory%' AND EXTRACT(MONTH FROM diagnosis_date) IN (12, 1, 2);"}
{"prompt": "What is the average number of appointments per veterinarian per day?", "response": "SELECT vet_id, AVG(daily_count) FROM (SELECT vet_id, appointment_date, COUNT(*) AS daily_count FROM Appointments GROUP BY vet_id, appointment_date) sub GROUP BY vet_id;"}
{"prompt": "How many pets received preventive care in the last quarter?", "response": "SELECT COUNT(DISTINCT pet_id) FROM Treatments WHERE treatment_type = 'Preventive' AND date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What is the monthly count of unique pet visits this year?", "response": "SELECT DATE_TRUNC('month', appointment_date) AS month, COUNT(DISTINCT pet_id) FROM Appointments WHERE EXTRACT(YEAR FROM appointment_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY month ORDER BY month;"}
{"prompt": "Which medications will expire in the next 30 days?", "response": "SELECT medication_name, expiration_date FROM Inventory WHERE expiration_date <= CURRENT_DATE + INTERVAL '30 days';"}
{"prompt": "What is the percentage of missed appointments this quarter?", "response": "SELECT ROUND((SUM(CASE WHEN status = 'Missed' THEN 1 ELSE 0 END)::decimal / COUNT(*)) * 100, 2) AS missed_percent FROM Appointments WHERE appointment_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "How many pets were treated for chronic conditions last year?", "response": "SELECT COUNT(DISTINCT pet_id) FROM Diagnoses WHERE condition_type = 'Chronic' AND diagnosis_date >= CURRENT_DATE - INTERVAL '1 year';"}
{"prompt": "What are the top 3 most common pet breeds in the clinic?", "response": "SELECT breed, COUNT(*) FROM Pets GROUP BY breed ORDER BY COUNT(*) DESC LIMIT 3;"}
{"prompt": "How many client surveys have scores below 3 in the past 60 days?", "response": "SELECT COUNT(*) FROM ClientSurveys WHERE satisfaction_score < 3 AND survey_date >= CURRENT_DATE - INTERVAL '60 days';"}
{"prompt": "What are the most common reasons for repeat visits?", "response": "SELECT reason, COUNT(*) FROM Appointments WHERE pet_id IN (SELECT pet_id FROM Appointments GROUP BY pet_id HAVING COUNT(*) > 1) GROUP BY reason ORDER BY COUNT(*) DESC;"}
{"prompt": "What days of the week have the most appointments?", "response": "SELECT TO_CHAR(appointment_date, 'Day') AS day, COUNT(*) FROM Appointments GROUP BY day ORDER BY COUNT(*) DESC;"}
{"prompt": "How has medication inventory usage changed month over month?", "response": "SELECT DATE_TRUNC('month', usage_date) AS month, SUM(quantity_used) AS total_used FROM InventoryUsage WHERE EXTRACT(YEAR FROM usage_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY month ORDER BY month;"}
{"prompt": "LogisticsManagement", "response": "nan"}
{"prompt": "Clients / Shippers", "response": "nan"}
{"prompt": "I want to see a list of all my shipments with their origin, destination, and delivery status.", "response": "sql SELECT S.shipment_id, S.origin, S.destination, S.status FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya';"}
{"prompt": "Show me the details of my shipment that is currently in transit.", "response": "sql SELECT S.shipment_id, S.origin, S.destination, S.shipment_date, S.delivery_date FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya' AND S.status = 'In Transit';"}
{"prompt": "Which of my shipments were delivered late?", "response": "sql SELECT S.shipment_id, S.shipment_date, S.delivery_date FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya' AND S.delivery_date > S.shipment_date + INTERVAL '1 day';"}
{"prompt": "I need a report of all items and quantities in each of my shipments.", "response": "sql SELECT S.shipment_id, O.item_description, O.quantity FROM Clients C JOIN Shipments S ON C.client_id = S.client_id JOIN Orders O ON S.shipment_id = O.shipment_id WHERE C.contact_name = 'Riya';"}
{"prompt": "How many shipments have I sent till now?", "response": "sql SELECT COUNT(*) AS shipment_count FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya';"}
{"prompt": "What are the destinations of my last 5 shipments?", "response": "sql SELECT S.destination FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya' ORDER BY S.shipment_date DESC LIMIT 5;"}
{"prompt": "I want to track the delivery dates of all my recent orders.", "response": "sql SELECT S.shipment_id, S.delivery_date FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya';"}
{"prompt": "What’s the total weight of products I’ve shipped so far?", "response": "sql SELECT SUM(O.weight) AS total_weight FROM Clients C JOIN Shipments S ON C.client_id = S.client_id JOIN Orders O ON S.shipment_id = O.shipment_id WHERE C.contact_name = 'Riya';"}
{"prompt": "Show me the average quantity of items I send per order.", "response": "sql SELECT AVG(O.quantity) AS avg_quantity FROM Clients C JOIN Shipments S ON C.client_id = S.client_id JOIN Orders O ON S.shipment_id = O.shipment_id WHERE C.contact_name = 'Riya';"}
{"prompt": "Which item did I ship the most?", "response": "sql SELECT O.item_description, SUM(O.quantity) AS total_quantity FROM Clients C JOIN Shipments S ON C.client_id = S.client_id JOIN Orders O ON S.shipment_id = O.shipment_id WHERE C.contact_name = 'Riya' GROUP BY O.item_description ORDER BY total_quantity DESC LIMIT 1;"}
{"prompt": "Give me a list of support tickets I raised that are still unresolved.", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE role = 'Client' AND raised_by_id = (SELECT client_id FROM Clients WHERE contact_name = 'Riya') AND status != 'Resolved';"}
{"prompt": "Which warehouse is currently handling my latest shipment?", "response": "sql SELECT W.warehouse_id, W.location FROM Clients C JOIN Shipments S ON C.client_id = S.client_id JOIN Orders O ON S.shipment_id = O.shipment_id JOIN Warehouses W ON W.warehouse_id = (SELECT W2.warehouse_id FROM Warehouses W2 LIMIT 1) WHERE C.contact_name = 'Riya' ORDER BY S.shipment_date DESC LIMIT 1;"}
{"prompt": "Can I see all my transactions and their descriptions?", "response": "sql SELECT F.transaction_date, F.amount, F.transaction_type, F.description FROM Finance F WHERE F.description LIKE '%Riya%'; (Assumes client name appears in description)"}
{"prompt": "What was the amount I paid for my most recent shipment?", "response": "sql SELECT F.amount FROM Finance F WHERE F.description LIKE '%Riya%' ORDER BY F.transaction_date DESC LIMIT 1;"}
{"prompt": "How many support tickets have I raised in total?", "response": "sql SELECT COUNT(*) AS total_tickets FROM SupportTickets WHERE role = 'Client' AND raised_by_id = (SELECT client_id FROM Clients WHERE contact_name = 'Riya');"}
{"prompt": "Give me the subject and status of my latest support ticket.", "response": "sql SELECT subject, status FROM SupportTickets WHERE role = 'Client' AND raised_by_id = (SELECT client_id FROM Clients WHERE contact_name = 'Riya') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "Show me all logs where I interacted with the system recently.", "response": "sql SELECT SL.action, SL.timestamp FROM SystemLogs SL JOIN Users U ON SL.user_id = U.user_id WHERE U.role = 'Client' AND U.username = 'Riya' ORDER BY SL.timestamp DESC;"}
{"prompt": "I need a breakdown of all items sent in a specific shipment (say ID = 101).", "response": "sql SELECT item_description, quantity, weight FROM Orders WHERE shipment_id = 101;"}
{"prompt": "What are the total number of items I shipped to Mumbai?", "response": "sql SELECT SUM(O.quantity) AS total_items FROM Clients C JOIN Shipments S ON C.client_id = S.client_id JOIN Orders O ON S.shipment_id = O.shipment_id WHERE C.contact_name = 'Riya' AND S.destination = 'Mumbai';"}
{"prompt": "Show me the full history of my shipments sorted by the most recent.", "response": "sql SELECT S.shipment_id, S.origin, S.destination, S.shipment_date, S.delivery_date, S.status FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE C.contact_name = 'Riya' ORDER BY S.shipment_date DESC;"}
{"prompt": "Logistics Coordinators", "response": "nan"}
{"prompt": "I want to see all shipments scheduled for today.", "response": "sql SELECT shipment_id, client_id, origin, destination, shipment_date, status FROM Shipments WHERE shipment_date = CURRENT_DATE;"}
{"prompt": "Show me all shipments that are currently marked as ‘In Transit’.", "response": "sql SELECT shipment_id, origin, destination, shipment_date, delivery_date FROM Shipments WHERE status = 'In Transit';"}
{"prompt": "Which clients have active shipments today?", "response": "sql SELECT DISTINCT C.client_id, C.company_name FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE S.shipment_date = CURRENT_DATE;"}
{"prompt": "What shipments were delivered late this week?", "response": "sql SELECT shipment_id, shipment_date, delivery_date FROM Shipments WHERE delivery_date > shipment_date AND shipment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which shipment has the highest total weight today?", "response": "sql SELECT S.shipment_id, SUM(O.weight) AS total_weight FROM Shipments S JOIN Orders O ON S.shipment_id = O.shipment_id WHERE S.shipment_date = CURRENT_DATE GROUP BY S.shipment_id ORDER BY total_weight DESC LIMIT 1;"}
{"prompt": "Show me contact details of all drivers.", "response": "sql SELECT driver_id, first_name, last_name, phone, email FROM Drivers;"}
{"prompt": "Which destinations are receiving the most shipments this month?", "response": "sql SELECT destination, COUNT(*) AS count FROM Shipments WHERE shipment_date >= date_trunc('month', CURRENT_DATE) GROUP BY destination ORDER BY count DESC;"}
{"prompt": "How many total shipments were made in the last 7 days?", "response": "sql SELECT COUNT(*) AS total_shipments FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which of today’s shipments are destined for Bangalore?", "response": "sql SELECT shipment_id, origin, delivery_date FROM Shipments WHERE shipment_date = CURRENT_DATE AND destination = 'Bangalore';"}
{"prompt": "Show me support tickets raised by warehouse staff that are still open.", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE role = 'WarehouseStaff' AND status != 'Resolved';"}
{"prompt": "I want to see the delivery schedule for tomorrow.", "response": "sql SELECT shipment_id, client_id, origin, destination FROM Shipments WHERE delivery_date = CURRENT_DATE + INTERVAL '1 day';"}
{"prompt": "Which clients sent urgent (same-day) shipments today?", "response": "(Assuming same-day means shipment_date = delivery_date)"}
{"prompt": "nan", "response": "sql SELECT DISTINCT C.client_id, C.company_name FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE S.shipment_date = CURRENT_DATE AND S.shipment_date = S.delivery_date;"}
{"prompt": "Show me shipment counts for each day over the past week.", "response": "sql SELECT shipment_date, COUNT(*) AS count FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY shipment_date ORDER BY shipment_date;"}
{"prompt": "What items and quantities were included in today’s shipments?", "response": "sql SELECT O.shipment_id, O.item_description, O.quantity FROM Shipments S JOIN Orders O ON S.shipment_id = O.shipment_id WHERE S.shipment_date = CURRENT_DATE;"}
{"prompt": "Show me unresolved support tickets from drivers.", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE role = 'Driver' AND status != 'Resolved';"}
{"prompt": "Which warehouse managers are associated with each warehouse?", "response": "sql SELECT W.warehouse_id, W.location, FM.first_name, FM.last_name FROM Warehouses W JOIN FleetManagers FM ON W.manager_id = FM.manager_id;"}
{"prompt": "What is the total number of items shipped in the last 3 days?", "response": "sql SELECT SUM(O.quantity) AS total_items FROM Shipments S JOIN Orders O ON S.shipment_id = O.shipment_id WHERE S.shipment_date >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "Which warehouse staff are currently active (based on recent system logins)?", "response": "sql SELECT DISTINCT WS.staff_id, WS.first_name, WS.last_name FROM WarehouseStaff WS JOIN Users U ON U.username = WS.email WHERE U.last_login >= CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "What are the most recent actions taken by operations managers in the system?", "response": "sql SELECT SL.action, SL.timestamp FROM SystemLogs SL JOIN Users U ON SL.user_id = U.user_id WHERE U.role = 'OperationsManager' ORDER BY SL.timestamp DESC LIMIT 10;"}
{"prompt": "Drivers / Delivery Personnel", "response": "nan"}
{"prompt": "What shipments are assigned to me for today? (Assuming driver assignment not explicit in schema)", "response": "sql SELECT shipment_id, origin, destination, shipment_date, delivery_date FROM Shipments WHERE shipment_date = CURRENT_DATE;"}
{"prompt": "Which shipments are marked as ‘Priority’ for today? (Assuming status can reflect priority)", "response": "sql SELECT shipment_id, origin, destination FROM Shipments WHERE status = 'Priority' AND shipment_date = CURRENT_DATE;"}
{"prompt": "Show me the route details of all shipments scheduled for today.", "response": "sql SELECT shipment_id, origin, destination FROM Shipments WHERE shipment_date = CURRENT_DATE;"}
{"prompt": "What is the delivery status of the shipments I handled this week? (Assuming all shipments)", "response": "sql SELECT shipment_id, status, delivery_date FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which shipments were delivered late in the past 3 days?", "response": "sql SELECT shipment_id, shipment_date, delivery_date FROM Shipments WHERE delivery_date > shipment_date AND shipment_date >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "What client is associated with a specific shipment? (e.g., shipment ID = 102)", "response": "sql SELECT C.client_id, C.company_name, C.contact_name FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE S.shipment_id = 102;"}
{"prompt": "I want to know the item details for my current delivery. (e.g., shipment ID = 105)", "response": "sql SELECT item_description, quantity, weight FROM Orders WHERE shipment_id = 105;"}
{"prompt": "Show me shipments going to the same destination I’m delivering to now. (e.g., Chennai)", "response": "sql SELECT shipment_id, client_id, shipment_date FROM Shipments WHERE destination = 'Chennai';"}
{"prompt": "Which shipments had address changes or were updated recently? (Assuming address changes tracked via SupportTickets)", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE description LIKE '%address change%' AND status != 'Resolved';"}
{"prompt": "Which support tickets did I raise this month?", "response": "sql SELECT ticket_id, subject, status, created_at FROM SupportTickets WHERE role = 'Driver' AND raised_by_id = 201 AND created_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What is the total number of packages I delivered this week? (Aggregate based on Orders)", "response": "sql SELECT COUNT(*) FROM Orders WHERE shipment_id IN (SELECT shipment_id FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days');"}
{"prompt": "What are my delivery summaries for this month? (Assuming drivers can query shipments made this month)", "response": "sql SELECT shipment_id, destination, delivery_date, status FROM Shipments WHERE shipment_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What feedback or issues did clients report about my recent deliveries? (Assuming via support tickets)", "response": "sql SELECT subject, description, created_at FROM SupportTickets WHERE role = 'Client' AND description LIKE '%delivery%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the average weight of packages I delivered in the past 7 days?", "response": "sql SELECT AVG(weight) FROM Orders WHERE shipment_id IN (SELECT shipment_id FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days');"}
{"prompt": "How many deliveries did I make to medical clinics this week? (Assuming client name filter)", "response": "sql SELECT COUNT(*) FROM Shipments S JOIN Clients C ON S.client_id = C.client_id WHERE C.company_name LIKE '%clinic%' AND S.shipment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List support tickets I submitted that are still open.", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE role = 'Driver' AND raised_by_id = 201 AND status != 'Resolved';"}
{"prompt": "Show me contact details of warehouse staff in my assigned delivery region. (Assuming region = Chennai)", "response": "sql SELECT staff_id, first_name, last_name, email, phone FROM WarehouseStaff WHERE staff_id IN (SELECT manager_id FROM Warehouses WHERE location = 'Chennai');"}
{"prompt": "What are the total mileage logs submitted by me this month? (Assuming mileage in Finance table via description)", "response": "sql SELECT SUM(amount) AS total_mileage FROM Finance WHERE description LIKE '%mileage%' AND transaction_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Give me a list of my recent system logins.", "response": "sql SELECT timestamp, ip_address, action FROM SystemLogs WHERE user_id = 201 ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What shipments did I complete last week that were on time?", "response": "sql SELECT shipment_id, delivery_date FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days' AND delivery_date <= shipment_date + INTERVAL '1 day';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "I need to check the current status of a specific shipment. (e.g., shipment ID = 104)", "response": "sql SELECT status, delivery_date FROM Shipments WHERE shipment_id = 104;"}
{"prompt": "What is the new estimated delivery date for a delayed shipment? (e.g., shipment ID = 108)", "response": "sql SELECT delivery_date FROM Shipments WHERE shipment_id = 108 AND delivery_date > shipment_date;"}
{"prompt": "Show me the full shipping history of a client. (e.g., client ID = 5)", "response": "sql SELECT shipment_id, origin, destination, shipment_date, delivery_date, status FROM Shipments WHERE client_id = 5 ORDER BY shipment_date DESC;"}
{"prompt": "What items were included in a specific shipment? (e.g., shipment ID = 112)", "response": "sql SELECT item_description, quantity, weight FROM Orders WHERE shipment_id = 112;"}
{"prompt": "Which shipments are currently delayed? (Assume delay means delivery date > shipment date AND status not ‘Delivered’)", "response": "sql SELECT shipment_id, client_id, delivery_date FROM Shipments WHERE delivery_date > shipment_date AND status != 'Delivered';"}
{"prompt": "Find contact details of the client who raised the current issue. (e.g., client ID = 5)", "response": "sql SELECT contact_name, email, phone FROM Clients WHERE client_id = 5;"}
{"prompt": "Has this client had any delayed shipments in the past month? (e.g., client ID = 5)", "response": "sql SELECT shipment_id FROM Shipments WHERE client_id = 5 AND shipment_date >= CURRENT_DATE - INTERVAL '30 days' AND delivery_date > shipment_date;"}
{"prompt": "List all open support tickets raised by clients.", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE role = 'Client' AND status != 'Resolved';"}
{"prompt": "Which driver was linked to a shipment that had a damage report? (Assuming via ticket and shipment linkage, driver_id not stored)", "response": "Cannot determine driver directly as driver_id not in schema."}
{"prompt": "What support tickets did I create this week? (e.g., raised_by_id = 301)", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE raised_by_id = 301 AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the most common client concerns reported in tickets this month? (using keyword matching)", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE role = 'Client' AND created_at >= date_trunc('month', CURRENT_DATE) GROUP BY subject ORDER BY count DESC;"}
{"prompt": "I need to check if a complaint was resolved. (e.g., ticket ID = 402)", "response": "sql SELECT status, resolved_at FROM SupportTickets WHERE ticket_id = 402;"}
{"prompt": "Which clients have raised more than 3 tickets this month?", "response": "sql SELECT raised_by_id, COUNT(*) AS total_tickets FROM SupportTickets WHERE role = 'Client' AND created_at >= date_trunc('month', CURRENT_DATE) GROUP BY raised_by_id HAVING COUNT(*) > 3;"}
{"prompt": "I want to find the email of the warehouse manager handling a shipment's destination. (e.g., destination = 'Mumbai')", "response": "sql SELECT FM.email FROM Shipments S JOIN Warehouses W ON S.destination = W.location JOIN FleetManagers FM ON W.manager_id = FM.manager_id WHERE S.destination = 'Mumbai' LIMIT 1;"}
{"prompt": "Show me unresolved tickets related to damages.", "response": "sql SELECT ticket_id, subject, description FROM SupportTickets WHERE description LIKE '%damage%' AND status != 'Resolved';"}
{"prompt": "List all client emails who had delayed shipments last week.", "response": "sql SELECT DISTINCT C.email FROM Clients C JOIN Shipments S ON C.client_id = S.client_id WHERE S.shipment_date >= CURRENT_DATE - INTERVAL '7 days' AND S.delivery_date > S.shipment_date;"}
{"prompt": "Which ticket subjects were resolved in the last 3 days?", "response": "sql SELECT subject FROM SupportTickets WHERE status = 'Resolved' AND resolved_at >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "What shipments were delivered on the same day they were shipped?", "response": "sql SELECT shipment_id, client_id, origin, destination FROM Shipments WHERE shipment_date = delivery_date;"}
{"prompt": "Which warehouse staff work at a location linked to a delayed shipment? (via warehouse location)", "response": "sql SELECT WS.first_name, WS.last_name FROM Shipments S JOIN Warehouses W ON S.destination = W.location JOIN WarehouseStaff WS ON W.manager_id = WS.staff_id WHERE S.delivery_date > S.shipment_date;"}
{"prompt": "What support tickets were created by drivers regarding delivery issues?", "response": "sql SELECT ticket_id, subject, description FROM SupportTickets WHERE role = 'Driver' AND description LIKE '%delivery%';"}
{"prompt": "Warehouse Staff", "response": "nan"}
{"prompt": "Show me all orders that need to be picked today. (Assume “today” means shipments scheduled today)", "response": "sql SELECT O.order_id, O.item_description, O.quantity FROM Orders O JOIN Shipments S ON O.shipment_id = S.shipment_id WHERE S.shipment_date = CURRENT_DATE;"}
{"prompt": "What are the details of the shipment I’m loading next? (e.g., shipment ID = 205)", "response": "sql SELECT origin, destination, shipment_date, delivery_date, status FROM Shipments WHERE shipment_id = 205;"}
{"prompt": "List the items for a particular shipment so I can verify them during loading. (e.g., shipment ID = 205)", "response": "sql SELECT item_description, quantity, weight FROM Orders WHERE shipment_id = 205;"}
{"prompt": "Has this shipment already been delivered? (e.g., shipment ID = 205)", "response": "sql SELECT status FROM Shipments WHERE shipment_id = 205;"}
{"prompt": "What is the destination of the shipment I’m preparing now? (e.g., shipment ID = 210)", "response": "sql SELECT destination FROM Shipments WHERE shipment_id = 210;"}
{"prompt": "Which warehouse manager is assigned to this location? (e.g., location = 'Bengaluru')", "response": "sql SELECT FM.first_name, FM.last_name, FM.email FROM Warehouses W JOIN FleetManagers FM ON W.manager_id = FM.manager_id WHERE W.location = 'Bengaluru';"}
{"prompt": "How many orders are linked to this shipment? (e.g., shipment ID = 203)", "response": "sql SELECT COUNT(*) FROM Orders WHERE shipment_id = 203;"}
{"prompt": "What is the total weight of a shipment before sealing the truck? (e.g., shipment ID = 203)", "response": "sql SELECT SUM(weight) AS total_weight FROM Orders WHERE shipment_id = 203;"}
{"prompt": "Have there been any mismatches or flagged issues with recent shipments? (assume flagged = mismatched qty or missing info – simulated via ticket)", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE description LIKE '%mismatch%' OR description LIKE '%missing%';"}
{"prompt": "What are the email and phone number of the fleet manager I should contact for outbound trucks?", "response": "sql SELECT DISTINCT FM.email, FM.phone FROM FleetManagers FM;"}
{"prompt": "Show me all warehouse staff currently working in our location. (e.g., manager_id = 4)", "response": "sql SELECT first_name, last_name, email FROM WarehouseStaff WHERE staff_id = 4;"}
{"prompt": "Which shipments are still pending delivery?", "response": "sql SELECT shipment_id, destination, status FROM Shipments WHERE status NOT IN ('Delivered', 'Completed');"}
{"prompt": "What are the details of the last 5 shipments dispatched from our warehouse? (Assume based on shipment_date descending)", "response": "sql SELECT shipment_id, destination, shipment_date FROM Shipments ORDER BY shipment_date DESC LIMIT 5;"}
{"prompt": "What packages are assigned to be loaded for a specific destination? (e.g., destination = 'Delhi')", "response": "sql SELECT O.order_id, O.item_description FROM Orders O JOIN Shipments S ON O.shipment_id = S.shipment_id WHERE S.destination = 'Delhi';"}
{"prompt": "Was this shipment picked and packed today? (e.g., shipment ID = 211)", "response": "sql SELECT shipment_date FROM Shipments WHERE shipment_id = 211 AND shipment_date = CURRENT_DATE;"}
{"prompt": "Find any recently raised issues related to packaging or inventory.", "response": "sql SELECT ticket_id, subject, description FROM SupportTickets WHERE description LIKE '%pack%' OR description LIKE '%inventory%' ORDER BY created_at DESC;"}
{"prompt": "Get all orders that weigh more than 50kg, to arrange forklift assistance.", "response": "sql SELECT order_id, item_description, weight FROM Orders WHERE weight > 50;"}
{"prompt": "Show the delivery date for all shipments that left this week.", "response": "sql SELECT shipment_id, delivery_date FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Find the name and contact of the logistics coordinator for coordination. (Assume all are eligible)", "response": "sql SELECT first_name, last_name, phone FROM LogisticsCoordinators;"}
{"prompt": "Which shipments are scheduled from this warehouse location? (e.g., location = 'Mumbai')", "response": "sql SELECT S.shipment_id, S.origin, S.destination FROM Shipments S JOIN Warehouses W ON S.origin = W.location WHERE W.location = 'Mumbai';"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "Show me all financial transactions recorded this week.", "response": "sql SELECT * FROM Finance WHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What was the total revenue from completed shipments this month? (Assume revenue = positive 'amount' with 'transaction_type' = 'Credit')", "response": "sql SELECT SUM(amount) AS total_revenue FROM Finance WHERE transaction_type = 'Credit' AND DATE_TRUNC('month', transaction_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "List all pending payments from clients. (Assume 'transaction_type' = 'Debit' and possibly status is tracked in another system)", "response": "sql SELECT * FROM Finance WHERE transaction_type = 'Debit';"}
{"prompt": "Which transactions were related to fuel expenses?", "response": "sql SELECT * FROM Finance WHERE description LIKE '%fuel%';"}
{"prompt": "Find the transaction details for a specific client shipment. (e.g., shipment_id = 205)", "response": "sql SELECT * FROM Finance WHERE description LIKE '%shipment 205%';"}
{"prompt": "Show me all reimbursements issued to drivers. (Assume keyword 'reimburse' in description)", "response": "sql SELECT * FROM Finance WHERE description LIKE '%reimburse%';"}
{"prompt": "What were the highest expenses recorded last week?", "response": "sql SELECT * FROM Finance WHERE transaction_type = 'Debit' AND transaction_date >= CURRENT_DATE - INTERVAL '7 days' ORDER BY amount DESC;"}
{"prompt": "Generate a cost breakdown by category for today.", "response": "sql SELECT description, SUM(amount) AS total_cost FROM Finance WHERE transaction_date = CURRENT_DATE AND transaction_type = 'Debit' GROUP BY description;"}
{"prompt": "Which transaction had a misapplied discount recently? (Assume logged via 'discount' keyword)", "response": "sql SELECT * FROM Finance WHERE description LIKE '%discount%';"}
{"prompt": "Find all transactions related to toll charges.", "response": "sql SELECT * FROM Finance WHERE description LIKE '%toll%';"}
{"prompt": "How many financial transactions were processed this month?", "response": "sql SELECT COUNT(*) FROM Finance WHERE DATE_TRUNC('month', transaction_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What’s the total expense incurred this quarter? (Assume 'Debit' = expense)", "response": "sql SELECT SUM(amount) AS total_expense FROM Finance WHERE transaction_type = 'Debit' AND transaction_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "List all finance entries related to driver wages.", "response": "sql SELECT * FROM Finance WHERE description LIKE '%driver wage%';"}
{"prompt": "Show me all financial transactions sorted by date.", "response": "sql SELECT * FROM Finance ORDER BY transaction_date DESC;"}
{"prompt": "What are the top 5 highest credit transactions of all time?", "response": "sql SELECT * FROM Finance WHERE transaction_type = 'Credit' ORDER BY amount DESC LIMIT 5;"}
{"prompt": "Which days last month had the highest expenses?", "response": "sql SELECT transaction_date, SUM(amount) AS daily_expense FROM Finance WHERE transaction_type = 'Debit' AND DATE_TRUNC('month', transaction_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') GROUP BY transaction_date ORDER BY daily_expense DESC;"}
{"prompt": "Find transactions with missing or null descriptions.", "response": "sql SELECT * FROM Finance WHERE description IS NULL OR description = '';"}
{"prompt": "How many debit vs. credit transactions have occurred this year?", "response": "sql SELECT transaction_type, COUNT(*) FROM Finance WHERE transaction_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY transaction_type;"}
{"prompt": "What’s the total cash flow balance this month? (Credits minus Debits)", "response": "sql SELECT (SELECT COALESCE(SUM(amount), 0) FROM Finance WHERE transaction_type = 'Credit' AND DATE_TRUNC('month', transaction_date) = DATE_TRUNC('month', CURRENT_DATE)) - (SELECT COALESCE(SUM(amount), 0) FROM Finance WHERE transaction_type = 'Debit' AND DATE_TRUNC('month', transaction_date) = DATE_TRUNC('month', CURRENT_DATE)) AS cash_flow_balance;"}
{"prompt": "Show me all financial entries involving maintenance.", "response": "sql SELECT * FROM Finance WHERE description LIKE '%maintenance%';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Show me a list of all users and their roles in the system.", "response": "sql SELECT user_id, username, role FROM Users;"}
{"prompt": "Which users haven't logged in for over 30 days?", "response": "sql SELECT user_id, username, last_login FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "List all actions performed by user ID 12 in the system logs.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = 12 ORDER BY timestamp DESC;"}
{"prompt": "How many failed login attempts occurred in the past week? (Assume action includes keyword 'failed login')", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE action LIKE '%failed login%' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show me recent system activities involving data deletions. (Assume deletion is logged in action column)", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%delete%' ORDER BY timestamp DESC;"}
{"prompt": "List IP addresses that accessed the system today.", "response": "sql SELECT DISTINCT ip_address FROM SystemLogs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Find users who performed the most actions in the last 24 hours.", "response": "sql SELECT user_id, COUNT(*) AS action_count FROM SystemLogs WHERE timestamp >= NOW() - INTERVAL '1 day' GROUP BY user_id ORDER BY action_count DESC;"}
{"prompt": "Show me logs between June 1 and June 10, 2025.", "response": "sql SELECT * FROM SystemLogs WHERE timestamp BETWEEN '2025-06-01' AND '2025-06-10';"}
{"prompt": "List users who recently changed roles. (Assume role changes are recorded in action log)", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%changed role%';"}
{"prompt": "How many distinct users accessed the system in the past 7 days?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which IP addresses triggered the most system actions this week?", "response": "sql SELECT ip_address, COUNT(*) AS total_actions FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY ip_address ORDER BY total_actions DESC;"}
{"prompt": "What were the most common actions taken by users today?", "response": "sql SELECT action, COUNT(*) AS frequency FROM SystemLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY action ORDER BY frequency DESC;"}
{"prompt": "Retrieve all log entries for the Operations Manager role. (Join Users and SystemLogs)", "response": "sql SELECT s.* FROM SystemLogs s JOIN Users u ON s.user_id = u.user_id WHERE u.role = 'OperationsManager';"}
{"prompt": "List all users who have never logged into the system.", "response": "sql SELECT user_id, username FROM Users WHERE last_login IS NULL;"}
{"prompt": "Find system logs performed from unknown IPs. (Assume IPs not in company’s range start with '192.168.')", "response": "sql SELECT * FROM SystemLogs WHERE ip_address NOT LIKE '192.168.%';"}
{"prompt": "Get the number of actions taken per role today.", "response": "sql SELECT u.role, COUNT(*) AS action_count FROM SystemLogs s JOIN Users u ON s.user_id = u.user_id WHERE DATE(s.timestamp) = CURRENT_DATE GROUP BY u.role;"}
{"prompt": "Identify any suspicious activities involving more than 50 actions per user in a single hour.", "response": "sql SELECT user_id, DATE_TRUNC('hour', timestamp) AS hour_block, COUNT(*) AS actions FROM SystemLogs GROUP BY user_id, hour_block HAVING COUNT(*) > 50 ORDER BY hour_block DESC;"}
{"prompt": "What’s the total number of system logs generated this month?", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE DATE_TRUNC('month', timestamp) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Retrieve all logins that occurred during non-business hours (before 8 AM or after 6 PM).", "response": "sql SELECT * FROM SystemLogs WHERE EXTRACT(HOUR FROM timestamp) < 8 OR EXTRACT(HOUR FROM timestamp) > 18 AND action LIKE '%login%';"}
{"prompt": "List all administrative users in the system. (Assume admins are roles like ‘SystemAdmin’)", "response": "sql SELECT user_id, username FROM Users WHERE role LIKE '%admin%';"}
{"prompt": "Operations Managers", "response": "nan"}
{"prompt": "Show me all active shipments currently delayed beyond their expected delivery date.", "response": "sql SELECT * FROM Shipments WHERE delivery_date < CURRENT_DATE AND status != 'Delivered';"}
{"prompt": "Which clients had the highest number of shipments in the last 30 days?", "response": "sql SELECT client_id, COUNT(*) AS total_shipments FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY client_id ORDER BY total_shipments DESC;"}
{"prompt": "List all pending support tickets from the past week.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Find warehouse staff with the most recent email activity.", "response": "sql SELECT * FROM WarehouseStaff ORDER BY staff_id DESC; (Needs action data in logs to be more precise)"}
{"prompt": "Show all shipments originating from 'Mumbai' and going to 'Delhi'.", "response": "sql SELECT * FROM Shipments WHERE origin = 'Mumbai' AND destination = 'Delhi';"}
{"prompt": "List all drivers and their license numbers.", "response": "sql SELECT first_name, last_name, license_number FROM Drivers;"}
{"prompt": "Retrieve all shipments handled by client ID 3.", "response": "sql SELECT * FROM Shipments WHERE client_id = 3;"}
{"prompt": "Get contact details for all fleet managers.", "response": "sql SELECT first_name, last_name, email, phone FROM FleetManagers;"}
{"prompt": "What are the most recent transactions made for fuel or vehicle maintenance? (Assume keywords in description)", "response": "sql SELECT * FROM Finance WHERE description LIKE '%fuel%' OR description LIKE '%maintenance%' ORDER BY transaction_date DESC;"}
{"prompt": "Which warehouses are managed by manager ID 7?", "response": "sql SELECT * FROM Warehouses WHERE manager_id = 7;"}
{"prompt": "Identify shipments that were scheduled but never marked as delivered.", "response": "sql SELECT * FROM Shipments WHERE status != 'Delivered';"}
{"prompt": "Show daily shipment count over the last week.", "response": "sql SELECT shipment_date, COUNT(*) AS shipments FROM Shipments WHERE shipment_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY shipment_date ORDER BY shipment_date;"}
{"prompt": "Which warehouse has the highest number of orders shipped from it? (Join with Shipments & Orders)", "response": "sql SELECT w.warehouse_id, COUNT(o.order_id) AS total_orders FROM Warehouses w JOIN Shipments s ON s.origin = w.location JOIN Orders o ON o.shipment_id = s.shipment_id GROUP BY w.warehouse_id ORDER BY total_orders DESC;"}
{"prompt": "Find orders with weight greater than 100 kg.", "response": "sql SELECT * FROM Orders WHERE weight > 100;"}
{"prompt": "List the most recent finance transactions.", "response": "sql SELECT * FROM Finance ORDER BY transaction_date DESC LIMIT 10;"}
{"prompt": "How many unresolved support tickets are raised by drivers?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE role = 'Driver' AND status != 'Resolved';"}
{"prompt": "Find all drivers who haven’t been assigned any shipment. (Assumes assignment is tracked elsewhere—placeholder logic)", "response": "sql SELECT * FROM Drivers WHERE driver_id NOT IN (SELECT DISTINCT driver_id FROM Shipments); (Requires shipment-driver mapping)"}
{"prompt": "Get the email and phone of the client with the most support tickets.", "response": "sql SELECT c.email, c.phone FROM Clients c JOIN SupportTickets s ON c.client_id = s.raised_by_id WHERE s.role = 'Client' GROUP BY c.client_id, c.email, c.phone ORDER BY COUNT(*) DESC LIMIT 1;"}
{"prompt": "How many orders were shipped per client in May 2025?", "response": "sql SELECT s.client_id, COUNT(o.order_id) AS total_orders FROM Shipments s JOIN Orders o ON s.shipment_id = o.shipment_id WHERE DATE_TRUNC('month', s.shipment_date) = '2025-05-01' GROUP BY s.client_id;"}
{"prompt": "List all analytics reports generated in the past week.", "response": "sql SELECT * FROM Analytics WHERE generated_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which routes (origin to destination) have the highest number of delayed shipments?", "response": "sql SELECT origin, destination, COUNT(*) AS delay_count FROM Shipments WHERE delivery_date < CURRENT_DATE AND status != 'Delivered' GROUP BY origin, destination ORDER BY delay_count DESC;"}
{"prompt": "What is the average delivery time (in days) per shipment?", "response": "sql SELECT AVG(delivery_date - shipment_date) AS avg_delivery_days FROM Shipments;"}
{"prompt": "List all warehouse locations and their assigned manager details.", "response": "sql SELECT w.location, m.first_name, m.last_name, m.email FROM Warehouses w JOIN OperationsManagers m ON w.manager_id = m.manager_id;"}
{"prompt": "How many shipments were created this month?", "response": "sql SELECT COUNT(*) FROM Shipments WHERE DATE_TRUNC('month', shipment_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which shipment routes are used most frequently?", "response": "sql SELECT origin, destination, COUNT(*) AS route_count FROM Shipments GROUP BY origin, destination ORDER BY route_count DESC;"}
{"prompt": "Show all orders heavier than 50 kg.", "response": "sql SELECT * FROM Orders WHERE weight > 50;"}
{"prompt": "How many support tickets were raised in the last 14 days, grouped by role?", "response": "sql SELECT role, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '14 days' GROUP BY role;"}
{"prompt": "Find average weight of items shipped per shipment.", "response": "sql SELECT shipment_id, AVG(weight) AS avg_weight FROM Orders GROUP BY shipment_id;"}
{"prompt": "List clients with more than 10 shipments.", "response": "sql SELECT client_id, COUNT(*) AS total_shipments FROM Shipments GROUP BY client_id HAVING COUNT(*) > 10;"}
{"prompt": "Identify finance transactions exceeding ₹10,000 in value.", "response": "sql SELECT * FROM Finance WHERE amount > 10000;"}
{"prompt": "What’s the monthly breakdown of completed shipments in the last 6 months?", "response": "sql SELECT DATE_TRUNC('month', delivery_date) AS month, COUNT(*) AS delivered_count FROM Shipments WHERE status = 'Delivered' AND delivery_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "List all shipments delayed more than 2 days past expected delivery.", "response": "sql SELECT * FROM Shipments WHERE delivery_date < CURRENT_DATE AND delivery_date - shipment_date > 2;"}
{"prompt": "Which warehouses shipped the most orders?", "response": "sql SELECT w.warehouse_id, COUNT(o.order_id) AS total_orders FROM Warehouses w JOIN Shipments s ON s.origin = w.location JOIN Orders o ON o.shipment_id = s.shipment_id GROUP BY w.warehouse_id ORDER BY total_orders DESC;"}
{"prompt": "What is the total revenue from completed shipments this year? (Assume 'Completed' implies revenue is booked)", "response": "sql SELECT SUM(amount) AS total_revenue FROM Finance WHERE transaction_type = 'Revenue' AND transaction_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "How many orders did each client place?", "response": "sql SELECT s.client_id, COUNT(o.order_id) AS order_count FROM Shipments s JOIN Orders o ON s.shipment_id = o.shipment_id GROUP BY s.client_id;"}
{"prompt": "List all system logs related to driver users in the last week. (Assume Drivers are also in Users table)", "response": "sql SELECT * FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE u.role = 'Driver' AND sl.timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Get the list of all transactions sorted by most recent.", "response": "sql SELECT * FROM Finance ORDER BY transaction_date DESC;"}
{"prompt": "Find the most common delivery destination.", "response": "sql SELECT destination, COUNT(*) AS frequency FROM Shipments GROUP BY destination ORDER BY frequency DESC LIMIT 1;"}
{"prompt": "Show support ticket resolution times (in hours) for last 30 days.", "response": "sql SELECT ticket_id, EXTRACT(EPOCH FROM (resolved_at - created_at))/3600 AS resolution_hours FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '30 days' AND resolved_at IS NOT NULL;"}
{"prompt": "List analytics reports generated in the last 10 days.", "response": "sql SELECT * FROM Analytics WHERE generated_on >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "OnlineAuction", "response": "nan"}
{"prompt": "Bidders / Buyers", "response": "nan"}
{"prompt": "What is Ravi’s user ID after registration on BidBazaar?", "response": "sql SELECT user_id FROM Users WHERE username = 'Ravi';"}
{"prompt": "When did Ravi register his account on BidBazaar?", "response": "sql SELECT registration_date FROM Users WHERE username = 'Ravi';"}
{"prompt": "What was the title and description of the listing Ravi bid on?", "response": "sql SELECT title, description FROM Listings WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) ORDER BY bid_time LIMIT 1);"}
{"prompt": "What was the reserve price set for the Mughal-e-Azam poster listing?", "response": "sql SELECT reserve_price FROM Listings WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) ORDER BY bid_time LIMIT 1);"}
{"prompt": "Who were the other bidders for the same listing Ravi bid on?", "response": "sql SELECT DISTINCT b2.bidder_id FROM Bids b1 JOIN Bids b2 ON b1.listing_id = b2.listing_id WHERE b1.bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) AND b2.bidder_id != b1.bidder_id;"}
{"prompt": "What was the highest bid amount placed by Ravi?", "response": "sql SELECT MAX(bid_amount) FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi'));"}
{"prompt": "What was the final bid amount that won the listing?", "response": "sql SELECT MAX(bid_amount) FROM Bids WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')));"}
{"prompt": "When exactly did Ravi place his winning bid?", "response": "sql SELECT bid_time FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) ORDER BY bid_amount DESC LIMIT 1;"}
{"prompt": "What payment method did Ravi use to pay for the poster?", "response": "sql SELECT payment_method FROM Payments WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi') ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "Has the payment made by Ravi been marked as successful?", "response": "sql SELECT status FROM Payments WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi') ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "What is Ravi’s billing address registered on the platform?", "response": "sql SELECT billing_address FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi');"}
{"prompt": "Who is the seller of the Mughal-e-Azam poster?", "response": "sql SELECT seller_id FROM Listings WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) ORDER BY bid_time LIMIT 1);"}
{"prompt": "What is the store name of the seller who listed the poster?", "response": "sql SELECT store_name FROM Sellers WHERE seller_id = (SELECT seller_id FROM Listings WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) ORDER BY bid_time LIMIT 1));"}
{"prompt": "How many total bids were placed on the listing Ravi won?", "response": "sql SELECT COUNT(*) FROM Bids WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')));"}
{"prompt": "When did the auction for the Mughal-e-Azam poster start and end?", "response": "sql SELECT start_date, end_date FROM Listings WHERE listing_id = (SELECT listing_id FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')) ORDER BY bid_time LIMIT 1);"}
{"prompt": "Did PosterKing99 outbid Ravi at any point during the auction?", "response": "sql SELECT COUNT(*) > 0 AS was_outbid FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'PosterKing99')) AND bid_amount > ALL (SELECT bid_amount FROM Bids WHERE bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi')));"}
{"prompt": "What is the total amount Ravi has spent on the platform so far?", "response": "sql SELECT SUM(amount) FROM Payments WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi') AND status = 'Completed';"}
{"prompt": "What device/IP did Ravi last use to log into the platform?", "response": "sql SELECT ip_address FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi') ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "What are all the listings Ravi has placed a bid on?", "response": "sql SELECT DISTINCT l.title FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE b.bidder_id = (SELECT bidder_id FROM Bidders WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Ravi'));"}
{"prompt": "Has Ravi ever raised a support ticket after the auction?", "response": "sql SELECT COUNT(*) > 0 AS has_raised_ticket FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE username = 'Ravi');"}
{"prompt": "Sellers", "response": "nan"}
{"prompt": "What is Neha’s user ID after registering on BidBazaar?", "response": "sql SELECT user_id FROM Users WHERE username = 'Neha';"}
{"prompt": "On what date did Neha register as a seller on the platform?", "response": "sql SELECT registration_date FROM Users WHERE username = 'Neha';"}
{"prompt": "What is Neha’s seller ID linked to her user account?", "response": "sql SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha');"}
{"prompt": "What is the title and starting price of the Yashica Electro 35 camera Neha listed?", "response": "sql SELECT title, start_price FROM Listings WHERE seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha')) AND title LIKE '%Yashica Electro 35%';"}
{"prompt": "What was the final bid amount on the Yashica camera listing?", "response": "sql SELECT MAX(bid_amount) FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%Yashica Electro 35%');"}
{"prompt": "How many total bids were placed on Neha’s Yashica camera listing?", "response": "sql SELECT COUNT(*) FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%Yashica Electro 35%');"}
{"prompt": "What are the titles and start prices of all items listed by Neha?", "response": "sql SELECT title, start_price FROM Listings WHERE seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha'));"}
{"prompt": "What are the listing IDs and current statuses of all listings Neha has posted?", "response": "sql SELECT listing_id, status FROM Listings WHERE seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha'));"}
{"prompt": "How much did each of Neha’s listings sell for?", "response": "sql SELECT l.title, MAX(b.bid_amount) AS final_price FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha')) GROUP BY l.title;"}
{"prompt": "What is Neha’s store name and current seller rating?", "response": "sql SELECT store_name, rating FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha');"}
{"prompt": "Which listing of Neha received the highest bid overall?", "response": "sql SELECT l.title, MAX(b.bid_amount) AS max_bid FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha')) GROUP BY l.title ORDER BY max_bid DESC LIMIT 1;"}
{"prompt": "What are the start and end dates of the auction for the Tintin comic listed by Neha?", "response": "sql SELECT start_date, end_date FROM Listings WHERE seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha')) AND title LIKE '%Tintin%';"}
{"prompt": "Has Neha received any payment from her sales?", "response": "sql SELECT COUNT(*) > 0 AS has_received_payment FROM Payments WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha') AND status = 'Completed';"}
{"prompt": "What was the amount and method of Neha’s most recent payment?", "response": "sql SELECT amount, payment_method FROM Payments WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha') ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "What is the total revenue Neha has earned through the platform so far?", "response": "sql SELECT SUM(amount) FROM Payments WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha') AND status = 'Completed';"}
{"prompt": "What’s the total number of listings Neha has created on BidBazaar?", "response": "sql SELECT COUNT(*) FROM Listings WHERE seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha'));"}
{"prompt": "What is the average final bid amount across Neha’s listings?", "response": "sql SELECT AVG(max_bid) FROM (SELECT MAX(bid_amount) AS max_bid FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha')) GROUP BY l.listing_id) AS sub;"}
{"prompt": "What are the listing titles Neha posted that received more than 2 bids?", "response": "sql SELECT l.title FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id = (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Neha')) GROUP BY l.title HAVING COUNT(b.bid_id) > 2;"}
{"prompt": "Has Neha ever contacted support regarding any issue?", "response": "sql SELECT COUNT(*) > 0 AS has_contacted_support FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE username = 'Neha');"}
{"prompt": "When was the last time Neha logged in to manage her storefront?", "response": "sql SELECT last_login FROM Users WHERE username = 'Neha';"}
{"prompt": "Auctioneers", "response": "nan"}
{"prompt": "What is my user ID on BidBazaar after I registered as a Digital Auctioneer?", "response": "sql SELECT user_id FROM Users WHERE username = 'Aarav';"}
{"prompt": "What is my auctioneer ID linked to my user profile?", "response": "sql SELECT auctioneer_id FROM Auctioneers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav');"}
{"prompt": "When did I register on the BidBazaar platform?", "response": "sql SELECT registration_date FROM Users WHERE username = 'Aarav';"}
{"prompt": "What is my last login timestamp on the platform?", "response": "sql SELECT last_login FROM Users WHERE username = 'Aarav';"}
{"prompt": "How many total listings have I hosted as an auctioneer?", "response": "sql SELECT COUNT(*) FROM Listings WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav'));"}
{"prompt": "What was the title and starting price of the signed 1983 cricket bat listing?", "response": "sql SELECT title, start_price FROM Listings WHERE title LIKE '%1983 World Cup%' AND seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav'));"}
{"prompt": "What was the highest bid placed on the signed cricket bat auction?", "response": "sql SELECT MAX(bid_amount) FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%1983 World Cup%' AND seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav')));"}
{"prompt": "What is the final sale amount and winner for the signed bat listing?", "response": "sql SELECT bid_amount, bidder_id FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%1983 World Cup%' AND seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav'))) ORDER BY bid_amount DESC LIMIT 1;"}
{"prompt": "What are all the items I’ve helped auction as an auctioneer?", "response": "sql SELECT title FROM Listings WHERE seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav'));"}
{"prompt": "Which of my auction listings had the most bids?", "response": "sql SELECT l.title, COUNT(b.bid_id) AS bid_count FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav')) GROUP BY l.title ORDER BY bid_count DESC LIMIT 1;"}
{"prompt": "What is the average number of bids per listing in the auctions I’ve conducted?", "response": "sql SELECT AVG(bid_count) FROM (SELECT COUNT(b.bid_id) AS bid_count FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav')) GROUP BY l.listing_id) AS sub;"}
{"prompt": "Who were the top 3 bidders (by bid amount) on the Collectors’ Night auction item?", "response": "sql SELECT bidder_id, bid_amount FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%1983 World Cup%') ORDER BY bid_amount DESC LIMIT 3;"}
{"prompt": "Which countries were the top bidders from (assuming geolocation via IP)?", "response": "sql SELECT ip_address FROM SystemLogs WHERE user_id IN (SELECT bidder_id FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%1983 World Cup%'));"}
{"prompt": "nan", "response": "(Extend via IP geolocation system, external to DB)"}
{"prompt": "What’s the average final bid amount for all the listings I’ve hosted?", "response": "sql SELECT AVG(max_bid) FROM (SELECT MAX(b.bid_amount) AS max_bid FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav')) GROUP BY l.listing_id) AS sub;"}
{"prompt": "How many bidders participated in the Collectors’ Night Live Auction?", "response": "sql SELECT COUNT(DISTINCT bidder_id) FROM Bids WHERE listing_id = (SELECT listing_id FROM Listings WHERE title LIKE '%1983 World Cup%');"}
{"prompt": "How many of my auctions have successfully ended with at least one bid?", "response": "sql SELECT COUNT(DISTINCT l.listing_id) FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE l.seller_id IN (SELECT seller_id FROM Sellers WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav'));"}
{"prompt": "Have I raised any support tickets regarding bidder misconduct or platform issues?", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE username = 'Aarav');"}
{"prompt": "What compliance checks have been recorded against my account?", "response": "sql SELECT * FROM ComplianceRecords WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav');"}
{"prompt": "What actions have I logged recently on the platform?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') ORDER BY timestamp DESC;"}
{"prompt": "Listing Managers", "response": "nan"}
{"prompt": "How many listings were created today?", "response": "SELECT COUNT(*) FROM Listings WHERE DATE(start_date) = CURRENT_DATE;"}
{"prompt": "Which listings are currently in 'Pending Verification' status?", "response": "SELECT * FROM Listings WHERE status = 'Pending Verification';"}
{"prompt": "Show me listings that have no description filled in.", "response": "SELECT * FROM Listings WHERE description IS NULL OR description = '';"}
{"prompt": "Which listings are ending today?", "response": "SELECT * FROM Listings WHERE DATE(end_date) = CURRENT_DATE;"}
{"prompt": "Give me the top 5 sellers based on the number of listings they created.", "response": "SELECT seller_id, COUNT(*) AS total_listings FROM Listings GROUP BY seller_id ORDER BY total_listings DESC LIMIT 5;"}
{"prompt": "Which listings have a reserve price lower than the start price?", "response": "SELECT * FROM Listings WHERE reserve_price < start_price;"}
{"prompt": "Show all active listings whose title includes the word “camera”.", "response": "SELECT * FROM Listings WHERE status = 'Live' AND title LIKE '%camera%';"}
{"prompt": "How many listings were verified this week?", "response": "SELECT COUNT(*) FROM Listings WHERE status = 'Verified' AND start_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which listings are marked as ‘Live’ but have not received any bids?", "response": "SELECT * FROM Listings l WHERE status = 'Live' AND NOT EXISTS (SELECT 1 FROM Bids b WHERE b.listing_id = l.listing_id);"}
{"prompt": "What is the average starting price of listings created this month?", "response": "SELECT AVG(start_price) FROM Listings WHERE start_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which listings had the most bids?", "response": "SELECT l.listing_id, COUNT(b.bid_id) AS bid_count FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id GROUP BY l.listing_id ORDER BY bid_count DESC LIMIT 10;"}
{"prompt": "List all listings submitted by seller ID 1023.", "response": "SELECT * FROM Listings WHERE seller_id = 1023;"}
{"prompt": "What are the highest reserve price listings currently live?", "response": "SELECT * FROM Listings WHERE status = 'Live' ORDER BY reserve_price DESC LIMIT 10;"}
{"prompt": "Which listings are scheduled to start tomorrow?", "response": "SELECT * FROM Listings WHERE DATE(start_date) = CURRENT_DATE + INTERVAL '1 day';"}
{"prompt": "How many listings were rejected in the last 30 days?", "response": "SELECT COUNT(*) FROM Listings WHERE status = 'Rejected' AND start_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "List all listings created by sellers with a rating above 4.5.", "response": "SELECT l.* FROM Listings l JOIN Sellers s ON l.seller_id = s.seller_id WHERE s.rating > 4.5;"}
{"prompt": "Which listings have bidding end time within the next hour?", "response": "SELECT * FROM Listings WHERE end_date BETWEEN NOW() AND NOW() + INTERVAL '1 hour';"}
{"prompt": "Show all listings that ended without receiving any bids.", "response": "SELECT * FROM Listings l WHERE end_date < NOW() AND NOT EXISTS (SELECT 1 FROM Bids b WHERE b.listing_id = l.listing_id);"}
{"prompt": "Which sellers have more than 10 active listings?", "response": "SELECT seller_id, COUNT(*) AS active_count FROM Listings WHERE status = 'Live' GROUP BY seller_id HAVING COUNT(*) > 10;"}
{"prompt": "Give me listings that received bids greater than ₹10,000.", "response": "SELECT DISTINCT l.* FROM Listings l JOIN Bids b ON l.listing_id = b.listing_id WHERE b.bid_amount > 10000;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "How many support tickets were raised today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE;"}
{"prompt": "Show me all unresolved tickets I need to follow up on.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved';"}
{"prompt": "What was the most recent support ticket raised by a user named Anil?", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE username = 'Anil') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "How many support tickets mention 'payment' in their subject or description?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%payment%' OR description LIKE '%payment%';"}
{"prompt": "List all tickets raised in the last 24 hours.", "response": "sql SELECT * FROM SupportTickets WHERE created_at >= NOW() - INTERVAL '1 day';"}
{"prompt": "How many support tickets have been resolved this week?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE(resolved_at) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the average resolution time of support tickets?", "response": "sql SELECT AVG(resolved_at - created_at) AS avg_resolution_time FROM SupportTickets WHERE resolved_at IS NOT NULL;"}
{"prompt": "Which users have raised more than 3 tickets in the past month?", "response": "sql SELECT raised_by_id, COUNT(*) FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '30 days' GROUP BY raised_by_id HAVING COUNT(*) > 3;"}
{"prompt": "Are there any open tickets from sellers?", "response": "sql SELECT * FROM SupportTickets WHERE role = 'seller' AND status != 'resolved';"}
{"prompt": "How many support tickets were related to login issues?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%login%' OR description LIKE '%login%';"}
{"prompt": "Which ticket took the longest time to resolve?", "response": "sql SELECT *, (resolved_at - created_at) AS resolution_time FROM SupportTickets WHERE resolved_at IS NOT NULL ORDER BY resolution_time DESC LIMIT 1;"}
{"prompt": "Who are the top 5 users with the most support tickets raised?", "response": "sql SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets GROUP BY raised_by_id ORDER BY ticket_count DESC LIMIT 5;"}
{"prompt": "How many tickets were marked as 'resolved' but never had a resolution timestamp?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status = 'resolved' AND resolved_at IS NULL;"}
{"prompt": "List all tickets that have been open for more than 48 hours.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved' AND created_at <= NOW() - INTERVAL '48 hours';"}
{"prompt": "How many tickets were raised by buyers last month?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE role = 'bidder' AND created_at >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND created_at < DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How many total support tickets are currently open?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status != 'resolved';"}
{"prompt": "Which ticket was the earliest unresolved one?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved' ORDER BY created_at ASC LIMIT 1;"}
{"prompt": "How many support tickets involved scam or fraud keywords?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%scam%' OR description LIKE '%fraud%';"}
{"prompt": "What is the daily count of new tickets for the past 7 days?", "response": "sql SELECT DATE(created_at) AS date, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY DATE(created_at) ORDER BY date;"}
{"prompt": "Which roles have raised the most support tickets overall?", "response": "sql SELECT role, COUNT(*) AS ticket_count FROM SupportTickets GROUP BY role ORDER BY ticket_count DESC;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "How many marketing campaigns have been launched so far?", "response": "SELECT COUNT(*) FROM MarketingCampaigns;"}
{"prompt": "Which campaigns had a budget over ₹50,000?", "response": "SELECT * FROM MarketingCampaigns WHERE budget > 50000;"}
{"prompt": "What are the names and start dates of all currently active campaigns?", "response": "SELECT name, start_date FROM MarketingCampaigns WHERE CURRENT_DATE BETWEEN start_date AND end_date;"}
{"prompt": "Which campaigns targeted 'collectors' as their audience?", "response": "SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%collector%';"}
{"prompt": "List campaigns that ran in the past 30 days.", "response": "SELECT * FROM MarketingCampaigns WHERE end_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the total combined budget of all campaigns so far?", "response": "SELECT SUM(budget) FROM MarketingCampaigns;"}
{"prompt": "Show campaigns that started on a weekend.", "response": "SELECT * FROM MarketingCampaigns WHERE EXTRACT(DOW FROM start_date) IN (0,6);"}
{"prompt": "Which campaigns had the longest duration?", "response": "SELECT *, end_date - start_date AS duration FROM MarketingCampaigns ORDER BY duration DESC;"}
{"prompt": "How many users registered during the “Bid Begins at Midnight” campaign (June 1–June 15)?", "response": "SELECT COUNT(*) FROM Users WHERE registration_date BETWEEN '2025-06-01' AND '2025-06-15';"}
{"prompt": "Which users have logged in during the currently active campaign periods?", "response": "SELECT DISTINCT u.* FROM Users u JOIN MarketingCampaigns mc ON DATE(u.last_login) BETWEEN mc.start_date AND mc.end_date;"}
{"prompt": "How many payments were made during the most recent campaign?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_date BETWEEN (SELECT MAX(start_date) FROM MarketingCampaigns) AND (SELECT MAX(end_date) FROM MarketingCampaigns);"}
{"prompt": "Which campaigns ended without reaching the weekend?", "response": "SELECT * FROM MarketingCampaigns WHERE EXTRACT(DOW FROM end_date) NOT IN (0,6);"}
{"prompt": "List all campaigns that targeted “new users”.", "response": "SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%new user%';"}
{"prompt": "What is the average budget per campaign?", "response": "SELECT AVG(budget) FROM MarketingCampaigns;"}
{"prompt": "Which campaigns overlapped with Diwali week (Oct 30 – Nov 7)?", "response": "SELECT * FROM MarketingCampaigns WHERE start_date <= '2025-11-07' AND end_date >= '2025-10-30';"}
{"prompt": "How many users logged in during the “Collector’s Circle” campaign (March 10–March 20)?", "response": "SELECT COUNT(*) FROM Users WHERE DATE(last_login) BETWEEN '2025-03-10' AND '2025-03-20';"}
{"prompt": "Show campaigns that had a start and end date within the same month.", "response": "SELECT * FROM MarketingCampaigns WHERE DATE_TRUNC('month', start_date) = DATE_TRUNC('month', end_date);"}
{"prompt": "Which campaigns had “nostalgia” in their audience or title?", "response": "SELECT * FROM MarketingCampaigns WHERE name LIKE '%nostalgia%' OR target_audience LIKE '%nostalgia%';"}
{"prompt": "List users who registered during the “Top Bidder” badge promotion (Feb 1–Feb 10).", "response": "SELECT * FROM Users WHERE registration_date BETWEEN '2025-02-01' AND '2025-02-10';"}
{"prompt": "What is the count of users who made payments during any campaign period?", "response": "SELECT COUNT(DISTINCT p.user_id) FROM Payments p JOIN MarketingCampaigns mc ON p.payment_date BETWEEN mc.start_date AND mc.end_date;"}
{"prompt": "Finance / Payment Processing Staff", "response": "nan"}
{"prompt": "How many total payments were processed today?", "response": "SELECT COUNT(*) FROM Payments WHERE DATE(payment_date) = CURRENT_DATE;"}
{"prompt": "What is the total transaction value processed this week?", "response": "SELECT SUM(amount) FROM Payments WHERE payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show all payments over ₹1,00,000 that are currently flagged or pending.", "response": "SELECT * FROM Payments WHERE amount > 100000 AND status IN ('Flagged', 'Pending');"}
{"prompt": "Which transactions failed in the past 30 days?", "response": "SELECT * FROM Payments WHERE status = 'Failed' AND payment_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the average payout amount to sellers?", "response": "SELECT AVG(amount) FROM Payments WHERE status = 'Completed';"}
{"prompt": "List all payouts made to seller ID 2035.", "response": "SELECT * FROM Payments WHERE user_id = 2035 AND status = 'Completed';"}
{"prompt": "How many payments have been flagged for fraud so far?", "response": "SELECT COUNT(*) FROM Payments WHERE status = 'Flagged';"}
{"prompt": "What was the largest single payment ever processed?", "response": "SELECT * FROM Payments ORDER BY amount DESC LIMIT 1;"}
{"prompt": "Which sellers received more than ₹50,000 in payouts last month?", "response": "SELECT user_id, SUM(amount) AS total FROM Payments WHERE status = 'Completed' AND payment_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND payment_date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY user_id HAVING SUM(amount) > 50000;"}
{"prompt": "How many users received their first payout in the past 7 days?", "response": "SELECT COUNT(DISTINCT user_id) FROM Payments WHERE status = 'Completed' AND payment_date >= CURRENT_DATE - INTERVAL '7 days' AND user_id NOT IN (SELECT user_id FROM Payments WHERE payment_date < CURRENT_DATE - INTERVAL '7 days');"}
{"prompt": "What is the breakdown of payments by payment method (e.g., credit card, UPI, net banking)?", "response": "SELECT payment_method, COUNT(*) AS total_transactions FROM Payments GROUP BY payment_method;"}
{"prompt": "Which users have had multiple failed transactions?", "response": "SELECT user_id, COUNT(*) AS failed_count FROM Payments WHERE status = 'Failed' GROUP BY user_id HAVING COUNT(*) > 1;"}
{"prompt": "List all transactions pending for more than 24 hours.", "response": "SELECT * FROM Payments WHERE status = 'Pending' AND payment_date < NOW() - INTERVAL '24 hours';"}
{"prompt": "Which completed transactions were exactly ₹5,000?", "response": "SELECT * FROM Payments WHERE amount = 5000 AND status = 'Completed';"}
{"prompt": "How much total commission has BidBazaar earned this month?", "response": "SELECT SUM(commission_amount) FROM Payments WHERE payment_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Show all payouts processed after KYC verification for seller Naveen (ID 2124).", "response": "SELECT * FROM Payments WHERE user_id = 2124 AND status = 'Completed' AND kyc_verified = TRUE;"}
{"prompt": "Which transactions were reversed or refunded?", "response": "SELECT * FROM Payments WHERE status IN ('Refunded', 'Reversed');"}
{"prompt": "What is the average time between payment initiation and completion?", "response": "SELECT AVG(EXTRACT(EPOCH FROM (completion_time - initiation_time))/60) AS avg_minutes FROM Payments WHERE status = 'Completed';"}
{"prompt": "List all transactions made for listings categorized as 'Jewelry'.", "response": "SELECT p.* FROM Payments p JOIN Listings l ON p.listing_id = l.listing_id WHERE l.category = 'Jewelry';"}
{"prompt": "Which payments were made using international cards?", "response": "SELECT * FROM Payments WHERE payment_method = 'Credit Card' AND card_issuer_country != 'India';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "How many login attempts were made in the last 24 hours?", "response": "SELECT COUNT(*) FROM LoginLogs WHERE login_time >= NOW() - INTERVAL '24 hours';"}
{"prompt": "List all IP addresses with more than 100 failed login attempts in the last 6 hours.", "response": "SELECT ip_address, COUNT(*) AS fail_count FROM LoginLogs WHERE status = 'Failed' AND login_time >= NOW() - INTERVAL '6 hours' GROUP BY ip_address HAVING COUNT(*) > 100;"}
{"prompt": "Which countries generated the highest login traffic in the past 7 days?", "response": "SELECT country, COUNT(*) AS attempts FROM LoginLogs WHERE login_time >= NOW() - INTERVAL '7 days' GROUP BY country ORDER BY attempts DESC;"}
{"prompt": "What was the peak traffic hour for the last Live Auction day?", "response": "SELECT DATE_TRUNC('hour', login_time) AS hour, COUNT(*) AS attempts FROM LoginLogs WHERE DATE(login_time) = '2025-06-10' GROUP BY hour ORDER BY attempts DESC LIMIT 1;"}
{"prompt": "Which users were active during the bot attack window (6:45 AM–7:15 AM today)?", "response": "SELECT DISTINCT user_id FROM LoginLogs WHERE login_time BETWEEN CURRENT_DATE + INTERVAL '6 hours 45 minutes' AND CURRENT_DATE + INTERVAL '7 hours 15 minutes';"}
{"prompt": "How many server errors occurred in the last 48 hours?", "response": "SELECT COUNT(*) FROM SystemLogs WHERE log_level = 'ERROR' AND log_time >= NOW() - INTERVAL '48 hours';"}
{"prompt": "List all overloaded nodes during yesterday's auction.", "response": "SELECT * FROM NodeStatusLogs WHERE status = 'Overloaded' AND log_time::date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "How many times did the firewall block access attempts last week?", "response": "SELECT COUNT(*) FROM FirewallLogs WHERE action = 'Blocked' AND log_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which node had the highest number of rerouted requests during the live celebrity auction?", "response": "SELECT node_id, COUNT(*) AS reroutes FROM TrafficRoutingLogs WHERE event = 'Celebrity Auction' GROUP BY node_id ORDER BY reroutes DESC LIMIT 1;"}
{"prompt": "What percentage of users passed CAPTCHA after failed login attempts yesterday?", "response": "SELECT ROUND(100.0 * (SELECT COUNT(*) FROM CaptchaLogs WHERE result = 'Passed' AND log_date = CURRENT_DATE - 1) / (SELECT COUNT(*) FROM CaptchaLogs WHERE log_date = CURRENT_DATE - 1), 2) AS pass_rate;"}
{"prompt": "When was the last database backup completed successfully?", "response": "SELECT MAX(backup_time) FROM BackupLogs WHERE status = 'Success';"}
{"prompt": "Which servers experienced downtime in the last month?", "response": "SELECT server_id, COUNT(*) AS downtimes FROM UptimeLogs WHERE status = 'Down' AND log_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY server_id;"}
{"prompt": "How many CI/CD deployments were done last week?", "response": "SELECT COUNT(*) FROM DeploymentLogs WHERE deployment_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which deployment had the longest duration?", "response": "SELECT *, end_time - start_time AS duration FROM DeploymentLogs ORDER BY duration DESC LIMIT 1;"}
{"prompt": "How many total users reported site lag on the day of the celebrity auction?", "response": "SELECT COUNT(*) FROM UserFeedback WHERE feedback_time::date = '2025-06-10' AND issue_type LIKE '%lag%';"}
{"prompt": "List all changes pushed in the last successful CI/CD pipeline run.", "response": "SELECT * FROM DeploymentChanges WHERE deployment_id = (SELECT deployment_id FROM DeploymentLogs WHERE status = 'Success' ORDER BY deployment_time DESC LIMIT 1);"}
{"prompt": "What was the average response time of the bidding engine during the last auction?", "response": "SELECT AVG(response_time_ms) FROM BiddingLogs WHERE event = 'Live Celebrity Auction';"}
{"prompt": "Identify any unauthorized access attempts to the admin panel in the past week.", "response": "SELECT * FROM LoginLogs WHERE endpoint = '/admin' AND status = 'Failed' AND login_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which users accessed the system from more than 3 countries in the last 30 days?", "response": "SELECT user_id FROM LoginLogs WHERE login_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY user_id HAVING COUNT(DISTINCT country) > 3;"}
{"prompt": "What was the total number of successful and failed backups in the last 14 days?", "response": "SELECT status, COUNT(*) FROM BackupLogs WHERE backup_time >= CURRENT_DATE - INTERVAL '14 days' GROUP BY status;"}
{"prompt": "Compliance / Fraud Prevention Team", "response": "nan"}
{"prompt": "Which auctions had bids placed from the same IP subnet for both seller and winning bidder?", "response": "SELECT a.auction_id, b1.user_id AS bidder, b2.user_id AS seller, b1.ip_address FROM Auctions a JOIN Bids b1 ON a.auction_id = b1.auction_id JOIN Users b2 ON a.seller_id = b2.user_id WHERE SUBSTRING_INDEX(b1.ip_address, '.', 3) = SUBSTRING_INDEX(b2.ip_address, '.', 3) AND b1.user_id != b2.user_id;"}
{"prompt": "List all accounts created in the last 3 days that placed bids above ₹50,000.", "response": "SELECT user_id, bid_amount FROM Bids WHERE bid_amount > 50000 AND user_id IN (SELECT user_id FROM Users WHERE created_at >= CURRENT_DATE - INTERVAL '3 days');"}
{"prompt": "Identify listings with only 1 photo and item price above ₹1,00,000.", "response": "SELECT * FROM Listings WHERE photo_count = 1 AND starting_price > 100000;"}
{"prompt": "Find all auctions where the winning bidder’s account is less than 2 days old.", "response": "SELECT a.auction_id, b.user_id FROM Auctions a JOIN Bids b ON a.winning_bid_id = b.bid_id JOIN Users u ON b.user_id = u.user_id WHERE u.created_at >= CURRENT_DATE - INTERVAL '2 days';"}
{"prompt": "Which listings contain suspicious external URLs in the description?", "response": "SELECT * FROM Listings WHERE description ~* 'http[s]?://(?!bidbazaar\\.com).*';"}
{"prompt": "Show users who received more than 5 complaints in the past 30 days.", "response": "SELECT reported_user_id, COUNT(*) AS complaints FROM Reports WHERE report_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY reported_user_id HAVING COUNT(*) > 5;"}
{"prompt": "Which seller-bidder pairs have frequently interacted across multiple auctions (possible collusion)?", "response": "SELECT b1.user_id AS bidder, a.seller_id, COUNT(DISTINCT a.auction_id) AS interactions FROM Bids b1 JOIN Auctions a ON b1.auction_id = a.auction_id GROUP BY b1.user_id, a.seller_id HAVING COUNT(DISTINCT a.auction_id) > 3;"}
{"prompt": "Identify users who have a 100% feedback score but less than 5 transactions.", "response": "SELECT user_id FROM Users WHERE feedback_score = 100 AND total_transactions < 5;"}
{"prompt": "What percentage of auctions were canceled due to fraud in the last 60 days?", "response": "SELECT ROUND(100.0 * (SELECT COUNT(*) FROM Auctions WHERE status = 'Cancelled - Fraud' AND end_time >= CURRENT_DATE - INTERVAL '60 days') / (SELECT COUNT(*) FROM Auctions WHERE end_time >= CURRENT_DATE - INTERVAL '60 days'), 2) AS fraud_cancel_pct;"}
{"prompt": "List bidders whose winning bid was more than 3 times the average bid for the auction.", "response": "SELECT b.user_id, b.auction_id FROM Bids b JOIN (SELECT auction_id, AVG(bid_amount) AS avg_bid FROM Bids GROUP BY auction_id) avg_table ON b.auction_id = avg_table.auction_id WHERE b.bid_amount > 3 * avg_table.avg_bid;"}
{"prompt": "Find sellers whose listings are flagged more than 5 times.", "response": "SELECT seller_id, COUNT(*) AS flag_count FROM Listings WHERE status = 'Flagged' GROUP BY seller_id HAVING COUNT(*) > 5;"}
{"prompt": "Show all transactions where delivery address mismatches billing address.", "response": "SELECT * FROM Payments WHERE delivery_address != billing_address;"}
{"prompt": "What percentage of total listings were flagged for policy violations this month?", "response": "SELECT ROUND(100.0 * (SELECT COUNT(*) FROM Listings WHERE status = 'Flagged' AND created_at >= DATE_TRUNC('month', CURRENT_DATE)) / (SELECT COUNT(*) FROM Listings WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE)), 2) AS violation_pct;"}
{"prompt": "Which accounts used more than 3 different IP addresses in the last week?", "response": "SELECT user_id FROM LoginLogs WHERE login_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY user_id HAVING COUNT(DISTINCT ip_address) > 3;"}
{"prompt": "List auctions where bid increments were unusually high (above ₹50,000 in one step).", "response": "SELECT auction_id, bid_id, bid_amount - LAG(bid_amount) OVER (PARTITION BY auction_id ORDER BY bid_time) AS increment FROM Bids HAVING increment > 50000;"}
{"prompt": "Find all auctions with more than 10 bids from the same user.", "response": "SELECT auction_id, user_id, COUNT(*) AS bid_count FROM Bids GROUP BY auction_id, user_id HAVING COUNT(*) > 10;"}
{"prompt": "Which product categories have the highest number of flagged listings?", "response": "SELECT category, COUNT(*) AS flagged_count FROM Listings WHERE status = 'Flagged' GROUP BY category ORDER BY flagged_count DESC;"}
{"prompt": "List users who placed bids from flagged or blacklisted IPs.", "response": "SELECT DISTINCT b.user_id FROM Bids b JOIN BlacklistedIPs i ON b.ip_address = i.ip_address;"}
{"prompt": "Which auctions had all bids from users created within the last 48 hours?", "response": "SELECT b.auction_id FROM Bids b JOIN Users u ON b.user_id = u.user_id GROUP BY b.auction_id HAVING BOOL_AND(u.created_at >= NOW() - INTERVAL '48 hours');"}
{"prompt": "Show the trend of fraud-related flags over the past 6 months.", "response": "SELECT DATE_TRUNC('month', flagged_at) AS month, COUNT(*) AS flagged_count FROM Listings WHERE status = 'Flagged' GROUP BY month ORDER BY month;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "What is the average number of views per item before a bid is placed?", "response": "SELECT AVG(view_count) FROM Listings WHERE total_bids > 0;"}
{"prompt": "What was the bid-to-sale conversion rate for last month?", "response": "SELECT ROUND(100.0 * (SELECT COUNT(*) FROM Auctions WHERE status = 'Sold' AND end_time >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')) / (SELECT COUNT(*) FROM Auctions WHERE end_time >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')), 2) AS conversion_rate;"}
{"prompt": "Which listings in the Home Décor category had a bounce rate above 80%?", "response": "SELECT listing_id FROM ListingAnalytics WHERE category = 'Home Décor' AND bounce_rate > 80;"}
{"prompt": "What is the average load time for listings in the Home Décor category on mobile devices?", "response": "SELECT AVG(load_time_ms) FROM ListingAnalytics WHERE category = 'Home Décor' AND device_type = 'Mobile';"}
{"prompt": "List auctions with high views but zero bids.", "response": "SELECT auction_id, view_count FROM Auctions WHERE view_count > 100 AND total_bids = 0;"}
{"prompt": "How did the bid rate change before and after the image optimization update on 2025-06-01?", "response": "SELECT DATE(bid_time) AS date, COUNT(*) AS bids FROM Bids WHERE bid_time BETWEEN '2025-05-25' AND '2025-06-08' GROUP BY DATE(bid_time) ORDER BY date;"}
{"prompt": "Which product categories have the highest buyer churn rate?", "response": "SELECT category, COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '90 days') AS churned_buyers FROM PurchaseHistory GROUP BY category ORDER BY churned_buyers DESC;"}
{"prompt": "What percentage of new users made at least one bid in their first 7 days?", "response": "SELECT ROUND(100.0 * (SELECT COUNT(DISTINCT user_id) FROM Bids WHERE user_id IN (SELECT user_id FROM Users WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') AND bid_time <= created_at + INTERVAL '7 days') / (SELECT COUNT(*) FROM Users WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'), 2) AS activation_rate;"}
{"prompt": "Identify time slots with the highest average bidding activity.", "response": "SELECT EXTRACT(HOUR FROM bid_time) AS hour, COUNT(*) AS bids FROM Bids GROUP BY hour ORDER BY bids DESC;"}
{"prompt": "Which listings had predicted final prices that deviated more than 30% from actual prices?", "response": "SELECT auction_id, predicted_price, final_price FROM AuctionForecasts WHERE ABS(predicted_price - final_price) > 0.3 * final_price;"}
{"prompt": "How many sellers had a retention rate above 75% over the past quarter?", "response": "SELECT COUNT(*) FROM SellerMetrics WHERE quarter = 'Q2-2025' AND retention_rate > 75;"}
{"prompt": "List fraudulent clusters detected by the latest bidding anomaly model.", "response": "SELECT cluster_id, COUNT(*) AS members FROM BidderClusters WHERE is_fraud = TRUE GROUP BY cluster_id;"}
{"prompt": "Which sellers followed Ramesh’s optimization recommendations and saw more than 20% increase in returns?", "response": "SELECT seller_id FROM SellerPerformance WHERE recommendation_applied = TRUE AND return_increase_pct > 20;"}
{"prompt": "How many auctions ended within 10% of the forecasted final price?", "response": "SELECT COUNT(*) FROM AuctionForecasts WHERE ABS(predicted_price - final_price) <= 0.1 * final_price;"}
{"prompt": "What was the weekly trend of bid rates for Home Décor items post-UI update?", "response": "SELECT DATE_TRUNC('week', bid_time) AS week, COUNT(*) AS total_bids FROM Bids WHERE category = 'Home Décor' AND bid_time >= '2025-06-01' GROUP BY week ORDER BY week;"}
{"prompt": "Which users participated in more than 10 auctions but never placed a winning bid?", "response": "SELECT user_id FROM Bids GROUP BY user_id HAVING COUNT(DISTINCT auction_id) > 10 AND user_id NOT IN (SELECT winning_user_id FROM Auctions);"}
{"prompt": "What is the average final price for auctions with at least 5 bidders?", "response": "SELECT AVG(final_price) FROM Auctions WHERE total_bidders >= 5;"}
{"prompt": "What are the top 5 most bid-on categories in the past 30 days?", "response": "SELECT category, COUNT(*) AS total_bids FROM Bids JOIN Listings USING(listing_id) WHERE bid_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY category ORDER BY total_bids DESC LIMIT 5;"}
{"prompt": "List all auctions where bid frequency increased by 50% after the first hour.", "response": "SELECT auction_id FROM AuctionActivity WHERE bid_count_hour_2 > 1.5 * bid_count_hour_1;"}
{"prompt": "What’s the correlation between item description length and final sale price?", "response": "SELECT CORR(description_length, final_price) FROM Listings JOIN Auctions USING(listing_id);"}
{"prompt": "OnlineVotingSystem", "response": "nan"}
{"prompt": "Voters", "response": "nan"}
{"prompt": "Which elections are currently active that I can vote in?", "response": "sql SELECT * FROM Elections WHERE status = 'open';"}
{"prompt": "Who are the candidates running in the 'City Youth Development Council' election?", "response": "sql SELECT * FROM Candidates WHERE election_id = (SELECT election_id FROM Elections WHERE name = 'City Youth Development Council');"}
{"prompt": "What is the full profile and party name of Ananya Sharma?", "response": "sql SELECT name, party, profile FROM Candidates WHERE name = 'Ananya Sharma';"}
{"prompt": "Did I, Ravi Kumar, successfully cast a vote in the current election?", "response": "sql SELECT * FROM Votes WHERE voter_id = (SELECT voter_id FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar') AND election_id = (SELECT election_id FROM Elections WHERE status = 'open');"}
{"prompt": "At what time did I vote today?", "response": "sql SELECT vote_time FROM Votes WHERE voter_id = (SELECT voter_id FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar') AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "From which polling station was my vote submitted?", "response": "sql SELECT ps.name, ps.address FROM Votes v JOIN PollingStations ps ON v.polling_station_id = ps.polling_station_id WHERE v.voter_id = (SELECT voter_id FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "How many total voters have participated in the current election so far?", "response": "sql SELECT COUNT(DISTINCT voter_id) FROM Votes WHERE election_id = (SELECT election_id FROM Elections WHERE status = 'open');"}
{"prompt": "Which candidate has received the most votes in the current election?", "response": "sql SELECT c.name, COUNT(*) AS total_votes FROM Votes v JOIN Candidates c ON v.candidate_id = c.candidate_id WHERE v.election_id = (SELECT election_id FROM Elections WHERE status = 'open') GROUP BY c.name ORDER BY total_votes DESC LIMIT 1;"}
{"prompt": "Show vote count for each candidate in the 'City Youth Development Council' election.", "response": "sql SELECT c.name, COUNT(*) AS vote_count FROM Votes v JOIN Candidates c ON v.candidate_id = c.candidate_id WHERE v.election_id = (SELECT election_id FROM Elections WHERE name = 'City Youth Development Council') GROUP BY c.name ORDER BY vote_count DESC;"}
{"prompt": "List all elections I have ever voted in.", "response": "sql SELECT e.name, e.start_date, e.end_date FROM Votes v JOIN Elections e ON v.election_id = e.election_id WHERE v.voter_id = (SELECT voter_id FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "Is my registration status confirmed as a voter?", "response": "sql SELECT registration_status FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar';"}
{"prompt": "Who is the polling station manager where my vote was registered?", "response": "sql SELECT pm.first_name, pm.last_name, pm.email FROM Votes v JOIN PollingStations ps ON v.polling_station_id = ps.polling_station_id JOIN PollingStationManagers pm ON ps.manager_id = pm.manager_id WHERE v.voter_id = (SELECT voter_id FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "Has Ananya Sharma contested in any other elections before?", "response": "sql SELECT e.name, e.start_date FROM Candidates c JOIN Elections e ON c.election_id = e.election_id WHERE c.name = 'Ananya Sharma';"}
{"prompt": "How many people voted at my polling station today?", "response": "sql SELECT COUNT(*) FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM Votes WHERE voter_id = (SELECT voter_id FROM Voters WHERE first_name = 'Ravi' AND last_name = 'Kumar')) AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "Show security log of my last login to the voting system.", "response": "sql SELECT * FROM SecurityLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'ravi.kumar') ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Are there any unresolved support tickets I have raised?", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE username = 'ravi.kumar') AND status != 'resolved';"}
{"prompt": "Who are the observers assigned for the City Youth Development Council election?", "response": "sql SELECT eo.first_name, eo.last_name, eo.organization FROM ElectionObservers eo;"}
{"prompt": "Was any compliance check done in the past 7 days?", "response": "sql SELECT * FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which official is assigned the role of 'Election Supervisor'?", "response": "sql SELECT * FROM ElectionOfficials WHERE role = 'Election Supervisor';"}
{"prompt": "What is the most recent analytics report generated about voting trends?", "response": "sql SELECT report_name, generated_on FROM Analytics ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "Election Officials", "response": "nan"}
{"prompt": "What is the overall voter turnout percentage for the ongoing election?", "response": "sql SELECT ROUND((COUNT(DISTINCT voter_id) * 100.0) / (SELECT COUNT(*) FROM Voters), 2) AS turnout_percentage FROM Votes WHERE election_id = (SELECT election_id FROM Elections WHERE status = 'open');"}
{"prompt": "How many votes have been cast today across all polling stations?", "response": "sql SELECT COUNT(*) FROM Votes WHERE DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "How many login attempts came from blacklisted IPs today?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE ip_address IN ('192.168.1.100', '203.0.113.5') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Show all suspicious login attempts today (more than 5 from same IP).", "response": "sql SELECT ip_address, COUNT(*) AS attempt_count FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY ip_address HAVING COUNT(*) > 5;"}
{"prompt": "How many distinct users logged into the voting system today?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What actions were taken by user Arvind today?", "response": "sql SELECT * FROM SecurityLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'arvind') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "List all support tickets raised by election officials today.", "response": "sql SELECT * FROM SupportTickets WHERE role = 'ElectionOfficial' AND DATE(created_at) = CURRENT_DATE;"}
{"prompt": "How many polling stations are currently active for voting?", "response": "sql SELECT COUNT(DISTINCT polling_station_id) FROM Votes WHERE election_id = (SELECT election_id FROM Elections WHERE status = 'open');"}
{"prompt": "Which polling stations recorded the highest number of votes today?", "response": "sql SELECT ps.name, COUNT(*) AS total_votes FROM Votes v JOIN PollingStations ps ON v.polling_station_id = ps.polling_station_id WHERE DATE(v.vote_time) = CURRENT_DATE GROUP BY ps.name ORDER BY total_votes DESC LIMIT 5;"}
{"prompt": "Show all the registered voters above age 60 who voted today.", "response": "sql SELECT v.first_name, v.last_name, v.dob FROM Voters v JOIN Votes vt ON v.voter_id = vt.voter_id WHERE DATE_PART('year', AGE(v.dob)) > 60 AND DATE(vt.vote_time) = CURRENT_DATE;"}
{"prompt": "Who are the officials responsible for vote counting?", "response": "sql SELECT first_name, last_name FROM VoteCounters;"}
{"prompt": "List all active support tickets not resolved yet.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved';"}
{"prompt": "Show the last 5 security log entries by any election official.", "response": "sql SELECT sl.* FROM SecurityLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE u.role = 'ElectionOfficial' ORDER BY sl.timestamp DESC LIMIT 5;"}
{"prompt": "Are there any unresolved issues flagged by Arvind?", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE username = 'arvind') AND status != 'resolved';"}
{"prompt": "Show compliance checks done in the last 3 days.", "response": "sql SELECT * FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "How many registered voters have email addresses in the system?", "response": "sql SELECT COUNT(*) FROM Voters WHERE email IS NOT NULL AND email != '';"}
{"prompt": "What is the average number of votes cast per polling station today?", "response": "sql SELECT ROUND(COUNT(*) * 1.0 / COUNT(DISTINCT polling_station_id), 2) AS avg_votes FROM Votes WHERE DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "How many votes were cast between 6:00 a.m. and 12:00 p.m. today?", "response": "sql SELECT COUNT(*) FROM Votes WHERE vote_time BETWEEN CURRENT_DATE + INTERVAL '6 hours' AND CURRENT_DATE + INTERVAL '12 hours';"}
{"prompt": "Which districts (polling stations) had less than 50 votes today?", "response": "sql SELECT ps.name, COUNT(*) AS vote_count FROM Votes v JOIN PollingStations ps ON v.polling_station_id = ps.polling_station_id WHERE DATE(v.vote_time) = CURRENT_DATE GROUP BY ps.name HAVING COUNT(*) < 50;"}
{"prompt": "Show all analytics reports generated today.", "response": "sql SELECT * FROM Analytics WHERE DATE(generated_on) = CURRENT_DATE;"}
{"prompt": "Polling Station Managers", "response": "nan"}
{"prompt": "ow many votes were cast today from my polling station?", "response": "sql SELECT COUNT(*) FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "Which voters cast their votes today at my station?", "response": "sql SELECT v.first_name, v.last_name, v.email FROM Votes vt JOIN Voters v ON vt.voter_id = v.voter_id WHERE vt.polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vt.vote_time) = CURRENT_DATE;"}
{"prompt": "Are there any unresolved support tickets raised by my station staff?", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id IN (SELECT user_id FROM Users WHERE role = 'PollingStationManager') AND status != 'resolved';"}
{"prompt": "What is the total number of votes cast across all polling stations I manage?", "response": "sql SELECT COUNT(*) FROM Votes WHERE polling_station_id IN (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil'));"}
{"prompt": "How many biometric failures were logged at my station today?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action = 'biometric_failure' AND DATE(timestamp) = CURRENT_DATE AND ip_address IN (SELECT address FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil'));"}
{"prompt": "Show all the voters who cast votes between 7 a.m. and 5 p.m. at my center.", "response": "sql SELECT v.voter_id, v.first_name, v.last_name FROM Votes vt JOIN Voters v ON vt.voter_id = v.voter_id WHERE vt.polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND vt.vote_time BETWEEN CURRENT_DATE + INTERVAL '7 hours' AND CURRENT_DATE + INTERVAL '17 hours';"}
{"prompt": "Which election was conducted today at my polling station?", "response": "sql SELECT DISTINCT e.name FROM Elections e JOIN Votes v ON e.election_id = v.election_id WHERE v.polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(v.vote_time) = CURRENT_DATE;"}
{"prompt": "What are the details of my polling station?", "response": "sql SELECT * FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil');"}
{"prompt": "Show the contact details of the volunteers who supported today.", "response": "sql SELECT first_name, last_name, email, phone FROM Users WHERE role = 'Volunteer' AND last_login::date = CURRENT_DATE;"}
{"prompt": "What security actions were logged at my polling station IP today?", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE AND ip_address IN (SELECT address FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil'));"}
{"prompt": "How many unique voters visited my polling station today?", "response": "sql SELECT COUNT(DISTINCT voter_id) FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "List all candidates for the current election held at my station.", "response": "sql SELECT DISTINCT c.name, c.party FROM Candidates c JOIN Votes v ON c.election_id = v.election_id WHERE v.polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(v.vote_time) = CURRENT_DATE;"}
{"prompt": "What was the first vote time recorded at my station today?", "response": "sql SELECT MIN(vote_time) FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "What was the last vote time recorded at my station today?", "response": "sql SELECT MAX(vote_time) FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "How many support tickets were raised today by voters at my station?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE role = 'Voter' AND raised_by_id IN (SELECT voter_id FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vote_time) = CURRENT_DATE);"}
{"prompt": "What is the list of all Polling Station Managers across the city?", "response": "sql SELECT first_name, last_name, email, phone FROM PollingStationManagers;"}
{"prompt": "What are the last 5 security logs recorded for my polling station’s IP?", "response": "sql SELECT * FROM SecurityLogs WHERE ip_address IN (SELECT address FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) ORDER BY timestamp DESC LIMIT 5;"}
{"prompt": "How many total votes have been cast in the election happening at my center?", "response": "sql SELECT COUNT(*) FROM Votes WHERE election_id = (SELECT election_id FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) LIMIT 1);"}
{"prompt": "What are the compliance checks done in the last 7 days citywide?", "response": "sql SELECT * FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many different candidates received votes at my station today?", "response": "sql SELECT COUNT(DISTINCT candidate_id) FROM Votes WHERE polling_station_id = (SELECT polling_station_id FROM PollingStations WHERE manager_id = (SELECT manager_id FROM PollingStationManagers WHERE first_name = 'Suresh' AND last_name = 'Patil')) AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "Vote Counters / Auditors", "response": "nan"}
{"prompt": "Show me the total number of votes audited today.", "response": "sql SELECT COUNT(*) FROM Votes WHERE DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "Which votes were flagged for timestamp mismatches today?", "response": "sql SELECT * FROM SecurityLogs WHERE action = 'timestamp_mismatch' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "List all votes currently under review status.", "response": "sql SELECT * FROM Votes WHERE vote_id IN (SELECT vote_id FROM SecurityLogs WHERE action = 'under_review');"}
{"prompt": "How many votes passed all audit checks without any tampering today?", "response": "sql SELECT COUNT(*) FROM Votes WHERE vote_id NOT IN (SELECT vote_id FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE);"}
{"prompt": "Show all the logs for today's voting activity across the system.", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Give me the blockchain verification logs for today's vote transmissions.", "response": "sql SELECT * FROM SecurityLogs WHERE action = 'blockchain_verified' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "How many duplicate vote attempts were detected today?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action = 'duplicate_vote_attempt' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Which elections have votes that are currently being audited?", "response": "sql SELECT DISTINCT e.name FROM Elections e JOIN Votes v ON e.election_id = v.election_id WHERE v.vote_id IN (SELECT vote_id FROM SecurityLogs WHERE action LIKE '%audit%');"}
{"prompt": "List all voters who had authentication issues today.", "response": "sql SELECT DISTINCT v.first_name, v.last_name, v.email FROM Voters v JOIN SecurityLogs s ON v.voter_id = s.user_id WHERE s.action IN ('otp_failed', 'biometric_failure') AND DATE(s.timestamp) = CURRENT_DATE;"}
{"prompt": "What is the percentage of successfully verified votes today?", "response": "sql SELECT ROUND(100.0 * (SELECT COUNT(*) FROM Votes WHERE vote_id NOT IN (SELECT vote_id FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE)) / (SELECT COUNT(*) FROM Votes WHERE DATE(vote_time) = CURRENT_DATE), 2) AS verified_percentage;"}
{"prompt": "What actions were performed by vote counters today?", "response": "sql SELECT * FROM SecurityLogs WHERE user_id IN (SELECT user_id FROM Users WHERE role = 'VoteCounter') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "List all vote IDs and their current audit status.", "response": "sql SELECT v.vote_id, CASE WHEN s.vote_id IS NOT NULL THEN 'Flagged' ELSE 'Verified' END AS audit_status FROM Votes v LEFT JOIN (SELECT DISTINCT vote_id FROM SecurityLogs) s ON v.vote_id = s.vote_id;"}
{"prompt": "Show me the last 10 security logs for vote tampering detection.", "response": "sql SELECT * FROM SecurityLogs WHERE action = 'tampering_detected' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many votes were cast from rural polling stations today?", "response": "sql SELECT COUNT(*) FROM Votes WHERE polling_station_id IN (SELECT polling_station_id FROM PollingStations WHERE address LIKE '%rural%') AND DATE(vote_time) = CURRENT_DATE;"}
{"prompt": "Which users generated audit reports today?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM Users u JOIN SecurityLogs s ON u.user_id = s.user_id WHERE s.action = 'audit_report_generated' AND DATE(s.timestamp) = CURRENT_DATE;"}
{"prompt": "What percentage of total votes are currently under secondary review?", "response": "sql SELECT ROUND(100.0 * (SELECT COUNT(*) FROM SecurityLogs WHERE action = 'under_review' AND DATE(timestamp) = CURRENT_DATE) / (SELECT COUNT(*) FROM Votes WHERE DATE(vote_time) = CURRENT_DATE), 2) AS review_percentage;"}
{"prompt": "Show all the votes with delayed timestamp issues.", "response": "sql SELECT * FROM Votes WHERE vote_id IN (SELECT vote_id FROM SecurityLogs WHERE action = 'timestamp_delay');"}
{"prompt": "How many audit flags were raised in the last 24 hours?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%audit%' AND timestamp >= NOW() - INTERVAL '24 hours';"}
{"prompt": "Show the contact details of all vote auditors active today.", "response": "sql SELECT first_name, last_name, email, phone FROM Users WHERE role = 'VoteAuditor' AND DATE(last_login) = CURRENT_DATE;"}
{"prompt": "What is the count of confirmed successful votes by candidate today?", "response": "sql SELECT c.name, COUNT(v.vote_id) AS votes_count FROM Votes v JOIN Candidates c ON v.candidate_id = c.candidate_id WHERE v.vote_id NOT IN (SELECT vote_id FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE) AND DATE(v.vote_time) = CURRENT_DATE GROUP BY c.name;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "How many support tickets were raised today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE;"}
{"prompt": "How many support tickets were resolved today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "What is the average resolution time for today’s support tickets?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM (resolved_at - created_at)) / 60), 2) AS avg_resolution_minutes FROM SupportTickets WHERE DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "Which voters raised support tickets today?", "response": "sql SELECT DISTINCT s.raised_by_id, v.first_name, v.last_name FROM SupportTickets s JOIN Voters v ON s.raised_by_id = v.voter_id WHERE DATE(s.created_at) = CURRENT_DATE AND s.role = 'Voter';"}
{"prompt": "Show all unresolved support tickets as of now.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved';"}
{"prompt": "How many support tickets were resolved by me today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status = 'resolved' AND DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "What are the most common issues raised in support tickets today?", "response": "sql SELECT subject, COUNT(*) AS ticket_count FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE GROUP BY subject ORDER BY ticket_count DESC;"}
{"prompt": "List all support tickets raised by visually impaired voters.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%visually impaired%';"}
{"prompt": "How many support queries came from voters aged over 60?", "response": "sql SELECT COUNT(*) FROM SupportTickets s JOIN Voters v ON s.raised_by_id = v.voter_id WHERE AGE(v.dob) > INTERVAL '60 years';"}
{"prompt": "Which tickets were marked as emergency escalations?", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%emergency%';"}
{"prompt": "What is the current support ticket resolution rate?", "response": "sql SELECT ROUND(100.0 * (SELECT COUNT(*) FROM SupportTickets WHERE status = 'resolved') / (SELECT COUNT(*) FROM SupportTickets), 2) AS resolution_rate;"}
{"prompt": "Show support tickets resolved for elderly users today.", "response": "sql SELECT s.* FROM SupportTickets s JOIN Voters v ON s.raised_by_id = v.voter_id WHERE AGE(v.dob) > INTERVAL '60 years' AND DATE(s.resolved_at) = CURRENT_DATE;"}
{"prompt": "How many different roles raised support tickets today?", "response": "sql SELECT role, COUNT(*) FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE GROUP BY role;"}
{"prompt": "List all support tickets that were open for more than 1 hour before being resolved today.", "response": "sql SELECT * FROM SupportTickets WHERE DATE(resolved_at) = CURRENT_DATE AND EXTRACT(EPOCH FROM (resolved_at - created_at)) > 3600;"}
{"prompt": "What was the first ticket I handled today?", "response": "sql SELECT * FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE ORDER BY created_at ASC LIMIT 1;"}
{"prompt": "How many total support tickets have I resolved so far?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status = 'resolved';"}
{"prompt": "Show the support ticket details for the user who cried after using audio navigation.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%audio navigation%' AND description LIKE '%cried%';"}
{"prompt": "What was the average satisfaction score today?", "response": "sql SELECT ROUND(AVG((data->>'satisfaction_score')::numeric), 2) AS avg_satisfaction FROM Analytics WHERE report_name = 'Support Satisfaction' AND DATE(generated_on) = CURRENT_DATE;"}
{"prompt": "List users who contacted support multiple times today.", "response": "sql SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE GROUP BY raised_by_id HAVING COUNT(*) > 1;"}
{"prompt": "Show all tickets related to password reset requests.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%password%' OR description LIKE '%forgot password%';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "How many unique users logged into the voting system today?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM Users WHERE DATE(last_login) = CURRENT_DATE;"}
{"prompt": "Show all login attempts made today.", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE AND action = 'login';"}
{"prompt": "List the top 5 IP addresses with the highest number of actions today.", "response": "sql SELECT ip_address, COUNT(*) AS total_actions FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY ip_address ORDER BY total_actions DESC LIMIT 5;"}
{"prompt": "Identify all actions tagged as suspicious today.", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE AND action LIKE '%suspicious%';"}
{"prompt": "Find all login actions from non-domestic IP addresses today.", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE AND ip_address NOT LIKE '%.IN';"}
{"prompt": "How many total actions were logged in the security system today?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Show the timeline of user logins over the last 6 hours.", "response": "sql SELECT DATE_TRUNC('hour', timestamp) AS hour_slot, COUNT(*) AS login_count FROM SecurityLogs WHERE action = 'login' AND timestamp >= NOW() - INTERVAL '6 hours' GROUP BY hour_slot ORDER BY hour_slot;"}
{"prompt": "Which users triggered the highest number of actions today?", "response": "sql SELECT user_id, COUNT(*) AS total_actions FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY user_id ORDER BY total_actions DESC;"}
{"prompt": "Find IP addresses that attempted more than 100 actions today.", "response": "sql SELECT ip_address, COUNT(*) AS action_count FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY ip_address HAVING COUNT(*) > 100;"}
{"prompt": "How many failed login attempts happened today?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE AND action = 'login_failed';"}
{"prompt": "Show all security logs recorded during the DDoS attack window.", "response": "sql SELECT * FROM SecurityLogs WHERE timestamp BETWEEN '2025-06-13 12:00:00' AND '2025-06-13 14:00:00';"}
{"prompt": "How many users logged in during the voting hours (8 AM to 5 PM)?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM SecurityLogs WHERE action = 'login' AND timestamp::time BETWEEN '08:00:00' AND '17:00:00';"}
{"prompt": "Retrieve system audit logs showing tampering or anomaly keywords.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%tamper%' OR action LIKE '%anomaly%';"}
{"prompt": "List all user activity from a specific blacklisted IP.", "response": "sql SELECT * FROM SecurityLogs WHERE ip_address = '203.0.113.45';"}
{"prompt": "How many total unique users accessed the system during election week?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM Users WHERE DATE(last_login) BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;"}
{"prompt": "Show all actions performed by system administrators during the election.", "response": "sql SELECT sl.* FROM SecurityLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE u.role = 'IT_Admin' AND DATE(sl.timestamp) BETWEEN '2025-06-08' AND '2025-06-13';"}
{"prompt": "How many votes were cast during the day despite the DDoS alert?", "response": "sql SELECT COUNT(*) FROM Votes WHERE DATE(vote_time) = '2025-06-13';"}
{"prompt": "Verify if vote timestamps are in sync (no missing hour slots).", "response": "sql SELECT DATE_TRUNC('hour', vote_time) AS hour_slot, COUNT(*) FROM Votes WHERE DATE(vote_time) = CURRENT_DATE GROUP BY hour_slot ORDER BY hour_slot;"}
{"prompt": "List all encrypted system backups logged today in analytics (if any logs stored there).", "response": "sql SELECT * FROM Analytics WHERE report_name LIKE '%backup%' AND DATE(generated_on) = CURRENT_DATE;"}
{"prompt": "Find users with unusually high activity (more than 200 logs today).", "response": "sql SELECT user_id, COUNT(*) AS activity_count FROM SecurityLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY user_id HAVING COUNT(*) > 200;"}
{"prompt": "Compliance / Legal Team", "response": "nan"}
{"prompt": "List all user consents captured before voting.", "response": "sql SELECT * FROM Users WHERE consent_given = TRUE;"}
{"prompt": "How many users have not provided explicit consent?", "response": "sql SELECT COUNT(*) FROM Users WHERE consent_given = FALSE;"}
{"prompt": "Show all actions in the SecurityLogs where data sharing occurred.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%data shared%';"}
{"prompt": "Find all logs related to location data usage.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%location%';"}
{"prompt": "How many users accessed the voting system without biometric verification?", "response": "sql SELECT COUNT(*) FROM Users WHERE biometric_verified = FALSE AND user_id IN (SELECT user_id FROM Votes);"}
{"prompt": "Show audit logs that mention any kind of compliance or legal keyword.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%compliance%' OR action LIKE '%legal%' OR action LIKE '%violation%';"}
{"prompt": "Retrieve the number of times third-party analytics tools were accessed.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%analytics access%';"}
{"prompt": "List all users whose data was accessed across multiple jurisdictions.", "response": "sql SELECT DISTINCT user_id FROM SecurityLogs WHERE action LIKE '%cross-border%' OR action LIKE '%jurisdiction%';"}
{"prompt": "How many logs were generated during the final mock audit day?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE DATE(timestamp) = '2025-06-11';"}
{"prompt": "Which modules were modified due to legal non-compliance before launch?", "response": "sql SELECT * FROM Analytics WHERE report_name LIKE '%legal fix%' OR report_name LIKE '%compliance change%';"}
{"prompt": "Find any users whose data was accessed without recorded consent.", "response": "sql SELECT u.user_id FROM Users u JOIN SecurityLogs s ON u.user_id = s.user_id WHERE u.consent_given = FALSE;"}
{"prompt": "Show all legal reports generated for system audits.", "response": "sql SELECT * FROM Analytics WHERE report_name LIKE '%audit%' OR report_name LIKE '%compliance%';"}
{"prompt": "Count how many security logs were flagged for legal review.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%legal review required%';"}
{"prompt": "Display all policy violation incidents logged during election day.", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = '2025-06-13' AND action LIKE '%violation%';"}
{"prompt": "Find the user IDs involved in flagged privacy-related issues.", "response": "sql SELECT DISTINCT user_id FROM SecurityLogs WHERE action LIKE '%privacy issue%' OR action LIKE '%privacy breach%';"}
{"prompt": "Which features had logs indicating delay due to legal concerns?", "response": "sql SELECT * FROM Analytics WHERE report_name LIKE '%delay%' AND report_name LIKE '%legal%';"}
{"prompt": "How many complaints were escalated to legal moderators?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%complaint escalated to legal%';"}
{"prompt": "Retrieve system logs where consent-based validation was triggered.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%consent validation%';"}
{"prompt": "List all user actions between 1 AM and 3 AM on election day (legal surveillance period).", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = '2025-06-13' AND EXTRACT(HOUR FROM timestamp) BETWEEN 1 AND 2;"}
{"prompt": "How many registered users were flagged for legal verification?", "response": "sql SELECT COUNT(*) FROM Users WHERE user_id IN (SELECT user_id FROM SecurityLogs WHERE action LIKE '%legal verification%');"}
{"prompt": "Security Analysts", "response": "nan"}
{"prompt": "List all login attempts flagged as suspicious.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%suspicious login%';"}
{"prompt": "How many failed login attempts came from foreign IPs?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%failed login%' AND location NOT LIKE '%India%';"}
{"prompt": "Show the IP addresses involved in repeated admin login failures.", "response": "sql SELECT DISTINCT ip_address FROM SecurityLogs WHERE action LIKE '%admin login failed%';"}
{"prompt": "List all URLs flagged as phishing or fake voting portals.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%phishing%' OR action LIKE '%fake URL%';"}
{"prompt": "Count the total number of cyber threat incidents on election day.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE DATE(timestamp) = '2025-06-13' AND action LIKE '%threat%';"}
{"prompt": "Display the full incident report for the firewall update triggered before election day.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%firewall rule updated%' AND DATE(timestamp) BETWEEN '2025-06-10' AND '2025-06-12';"}
{"prompt": "Retrieve geolocation anomalies reported during the voting session.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%geolocation mismatch%';"}
{"prompt": "How many fake portal takedown requests were executed successfully?", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%takedown success%' AND action LIKE '%fake portal%';"}
{"prompt": "Find the total number of real-time alerts generated by the SOC team.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%real-time alert%';"}
{"prompt": "List all logs containing digital signature mismatch events.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%digital signature mismatch%';"}
{"prompt": "Count how many honeypot interactions were logged.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%honeypot triggered%';"}
{"prompt": "Show all IPs that triggered honeypot traps.", "response": "sql SELECT DISTINCT ip_address FROM SecurityLogs WHERE action LIKE '%honeypot triggered%';"}
{"prompt": "Identify timestamps of major threat spikes during election hours.", "response": "sql SELECT timestamp FROM SecurityLogs WHERE action LIKE '%threat spike%' ORDER BY timestamp;"}
{"prompt": "Show the number of times intrusion detection protocols were triggered.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE action LIKE '%intrusion detection triggered%';"}
{"prompt": "Retrieve all events logged under 'incident response' category.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%incident response%';"}
{"prompt": "Find all blocked attempts targeting admin dashboards.", "response": "sql SELECT * FROM SecurityLogs WHERE action LIKE '%admin dashboard%' AND action LIKE '%blocked%';"}
{"prompt": "Count the number of alerts from foreign domains during the election week.", "response": "sql SELECT COUNT(*) FROM SecurityLogs WHERE location NOT LIKE '%India%' AND DATE(timestamp) BETWEEN '2025-06-07' AND '2025-06-13';"}
{"prompt": "List all unique threats encountered by the system.", "response": "sql SELECT DISTINCT action FROM SecurityLogs WHERE action LIKE '%threat%';"}
{"prompt": "Find all real-time decisions made by the SOC team during election hours.", "response": "sql SELECT * FROM SecurityLogs WHERE DATE(timestamp) = '2025-06-13' AND action LIKE '%SOC action taken%';"}
{"prompt": "Show the timeline of all major security events on election day.", "response": "sql SELECT timestamp, action FROM SecurityLogs WHERE DATE(timestamp) = '2025-06-13' ORDER BY timestamp;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "What is the total number of votes submitted on election day?", "response": "sql SELECT COUNT(*) FROM Votes WHERE DATE(timestamp) = '2025-06-13';"}
{"prompt": "List peak voting hours based on submission timestamps.", "response": "sql SELECT EXTRACT(HOUR FROM timestamp) AS hour, COUNT(*) AS vote_count FROM Votes GROUP BY hour ORDER BY vote_count DESC;"}
{"prompt": "How many unique devices were used to vote?", "response": "sql SELECT COUNT(DISTINCT device_id) FROM Votes;"}
{"prompt": "What is the average vote submission time by region?", "response": "sql SELECT region, AVG(timestamp) FROM Votes GROUP BY region;"}
{"prompt": "Identify regions with the highest dropout rates.", "response": "sql SELECT region, COUNT(*) AS dropouts FROM VoterLogs WHERE status = 'incomplete' GROUP BY region ORDER BY dropouts DESC;"}
{"prompt": "Show vote activity trends by geographic region.", "response": "sql SELECT region, COUNT(*) AS total_votes FROM Votes GROUP BY region ORDER BY total_votes DESC;"}
{"prompt": "List all regions with no voting activity.", "response": "sql SELECT region FROM Regions WHERE region NOT IN (SELECT DISTINCT region FROM Votes);"}
{"prompt": "How many elderly voters (age 60+) submitted votes?", "response": "sql SELECT COUNT(*) FROM Votes V JOIN Voters U ON V.voter_id = U.voter_id WHERE U.age >= 60;"}
{"prompt": "Retrieve timestamp and region where sudden drop in vote activity was detected.", "response": "sql SELECT timestamp, region FROM VoteActivityAlerts WHERE alert_type = 'drop_detected';"}
{"prompt": "Show average voting time difference across device types.", "response": "sql SELECT device_type, AVG(EXTRACT(EPOCH FROM (submitted_at - started_at))) AS avg_vote_duration FROM VoterLogs GROUP BY device_type;"}
{"prompt": "List all duplicate vote submission attempts.", "response": "sql SELECT voter_id, COUNT(*) FROM Votes GROUP BY voter_id HAVING COUNT(*) > 1;"}
{"prompt": "Retrieve all vote logs with mismatched hash values.", "response": "sql SELECT * FROM VoteAudit WHERE hash_status = 'mismatch';"}
{"prompt": "How many votes were cast from mobile devices vs desktop?", "response": "sql SELECT device_type, COUNT(*) FROM Votes GROUP BY device_type;"}
{"prompt": "Find total votes submitted per hour on election day.", "response": "sql SELECT DATE_TRUNC('hour', timestamp) AS hour, COUNT(*) FROM Votes WHERE DATE(timestamp) = '2025-06-13' GROUP BY hour ORDER BY hour;"}
{"prompt": "Identify any regions with statistical deviations from historical voting trends.", "response": "sql SELECT * FROM DeviationReport WHERE deviation_score > threshold;"}
{"prompt": "What percentage of total voters successfully cast their vote?", "response": "sql SELECT ROUND((SELECT COUNT(*) FROM Votes) * 100.0 / (SELECT COUNT(*) FROM Voters), 2) AS turnout_percentage;"}
{"prompt": "Retrieve regions with highest average voter age.", "response": "sql SELECT region, AVG(age) AS avg_age FROM Voters GROUP BY region ORDER BY avg_age DESC;"}
{"prompt": "Show count of vote sessions terminated due to network errors.", "response": "sql SELECT COUNT(*) FROM VoterLogs WHERE status = 'network_error';"}
{"prompt": "List all regions flagged for fairness review.", "response": "sql SELECT DISTINCT region FROM FairnessAudit WHERE flag = TRUE;"}
{"prompt": "How many statistical audit checks were performed post-election?", "response": "sql SELECT COUNT(*) FROM VoteAudit WHERE audit_type = 'statistical_check';"}
{"prompt": "Election Observers", "response": "nan"}
{"prompt": "How many virtual voting terminals were audited during mock polling?", "response": "sql SELECT COUNT(*) FROM VotingTerminalAudit WHERE phase = 'mock_polling';"}
{"prompt": "Which regions had mock polling conducted before the main election?", "response": "sql SELECT DISTINCT region FROM MockPolls;"}
{"prompt": "List encryption protocols reviewed by observers.", "response": "sql SELECT protocol_name FROM SecurityProtocols WHERE reviewed_by_observers = TRUE;"}
{"prompt": "How many incident response drills were reviewed by observers before election day?", "response": "sql SELECT COUNT(*) FROM IncidentResponseLogs WHERE reviewed = TRUE AND date < '2025-06-13';"}
{"prompt": "How many observer interviews were conducted with early voters?", "response": "sql SELECT COUNT(*) FROM VoterInterviews WHERE phase = 'early_voting';"}
{"prompt": "What were the average usability ratings collected by observers during mock polling?", "response": "sql SELECT AVG(usability_rating) FROM UsabilitySurveys WHERE phase = 'mock_polling';"}
{"prompt": "List all voting terminals where source code validation was done.", "response": "sql SELECT terminal_id FROM VotingTerminalAudit WHERE source_code_verified = TRUE;"}
{"prompt": "Retrieve list of vote traffic anomalies flagged by observers.", "response": "sql SELECT * FROM TrafficAnomalies WHERE flagged_by_observer = TRUE;"}
{"prompt": "How many procedural audits did the observers conduct on election day?", "response": "sql SELECT COUNT(*) FROM ObserverAudits WHERE date = '2025-06-13';"}
{"prompt": "List all constituencies where observers requested backend justification logs.", "response": "sql SELECT DISTINCT constituency FROM ObserverRequests WHERE request_type = 'backend_logs';"}
{"prompt": "Show the total number of observer-reported issues and their resolution status.", "response": "sql SELECT issue_id, status FROM ObserverReports;"}
{"prompt": "How many hash-matching verifications were reviewed post-election?", "response": "sql SELECT COUNT(*) FROM VoteAudit WHERE hash_verification_reviewed = TRUE;"}
{"prompt": "What percentage of observer-reviewed terminals showed no tampering?", "response": "sql SELECT ROUND((SELECT COUNT(*) FROM VotingTerminalAudit WHERE tampering_detected = FALSE) * 100.0 / (SELECT COUNT(*) FROM VotingTerminalAudit), 2) AS no_tampering_percent;"}
{"prompt": "List all observers and their associated organizations.", "response": "sql SELECT name, organization FROM ElectionObservers;"}
{"prompt": "Retrieve all audit trail entries accessed by observers.", "response": "sql SELECT * FROM AuditTrails WHERE accessed_by_observer = TRUE;"}
{"prompt": "Show all voter anonymity checks that passed during observer verification.", "response": "sql SELECT COUNT(*) FROM AnonymityChecks WHERE verified_by_observer = TRUE AND status = 'pass';"}
{"prompt": "How many fake polling URLs were reported and confirmed by observers?", "response": "sql SELECT COUNT(*) FROM PhishingURLs WHERE confirmed_by_observer = TRUE;"}
{"prompt": "List cybersecurity incidents escalated by observers during voting.", "response": "sql SELECT * FROM SecurityIncidents WHERE escalated_by = 'observer';"}
{"prompt": "What were the average vote integrity scores from observer reports?", "response": "sql SELECT AVG(integrity_score) FROM ObserverReports;"}
{"prompt": "Provide the final published statement summary by all observers.", "response": "sql SELECT summary FROM ObserverStatements WHERE status = 'final_published';"}
{"prompt": "ClinicAppointment", "response": "nan"}
{"prompt": "Patients", "response": "nan"}
{"prompt": "What was the status of my appointment with Dr. Mehta on the first visit?", "response": "sql SELECT status FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') ORDER BY appointment_date LIMIT 1;"}
{"prompt": "When was my follow-up appointment with Dr. Mehta scheduled?", "response": "sql SELECT appointment_date FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') ORDER BY appointment_date DESC LIMIT 1 OFFSET 1;"}
{"prompt": "What were the details of my digital prescription and treatment?", "response": "sql SELECT diagnosis, treatment, notes FROM MedicalRecords WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "How many patients have I seen in the last 30 days?", "response": "sql SELECT COUNT(DISTINCT patient_id) FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') AND visit_date >= NOW() - INTERVAL 30 DAY;"}
{"prompt": "Which patients missed their appointments last week?", "response": "sql SELECT patient_id FROM Appointments WHERE status = 'Missed' AND appointment_date >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "How much did I pay for my last appointment?", "response": "sql SELECT amount_paid FROM Billing WHERE appointment_id = (SELECT appointment_id FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') ORDER BY appointment_date DESC LIMIT 1);"}
{"prompt": "Which doctor did I last consult with?", "response": "sql SELECT D.first_name, D.last_name FROM Doctors D JOIN Appointments A ON D.doctor_id = A.doctor_id WHERE A.patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') ORDER BY A.appointment_date DESC LIMIT 1;"}
{"prompt": "What is the average amount paid per appointment this month?", "response": "sql SELECT AVG(amount_paid) FROM Billing WHERE payment_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01');"}
{"prompt": "What’s the status of my payment for my most recent appointment?", "response": "sql SELECT status FROM Billing WHERE appointment_id = (SELECT appointment_id FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') ORDER BY appointment_date DESC LIMIT 1);"}
{"prompt": "What notes did I record for Aarav’s last consultation?", "response": "sql SELECT notes FROM MedicalRecords WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') ORDER BY visit_date DESC LIMIT 1;"}
{"prompt": "Can I view my appointment history with Dr. Mehta?", "response": "sql SELECT appointment_date, status FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta');"}
{"prompt": "What diagnosis did Dr. Mehta give me in my first visit?", "response": "sql SELECT diagnosis FROM MedicalRecords WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') ORDER BY visit_date LIMIT 1;"}
{"prompt": "Were there any support tickets raised by Aarav recently?", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND role = 'Patient' ORDER BY created_at DESC;"}
{"prompt": "What actions did user 'Aarav' perform in the system this month?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE username = 'Aarav') AND timestamp >= DATE_FORMAT(CURDATE(), '%Y-%m-01');"}
{"prompt": "What is my email and phone number on file?", "response": "sql SELECT email, phone FROM Patients WHERE first_name = 'Aarav';"}
{"prompt": "Which appointments were done by Dr. Mehta last week?", "response": "sql SELECT appointment_id, patient_id, appointment_date FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') AND appointment_date >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "Can I check if I’ve paid all my bills?", "response": "sql SELECT billing_id, status FROM Billing WHERE appointment_id IN (SELECT appointment_id FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav'));"}
{"prompt": "What were the common reasons patients booked appointments with me last month?", "response": "sql SELECT reason, COUNT(*) AS count FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE last_name = 'Mehta') AND appointment_date >= NOW() - INTERVAL 1 MONTH GROUP BY reason ORDER BY count DESC;"}
{"prompt": "What are the details of my most recent support ticket?", "response": "sql SELECT subject, description, status FROM SupportTickets WHERE raised_by_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND role = 'Patient' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What is the total number of appointments I’ve had so far?", "response": "sql SELECT COUNT(*) FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav');"}
{"prompt": "Doctors", "response": "nan"}
{"prompt": "What are today’s scheduled appointments for me?", "response": "sql SELECT appointment_id, patient_id, appointment_date, reason FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Can I view Aarav’s submitted symptoms and visit history before his appointment?", "response": "sql SELECT reason, appointment_date FROM Appointments WHERE patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') ORDER BY appointment_date DESC;"}
{"prompt": "What diagnosis and treatment have I prescribed to Aarav so far?", "response": "sql SELECT diagnosis, treatment FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav');"}
{"prompt": "How many teleconsultations have I handled this week?", "response": "sql SELECT COUNT(*) FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND appointment_date >= NOW() - INTERVAL 7 DAY AND reason LIKE '%teleconsultation%';"}
{"prompt": "How many unique patients have I consulted this month?", "response": "sql SELECT COUNT(DISTINCT patient_id) FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND MONTH(appointment_date) = MONTH(CURDATE()) AND YEAR(appointment_date) = YEAR(CURDATE());"}
{"prompt": "Can I check the digital prescription and notes I gave Aarav today?", "response": "sql SELECT diagnosis, treatment, notes FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND patient_id = (SELECT patient_id FROM Patients WHERE first_name = 'Aarav') AND DATE(visit_date) = CURDATE();"}
{"prompt": "Which patients today submitted pre-visit information through the app?", "response": "sql SELECT A.patient_id, A.appointment_date FROM Appointments A JOIN MedicalRecords M ON A.patient_id = M.patient_id WHERE A.doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND DATE(A.appointment_date) = CURDATE();"}
{"prompt": "What follow-up appointments have been scheduled for my patients?", "response": "sql SELECT appointment_id, patient_id, appointment_date FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND appointment_date > NOW();"}
{"prompt": "Can I view recent medication adjustments made during teleconsultations?", "response": "sql SELECT patient_id, treatment, notes FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND notes LIKE '%teleconsultation%' ORDER BY visit_date DESC;"}
{"prompt": "Which patients have I treated for lower back pain this quarter?", "response": "sql SELECT patient_id, visit_date FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND diagnosis LIKE '%lower back pain%' AND QUARTER(visit_date) = QUARTER(CURDATE()) AND YEAR(visit_date) = YEAR(CURDATE());"}
{"prompt": "What are the reasons patients consulted me last week?", "response": "sql SELECT reason, COUNT(*) as count FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND appointment_date >= NOW() - INTERVAL 7 DAY GROUP BY reason;"}
{"prompt": "Can I see the blood report summary and treatment adjustments I made for an elderly patient?", "response": "sql SELECT diagnosis, treatment, notes FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND notes LIKE '%blood report%' ORDER BY visit_date DESC;"}
{"prompt": "How many patients did I refer to physiotherapy this month?", "response": "sql SELECT COUNT(*) FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND treatment LIKE '%physiotherapy%' AND MONTH(visit_date) = MONTH(CURDATE());"}
{"prompt": "Which patients are due for follow-up this week?", "response": "sql SELECT patient_id, appointment_date FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND WEEK(appointment_date) = WEEK(CURDATE()) AND appointment_date > NOW();"}
{"prompt": "Can I check how many prescriptions I have issued today?", "response": "sql SELECT COUNT(*) FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND DATE(visit_date) = CURDATE();"}
{"prompt": "What patients have visited me more than 3 times in the past 2 months?", "response": "sql SELECT patient_id, COUNT(*) as visits FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND appointment_date >= NOW() - INTERVAL 60 DAY GROUP BY patient_id HAVING visits > 3;"}
{"prompt": "What are the recent unresolved support tickets affecting my patients?", "response": "sql SELECT * FROM SupportTickets WHERE role = 'Patient' AND status != 'Resolved' AND raised_by_id IN (SELECT patient_id FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao'));"}
{"prompt": "How much billing has been generated from my appointments this week?", "response": "sql SELECT SUM(amount_paid) FROM Billing WHERE appointment_id IN (SELECT appointment_id FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND appointment_date >= NOW() - INTERVAL 7 DAY);"}
{"prompt": "Can I track how many patients I saw through video consultation vs. in-person?", "response": "sql SELECT reason, COUNT(*) FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao') AND (reason LIKE '%tele%' OR reason LIKE '%in-person%') GROUP BY reason;"}
{"prompt": "What is the total number of patients I’ve treated since the system was adopted?", "response": "sql SELECT COUNT(DISTINCT patient_id) FROM MedicalRecords WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE first_name = 'Ishita' AND last_name = 'Rao');"}
{"prompt": "Receptionists", "response": "nan"}
{"prompt": "Who are the patients scheduled to arrive today?", "response": "sql SELECT A.patient_id, P.first_name, P.last_name, A.appointment_date FROM Appointments A JOIN Patients P ON A.patient_id = P.patient_id WHERE DATE(A.appointment_date) = CURDATE();"}
{"prompt": "Can I view which appointments were cancelled today?", "response": "sql SELECT appointment_id, patient_id FROM Appointments WHERE status = 'Cancelled' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Which patients have already checked in online today?", "response": "sql SELECT appointment_id, patient_id FROM Appointments WHERE status = 'Checked-In' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Has the pediatrician been notified for today’s first patient?", "response": "sql SELECT * FROM Appointments WHERE doctor_id = (SELECT doctor_id FROM Doctors WHERE specialization = 'Pediatrics') AND DATE(appointment_date) = CURDATE() ORDER BY appointment_date LIMIT 1;"}
{"prompt": "Can I see medical records for a child patient walking in at 9:30 AM?", "response": "sql SELECT * FROM MedicalRecords WHERE patient_id = (SELECT patient_id FROM Appointments WHERE appointment_date = '2025-06-13 09:30:00');"}
{"prompt": "Which elderly patients (above age 60) have appointments today?", "response": "sql SELECT P.patient_id, P.first_name, P.last_name FROM Patients P JOIN Appointments A ON P.patient_id = A.patient_id WHERE TIMESTAMPDIFF(YEAR, P.dob, CURDATE()) >= 60 AND DATE(A.appointment_date) = CURDATE();"}
{"prompt": "Can I check which doctors are running behind schedule today?", "response": "sql SELECT doctor_id, appointment_id, appointment_date FROM Appointments WHERE appointment_date < NOW() AND status = 'Pending';"}
{"prompt": "Which patients received automatic delay notifications?", "response": "sql SELECT appointment_id, patient_id FROM Appointments WHERE status = 'Delayed-Notified' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Which newcomers (first-time patients) are scheduled today?", "response": "sql SELECT A.patient_id, P.first_name, P.last_name FROM Appointments A JOIN Patients P ON A.patient_id = P.patient_id WHERE DATE(A.appointment_date) = CURDATE() AND A.patient_id IN (SELECT patient_id FROM Appointments GROUP BY patient_id HAVING COUNT(*) = 1);"}
{"prompt": "Who are today’s walk-in patients?", "response": "sql SELECT appointment_id, patient_id FROM Appointments WHERE status = 'Walk-In' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "How many patients have checked in today?", "response": "sql SELECT COUNT(*) FROM Appointments WHERE status = 'Checked-In' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Can I see all appointments by time order for today’s front-desk planning?", "response": "sql SELECT appointment_id, patient_id, doctor_id, appointment_date FROM Appointments WHERE DATE(appointment_date) = CURDATE() ORDER BY appointment_date;"}
{"prompt": "Which patients are waiting right now in the lobby?", "response": "sql SELECT patient_id FROM Appointments WHERE status = 'Waiting' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Can I quickly check each doctor’s first appointment today?", "response": "sql SELECT doctor_id, MIN(appointment_date) as first_appointment FROM Appointments WHERE DATE(appointment_date) = CURDATE() GROUP BY doctor_id;"}
{"prompt": "Which appointments were rescheduled today?", "response": "sql SELECT appointment_id, patient_id FROM Appointments WHERE status = 'Rescheduled' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Can I view today’s patient flow by hour for lobby coordination?", "response": "sql SELECT HOUR(appointment_date) as hour, COUNT(*) as patient_count FROM Appointments WHERE DATE(appointment_date) = CURDATE() GROUP BY HOUR(appointment_date);"}
{"prompt": "Who are the patients needing insurance verification today?", "response": "sql SELECT appointment_id, patient_id FROM Appointments WHERE status = 'Insurance-Pending' AND DATE(appointment_date) = CURDATE();"}
{"prompt": "Can I see the patients scheduled with each specialist today?", "response": "sql SELECT D.specialization, P.first_name, P.last_name, A.appointment_date FROM Appointments A JOIN Doctors D ON A.doctor_id = D.doctor_id JOIN Patients P ON A.patient_id = P.patient_id WHERE DATE(A.appointment_date) = CURDATE() ORDER BY D.specialization;"}
{"prompt": "How many patients did I assist at the front desk today?", "response": "sql SELECT COUNT(*) FROM Appointments WHERE DATE(appointment_date) = CURDATE();"}
{"prompt": "Can I view patient complaints or tickets mentioning “reception”?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%reception%' OR subject LIKE '%reception%';"}
{"prompt": "Appointment Coordinators", "response": "nan"}
{"prompt": "Show all appointments scheduled for today.", "response": "sql SELECT * FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "List all appointments canceled today.", "response": "sql SELECT * FROM Appointments WHERE status = 'Cancelled' AND DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "Get the total number of appointments scheduled this week.", "response": "sql SELECT COUNT(*) FROM Appointments WHERE YEARWEEK(appointment_date) = YEARWEEK(CURRENT_DATE);"}
{"prompt": "Find the number of appointments booked per doctor today.", "response": "sql SELECT doctor_id, COUNT(*) AS total_appointments FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE GROUP BY doctor_id;"}
{"prompt": "Show doctors with more than 10 appointments today.", "response": "sql SELECT doctor_id, COUNT(*) AS total_appointments FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE GROUP BY doctor_id HAVING COUNT(*) > 10;"}
{"prompt": "List patients who missed their appointment this week.", "response": "sql SELECT * FROM Appointments WHERE status = 'No-Show' AND WEEK(appointment_date) = WEEK(CURRENT_DATE);"}
{"prompt": "Get appointments with ‘emergency’ in the reason.", "response": "sql SELECT * FROM Appointments WHERE reason LIKE '%emergency%';"}
{"prompt": "Retrieve the last 10 scheduled appointments.", "response": "sql SELECT * FROM Appointments ORDER BY appointment_date DESC LIMIT 10;"}
{"prompt": "List appointments needing follow-up (i.e., past and status not 'Completed').", "response": "sql SELECT * FROM Appointments WHERE appointment_date < NOW() AND status != 'Completed';"}
{"prompt": "Get count of appointments by status for today.", "response": "sql SELECT status, COUNT(*) FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE GROUP BY status;"}
{"prompt": "List all patients who have multiple appointments this month.", "response": "sql SELECT patient_id, COUNT(*) FROM Appointments WHERE MONTH(appointment_date) = MONTH(CURRENT_DATE) GROUP BY patient_id HAVING COUNT(*) > 1;"}
{"prompt": "Find dermatology appointments this week.", "response": "sql SELECT A.* FROM Appointments A JOIN Doctors D ON A.doctor_id = D.doctor_id WHERE D.specialization = 'Dermatology' AND WEEK(appointment_date) = WEEK(CURRENT_DATE);"}
{"prompt": "List doctors who handled more than 20 appointments this month.", "response": "sql SELECT doctor_id, COUNT(*) AS total FROM Appointments WHERE MONTH(appointment_date) = MONTH(CURRENT_DATE) GROUP BY doctor_id HAVING COUNT(*) > 20;"}
{"prompt": "Find patients with back-to-back appointments (same day, different doctor).", "response": "sql SELECT patient_id, COUNT(DISTINCT doctor_id) FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE GROUP BY patient_id HAVING COUNT(DISTINCT doctor_id) > 1;"}
{"prompt": "Retrieve appointments that were rescheduled (status = 'Rescheduled').", "response": "sql SELECT * FROM Appointments WHERE status = 'Rescheduled';"}
{"prompt": "Get the number of urgent appointments handled by each doctor this week.", "response": "sql SELECT doctor_id, COUNT(*) FROM Appointments WHERE reason LIKE '%urgent%' AND WEEK(appointment_date) = WEEK(CURRENT_DATE) GROUP BY doctor_id;"}
{"prompt": "Show appointment count per specialization today.", "response": "sql SELECT D.specialization, COUNT(*) FROM Appointments A JOIN Doctors D ON A.doctor_id = D.doctor_id WHERE DATE(appointment_date) = CURRENT_DATE GROUP BY D.specialization;"}
{"prompt": "Get all appointments that were booked within the last 24 hours.", "response": "sql SELECT * FROM Appointments WHERE appointment_date >= NOW() - INTERVAL 1 DAY;"}
{"prompt": "List all appointments where pre-visit instructions were required (reason includes 'checklist').", "response": "sql SELECT * FROM Appointments WHERE reason LIKE '%checklist%';"}
{"prompt": "Find appointments for patients requiring interpreters (reason includes 'interpreter').", "response": "sql SELECT * FROM Appointments WHERE reason LIKE '%interpreter%';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Show all support tickets created today.", "response": "sql SELECT * FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE;"}
{"prompt": "List all support tickets raised by patients.", "response": "sql SELECT * FROM SupportTickets WHERE role = 'Patient';"}
{"prompt": "Retrieve all unresolved support tickets.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "Show tickets resolved by Ananya today.", "response": "(Assuming Ananya’s user ID is known, say 123)"}
{"prompt": "nan", "response": "sql SELECT * FROM SupportTickets WHERE status = 'Resolved' AND DATE(resolved_at) = CURRENT_DATE AND raised_by_id = 123;"}
{"prompt": "Find support tickets that took more than 1 day to resolve.", "response": "sql SELECT * FROM SupportTickets WHERE DATEDIFF(resolved_at, created_at) > 1;"}
{"prompt": "Show all support tickets related to video consultations.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%video%' OR description LIKE '%video%';"}
{"prompt": "Count of support tickets handled per role.", "response": "sql SELECT role, COUNT(*) FROM SupportTickets GROUP BY role;"}
{"prompt": "Find all tickets raised in the past 7 days.", "response": "sql SELECT * FROM SupportTickets WHERE created_at >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "List all open support tickets regarding appointment rescheduling.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%reschedule%' OR description LIKE '%reschedule%');"}
{"prompt": "Retrieve support tickets mentioning lab reports.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%lab report%' OR subject LIKE '%lab report%';"}
{"prompt": "Get the total number of support tickets resolved this week.", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status = 'Resolved' AND WEEK(resolved_at) = WEEK(CURRENT_DATE);"}
{"prompt": "Show support tickets from elderly patients (assuming special flag in subject or description).", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%elderly%' OR subject LIKE '%elderly%';"}
{"prompt": "List the 10 most recent support tickets.", "response": "sql SELECT * FROM SupportTickets ORDER BY created_at DESC LIMIT 10;"}
{"prompt": "Find all support tickets mentioning internet issues.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%internet%' OR description LIKE '%internet%';"}
{"prompt": "Count all support tickets resolved in less than 1 hour.", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE TIMESTAMPDIFF(MINUTE, created_at, resolved_at) <= 60;"}
{"prompt": "Show support tickets related to mobility assistance.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%mobility%' OR description LIKE '%wheelchair%';"}
{"prompt": "Retrieve support tickets flagged for IT department.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%IT%' OR description LIKE '%system issue%';"}
{"prompt": "List tickets created by the same user more than once.", "response": "sql SELECT raised_by_id, COUNT(*) FROM SupportTickets GROUP BY raised_by_id HAVING COUNT(*) > 1;"}
{"prompt": "Get average resolution time for support tickets.", "response": "sql SELECT AVG(TIMESTAMPDIFF(MINUTE, created_at, resolved_at)) AS avg_resolution_minutes FROM SupportTickets WHERE status = 'Resolved';"}
{"prompt": "Clinic Managers", "response": "nan"}
{"prompt": "What is the total number of appointments scheduled for today?", "response": "SELECT COUNT(*) FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE;"}
{"prompt": "Which doctor had the highest number of appointments this week?", "response": "SELECT doctor_id, COUNT(*) AS total FROM Appointments WHERE appointment_date >= DATE_TRUNC('week', CURRENT_DATE) GROUP BY doctor_id ORDER BY total DESC LIMIT 1;"}
{"prompt": "How many appointments were cancelled this month?", "response": "SELECT COUNT(*) FROM Appointments WHERE status = 'Cancelled' AND DATE_TRUNC('month', appointment_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which department had the longest average wait time in the last 7 days?", "response": "SELECT d.specialization, AVG(EXTRACT(EPOCH FROM (actual_start - appointment_date)) / 60) AS avg_wait_min FROM Appointments a JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE appointment_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY d.specialization ORDER BY avg_wait_min DESC;"}
{"prompt": "How many no-shows were reported in the last 30 days?", "response": "SELECT COUNT(*) FROM Appointments WHERE status = 'No Show' AND appointment_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the doctor-wise patient load for today?", "response": "SELECT doctor_id, COUNT(*) AS patient_count FROM Appointments WHERE DATE(appointment_date) = CURRENT_DATE GROUP BY doctor_id;"}
{"prompt": "Which appointments received low satisfaction scores in video consultations?", "response": "SELECT a.appointment_id FROM Appointments a JOIN Feedback f ON a.appointment_id = f.appointment_id WHERE f.rating <= 2 AND a.consultation_type = 'Video';"}
{"prompt": "What is the average consultation time per doctor?", "response": "SELECT doctor_id, AVG(EXTRACT(EPOCH FROM (visit_end - visit_start)) / 60) AS avg_duration FROM MedicalRecords GROUP BY doctor_id;"}
{"prompt": "How many appointments were booked during the system outage on June 12th between 12–1 PM?", "response": "SELECT COUNT(*) FROM Appointments WHERE appointment_date BETWEEN '2025-06-12 12:00:00' AND '2025-06-12 13:00:00';"}
{"prompt": "On which day in the past month did the clinic see the highest number of cancellations?", "response": "SELECT DATE(appointment_date) AS day, COUNT(*) AS total FROM Appointments WHERE status = 'Cancelled' AND appointment_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY day ORDER BY total DESC LIMIT 1;"}
{"prompt": "How many requests were received mentioning multilingual support?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%language%' OR description LIKE '%multilingual%';"}
{"prompt": "Which support representative resolved the most tickets this week?", "response": "SELECT resolved_by, COUNT(*) AS total FROM SupportTickets WHERE resolved_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY resolved_by ORDER BY total DESC LIMIT 1;"}
{"prompt": "How many teleconsultation-related issues were logged last week?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%teleconsult%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which rooms had reported equipment or lighting issues?", "response": "SELECT * FROM SupportTickets WHERE description LIKE '%equipment%' OR description LIKE '%lighting%';"}
{"prompt": "Which patients have missed multiple appointments (more than once)?", "response": "SELECT patient_id, COUNT(*) AS no_show_count FROM Appointments WHERE status = 'No Show' GROUP BY patient_id HAVING COUNT(*) > 1;"}
{"prompt": "What is the average number of daily appointments per department?", "response": "SELECT d.specialization, COUNT(*) / 30.0 AS avg_daily FROM Appointments a JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE appointment_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY d.specialization;"}
{"prompt": "How many emergency slots were utilized in the past week?", "response": "SELECT COUNT(*) FROM Appointments WHERE slot_type = 'Emergency' AND appointment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What percentage of appointments this month were video consultations?", "response": "SELECT ROUND(100.0 * COUNT(*) FILTER (WHERE consultation_type = 'Video') / COUNT(*), 2) AS video_percentage FROM Appointments WHERE DATE_TRUNC('month', appointment_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which departments experienced the most no-shows in the past month?", "response": "SELECT d.specialization, COUNT(*) AS no_shows FROM Appointments a JOIN Doctors d ON a.doctor_id = d.doctor_id WHERE a.status = 'No Show' AND a.appointment_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY d.specialization ORDER BY no_shows DESC;"}
{"prompt": "Which day of the week typically has the highest patient volume?", "response": "SELECT TO_CHAR(appointment_date, 'Day') AS weekday, COUNT(*) AS total FROM Appointments GROUP BY weekday ORDER BY total DESC LIMIT 1;"}
{"prompt": "Finance / Billing Staff", "response": "nan"}
{"prompt": "What is the total revenue generated today?", "response": "SELECT SUM(amount) FROM Payments WHERE DATE(payment_date) = CURRENT_DATE;"}
{"prompt": "How many invoices were generated this week?", "response": "SELECT COUNT(*) FROM Invoices WHERE invoice_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which payment method was used most frequently in the past month?", "response": "SELECT payment_method, COUNT(*) AS total FROM Payments WHERE payment_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY payment_method ORDER BY total DESC LIMIT 1;"}
{"prompt": "How many patients paid via UPI this week?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_method = 'UPI' AND payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which patients have outstanding dues?", "response": "SELECT patient_id, due_amount FROM Billing WHERE due_amount > 0;"}
{"prompt": "What is the average consultation fee collected in the last 15 days?", "response": "SELECT AVG(amount) FROM Payments WHERE service_type = 'Consultation' AND payment_date >= CURRENT_DATE - INTERVAL '15 days';"}
{"prompt": "How many insurance payments were received today?", "response": "SELECT COUNT(*) FROM Payments WHERE payment_method = 'Insurance' AND DATE(payment_date) = CURRENT_DATE;"}
{"prompt": "Which insurance providers have the most pending settlements?", "response": "SELECT insurance_provider, COUNT(*) AS pending_claims FROM InsuranceClaims WHERE status = 'Pending' GROUP BY insurance_provider ORDER BY pending_claims DESC;"}
{"prompt": "How many bills included multiple services today?", "response": "SELECT COUNT(*) FROM Invoices WHERE service_count > 1 AND DATE(invoice_date) = CURRENT_DATE;"}
{"prompt": "Which patients were given discounts through government schemes?", "response": "SELECT DISTINCT patient_id FROM Discounts WHERE discount_type = 'Government Scheme';"}
{"prompt": "What is the total amount reimbursed in the past month?", "response": "SELECT SUM(amount) FROM Reimbursements WHERE reimbursement_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "How many duplicate charges were flagged and resolved this month?", "response": "SELECT COUNT(*) FROM BillingErrors WHERE error_type = 'Duplicate Charge' AND status = 'Resolved' AND resolved_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which services contributed the most to this month’s revenue?", "response": "SELECT service_type, SUM(amount) AS revenue FROM Payments WHERE payment_date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY service_type ORDER BY revenue DESC;"}
{"prompt": "What is the total overdue amount from all patients?", "response": "SELECT SUM(due_amount) FROM Billing WHERE due_amount > 0;"}
{"prompt": "How many bills were sent via email today?", "response": "SELECT COUNT(*) FROM Invoices WHERE sent_via = 'Email' AND DATE(invoice_date) = CURRENT_DATE;"}
{"prompt": "How many patients paid their bills before leaving the clinic?", "response": "SELECT COUNT(*) FROM Payments WHERE paid_before_checkout = TRUE AND DATE(payment_date) = CURRENT_DATE;"}
{"prompt": "What is the trend in monthly revenue for the past 6 months?", "response": "SELECT DATE_TRUNC('month', payment_date) AS month, SUM(amount) AS revenue FROM Payments WHERE payment_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY month ORDER BY month;"}
{"prompt": "How many patients were confused about billing and needed manual assistance?", "response": "SELECT COUNT(*) FROM SupportTickets WHERE category = 'Billing Help';"}
{"prompt": "Which staff member generated the highest number of invoices this week?", "response": "SELECT generated_by, COUNT(*) AS total FROM Invoices WHERE invoice_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY generated_by ORDER BY total DESC LIMIT 1;"}
{"prompt": "What percentage of total payments were made using digital methods this month (UPI + Credit Card)?", "response": "SELECT ROUND(100.0 * COUNT(*) FILTER (WHERE payment_method IN ('UPI', 'Credit Card')) / COUNT(*), 2) AS digital_percent FROM Payments WHERE payment_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "How many user login failures occurred today?", "response": "SELECT COUNT(*) FROM LoginAttempts WHERE status = 'Failed' AND DATE(attempt_time) = CURRENT_DATE;"}
{"prompt": "Which departments experienced the highest system load last week?", "response": "SELECT department, MAX(cpu_usage) AS peak_cpu FROM SystemMetrics WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY department ORDER BY peak_cpu DESC;"}
{"prompt": "What was the system uptime percentage for the past month?", "response": "SELECT ROUND(100.0 * SUM(uptime_minutes) / SUM(total_minutes), 2) AS uptime_percent FROM SystemUptime WHERE date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "How many patients accessed the portal using two-factor authentication today?", "response": "SELECT COUNT(*) FROM PortalLogins WHERE two_factor_used = TRUE AND DATE(login_time) = CURRENT_DATE;"}
{"prompt": "Which user roles triggered the most access denials in the past week?", "response": "SELECT user_role, COUNT(*) AS denied_attempts FROM AccessLogs WHERE access_status = 'Denied' AND timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY user_role ORDER BY denied_attempts DESC;"}
{"prompt": "How many video consultation records were backed up today?", "response": "SELECT COUNT(*) FROM BackupLogs WHERE data_type = 'Video Consultation' AND DATE(backup_time) = CURRENT_DATE;"}
{"prompt": "Which users had admin-level access in the system?", "response": "SELECT username FROM Users WHERE access_level = 'Admin';"}
{"prompt": "How many malware alerts were triggered in the last 15 days?", "response": "SELECT COUNT(*) FROM SecurityAlerts WHERE alert_type = 'Malware' AND alert_date >= CURRENT_DATE - INTERVAL '15 days';"}
{"prompt": "Which APIs failed or timed out this week?", "response": "SELECT api_name, COUNT(*) AS failure_count FROM APIMonitoring WHERE status = 'Failed' AND timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY api_name;"}
{"prompt": "What were the average database response times during peak hours yesterday?", "response": "SELECT AVG(response_time_ms) FROM DBPerformance WHERE timestamp BETWEEN '08:00:00' AND '18:00:00' AND DATE(timestamp) = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "How many firewall rule changes were made this month?", "response": "SELECT COUNT(*) FROM FirewallChanges WHERE change_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which staff members received training in tech security practices last week?", "response": "SELECT DISTINCT staff_id FROM TrainingLogs WHERE training_topic = 'Tech Security' AND training_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many system patch updates were installed in the last 30 days?", "response": "SELECT COUNT(*) FROM PatchUpdates WHERE install_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which patient messages were encrypted today?", "response": "SELECT message_id FROM PatientMessages WHERE encrypted = TRUE AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What were the most frequent support issues related to system access this month?", "response": "SELECT issue_description, COUNT(*) AS issue_count FROM ITSupportTickets WHERE category = 'Access' AND created_at >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY issue_description ORDER BY issue_count DESC;"}
{"prompt": "How many successful system restores were performed this week?", "response": "SELECT COUNT(*) FROM RestoreLogs WHERE status = 'Successful' AND restore_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which external health apps are currently integrated with the system?", "response": "SELECT app_name FROM ThirdPartyIntegrations WHERE status = 'Active';"}
{"prompt": "How many times were the disaster recovery drills conducted in the past year?", "response": "SELECT COUNT(*) FROM DisasterRecoveryDrills WHERE drill_date >= CURRENT_DATE - INTERVAL '1 year';"}
{"prompt": "How many users changed their passwords this week?", "response": "SELECT COUNT(*) FROM UserLogs WHERE action = 'Password Change' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the count of encryption errors reported this month?", "response": "SELECT COUNT(*) FROM EncryptionLogs WHERE status = 'Error' AND log_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Medical Records Staff", "response": "nan"}
{"prompt": "How many medical records were updated today?", "response": "SELECT COUNT(*) FROM MedicalRecords WHERE DATE(updated_at) = CURRENT_DATE;"}
{"prompt": "2. How many duplicate medical reports were flagged this week?", "response": "SELECT COUNT(*) FROM ReportIssues WHERE issue_type = 'Duplicate' AND reported_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "3. Which patients have incomplete clinical histories in the system?", "response": "SELECT patient_id FROM ClinicalHistories WHERE is_complete = FALSE;"}
{"prompt": "4. How many imaging reports were synced from external labs this month?", "response": "SELECT COUNT(*) FROM ImagingReports WHERE source = 'External Lab' AND DATE(sync_time) >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "5. List patients who returned after more than 6 months.", "response": "SELECT patient_id, last_visit, CURRENT_DATE - last_visit AS days_since_last_visit FROM Patients WHERE CURRENT_DATE - last_visit > 180;"}
{"prompt": "6. How many MRI reports were uploaded in the last 10 days?", "response": "SELECT COUNT(*) FROM MedicalReports WHERE report_type = 'MRI' AND DATE(uploaded_at) >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "7. How many records have missing timestamps?", "response": "SELECT COUNT(*) FROM MedicalRecords WHERE timestamp IS NULL;"}
{"prompt": "8. How many consent forms for data sharing were filed this week?", "response": "SELECT COUNT(*) FROM ConsentForms WHERE consent_type = 'Data Sharing' AND signed_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "9. Which records were accessed during the recent audit window?", "response": "SELECT record_id, accessed_by, accessed_at FROM AccessLogs WHERE accessed_at BETWEEN '2025-06-01' AND '2025-06-07';"}
{"prompt": "10. How many consultation notes were linked to appointments today?", "response": "SELECT COUNT(*) FROM ConsultationNotes WHERE DATE(linked_at) = CURRENT_DATE;"}
{"prompt": "11. List all medical reports flagged for mismatch errors this month.", "response": "SELECT report_id, patient_id, description FROM ReportIssues WHERE issue_type = 'Mismatch' AND DATE(reported_at) >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "12. Which nurses and clerks completed training in data integrity last week?", "response": "SELECT staff_id, name FROM TrainingRecords WHERE topic = 'Data Integrity' AND DATE(completed_on) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "13. How many reports were corrected manually by Sneha this month?", "response": "SELECT COUNT(*) FROM ReportCorrections WHERE corrected_by = 'Sneha' AND DATE(corrected_on) >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "14. How many discharge summaries were added this week?", "response": "SELECT COUNT(*) FROM DischargeSummaries WHERE DATE(added_on) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "15. Which patient records were accessed without a valid reason code?", "response": "SELECT record_id, accessed_by FROM AccessLogs WHERE reason_code IS NULL;"}
{"prompt": "16. How many flagged records are pending resolution?", "response": "SELECT COUNT(*) FROM ReportIssues WHERE status = 'Pending';"}
{"prompt": "17. What is the average time taken to upload lab reports after test completion?", "response": "SELECT AVG(EXTRACT(EPOCH FROM (uploaded_at - test_completed_at)) / 60) AS avg_minutes FROM LabReports;"}
{"prompt": "18. How many reports were HIPAA-audited last quarter?", "response": "SELECT COUNT(*) FROM HIPAA_AuditLogs WHERE audit_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter');"}
{"prompt": "19. Which patients had repeat tests due to missing data?", "response": "SELECT DISTINCT patient_id FROM RepeatTests WHERE reason = 'Missing Previous Data';"}
{"prompt": "20. What is the number of secure record accesses made using role-based access control this month?", "response": "SELECT COUNT(*) FROM AccessLogs WHERE access_method = 'Role-Based' AND DATE(accessed_at) >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "What was the average patient wait time last week?", "response": "SELECT AVG(wait_time_minutes) FROM Appointments WHERE appointment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many appointments were scheduled for the pediatric department after lunch last month?", "response": "SELECT COUNT(*) FROM Appointments WHERE department = 'Pediatrics' AND appointment_time BETWEEN '13:00:00' AND '17:00:00' AND appointment_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "What is the no-show rate for first-time teleconsultation users?", "response": "SELECT (COUNT(*) FILTER (WHERE status = 'No-Show') * 100.0 / COUNT(*)) AS no_show_rate FROM Appointments WHERE is_teleconsult = TRUE AND is_first_time = TRUE;"}
{"prompt": "Which specialties have the highest average patient feedback score?", "response": "SELECT specialty, AVG(feedback_score) AS avg_score FROM Feedback GROUP BY specialty ORDER BY avg_score DESC;"}
{"prompt": "How many appointment cancellations occurred in the past 30 days?", "response": "SELECT COUNT(*) FROM Appointments WHERE status = 'Cancelled' AND appointment_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What was the attendance rate improvement for pediatric appointments after shifting to morning slots?", "response": "SELECT ((new_rate - old_rate) / old_rate) * 100 AS improvement_percent FROM (SELECT 0.80 AS old_rate, 1.00 AS new_rate) AS sub;"}
{"prompt": "Which departments saw a drop in patient volume compared to the previous month?", "response": "SELECT department FROM ( SELECT department, COUNT(*) FILTER (WHERE appointment_date >= DATE_TRUNC('month', CURRENT_DATE)) AS current_month, COUNT(*) FILTER (WHERE appointment_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND appointment_date < DATE_TRUNC('month', CURRENT_DATE)) AS previous_month FROM Appointments GROUP BY department ) AS dept_counts WHERE current_month < previous_month;"}
{"prompt": "How many teleconsultation users dropped out without completing the onboarding?", "response": "SELECT COUNT(*) FROM Users WHERE is_teleconsult = TRUE AND completed_onboarding = FALSE;"}
{"prompt": "What percentage of teleconsult appointments were completed successfully this month?", "response": "SELECT (COUNT(*) FILTER (WHERE status = 'Completed') * 100.0 / COUNT(*)) AS completion_rate FROM Appointments WHERE is_teleconsult = TRUE AND appointment_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which doctors had the highest utilization rate this quarter?", "response": "SELECT doctor_id, (SUM(actual_time_used) * 100.0 / SUM(scheduled_time)) AS utilization_rate FROM DoctorSchedules WHERE schedule_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY doctor_id ORDER BY utilization_rate DESC;"}
{"prompt": "How many feedback entries mention poor communication?", "response": "SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%poor communication%';"}
{"prompt": "What was the increase in clinic visits after launching the Saturday extended hours?", "response": "SELECT ((new_count - old_count) / old_count) * 100 AS increase_rate FROM ( SELECT (SELECT COUNT(*) FROM Appointments WHERE EXTRACT(DOW FROM appointment_date) = 6 AND appointment_date >= '2025-05-01') AS new_count, (SELECT COUNT(*) FROM Appointments WHERE EXTRACT(DOW FROM appointment_date) = 6 AND appointment_date < '2025-05-01') AS old_count ) AS sub;"}
{"prompt": "How many patients visited the clinic during the last flu season spike?", "response": "SELECT COUNT(*) FROM Appointments WHERE visit_reason = 'Flu' AND appointment_date BETWEEN '2024-12-01' AND '2025-02-28';"}
{"prompt": "Which time slots are most preferred by pediatric patients?", "response": "SELECT appointment_time, COUNT(*) AS count FROM Appointments WHERE department = 'Pediatrics' GROUP BY appointment_time ORDER BY count DESC;"}
{"prompt": "What is the monthly revenue trend for the last 6 months?", "response": "SELECT DATE_TRUNC('month', appointment_date) AS month, SUM(payment_amount) AS revenue FROM Payments GROUP BY month ORDER BY month DESC;"}
{"prompt": "How many doctors exceeded 90% utilization last month?", "response": "SELECT COUNT(DISTINCT doctor_id) FROM DoctorSchedules WHERE schedule_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND (actual_time_used * 100.0 / scheduled_time) > 90;"}
{"prompt": "Which departments received the most patient feedback?", "response": "SELECT department, COUNT(*) AS feedback_count FROM Feedback GROUP BY department ORDER BY feedback_count DESC;"}
{"prompt": "How effective was the onboarding guide in reducing teleconsultation dropouts?", "response": "SELECT ((before_rate - after_rate) / before_rate) * 100 AS improvement FROM (SELECT 0.40 AS before_rate, 0.24 AS after_rate) AS sub;"}
{"prompt": "What is the most common reason for appointment cancellations?", "response": "SELECT reason, COUNT(*) AS count FROM Cancellations GROUP BY reason ORDER BY count DESC LIMIT 1;"}
{"prompt": "How many appointments were affected during peak flu weeks according to predictions?", "response": "SELECT COUNT(*) FROM Appointments WHERE predicted_demand = 'High' AND visit_reason = 'Flu';"}
{"prompt": "BudgetTracker", "response": "nan"}
{"prompt": "Individual Users", "response": "nan"}
{"prompt": "I want to see all my expenses for this month.", "response": "sql SELECT T.date, T.category, T.amount, T.description FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'expense' AND T.date >= DATE_TRUNC('month', CURRENT_DATE) AND T.date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month';"}
{"prompt": "What are the top 3 categories I spent on this month?", "response": "sql SELECT T.category, SUM(T.amount) AS total FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'expense' AND T.date >= DATE_TRUNC('month', CURRENT_DATE) AND T.date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' GROUP BY T.category ORDER BY total DESC LIMIT 3;"}
{"prompt": "Show me a breakdown of expenses by category this month.", "response": "sql SELECT T.category, SUM(T.amount) AS total FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'expense' AND T.date >= DATE_TRUNC('month', CURRENT_DATE) AND T.date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' GROUP BY T.category ORDER BY total DESC;"}
{"prompt": "How much did I spend on groceries in the last 3 months?", "response": "sql SELECT SUM(T.amount) AS grocery_expense FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.category = 'groceries' AND T.type = 'expense' AND T.date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Did I go over budget in the gadget category this month?", "response": "sql SELECT SUM(T.amount) AS total_gadget_spent FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.category = 'gadget' AND T.date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How much income did I receive this month?", "response": "sql SELECT SUM(T.amount) AS total_income FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'income' AND T.date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What are all my transactions for the last 7 days?", "response": "sql SELECT T.date, T.category, T.amount, T.type, T.description FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What’s the total amount I’ve saved in the last 6 months?", "response": "sql SELECT SUM(T.amount) AS total_saved FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'income' AND T.date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "What does my monthly expense trend look like for this year?", "response": "sql SELECT DATE_TRUNC('month', T.date) AS month, SUM(T.amount) AS total FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'expense' AND EXTRACT(YEAR FROM T.date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY DATE_TRUNC('month', T.date) ORDER BY month;"}
{"prompt": "Show me all my budgets and their durations.", "response": "sql SELECT B.name, B.start_date, B.end_date, B.total_amount FROM Budgets B JOIN Users U ON B.user_id = U.user_id WHERE U.username = 'Arjun';"}
{"prompt": "What are the most frequent transaction categories I use?", "response": "sql SELECT T.category, COUNT(*) AS frequency FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' GROUP BY T.category ORDER BY frequency DESC;"}
{"prompt": "Show me my budget with the highest total amount.", "response": "sql SELECT B.name, B.total_amount FROM Budgets B JOIN Users U ON B.user_id = U.user_id WHERE U.username = 'Arjun' ORDER BY B.total_amount DESC LIMIT 1;"}
{"prompt": "When was my last login to BudgetTracker?", "response": "sql SELECT last_login FROM Users WHERE username = 'Arjun';"}
{"prompt": "List all the times I accessed BudgetTracker in the past month.", "response": "sql SELECT timestamp, action, ip_address FROM UsersAuditLogs L JOIN Users U ON L.user_id = U.user_id WHERE U.username = 'Arjun' AND timestamp >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Did I open any support tickets recently?", "response": "sql SELECT subject, status, created_at, resolved_at FROM SupportTickets S JOIN Users U ON S.raised_by_id = U.user_id WHERE U.username = 'Arjun' ORDER BY created_at DESC;"}
{"prompt": "How many chai breaks (snacks/dining category) did I have this month?", "response": "sql SELECT COUNT(*) AS chai_breaks FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.category = 'dining' AND T.date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What’s my average monthly spending so far this year?", "response": "sql SELECT AVG(monthly_total) AS avg_monthly_spend FROM ( SELECT DATE_TRUNC('month', T.date) AS month, SUM(T.amount) AS monthly_total FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.type = 'expense' AND EXTRACT(YEAR FROM T.date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY DATE_TRUNC('month', T.date) ) AS monthly_data;"}
{"prompt": "What was the single highest transaction I made this year?", "response": "sql SELECT T.date, T.category, T.amount, T.description FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.date >= DATE_TRUNC('year', CURRENT_DATE) ORDER BY T.amount DESC LIMIT 1;"}
{"prompt": "List all transactions with the description containing 'repair'.", "response": "sql SELECT T.date, T.category, T.amount, T.description FROM Users U JOIN Budgets B ON U.user_id = B.user_id JOIN Transactions T ON B.budget_id = T.budget_id WHERE U.username = 'Arjun' AND T.description LIKE '%repair%';"}
{"prompt": "How many budgets have I created since joining?", "response": "sql SELECT COUNT(*) FROM Budgets B JOIN Users U ON B.user_id = U.user_id WHERE U.username = 'Arjun';"}
{"prompt": "Financial Advisors", "response": "nan"}
{"prompt": "I want to review Rohan’s spending transactions over the last 3 months.", "response": "sql<br>SELECT t.date, t.category, t.amount, t.description<br>FROM Transactions t<br>JOIN Budgets b ON t.budget_id = b.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>AND t.date >= CURRENT_DATE - INTERVAL '3 months';<br>"}
{"prompt": "How much has Rohan spent on subscriptions and entertainment recently?", "response": "sql<br>SELECT t.category, SUM(t.amount) AS total_spent<br>FROM Transactions t<br>JOIN Budgets b ON t.budget_id = b.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>AND t.category IN ('Subscriptions', 'Entertainment')<br>AND t.date >= CURRENT_DATE - INTERVAL '3 months'<br>GROUP BY t.category;<br>"}
{"prompt": "Which of my clients have registered in the last 6 months but haven’t logged in for 30 days?", "response": "sql<br>SELECT u.username, u.email, u.last_login<br>FROM Users u<br>JOIN FinancialAdvisors f ON u.user_id = f.user_id<br>WHERE f.advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com')<br>AND u.registration_date >= CURRENT_DATE - INTERVAL '6 months'<br>AND u.last_login <= CURRENT_DATE - INTERVAL '30 days';<br>"}
{"prompt": "Give me a summary of Rohan’s budgets vs actual spending.", "response": "sql<br>SELECT b.name AS budget_name, b.total_amount AS budgeted, COALESCE(SUM(t.amount), 0) AS spent<br>FROM Budgets b<br>LEFT JOIN Transactions t ON b.budget_id = t.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>GROUP BY b.budget_id, b.name, b.total_amount;<br>"}
{"prompt": "Show me Rohan’s monthly spending trend for the last 6 months.", "response": "sql<br>SELECT DATE_TRUNC('month', t.date) AS month, SUM(t.amount) AS total_spent<br>FROM Transactions t<br>JOIN Budgets b ON t.budget_id = b.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>AND t.date >= CURRENT_DATE - INTERVAL '6 months'<br>GROUP BY DATE_TRUNC('month', t.date)<br>ORDER BY month;<br>"}
{"prompt": "Which clients under my care have more than 3 active budgets?", "response": "sql<br>SELECT u.username, COUNT(b.budget_id) AS active_budgets<br>FROM Users u<br>JOIN Budgets b ON u.user_id = b.user_id<br>JOIN FinancialAdvisors f ON f.user_id = u.user_id<br>WHERE f.advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com')<br>GROUP BY u.user_id, u.username<br>HAVING COUNT(b.budget_id) > 3;<br>"}
{"prompt": "List all clients I advise, with their email and registration dates.", "response": "sql<br>SELECT u.username, u.email, u.registration_date<br>FROM Users u<br>JOIN FinancialAdvisors f ON f.user_id = u.user_id<br>WHERE f.advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com');<br>"}
{"prompt": "How many financial goals (budgets) are currently active for Rohan?", "response": "sql<br>SELECT COUNT(*) AS active_goals<br>FROM Budgets<br>WHERE user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>AND end_date >= CURRENT_DATE;<br>"}
{"prompt": "What are Rohan’s top 5 expense categories by total spend?", "response": "sql<br>SELECT t.category, SUM(t.amount) AS total_spent<br>FROM Transactions t<br>JOIN Budgets b ON t.budget_id = b.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>GROUP BY t.category<br>ORDER BY total_spent DESC<br>LIMIT 5;<br>"}
{"prompt": "Has Rohan’s spending reduced since we started the new budget 3 months ago?", "response": "sql<br>SELECT period, SUM(amount) AS total_spent<br>FROM (<br> SELECT 'Before' AS period, t.amount<br> FROM Transactions t<br> JOIN Budgets b ON t.budget_id = b.budget_id<br> WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br> AND t.date BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE - INTERVAL '3 months'<br> UNION ALL<br> SELECT 'After' AS period, t.amount<br> FROM Transactions t<br> JOIN Budgets b ON t.budget_id = b.budget_id<br> WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br> AND t.date >= CURRENT_DATE - INTERVAL '3 months'<br>) AS data<br>GROUP BY period;<br>"}
{"prompt": "Which clients under my care haven’t created any budget yet?", "response": "sql<br>SELECT u.username, u.email<br>FROM Users u<br>JOIN FinancialAdvisors f ON u.user_id = f.user_id<br>WHERE f.advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com')<br>AND u.user_id NOT IN (SELECT DISTINCT user_id FROM Budgets);<br>"}
{"prompt": "What’s the most recent transaction Rohan made?", "response": "sql<br>SELECT t.*<br>FROM Transactions t<br>JOIN Budgets b ON t.budget_id = b.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>ORDER BY t.date DESC<br>LIMIT 1;<br>"}
{"prompt": "List all of Rohan’s budgets along with their time duration.", "response": "sql<br>SELECT name, start_date, end_date<br>FROM Budgets<br>WHERE user_id = (SELECT user_id FROM Users WHERE username = 'rohan');<br>"}
{"prompt": "How many clients under me have raised support tickets this month?", "response": "sql<br>SELECT COUNT(DISTINCT s.raised_by_id) AS clients_with_tickets<br>FROM SupportTickets s<br>JOIN FinancialAdvisors f ON s.raised_by_id = f.user_id<br>WHERE f.advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com')<br>AND s.created_at >= DATE_TRUNC('month', CURRENT_DATE);<br>"}
{"prompt": "Which of my clients have transactions tagged as ‘Impulse Purchases’?", "response": "sql<br>SELECT DISTINCT u.username<br>FROM Users u<br>JOIN Budgets b ON u.user_id = b.user_id<br>JOIN Transactions t ON b.budget_id = t.budget_id<br>WHERE t.category = 'Impulse Purchases'<br>AND u.user_id IN (<br> SELECT user_id FROM FinancialAdvisors<br> WHERE advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com')<br>);<br>"}
{"prompt": "Give me a list of all transactions categorized as ‘Food Delivery’ for Rohan.", "response": "sql<br>SELECT t.date, t.amount, t.description<br>FROM Transactions t<br>JOIN Budgets b ON t.budget_id = b.budget_id<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>AND t.category = 'Food Delivery';<br>"}
{"prompt": "How many support tickets are still unresolved across all my clients?", "response": "sql<br>SELECT COUNT(*) AS unresolved_tickets<br>FROM SupportTickets<br>WHERE status != 'Resolved'<br>AND raised_by_id IN (<br> SELECT user_id FROM FinancialAdvisors<br> WHERE advisor_id = (SELECT advisor_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com')<br>);<br>"}
{"prompt": "Show me a timeline of all financial advisor actions performed by me in the system.", "response": "sql<br>SELECT action, timestamp, ip_address<br>FROM UsersAuditLogs<br>WHERE user_id = (<br> SELECT user_id FROM FinancialAdvisors WHERE email = 'meera@skylinewealth.com'<br>);<br>"}
{"prompt": "Which clients have budgets ending this week?", "response": "sql<br>SELECT u.username, b.name, b.end_date<br>FROM Budgets b<br>JOIN Users u ON b.user_id = u.user_id<br>WHERE b.end_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';<br>"}
{"prompt": "Which marketing campaigns were running during Rohan’s latest active budget?", "response": "sql<br>SELECT m.name, m.start_date, m.end_date<br>FROM MarketingCampaigns m<br>JOIN Budgets b ON m.start_date <= b.end_date AND m.end_date >= b.start_date<br>WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'rohan')<br>ORDER BY b.end_date DESC<br>LIMIT 1;<br>"}
{"prompt": "Accountants", "response": "nan"}
{"prompt": "I want to review all categorized transactions for the boutique bakery client from the past quarter.", "response": "sql SELECT t.date, t.category, t.amount, t.description FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'boutique_bakery') AND t.date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Show me the income vs. expense summary for the boutique bakery.", "response": "sql SELECT type, SUM(amount) AS total FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'boutique_bakery') GROUP BY type;"}
{"prompt": "Which categories have the highest expenses for the bakery in the last 6 months?", "response": "sql SELECT category, SUM(amount) AS total_expense FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'boutique_bakery') AND type = 'Expense' AND t.date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY category ORDER BY total_expense DESC;"}
{"prompt": "List all duplicate transactions for any of my clients.", "response": "sql SELECT t1.* FROM Transactions t1 JOIN Transactions t2 ON t1.budget_id = t2.budget_id AND t1.amount = t2.amount AND t1.date = t2.date AND t1.transaction_id <> t2.transaction_id;"}
{"prompt": "Which of my clients have had a net positive cash flow in the last 3 months?", "response": "sql SELECT u.username, SUM(CASE WHEN t.type = 'Income' THEN t.amount ELSE -t.amount END) AS net_cash_flow FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE u.user_id IN (SELECT user_id FROM Accountants WHERE accountant_id = (SELECT accountant_id FROM Accountants WHERE email = 'rakesh@budgettracker.com')) AND t.date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY u.username HAVING SUM(CASE WHEN t.type = 'Income' THEN t.amount ELSE -t.amount END) > 0;"}
{"prompt": "Find all subscription-based expenses for my clients.", "response": "sql SELECT u.username, t.date, t.amount, t.description FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.category = 'Subscriptions';"}
{"prompt": "Give me a list of all lapsed budgets for my clients.", "response": "sql SELECT u.username, b.name, b.end_date FROM Users u JOIN Budgets b ON u.user_id = b.user_id WHERE b.end_date < CURRENT_DATE AND u.user_id IN (SELECT user_id FROM Accountants WHERE accountant_id = (SELECT accountant_id FROM Accountants WHERE email = 'rakesh@budgettracker.com'));"}
{"prompt": "Which of my clients have missed a recurring vendor payment this month?", "response": "sql SELECT u.username, t.category, t.date, t.amount FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.category = 'Vendor Payment' AND t.date < CURRENT_DATE - INTERVAL '30 days' AND u.user_id IN (SELECT user_id FROM Accountants WHERE accountant_id = (SELECT accountant_id FROM Accountants WHERE email = 'rakesh@budgettracker.com'));"}
{"prompt": "Show me budgets that overspent their allocation in the last quarter.", "response": "sql SELECT b.name, b.total_amount, SUM(t.amount) AS spent FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY b.budget_id, b.name, b.total_amount HAVING SUM(t.amount) > b.total_amount;"}
{"prompt": "List all clients who haven’t submitted any transactions in their current budgets.", "response": "sql SELECT u.username, b.name FROM Users u JOIN Budgets b ON u.user_id = b.user_id WHERE b.end_date >= CURRENT_DATE AND b.budget_id NOT IN (SELECT DISTINCT budget_id FROM Transactions);"}
{"prompt": "Which clients have automated recurring bills configured? (Simulated via repeating transactions in same category)", "response": "sql SELECT u.username, t.category, COUNT(*) AS recurrence_count FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY u.username, t.category HAVING COUNT(*) >= 3;"}
{"prompt": "I want a report of all unresolved support tickets from my clients.", "response": "sql SELECT s.subject, s.status, u.username FROM SupportTickets s JOIN Users u ON s.raised_by_id = u.user_id WHERE s.status != 'Resolved' AND u.user_id IN (SELECT user_id FROM Accountants WHERE accountant_id = (SELECT accountant_id FROM Accountants WHERE email = 'rakesh@budgettracker.com'));"}
{"prompt": "Identify the clients whose packaging expenses increased over the last two quarters.", "response": "sql SELECT u.username, SUM(CASE WHEN t.date >= CURRENT_DATE - INTERVAL '3 months' THEN t.amount ELSE 0 END) AS recent, SUM(CASE WHEN t.date BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE - INTERVAL '3 months' THEN t.amount ELSE 0 END) AS previous FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.category = 'Packaging' GROUP BY u.username HAVING SUM(CASE WHEN t.date >= CURRENT_DATE - INTERVAL '3 months' THEN t.amount ELSE 0 END) > SUM(CASE WHEN t.date BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE - INTERVAL '3 months' THEN t.amount ELSE 0 END);"}
{"prompt": "List all AI-generated alerts for duplicate or suspicious entries this month. (Assume description field mentions 'alert')", "response": "sql SELECT t.date, t.description, u.username FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id JOIN Users u ON b.user_id = u.user_id WHERE t.description LIKE '%alert%' AND t.date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Export a summary of reimbursement transactions grouped by category for bakery client.", "response": "sql SELECT category, SUM(amount) AS total_reimbursed FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'boutique_bakery') AND t.description LIKE '%reimbursement%' GROUP BY category;"}
{"prompt": "Check whether the bakery client paid GST-relevant vendors in the last 3 months. (Assume category = 'GST Payment')", "response": "sql SELECT t.date, t.amount FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.user_id = (SELECT user_id FROM Users WHERE username = 'boutique_bakery') AND t.category = 'GST Payment' AND t.date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Which of my clients had the highest expenses in delivery and packaging combined?", "response": "sql SELECT u.username, SUM(t.amount) AS total FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.category IN ('Delivery', 'Packaging') GROUP BY u.username ORDER BY total DESC LIMIT 1;"}
{"prompt": "List the total number of budgets each of my clients currently has.", "response": "sql SELECT u.username, COUNT(b.budget_id) AS budget_count FROM Users u JOIN Budgets b ON u.user_id = b.user_id WHERE u.user_id IN (SELECT user_id FROM Accountants WHERE accountant_id = (SELECT accountant_id FROM Accountants WHERE email = 'rakesh@budgettracker.com')) GROUP BY u.username;"}
{"prompt": "View all audit logs where I exported reports or downloaded data.", "response": "sql SELECT action, timestamp, ip_address FROM UsersAuditLogs WHERE user_id = (SELECT user_id FROM Accountants WHERE email = 'rakesh@budgettracker.com') AND action LIKE '%export%' OR action LIKE '%download%';"}
{"prompt": "I want to generate a quarterly tax estimate report using total income and expenses for each client in the past 3 months.", "response": "sql SELECT u.username, SUM(CASE WHEN t.type = 'Income' THEN t.amount ELSE 0 END) AS total_income, SUM(CASE WHEN t.type = 'Expense' THEN t.amount ELSE 0 END) AS total_expense, (SUM(CASE WHEN t.type = 'Income' THEN t.amount ELSE 0 END) - SUM(CASE WHEN t.type = 'Expense' THEN t.amount ELSE 0 END)) * 0.15 AS estimated_tax FROM Users u JOIN Budgets b ON u.user_id = b.user_id JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.date >= CURRENT_DATE - INTERVAL '3 months' AND u.user_id IN (SELECT user_id FROM Accountants WHERE accountant_id = (SELECT accountant_id FROM Accountants WHERE email = 'rakesh@budgettracker.com')) GROUP BY u.username;"}
{"prompt": "Budget Managers", "response": "nan"}
{"prompt": "Which departments are underspending against their allocated budgets this quarter?", "response": "sql SELECT b.name, b.total_amount, SUM(t.amount) AS spent FROM Budgets b LEFT JOIN Transactions t ON b.budget_id = t.budget_id WHERE b.start_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY b.budget_id, b.name, b.total_amount HAVING SUM(t.amount) < b.total_amount;"}
{"prompt": "Show me all departments that have exceeded their budget limits this month.", "response": "sql SELECT b.name, b.total_amount, SUM(t.amount) AS spent FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE DATE_TRUNC('month', t.date) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY b.budget_id, b.name, b.total_amount HAVING SUM(t.amount) > b.total_amount;"}
{"prompt": "List all expenses above ₹5,000 made by any department this month.", "response": "sql SELECT t.date, t.category, t.amount, t.description, b.name FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE t.amount > 5000 AND DATE_TRUNC('month', t.date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which budgets have had no transaction activity in the last 30 days?", "response": "sql SELECT b.budget_id, b.name FROM Budgets b WHERE b.budget_id NOT IN (SELECT DISTINCT budget_id FROM Transactions WHERE date >= CURRENT_DATE - INTERVAL '30 days');"}
{"prompt": "Retrieve all transactions tagged as 'Vendor Payment' above ₹10,000.", "response": "sql SELECT t.*, b.name FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE t.category = 'Vendor Payment' AND t.amount > 10000;"}
{"prompt": "Show a month-wise comparison of planned vs. actual spend for each department.", "response": "sql SELECT b.name, DATE_TRUNC('month', t.date) AS month, b.total_amount, SUM(t.amount) AS actual_spent FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id GROUP BY b.name, b.total_amount, DATE_TRUNC('month', t.date);"}
{"prompt": "Pull all approved transactions below ₹5,000 made this week. (Assuming auto-approval by amount)", "response": "sql SELECT t.*, b.name FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE t.amount <= 5000 AND t.date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which department has the highest unused budget this quarter?", "response": "sql SELECT b.name, b.total_amount - COALESCE(SUM(t.amount), 0) AS unused FROM Budgets b LEFT JOIN Transactions t ON b.budget_id = t.budget_id WHERE b.start_date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY b.budget_id, b.name, b.total_amount ORDER BY unused DESC LIMIT 1;"}
{"prompt": "List all transactions related to 'Event' spending by the Marketing team.", "response": "sql SELECT t.* FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.name LIKE '%marketing%' AND t.category = 'Event';"}
{"prompt": "Show me departments that requested new budget allocations this month. (Assume budgets with current start_date)", "response": "sql SELECT * FROM Budgets WHERE start_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which budgets have been active for more than 6 months?", "response": "sql SELECT * FROM Budgets WHERE CURRENT_DATE - start_date > INTERVAL '6 months';"}
{"prompt": "List all expenses flagged as ‘High Value’ by rule (amount > ₹10,000).", "response": "sql SELECT t.*, b.name FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE t.amount > 10000;"}
{"prompt": "Provide a department-wise cash flow trend for the past three months.", "response": "sql SELECT b.name, DATE_TRUNC('month', t.date) AS month, SUM(CASE WHEN t.type = 'Income' THEN t.amount ELSE -t.amount END) AS cash_flow FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY b.name, DATE_TRUNC('month', t.date);"}
{"prompt": "Identify budgets with more than 80% utilization.", "response": "sql SELECT b.name, SUM(t.amount) AS spent, b.total_amount FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id GROUP BY b.budget_id, b.name, b.total_amount HAVING SUM(t.amount) >= 0.8 * b.total_amount;"}
{"prompt": "Find all budgets that started in this financial year. (Assuming FY starts April 1)", "response": "sql SELECT * FROM Budgets WHERE start_date >= DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months';"}
{"prompt": "Pull latest 10 transactions from the IT department.", "response": "sql SELECT t.* FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE b.name LIKE '%IT%' ORDER BY t.date DESC LIMIT 10;"}
{"prompt": "Which department has the most frequent vendor payments this quarter?", "response": "sql SELECT b.name, COUNT(*) AS vendor_count FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.category = 'Vendor Payment' AND t.date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY b.name ORDER BY vendor_count DESC LIMIT 1;"}
{"prompt": "List all budgets Nandini manages.", "response": "sql SELECT b.* FROM Budgets b JOIN BudgetManagers bm ON b.user_id = bm.user_id WHERE bm.manager_id = (SELECT manager_id FROM BudgetManagers WHERE department = 'Finance');"}
{"prompt": "View a quarterly projection by aggregating current spend across departments.", "response": "sql SELECT b.name, SUM(t.amount) AS current_spend, (SUM(t.amount) / EXTRACT(DAY FROM CURRENT_DATE - b.start_date)) * 90 AS projected_quarterly FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.date >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY b.name, b.start_date;"}
{"prompt": "Which departments made transactions without any description in the last month?", "response": "sql SELECT DISTINCT b.name FROM Transactions t JOIN Budgets b ON t.budget_id = b.budget_id WHERE t.description IS NULL AND t.date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Show me all support tickets that are currently unresolved.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "I need a list of tickets raised in the past 7 days.", "response": "sql SELECT * FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which users have raised more than 3 tickets in the past month?", "response": "sql SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '1 month' GROUP BY raised_by_id HAVING COUNT(*) > 3;"}
{"prompt": "Retrieve the latest ticket raised by a user with role 'Student'.", "response": "sql SELECT * FROM SupportTickets WHERE role = 'Student' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "Show all resolved tickets along with the time taken to resolve them.", "response": "sql SELECT ticket_id, subject, status, created_at, resolved_at, resolved_at - created_at AS resolution_time FROM SupportTickets WHERE status = 'Resolved';"}
{"prompt": "Which users raised support tickets related to “sync” issues in the last month?", "response": "sql SELECT * FROM SupportTickets WHERE LOWER(description) LIKE '%sync%' AND created_at >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "List all tickets where the subject contains the word “goal”.", "response": "sql SELECT * FROM SupportTickets WHERE LOWER(subject) LIKE '%goal%';"}
{"prompt": "Get all open tickets raised by users with the role ‘Freelancer’.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND role = 'Freelancer';"}
{"prompt": "Show the number of tickets raised each day over the last week.", "response": "sql SELECT DATE(created_at) AS day, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY DATE(created_at);"}
{"prompt": "Which users had their tickets resolved within 1 hour?", "response": "sql SELECT raised_by_id, ticket_id FROM SupportTickets WHERE resolved_at IS NOT NULL AND resolved_at - created_at <= INTERVAL '1 hour';"}
{"prompt": "Retrieve all support tickets related to “dashboard” issues.", "response": "sql SELECT * FROM SupportTickets WHERE LOWER(subject) LIKE '%dashboard%' OR LOWER(description) LIKE '%dashboard%';"}
{"prompt": "Find the total number of tickets raised by each role type.", "response": "sql SELECT role, COUNT(*) AS ticket_count FROM SupportTickets GROUP BY role;"}
{"prompt": "Show all support tickets resolved today.", "response": "sql SELECT * FROM SupportTickets WHERE DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "Which users have active tickets and haven't logged in during the last 7 days?", "response": "sql SELECT u.username, u.last_login, s.ticket_id FROM Users u JOIN SupportTickets s ON u.user_id = s.raised_by_id WHERE s.status != 'Resolved' AND u.last_login < CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List the 5 most recent support tickets.", "response": "sql SELECT * FROM SupportTickets ORDER BY created_at DESC LIMIT 5;"}
{"prompt": "Which users have submitted tickets but haven't registered within the last 30 days?", "response": "sql SELECT DISTINCT u.username FROM Users u JOIN SupportTickets s ON u.user_id = s.raised_by_id WHERE u.registration_date < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Identify any ticket that includes “reminder” in the subject or description.", "response": "sql SELECT * FROM SupportTickets WHERE LOWER(subject) LIKE '%reminder%' OR LOWER(description) LIKE '%reminder%';"}
{"prompt": "How many support tickets were submitted during this quarter?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE created_at >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Pull details of all tickets raised by a specific user — say, Rajiv.", "response": "sql SELECT s.* FROM SupportTickets s JOIN Users u ON s.raised_by_id = u.user_id WHERE u.username = 'Rajiv';"}
{"prompt": "List all users who have open support tickets and their email addresses.", "response": "sql SELECT u.username, u.email, s.ticket_id FROM Users u JOIN SupportTickets s ON u.user_id = s.raised_by_id WHERE s.status != 'Resolved';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Show me all marketing campaigns we've launched so far.", "response": "sql SELECT * FROM MarketingCampaigns;"}
{"prompt": "List all campaigns that started during the last festive season (October to December).", "response": "sql SELECT * FROM MarketingCampaigns WHERE EXTRACT(MONTH FROM start_date) BETWEEN 10 AND 12;"}
{"prompt": "Which campaigns ended in the last 30 days?", "response": "sql SELECT * FROM MarketingCampaigns WHERE end_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "How many campaigns targeted young professionals?", "response": "sql SELECT COUNT(*) FROM MarketingCampaigns WHERE LOWER(target_audience) LIKE '%young professional%';"}
{"prompt": "Show campaigns where the allocated budget was above ₹50,000.", "response": "sql SELECT * FROM MarketingCampaigns WHERE budget > 50000;"}
{"prompt": "List campaign names that are currently active.", "response": "sql SELECT name FROM MarketingCampaigns WHERE CURRENT_DATE BETWEEN start_date AND end_date;"}
{"prompt": "Get total marketing budget used in this quarter.", "response": "sql SELECT SUM(budget) AS total_budget FROM MarketingCampaigns WHERE start_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which campaign had the highest budget allocation?", "response": "sql SELECT * FROM MarketingCampaigns ORDER BY budget DESC LIMIT 1;"}
{"prompt": "Find campaigns specifically targeted at freelancers.", "response": "sql SELECT * FROM MarketingCampaigns WHERE LOWER(target_audience) LIKE '%freelancer%';"}
{"prompt": "Show campaigns that ran during the current year.", "response": "sql SELECT * FROM MarketingCampaigns WHERE EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "Identify all campaigns that lasted longer than 30 days.", "response": "sql SELECT * FROM MarketingCampaigns WHERE end_date - start_date > 30;"}
{"prompt": "How many campaigns targeted families or included the keyword ‘family’?", "response": "sql SELECT COUNT(*) FROM MarketingCampaigns WHERE LOWER(target_audience) LIKE '%family%';"}
{"prompt": "Retrieve campaigns launched before the “Smart Alerts” feature was introduced (e.g., before Jan 2024).", "response": "sql SELECT * FROM MarketingCampaigns WHERE start_date < '2024-01-01';"}
{"prompt": "What is the average budget spent across all campaigns?", "response": "sql SELECT AVG(budget) AS average_budget FROM MarketingCampaigns;"}
{"prompt": "Which campaign started on the same day as another?", "response": "sql SELECT * FROM MarketingCampaigns WHERE start_date IN (SELECT start_date FROM MarketingCampaigns GROUP BY start_date HAVING COUNT(*) > 1);"}
{"prompt": "List campaigns that ended before they reached 15 days.", "response": "sql SELECT * FROM MarketingCampaigns WHERE end_date - start_date < 15;"}
{"prompt": "Show the names and durations (in days) of all campaigns.", "response": "sql SELECT name, end_date - start_date AS duration_days FROM MarketingCampaigns;"}
{"prompt": "Identify campaigns that were likely holiday-related (targeting includes ‘Diwali’ or ‘Christmas’).", "response": "sql SELECT * FROM MarketingCampaigns WHERE LOWER(target_audience) LIKE '%diwali%' OR LOWER(target_audience) LIKE '%christmas%';"}
{"prompt": "List all campaigns whose names contain the word “budget”.", "response": "sql SELECT * FROM MarketingCampaigns WHERE LOWER(name) LIKE '%budget%';"}
{"prompt": "How many campaigns were focused on user retention?", "response": "sql SELECT COUNT(*) FROM MarketingCampaigns WHERE LOWER(target_audience) LIKE '%retention%';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Show me all user log actions for audit purposes.", "response": "sql SELECT * FROM UsersAuditLogs;"}
{"prompt": "Find all users who logged in today.", "response": "sql SELECT * FROM Users WHERE DATE(last_login) = CURRENT_DATE;"}
{"prompt": "Retrieve IP addresses used in the last 24 hours.", "response": "sql SELECT DISTINCT ip_address FROM UsersAuditLogs WHERE timestamp >= NOW() - INTERVAL '24 hours';"}
{"prompt": "List all actions taken by the user with user_id = 105.", "response": "sql SELECT * FROM UsersAuditLogs WHERE user_id = 105;"}
{"prompt": "Identify failed login attempts or suspicious actions in logs.", "response": "sql SELECT * FROM UsersAuditLogs WHERE LOWER(action) LIKE '%failed%' OR LOWER(action) LIKE '%unauthorized%';"}
{"prompt": "Show me users who haven’t logged in for more than 60 days.", "response": "sql SELECT * FROM Users WHERE last_login < NOW() - INTERVAL '60 days';"}
{"prompt": "List all audit logs generated in the past week.", "response": "sql SELECT * FROM UsersAuditLogs WHERE timestamp >= NOW() - INTERVAL '7 days';"}
{"prompt": "Find how many actions were logged from IP '192.168.1.1'.", "response": "sql SELECT COUNT(*) FROM UsersAuditLogs WHERE ip_address = '192.168.1.1';"}
{"prompt": "Show all users who registered in the past month.", "response": "sql SELECT * FROM Users WHERE registration_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "How many login actions happened between 8 AM and 10 AM today?", "response": "sql SELECT COUNT(*) FROM UsersAuditLogs WHERE action = 'login' AND timestamp::time BETWEEN '08:00:00' AND '10:00:00' AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "Identify users who logged in from multiple IPs.", "response": "sql SELECT user_id FROM UsersAuditLogs GROUP BY user_id HAVING COUNT(DISTINCT ip_address) > 1;"}
{"prompt": "Retrieve all audit logs for users with the 'admin' role.", "response": "sql SELECT ual.* FROM UsersAuditLogs ual JOIN Users u ON ual.user_id = u.user_id WHERE u.role = 'admin';"}
{"prompt": "Find users whose credentials might be at risk (same phone/email combo).", "response": "sql SELECT phone, email, COUNT(*) FROM Users GROUP BY phone, email HAVING COUNT(*) > 1;"}
{"prompt": "List accounts that were created but never logged in.", "response": "sql SELECT * FROM Users WHERE last_login IS NULL;"}
{"prompt": "Get a daily count of actions logged over the past week.", "response": "sql SELECT DATE(timestamp) AS day, COUNT(*) AS total_actions FROM UsersAuditLogs WHERE timestamp >= NOW() - INTERVAL '7 days' GROUP BY day ORDER BY day;"}
{"prompt": "Find users who performed more than 50 actions this month.", "response": "sql SELECT user_id, COUNT(*) AS action_count FROM UsersAuditLogs WHERE DATE_TRUNC('month', timestamp) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY user_id HAVING COUNT(*) > 50;"}
{"prompt": "Detect simultaneous logins from two locations for the same user.", "response": "sql SELECT user_id FROM UsersAuditLogs GROUP BY user_id, timestamp HAVING COUNT(DISTINCT ip_address) > 1;"}
{"prompt": "Check if any users registered using disposable email domains.", "response": "```sql SELECT * FROM Users WHERE email SIMILAR TO '%@(tempmail"}
{"prompt": "List all accounts registered between 10 PM and 6 AM (odd hours).", "response": "sql SELECT * FROM Users WHERE registration_date::time < '06:00:00' OR registration_date::time >= '22:00:00';"}
{"prompt": "Find which users accessed the system during the weekend.", "response": "sql SELECT DISTINCT user_id FROM UsersAuditLogs WHERE EXTRACT(DOW FROM timestamp) IN (0, 6);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "I want to see how many users signed up each day this past week.", "response": "sql SELECT registration_date, COUNT(*) AS signups FROM Users WHERE registration_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY registration_date ORDER BY registration_date;"}
{"prompt": "Which users haven't logged in since signing up?", "response": "sql SELECT * FROM Users WHERE last_login IS NULL;"}
{"prompt": "Identify users who set budgets but haven't made any transactions yet.", "response": "sql SELECT u.user_id, u.username FROM Users u JOIN Budgets b ON u.user_id = b.user_id LEFT JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.transaction_id IS NULL;"}
{"prompt": "Show me the most common budget names users create.", "response": "sql SELECT name, COUNT(*) AS freq FROM Budgets GROUP BY name ORDER BY freq DESC;"}
{"prompt": "List users who have created more than 3 budgets.", "response": "sql SELECT user_id, COUNT(*) AS budget_count FROM Budgets GROUP BY user_id HAVING COUNT(*) > 3;"}
{"prompt": "What categories are used most often in transactions?", "response": "sql SELECT category, COUNT(*) AS usage_count FROM Transactions GROUP BY category ORDER BY usage_count DESC;"}
{"prompt": "How many users have at least one transaction recorded?", "response": "sql SELECT COUNT(DISTINCT b.user_id) FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id;"}
{"prompt": "Find the total transaction volume in the last 30 days.", "response": "sql SELECT SUM(amount) AS total_volume FROM Transactions WHERE date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which users made more than ₹50,000 in expenses last month?", "response": "sql SELECT b.user_id, SUM(t.amount) AS total_expense FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.type = 'expense' AND t.date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND t.date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY b.user_id HAVING SUM(t.amount) > 50000;"}
{"prompt": "What is the average number of transactions per user?", "response": "sql SELECT AVG(t_count) FROM (SELECT COUNT(*) AS t_count FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id GROUP BY b.user_id) AS sub;"}
{"prompt": "Identify drop-off patterns: users who created a budget but never logged back in.", "response": "sql SELECT u.user_id, u.username FROM Users u JOIN Budgets b ON u.user_id = b.user_id WHERE u.last_login = u.registration_date;"}
{"prompt": "What is the retention rate of users who created a budget within their first week?", "response": "sql SELECT COUNT(DISTINCT u.user_id) AS retained FROM Users u JOIN Budgets b ON u.user_id = b.user_id WHERE b.start_date <= u.registration_date + INTERVAL '7 days' AND u.last_login > u.registration_date + INTERVAL '30 days';"}
{"prompt": "Show average savings (income - expenses) per user this month.", "response": "sql SELECT b.user_id, SUM(CASE WHEN t.type = 'income' THEN t.amount ELSE -t.amount END) AS net_saving FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id WHERE t.date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY b.user_id;"}
{"prompt": "List transaction count trend over the past 14 days.", "response": "sql SELECT date, COUNT(*) AS total_transactions FROM Transactions WHERE date >= CURRENT_DATE - INTERVAL '14 days' GROUP BY date ORDER BY date;"}
{"prompt": "What is the average budget size (total_amount) set by users?", "response": "sql SELECT AVG(total_amount) AS avg_budget_size FROM Budgets;"}
{"prompt": "Which day of the week has the highest number of transactions?", "response": "sql SELECT EXTRACT(DOW FROM date) AS day_of_week, COUNT(*) AS transaction_count FROM Transactions GROUP BY day_of_week ORDER BY transaction_count DESC;"}
{"prompt": "Show the top 5 users with highest total transaction volume.", "response": "sql SELECT b.user_id, SUM(t.amount) AS total_volume FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id GROUP BY b.user_id ORDER BY total_volume DESC LIMIT 5;"}
{"prompt": "List users with more income transactions than expense transactions.", "response": "sql SELECT b.user_id FROM Budgets b JOIN Transactions t ON b.budget_id = t.budget_id GROUP BY b.user_id HAVING SUM(CASE WHEN t.type = 'income' THEN 1 ELSE 0 END) > SUM(CASE WHEN t.type = 'expense' THEN 1 ELSE 0 END);"}
{"prompt": "How many users created their first budget within 3 days of registering?", "response": "sql SELECT COUNT(DISTINCT u.user_id) FROM Users u JOIN Budgets b ON u.user_id = b.user_id WHERE b.start_date <= u.registration_date + INTERVAL '3 days';"}
{"prompt": "What is the average number of budgets per user across the system?", "response": "sql SELECT AVG(budget_count) FROM (SELECT COUNT(*) AS budget_count FROM Budgets GROUP BY user_id) AS sub;"}
{"prompt": "Compliance / Audit Team", "response": "nan"}
{"prompt": "List all user data access logs from the past 7 days.", "response": "sql SELECT * FROM AccessLogs WHERE access_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show all third-party API calls made in the last month.", "response": "sql SELECT * FROM APICalls WHERE call_time >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which users have modified their sharing permissions in the last 14 days?", "response": "sql SELECT user_id, change_time, old_permissions, new_permissions FROM PermissionChanges WHERE change_time >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "Find all transactions that failed compliance validation checks.", "response": "sql SELECT * FROM Transactions WHERE compliance_flag = 'FAIL';"}
{"prompt": "Identify any users with more than 3 permission changes in a month.", "response": "sql SELECT user_id, COUNT(*) AS change_count FROM PermissionChanges WHERE change_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY user_id HAVING COUNT(*) > 3;"}
{"prompt": "List all user data exports in the last quarter.", "response": "sql SELECT * FROM DataExports WHERE export_date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Show all users who shared budgets without logging consent.", "response": "sql SELECT sb.user_id FROM SharedBudgets sb LEFT JOIN ConsentLogs cl ON sb.user_id = cl.user_id WHERE cl.consent_type = 'share_budget' AND cl.status IS NULL;"}
{"prompt": "Which transactions were modified after being finalized?", "response": "sql SELECT * FROM Transactions WHERE is_finalized = TRUE AND modified_at > created_at;"}
{"prompt": "Find users whose data access was outside of allowed roles.", "response": "sql SELECT * FROM AccessLogs al JOIN Users u ON al.user_id = u.user_id WHERE al.accessed_by_role NOT IN ('admin', 'auditor', 'support');"}
{"prompt": "List all system audits conducted in the last 90 days.", "response": "sql SELECT * FROM AuditEvents WHERE event_time >= CURRENT_DATE - INTERVAL '90 days';"}
{"prompt": "How many recurring transactions were tagged inconsistently?", "response": "sql SELECT COUNT(*) FROM Transactions WHERE type = 'recurring' AND category IS NULL;"}
{"prompt": "Show the number of users with export activity but no consent logged.", "response": "sql SELECT COUNT(DISTINCT de.user_id) FROM DataExports de LEFT JOIN ConsentLogs cl ON de.user_id = cl.user_id WHERE cl.consent_type != 'export' OR cl.status IS NULL;"}
{"prompt": "List all failed login attempts in the last week.", "response": "sql SELECT * FROM LoginAttempts WHERE status = 'fail' AND attempt_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Identify all users whose data was accessed by more than 2 employees in a single day.", "response": "sql SELECT user_id, access_date, COUNT(DISTINCT accessed_by) AS employee_count FROM AccessLogs GROUP BY user_id, access_date HAVING COUNT(DISTINCT accessed_by) > 2;"}
{"prompt": "Check users who revoked shared budget access within 24 hours of granting it.", "response": "sql SELECT user_id FROM SharedBudgetLogs WHERE action = 'grant' INTERSECT SELECT user_id FROM SharedBudgetLogs WHERE action = 'revoke' AND action_time <= grant_time + INTERVAL '1 day';"}
{"prompt": "Show budget records that were updated without a corresponding audit trail.", "response": "sql SELECT b.* FROM Budgets b LEFT JOIN AuditEvents a ON b.budget_id = a.budget_id WHERE a.budget_id IS NULL;"}
{"prompt": "How many times was each user’s data exported in the last month?", "response": "sql SELECT user_id, COUNT(*) AS export_count FROM DataExports WHERE export_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY user_id;"}
{"prompt": "Identify anomalies where transaction amounts exceed the user’s monthly income.", "response": "sql SELECT t.user_id, SUM(t.amount) AS total_expenses FROM Transactions t WHERE t.type = 'expense' AND t.date >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY t.user_id HAVING SUM(t.amount) > (SELECT SUM(amount) FROM Transactions WHERE user_id = t.user_id AND type = 'income' AND date >= DATE_TRUNC('month', CURRENT_DATE));"}
{"prompt": "Show consent logs that were created more than 30 days after account registration.", "response": "sql SELECT cl.* FROM ConsentLogs cl JOIN Users u ON cl.user_id = u.user_id WHERE cl.consent_date > u.registration_date + INTERVAL '30 days';"}
{"prompt": "Which internal team members accessed financial data outside business hours?", "response": "sql SELECT * FROM AccessLogs WHERE access_time::time NOT BETWEEN '09:00:00' AND '18:00:00' AND accessed_resource = 'financial_data';"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "What are the top 5 most-used features in the last 30 days?", "response": "sql SELECT feature_name, COUNT(*) AS usage_count FROM FeatureUsage WHERE usage_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY feature_name ORDER BY usage_count DESC LIMIT 5;"}
{"prompt": "How many users enabled the auto-tagging feature since its launch?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM FeatureUsage WHERE feature_name = 'auto_tagging' AND usage_date >= '2025-04-01';"}
{"prompt": "Show user retention rates for 7, 14, and 30 days.", "response": "sql SELECT cohort_day, retention_day, COUNT(DISTINCT user_id) AS retained_users FROM RetentionStats WHERE retention_day IN (7, 14, 30) GROUP BY cohort_day, retention_day;"}
{"prompt": "List users who enabled variable income mode in the past 2 weeks.", "response": "sql SELECT user_id, enabled_date FROM UserSettings WHERE setting_name = 'variable_income_mode' AND enabled_date >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "How many new financial goals were created after the gamification update?", "response": "sql SELECT COUNT(*) FROM FinancialGoals WHERE created_at >= '2025-03-15';"}
{"prompt": "What percentage of users complete their first goal within 30 days of registration?", "response": "sql SELECT ROUND((COUNT(DISTINCT fg.user_id)::decimal / (SELECT COUNT(*) FROM Users WHERE registration_date >= CURRENT_DATE - INTERVAL '30 days')) * 100, 2) AS completion_rate FROM FinancialGoals fg JOIN Users u ON fg.user_id = u.user_id WHERE fg.completed = TRUE AND fg.created_at <= u.registration_date + INTERVAL '30 days';"}
{"prompt": "Find average number of feedback tickets per active user.", "response": "sql SELECT ROUND(COUNT(*)::decimal / (SELECT COUNT(DISTINCT user_id) FROM UserActivity WHERE activity_date >= CURRENT_DATE - INTERVAL '30 days'), 2) AS avg_tickets_per_user FROM FeedbackTickets WHERE created_at >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which features have the highest drop-off rates during onboarding?", "response": "sql SELECT step_name, COUNT(*) AS drop_offs FROM OnboardingSteps WHERE status = 'incomplete' GROUP BY step_name ORDER BY drop_offs DESC;"}
{"prompt": "How many users activated digital wallet integration in Q2?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM WalletIntegrations WHERE integration_date BETWEEN '2025-04-01' AND '2025-06-30';"}
{"prompt": "Which feature improvements led to the highest increase in engagement?", "response": "sql SELECT feature_name, engagement_lift FROM FeatureImpact ORDER BY engagement_lift DESC LIMIT 5;"}
{"prompt": "What are the top reasons users give for canceling their accounts?", "response": "sql SELECT reason, COUNT(*) AS count FROM CancellationFeedback GROUP BY reason ORDER BY count DESC;"}
{"prompt": "How many transactions were manually re-categorized by users last month?", "response": "sql SELECT COUNT(*) FROM TransactionEdits WHERE edit_type = 'recategorize' AND edit_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "What’s the average daily active users (DAU) for the last 7 days?", "response": "sql SELECT ROUND(AVG(daily_users), 2) FROM (SELECT COUNT(DISTINCT user_id) AS daily_users FROM UserActivity WHERE activity_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY activity_date) AS sub;"}
{"prompt": "Show the success rate of tooltips (clicked vs. shown).", "response": "sql SELECT tooltip_id, ROUND((SUM(clicked)::decimal / COUNT(*)) * 100, 2) AS success_rate FROM TooltipEvents GROUP BY tooltip_id;"}
{"prompt": "How many users interacted with the confetti animation after goal completion?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM FeatureUsage WHERE feature_name = 'goal_confetti';"}
{"prompt": "Which devices are most commonly used for expense logging?", "response": "sql SELECT device_type, COUNT(*) AS usage_count FROM FeatureUsage WHERE feature_name = 'expense_logging' GROUP BY device_type ORDER BY usage_count DESC;"}
{"prompt": "Find the average number of goals set per user.", "response": "sql SELECT ROUND(COUNT(*)::decimal / (SELECT COUNT(DISTINCT user_id) FROM FinancialGoals), 2) AS avg_goals_per_user FROM FinancialGoals;"}
{"prompt": "Which nudges have the highest click-through rate?", "response": "sql SELECT nudge_text, ROUND((SUM(clicked)::decimal / COUNT(*)) * 100, 2) AS ctr FROM Nudges GROUP BY nudge_text ORDER BY ctr DESC;"}
{"prompt": "How long do users take (on average) to complete their first goal?", "response": "sql SELECT ROUND(AVG(DATE_PART('day', completed_at - created_at)), 2) AS avg_days FROM FinancialGoals WHERE completed = TRUE;"}
{"prompt": "How many users turned off onboarding tips before finishing onboarding?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM UserSettings WHERE setting_name = 'onboarding_tips' AND value = 'off' AND user_id IN (SELECT user_id FROM OnboardingSteps WHERE status != 'completed');"}
{"prompt": "NewsPortal", "response": "nan"}
{"prompt": "Readers / Subscribers", "response": "nan"}
{"prompt": "What is my subscription status and when will it end?", "response": "sql SELECT status, end_date FROM Subscriptions WHERE reader_id = (SELECT user_id FROM Users WHERE email = 'ravi@example.com');"}
{"prompt": "When did I register on this platform?", "response": "sql SELECT registration_date FROM Users WHERE email = 'ravi@example.com';"}
{"prompt": "What was my last login time?", "response": "sql SELECT last_login FROM Users WHERE email = 'ravi@example.com';"}
{"prompt": "Show me the titles of all published articles.", "response": "sql SELECT title FROM Articles WHERE status = 'published';"}
{"prompt": "Which articles are in the 'Technology' category and already published?", "response": "sql SELECT title FROM Articles WHERE category = 'Technology' AND status = 'published';"}
{"prompt": "List all articles with the tag 'Finance'.", "response": "sql SELECT title FROM Articles WHERE tags LIKE '%Finance%' AND status = 'published';"}
{"prompt": "What articles were published today?", "response": "sql SELECT title FROM Articles WHERE DATE(publish_date) = CURRENT_DATE AND status = 'published';"}
{"prompt": "Which authors have written articles in the 'Politics' category?", "response": "sql SELECT DISTINCT U.first_name, U.last_name FROM Articles A JOIN Users U ON A.author_id = U.user_id WHERE A.category = 'Politics' AND A.status = 'published';"}
{"prompt": "Who is the editor of the article titled 'Budget 2025 Review'?", "response": "sql SELECT U.first_name, U.last_name FROM Articles A JOIN Users U ON A.editor_id = U.user_id WHERE A.title = 'Budget 2025 Review';"}
{"prompt": "List all categories available in the articles table.", "response": "sql SELECT DISTINCT category FROM Articles;"}
{"prompt": "What is the duration of my current subscription?", "response": "sql SELECT start_date, end_date FROM Subscriptions WHERE reader_id = (SELECT user_id FROM Users WHERE email = 'ravi@example.com');"}
{"prompt": "What support tickets have I raised so far?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE email = 'ravi@example.com');"}
{"prompt": "Has any of my tickets been resolved recently?", "response": "sql SELECT ticket_id, subject, resolved_at FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE email = 'ravi@example.com') AND status = 'resolved' ORDER BY resolved_at DESC;"}
{"prompt": "Are there any active marketing campaigns running today?", "response": "sql SELECT name FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Which advertisements are currently live?", "response": "sql SELECT title FROM Advertisements WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND status = 'active';"}
{"prompt": "What system actions have been recorded for my account?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ravi@example.com');"}
{"prompt": "Who are the authors that have written at least one published article?", "response": "sql SELECT DISTINCT U.first_name, U.last_name FROM Articles A JOIN Users U ON A.author_id = U.user_id WHERE A.status = 'published';"}
{"prompt": "List all campaigns targeting readers.", "response": "sql SELECT name FROM MarketingCampaigns WHERE target_audience LIKE '%reader%';"}
{"prompt": "What analytics reports are available and when were they generated?", "response": "sql SELECT name, generated_on FROM AnalyticsReports;"}
{"prompt": "Show compliance checks and their statuses.", "response": "sql SELECT check_date, details, status FROM ComplianceRecords;"}
{"prompt": "Journalists / Reporters", "response": "nan"}
{"prompt": "What are the articles I've authored so far, along with their status and publish dates?", "response": "sql SELECT title, status, publish_date FROM Articles WHERE author_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com');"}
{"prompt": "Who edited the article titled “Classrooms of Corruption: Where the Children Learn Nothing, But the Funds Vanish”?", "response": "sql SELECT U.first_name, U.last_name FROM Articles A JOIN Users U ON A.editor_id = U.user_id WHERE A.title = 'Classrooms of Corruption: Where the Children Learn Nothing, But the Funds Vanish';"}
{"prompt": "Show all published articles in the “Investigative Reports” category.", "response": "sql SELECT title, publish_date FROM Articles WHERE category = 'Investigative Reports' AND status = 'published';"}
{"prompt": "When was my last login to the system?", "response": "sql SELECT last_login FROM Users WHERE email = 'ananya.bose@newsportal.com';"}
{"prompt": "What are the tags used in my recently published articles?", "response": "sql SELECT tags FROM Articles WHERE author_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com') AND status = 'published' ORDER BY publish_date DESC;"}
{"prompt": "Which of my articles are still under editorial review?", "response": "sql SELECT title FROM Articles WHERE author_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com') AND status = 'under review';"}
{"prompt": "Who are the editors working on investigative category articles?", "response": "sql SELECT DISTINCT U.first_name, U.last_name FROM Articles A JOIN Users U ON A.editor_id = U.user_id WHERE A.category = 'Investigative Reports';"}
{"prompt": "Are there any analytics reports generated for my published stories?", "response": "sql SELECT name, generated_on FROM AnalyticsReports WHERE name LIKE '%Ananya Bose%';"}
{"prompt": "Has any marketing campaign been linked to investigative journalism this month?", "response": "sql SELECT name FROM MarketingCampaigns WHERE target_audience LIKE '%investigative%' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Which advertisements are scheduled to run while my story is live?", "response": "sql SELECT title FROM Advertisements WHERE start_date <= (SELECT publish_date FROM Articles WHERE title = 'Classrooms of Corruption: Where the Children Learn Nothing, But the Funds Vanish') AND end_date >= (SELECT publish_date FROM Articles WHERE title = 'Classrooms of Corruption: Where the Children Learn Nothing, But the Funds Vanish');"}
{"prompt": "What system actions were logged under my user ID today?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What compliance records have been updated in the last 7 days?", "response": "sql SELECT check_date, details, status FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What’s the status of the latest support ticket I raised regarding whistleblower security tools?", "response": "sql SELECT subject, status FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "List all support tickets I raised that are still unresolved.", "response": "sql SELECT subject, created_at FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com') AND status != 'resolved';"}
{"prompt": "Who else has published articles in the “Rural Education” or “Public Policy” tags?", "response": "sql SELECT DISTINCT U.first_name, U.last_name FROM Articles A JOIN Users U ON A.author_id = U.user_id WHERE (A.tags LIKE '%Rural Education%' OR A.tags LIKE '%Public Policy%') AND A.status = 'published';"}
{"prompt": "What content pieces have been managed by the investigative content manager recently?", "response": "sql SELECT content_details, updated_at FROM ContentManagement WHERE content_type = 'Investigative';"}
{"prompt": "List all analytics reports generated this week.", "response": "sql SELECT name, generated_on FROM AnalyticsReports WHERE DATE(generated_on) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What articles in the “Education” category were published in the last 30 days?", "response": "sql SELECT title, publish_date FROM Articles WHERE category = 'Education' AND publish_date >= CURRENT_DATE - INTERVAL '30 days' AND status = 'published';"}
{"prompt": "What active advertisements are showing during this week’s publication window?", "response": "sql SELECT title FROM Advertisements WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND status = 'active';"}
{"prompt": "Has there been any system activity on my account outside office hours (9PM–7AM)?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ananya.bose@newsportal.com') AND (EXTRACT(HOUR FROM timestamp) < 7 OR EXTRACT(HOUR FROM timestamp) >= 21);"}
{"prompt": "Editors", "response": "nan"}
{"prompt": "What are the articles I've been assigned to edit?", "response": "sql SELECT title, status, publish_date FROM Articles WHERE editor_id = (SELECT user_id FROM Users WHERE email = 'meera.thomas@newsportal.com');"}
{"prompt": "Show me all articles currently under editorial review.", "response": "sql SELECT title, author_id FROM Articles WHERE status = 'under review';"}
{"prompt": "Which articles have I edited that were published this month?", "response": "sql SELECT title, publish_date FROM Articles WHERE editor_id = (SELECT user_id FROM Users WHERE email = 'meera.thomas@newsportal.com') AND status = 'published' AND DATE_TRUNC('month', publish_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Who are the most active reporters contributing articles this week?", "response": "sql SELECT author_id, COUNT(*) AS total_articles FROM Articles WHERE publish_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY author_id ORDER BY total_articles DESC;"}
{"prompt": "Which articles in the “Politics” category are pending publication?", "response": "sql SELECT title FROM Articles WHERE category = 'Politics' AND status != 'published';"}
{"prompt": "List all op-ed articles that are already published.", "response": "sql SELECT title FROM Articles WHERE category = 'Op-Ed' AND status = 'published';"}
{"prompt": "What is the publishing schedule for today’s front-page articles?", "response": "sql SELECT title, publish_date FROM Articles WHERE status = 'published' AND DATE(publish_date) = CURRENT_DATE ORDER BY publish_date ASC;"}
{"prompt": "Which articles were published but didn’t have any editor assigned?", "response": "sql SELECT title FROM Articles WHERE status = 'published' AND editor_id IS NULL;"}
{"prompt": "What are the most recent updates in the content managed by my editorial team?", "response": "sql SELECT content_details, updated_at FROM ContentManagement WHERE manager_id = (SELECT user_id FROM Users WHERE email = 'meera.thomas@newsportal.com') ORDER BY updated_at DESC;"}
{"prompt": "Are there any unresolved support tickets from editorial staff?", "response": "sql SELECT subject, status FROM SupportTickets WHERE role = 'editor' AND status != 'resolved';"}
{"prompt": "What actions have I performed in the system today?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'meera.thomas@newsportal.com') AND DATE(timestamp) = CURRENT_DATE;"}
{"prompt": "What are the compliance updates relevant to editorial policy in the last 14 days?", "response": "sql SELECT check_date, details FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '14 days' AND details LIKE '%editorial%';"}
{"prompt": "Show me all marketing campaigns linked to opinion or feature content.", "response": "sql SELECT name, start_date, end_date FROM MarketingCampaigns WHERE target_audience LIKE '%opinion%' OR target_audience LIKE '%feature%';"}
{"prompt": "Which active advertisements are running during tonight’s front-page slot?", "response": "sql SELECT title FROM Advertisements WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE AND status = 'active';"}
{"prompt": "Which reports were generated this week that could influence editorial planning?", "response": "sql SELECT name, generated_on FROM AnalyticsReports WHERE DATE(generated_on) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Who are the top 5 most frequent article contributors across all categories?", "response": "sql SELECT U.first_name, U.last_name, COUNT(*) AS articles_count FROM Articles A JOIN Users U ON A.author_id = U.user_id GROUP BY U.first_name, U.last_name ORDER BY articles_count DESC LIMIT 5;"}
{"prompt": "What’s the publishing history for the tag “Corporate Tax Evasion”?", "response": "sql SELECT title, publish_date FROM Articles WHERE tags LIKE '%Corporate Tax Evasion%' ORDER BY publish_date DESC;"}
{"prompt": "Which published articles included legal scrutiny this month?", "response": "sql SELECT title FROM Articles WHERE tags LIKE '%legal%' AND status = 'published' AND publish_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What support issues have been raised by reporters under my supervision this quarter?", "response": "sql SELECT subject, created_at FROM SupportTickets WHERE role = 'reporter' AND created_at >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What are the articles that were edited by me but later flagged or ticketed for any issue?", "response": "sql SELECT A.title FROM Articles A JOIN SupportTickets T ON A.article_id = T.ticket_id WHERE A.editor_id = (SELECT user_id FROM Users WHERE email = 'meera.thomas@newsportal.com');"}
{"prompt": "Content Managers", "response": "nan"}
{"prompt": "What content pieces have I created or managed recently?", "response": "sql SELECT content_type, content_details, updated_at FROM ContentManagement WHERE manager_id = (SELECT user_id FROM Users WHERE email = 'rohan.mehta@newsportal.com') ORDER BY updated_at DESC;"}
{"prompt": "Show me the top 10 most recently updated content pieces I’m responsible for.", "response": "sql SELECT content_type, updated_at FROM ContentManagement WHERE manager_id = (SELECT user_id FROM Users WHERE email = 'rohan.mehta@newsportal.com') ORDER BY updated_at DESC LIMIT 10;"}
{"prompt": "Which articles related to health have been published this week?", "response": "sql SELECT title, publish_date FROM Articles WHERE category = 'Health' AND status = 'published' AND publish_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What content was scheduled or updated today across the platform?", "response": "sql SELECT content_type, content_details FROM ContentManagement WHERE DATE(updated_at) = CURRENT_DATE;"}
{"prompt": "Which articles are tagged with “heatwave” and already published?", "response": "sql SELECT title, publish_date FROM Articles WHERE tags LIKE '%heatwave%' AND status = 'published';"}
{"prompt": "Give me a list of all multimedia content I’m managing.", "response": "sql SELECT content_type, content_details FROM ContentManagement WHERE manager_id = (SELECT user_id FROM Users WHERE email = 'rohan.mehta@newsportal.com') AND content_type IN ('video', 'podcast', 'carousel');"}
{"prompt": "What is the update history of content I manage for the Lok Sabha debate?", "response": "sql SELECT content_details, updated_at FROM ContentManagement WHERE manager_id = (SELECT user_id FROM Users WHERE email = 'rohan.mehta@newsportal.com') AND content_details LIKE '%Lok Sabha debate%' ORDER BY updated_at DESC;"}
{"prompt": "Show me all ongoing marketing campaigns targeting political audiences.", "response": "sql SELECT name, start_date, end_date FROM MarketingCampaigns WHERE target_audience LIKE '%politics%' AND end_date >= CURRENT_DATE;"}
{"prompt": "What ads are scheduled to run during today’s live Lok Sabha coverage?", "response": "sql SELECT title, start_date, end_date FROM Advertisements WHERE status = 'active' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Have any compliance records been updated regarding content standards recently?", "response": "sql SELECT check_date, details FROM ComplianceRecords WHERE details LIKE '%content%' ORDER BY check_date DESC;"}
{"prompt": "Show me analytics reports generated this week for audience engagement.", "response": "sql SELECT name, generated_on FROM AnalyticsReports WHERE name LIKE '%engagement%' AND DATE(generated_on) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which articles were published today across all categories?", "response": "sql SELECT title, category FROM Articles WHERE status = 'published' AND DATE(publish_date) = CURRENT_DATE;"}
{"prompt": "What editorial content was updated by the team in the last 24 hours?", "response": "sql SELECT content_type, updated_at FROM ContentManagement WHERE updated_at >= NOW() - INTERVAL '1 day';"}
{"prompt": "Which support tickets were raised by editors or reporters today?", "response": "sql SELECT subject, role, created_at FROM SupportTickets WHERE role IN ('editor', 'reporter') AND DATE(created_at) = CURRENT_DATE;"}
{"prompt": "Show me any new compliance entries about regional content policies.", "response": "sql SELECT details, check_date FROM ComplianceRecords WHERE details LIKE '%regional%' ORDER BY check_date DESC;"}
{"prompt": "Which categories had the most articles published last week?", "response": "sql SELECT category, COUNT(*) AS published_count FROM Articles WHERE status = 'published' AND publish_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY category ORDER BY published_count DESC;"}
{"prompt": "What articles were edited today by the editorial team?", "response": "sql SELECT title, editor_id FROM Articles WHERE DATE(publish_date) = CURRENT_DATE AND status = 'published';"}
{"prompt": "What system actions have I performed in the last 2 days?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'rohan.mehta@newsportal.com') AND timestamp >= NOW() - INTERVAL '2 days';"}
{"prompt": "Are there any active advertisements that overlap with my campaign timelines?", "response": "sql SELECT title FROM Advertisements WHERE status = 'active' AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE;"}
{"prompt": "Which reports can guide my next week’s homepage content priorities?", "response": "sql SELECT name, data, generated_on FROM AnalyticsReports WHERE DATE(generated_on) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "What are the support tickets raised today by any user?", "response": "sql SELECT ticket_id, subject, role, status FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE;"}
{"prompt": "Show me all unresolved support tickets from the last 3 days.", "response": "sql SELECT ticket_id, subject, role, created_at FROM SupportTickets WHERE status != 'resolved' AND created_at >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "List all support tickets raised by subscribers.", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE role = 'subscriber';"}
{"prompt": "Find support tickets that were raised but not resolved within 24 hours.", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE status != 'resolved' AND created_at <= NOW() - INTERVAL '1 day';"}
{"prompt": "Which users have raised more than 3 tickets this month?", "response": "sql SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY raised_by_id HAVING COUNT(*) > 3;"}
{"prompt": "Show me issues tagged as “login issues” or “billing issues” in their subject lines.", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%login%' OR subject LIKE '%billing%';"}
{"prompt": "What tickets were raised by readers who are active subscribers?", "response": "sql SELECT s.ticket_id, s.subject, s.status FROM SupportTickets s JOIN Subscriptions sub ON s.raised_by_id = sub.reader_id WHERE sub.status = 'active';"}
{"prompt": "Which support tickets were resolved today?", "response": "sql SELECT ticket_id, subject, resolved_at FROM SupportTickets WHERE DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "Show me support issues raised by readers aged above 70 (Assuming user data includes age via phone support).", "response": "(Assuming manual tagging or not feasible with current schema; fallback query below)"}
{"prompt": "nan", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE description LIKE '%age 7%';"}
{"prompt": "Find subscribers who had subscription cancellation issues in the past week.", "response": "sql SELECT s.reader_id, u.first_name, u.last_name FROM SupportTickets s JOIN Users u ON s.raised_by_id = u.user_id WHERE s.subject LIKE '%cancel%' AND s.created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What issues were raised between 8 AM and 12 PM today?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE created_at BETWEEN CURRENT_DATE + INTERVAL '8 hour' AND CURRENT_DATE + INTERVAL '12 hour';"}
{"prompt": "Show all tickets raised by the same user who raised Ticket ID 1001.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT raised_by_id FROM SupportTickets WHERE ticket_id = 1001);"}
{"prompt": "Are there any support tickets still open from last week?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE status != 'resolved' AND created_at BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "Which roles (reader/editor/etc.) raise support requests most frequently?", "response": "sql SELECT role, COUNT(*) AS total_tickets FROM SupportTickets GROUP BY role ORDER BY total_tickets DESC;"}
{"prompt": "What are the most common complaint subjects from users in the last 10 days?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '10 days' GROUP BY subject ORDER BY count DESC;"}
{"prompt": "Which unresolved tickets are older than a week?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE status != 'resolved' AND created_at < CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show me the average resolution time for all resolved tickets.", "response": "sql SELECT AVG(resolved_at - created_at) AS avg_resolution_time FROM SupportTickets WHERE resolved_at IS NOT NULL;"}
{"prompt": "List all users who raised support tickets but never logged in after that.", "response": "sql SELECT DISTINCT u.user_id, u.first_name, u.last_name FROM Users u JOIN SupportTickets s ON u.user_id = s.raised_by_id WHERE u.last_login < s.created_at;"}
{"prompt": "Which users raised tickets for subscription issues and had their subscription status marked as 'cancelled'?", "response": "sql SELECT DISTINCT u.user_id, u.first_name, u.last_name FROM SupportTickets s JOIN Users u ON s.raised_by_id = u.user_id JOIN Subscriptions sub ON u.user_id = sub.reader_id WHERE s.subject LIKE '%subscription%' AND sub.status = 'cancelled';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "Which marketing campaigns are currently active?", "response": "sql SELECT campaign_id, name FROM MarketingCampaigns WHERE CURRENT_DATE BETWEEN start_date AND end_date;"}
{"prompt": "Show me all campaigns targeted to Gen Z.", "response": "sql SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%Gen Z%';"}
{"prompt": "List all campaigns that ended in the last 30 days.", "response": "sql SELECT campaign_id, name, end_date FROM MarketingCampaigns WHERE end_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which campaigns have a budget over 1 lakh INR?", "response": "sql SELECT name, budget FROM MarketingCampaigns WHERE budget > 100000;"}
{"prompt": "Find the total number of campaigns planned for this year.", "response": "sql SELECT COUNT(*) FROM MarketingCampaigns WHERE EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "List all campaigns that overlapped with the current month.", "response": "sql SELECT * FROM MarketingCampaigns WHERE start_date <= CURRENT_DATE AND end_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which campaign had the longest duration?", "response": "sql SELECT name, (end_date - start_date) AS duration FROM MarketingCampaigns ORDER BY duration DESC LIMIT 1;"}
{"prompt": "What is the average budget of campaigns launched in the past 6 months?", "response": "sql SELECT AVG(budget) AS avg_budget FROM MarketingCampaigns WHERE start_date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "List campaigns targeting regional language audiences.", "response": "sql SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%regional%';"}
{"prompt": "Show campaigns that ended without reaching their planned duration (Assuming planned duration = 30 days).", "response": "sql SELECT name, (end_date - start_date) AS actual_duration FROM MarketingCampaigns WHERE (end_date - start_date) < 30;"}
{"prompt": "List all campaigns sorted by highest to lowest budget.", "response": "sql SELECT name, budget FROM MarketingCampaigns ORDER BY budget DESC;"}
{"prompt": "Which campaigns are scheduled for future dates?", "response": "sql SELECT name, start_date FROM MarketingCampaigns WHERE start_date > CURRENT_DATE;"}
{"prompt": "Show marketing campaigns that ran during election months (e.g., May).", "response": "sql SELECT name, start_date, end_date FROM MarketingCampaigns WHERE EXTRACT(MONTH FROM start_date) = 5 OR EXTRACT(MONTH FROM end_date) = 5;"}
{"prompt": "What’s the total combined budget of all campaigns launched this quarter?", "response": "sql SELECT SUM(budget) AS total_quarter_budget FROM MarketingCampaigns WHERE start_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Find campaigns with keywords like 'subscription' or 'truth' in their names.", "response": "sql SELECT * FROM MarketingCampaigns WHERE name LIKE '%subscription%' OR name LIKE '%truth%';"}
{"prompt": "Which campaign ended most recently?", "response": "sql SELECT name, end_date FROM MarketingCampaigns WHERE end_date <= CURRENT_DATE ORDER BY end_date DESC LIMIT 1;"}
{"prompt": "List campaigns that were launched and ended within the same month.", "response": "sql SELECT * FROM MarketingCampaigns WHERE EXTRACT(MONTH FROM start_date) = EXTRACT(MONTH FROM end_date) AND EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM end_date);"}
{"prompt": "Which campaign targeted metro commuters (via posters)?", "response": "sql SELECT * FROM MarketingCampaigns WHERE target_audience LIKE '%metro%';"}
{"prompt": "Show campaigns that overlap with each other (self-join).", "response": "sql SELECT a.name AS campaign_1, b.name AS campaign_2 FROM MarketingCampaigns a JOIN MarketingCampaigns b ON a.campaign_id != b.campaign_id AND a.start_date <= b.end_date AND b.start_date <= a.end_date;"}
{"prompt": "What is the earliest campaign we ever launched?", "response": "sql SELECT name, start_date FROM MarketingCampaigns ORDER BY start_date ASC LIMIT 1;"}
{"prompt": "Advertising / Sales Staff", "response": "nan"}
{"prompt": "Which advertisements are currently running today?", "response": "sql SELECT ad_id, title FROM Advertisements WHERE CURRENT_DATE BETWEEN start_date AND end_date AND status = 'active';"}
{"prompt": "List all advertisements that have expired.", "response": "sql SELECT ad_id, title, end_date FROM Advertisements WHERE end_date < CURRENT_DATE;"}
{"prompt": "Show all ads created by a specific sales staff, say staff ID 5.", "response": "sql SELECT * FROM Advertisements WHERE sales_staff_id = 5;"}
{"prompt": "Find the total number of advertisements by each sales staff.", "response": "sql SELECT sales_staff_id, COUNT(*) AS ad_count FROM Advertisements GROUP BY sales_staff_id;"}
{"prompt": "Which ads have a status marked as ‘pending’?", "response": "sql SELECT * FROM Advertisements WHERE status = 'pending';"}
{"prompt": "Which ad is scheduled to start next?", "response": "sql SELECT * FROM Advertisements WHERE start_date > CURRENT_DATE ORDER BY start_date ASC LIMIT 1;"}
{"prompt": "List all ads that ran longer than 30 days.", "response": "sql SELECT ad_id, title, (end_date - start_date) AS duration FROM Advertisements WHERE (end_date - start_date) > 30;"}
{"prompt": "What is the count of currently active ads per sales staff?", "response": "sql SELECT sales_staff_id, COUNT(*) AS active_ads FROM Advertisements WHERE status = 'active' AND CURRENT_DATE BETWEEN start_date AND end_date GROUP BY sales_staff_id;"}
{"prompt": "Show all ads sorted by start date (newest first).", "response": "sql SELECT * FROM Advertisements ORDER BY start_date DESC;"}
{"prompt": "Which advertisements are overlapping in time?", "response": "sql SELECT a.ad_id AS ad_1, b.ad_id AS ad_2 FROM Advertisements a JOIN Advertisements b ON a.ad_id != b.ad_id AND a.start_date <= b.end_date AND b.start_date <= a.end_date;"}
{"prompt": "Show titles of ads that are active and run across the app and website. (Assuming content implies cross-platform)", "response": "sql SELECT title FROM Advertisements WHERE status = 'active' AND CURRENT_DATE BETWEEN start_date AND end_date AND content LIKE '%app%' AND content LIKE '%website%';"}
{"prompt": "Which ads were published during election months (e.g., April–May)?", "response": "sql SELECT * FROM Advertisements WHERE EXTRACT(MONTH FROM start_date) IN (4, 5);"}
{"prompt": "List the longest-running advertisement.", "response": "sql SELECT title, (end_date - start_date) AS duration FROM Advertisements ORDER BY duration DESC LIMIT 1;"}
{"prompt": "Which ad is scheduled to end today?", "response": "sql SELECT * FROM Advertisements WHERE end_date = CURRENT_DATE;"}
{"prompt": "Count of total advertisements launched this year.", "response": "sql SELECT COUNT(*) FROM Advertisements WHERE EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "Show ad content for all currently running campaigns to check brand alignment.", "response": "sql SELECT title, content FROM Advertisements WHERE CURRENT_DATE BETWEEN start_date AND end_date AND status = 'active';"}
{"prompt": "Which sales staff member handled the most advertisements?", "response": "sql SELECT sales_staff_id, COUNT(*) AS ad_count FROM Advertisements GROUP BY sales_staff_id ORDER BY ad_count DESC LIMIT 1;"}
{"prompt": "List all ads whose titles contain the keyword “awareness”.", "response": "sql SELECT * FROM Advertisements WHERE title LIKE '%awareness%';"}
{"prompt": "What are the IDs of all ads that were paused manually? (Assuming status = 'paused')", "response": "sql SELECT ad_id FROM Advertisements WHERE status = 'paused';"}
{"prompt": "Which ads began and ended in the same month?", "response": "sql SELECT * FROM Advertisements WHERE EXTRACT(MONTH FROM start_date) = EXTRACT(MONTH FROM end_date) AND EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM end_date);"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which users logged in today?", "response": "sql SELECT user_id, name, last_login FROM Users WHERE DATE(last_login) = CURRENT_DATE;"}
{"prompt": "How many users have not logged in for the past 30 days?", "response": "sql SELECT COUNT(*) FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Show all users with 2FA enabled.", "response": "sql SELECT user_id, name FROM Users WHERE two_factor_enabled = TRUE;"}
{"prompt": "List all users with admin roles.", "response": "sql SELECT * FROM Users WHERE role = 'admin';"}
{"prompt": "Which users have the highest number of failed login attempts?", "response": "sql SELECT user_id, name, failed_logins FROM Users ORDER BY failed_logins DESC;"}
{"prompt": "Find total storage used by each user (assuming storage_used_mb column exists).", "response": "sql SELECT user_id, name, storage_used_mb FROM Users ORDER BY storage_used_mb DESC;"}
{"prompt": "Which users registered via a suspicious IP address pattern (e.g., from Tor exit nodes)?", "response": "sql SELECT * FROM Users WHERE ip_address LIKE '185.%' OR ip_address LIKE '104.%';"}
{"prompt": "List of users whose accounts were locked in the past 7 days.", "response": "sql SELECT * FROM Users WHERE account_status = 'locked' AND DATE(updated_at) >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the average page load time from server logs? (Assume table ServerLogs with page_load_time_ms)", "response": "sql SELECT AVG(page_load_time_ms) FROM ServerLogs;"}
{"prompt": "List all system admin activities in the last 24 hours (assuming AdminLogs table).", "response": "sql SELECT * FROM AdminLogs WHERE activity_time >= NOW() - INTERVAL '1 day';"}
{"prompt": "Which users are accessing the system from outdated browsers?", "response": "sql SELECT user_id, browser FROM Users WHERE browser LIKE '%IE%' OR browser LIKE '%Internet Explorer%';"}
{"prompt": "Identify top 5 IPs with the highest number of login attempts.", "response": "sql SELECT ip_address, COUNT(*) AS login_attempts FROM LoginLogs GROUP BY ip_address ORDER BY login_attempts DESC LIMIT 5;"}
{"prompt": "Which articles are most frequently accessed via mobile app? (Assume AccessLogs table)", "response": "sql SELECT article_id, COUNT(*) AS views FROM AccessLogs WHERE platform = 'mobile_app' GROUP BY article_id ORDER BY views DESC;"}
{"prompt": "Find users accessing from more than 3 different countries. (Assume LoginLogs has country info)", "response": "sql SELECT user_id FROM LoginLogs GROUP BY user_id HAVING COUNT(DISTINCT country) > 3;"}
{"prompt": "List users with encrypted communication enabled.", "response": "sql SELECT * FROM Users WHERE encryption_enabled = TRUE;"}
{"prompt": "Which system components had downtime last week? (Assume SystemStatusLogs table)", "response": "sql SELECT component_name, downtime_start, downtime_end FROM SystemStatusLogs WHERE downtime_start >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show top 10 most accessed articles in the past 24 hours.", "response": "sql SELECT article_id, COUNT(*) AS views FROM AccessLogs WHERE access_time >= NOW() - INTERVAL '1 day' GROUP BY article_id ORDER BY views DESC LIMIT 10;"}
{"prompt": "How many users are concurrently online right now? (Assume session tracking)", "response": "sql SELECT COUNT(*) FROM UserSessions WHERE is_active = TRUE;"}
{"prompt": "Which users recently updated their passwords?", "response": "sql SELECT user_id, name, password_updated_at FROM Users WHERE password_updated_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Find the top system errors by frequency from logs. (Assume ErrorLogs table)", "response": "sql SELECT error_type, COUNT(*) AS occurrences FROM ErrorLogs GROUP BY error_type ORDER BY occurrences DESC;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which articles received the highest number of views in the past 24 hours?", "response": "sql SELECT article_id, COUNT(*) AS views FROM AccessLogs WHERE access_time >= NOW() - INTERVAL '1 day' GROUP BY article_id ORDER BY views DESC;"}
{"prompt": "What is the average scroll depth per article? (Assume scroll_depth in AccessLogs)", "response": "sql SELECT article_id, AVG(scroll_depth) AS avg_scroll FROM AccessLogs GROUP BY article_id;"}
{"prompt": "Which articles have a bounce rate higher than 70%? (Assume ArticlesAnalytics has bounce_rate)", "response": "sql SELECT article_id, title, bounce_rate FROM ArticlesAnalytics WHERE bounce_rate > 70;"}
{"prompt": "How many new subscribers came from Maharashtra in the last 7 days?", "response": "sql SELECT COUNT(*) FROM Users WHERE state = 'Maharashtra' AND subscription_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List the most engaging article formats by average time spent. (Assume Articles has format)", "response": "sql SELECT format, AVG(time_spent_seconds) AS avg_time FROM AccessLogs JOIN Articles USING(article_id) GROUP BY format ORDER BY avg_time DESC;"}
{"prompt": "What device types are most commonly used by subscribers?", "response": "sql SELECT device_type, COUNT(*) FROM AccessLogs WHERE user_id IN (SELECT user_id FROM Users WHERE is_subscriber = TRUE) GROUP BY device_type ORDER BY COUNT(*) DESC;"}
{"prompt": "When are readers most active throughout the day? (by hour)", "response": "sql SELECT EXTRACT(HOUR FROM access_time) AS hour, COUNT(*) AS views FROM AccessLogs GROUP BY hour ORDER BY hour;"}
{"prompt": "Which tags or topics attract the most new subscribers?", "response": "sql SELECT tag, COUNT(DISTINCT Users.user_id) AS new_subs FROM Articles JOIN ArticleTags USING(article_id) JOIN AccessLogs USING(article_id) JOIN Users ON AccessLogs.user_id = Users.user_id WHERE subscription_date = DATE(access_time) GROUP BY tag ORDER BY new_subs DESC;"}
{"prompt": "Which users read the highest number of articles last month?", "response": "sql SELECT user_id, COUNT(*) AS reads FROM AccessLogs WHERE access_time >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND access_time < DATE_TRUNC('month', CURRENT_DATE) GROUP BY user_id ORDER BY reads DESC;"}
{"prompt": "Identify top 5 articles with the lowest average reading time.", "response": "sql SELECT article_id, AVG(time_spent_seconds) AS avg_time FROM AccessLogs GROUP BY article_id ORDER BY avg_time ASC LIMIT 5;"}
{"prompt": "Which articles had the highest conversion rate to subscription?", "response": "sql SELECT article_id, COUNT(DISTINCT Users.user_id) * 1.0 / NULLIF(COUNT(AccessLogs.access_id), 0) AS conversion_rate FROM AccessLogs JOIN Users ON AccessLogs.user_id = Users.user_id WHERE Users.subscription_date = DATE(AccessLogs.access_time) GROUP BY article_id ORDER BY conversion_rate DESC;"}
{"prompt": "What’s the retention rate of users who visited the homepage first? (Assume referrer_page)", "response": "sql SELECT COUNT(DISTINCT user_id) FILTER (WHERE DATE_TRUNC('day', first_visit) != CURRENT_DATE) * 1.0 / COUNT(DISTINCT user_id) AS retention_rate FROM (SELECT user_id, MIN(access_time) AS first_visit FROM AccessLogs WHERE referrer_page = 'homepage' GROUP BY user_id) AS homepage_users;"}
{"prompt": "How many readers accessed articles using mobile devices today?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM AccessLogs WHERE device_type = 'mobile' AND DATE(access_time) = CURRENT_DATE;"}
{"prompt": "Which cities have the highest growth in new users this week?", "response": "sql SELECT city, COUNT(*) AS new_users FROM Users WHERE registration_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY city ORDER BY new_users DESC;"}
{"prompt": "Which A/B test variant had better engagement time? (Assume ABTests and variant_id)", "response": "sql SELECT variant_id, AVG(time_spent_seconds) AS avg_time FROM AccessLogs WHERE test_name = 'homepage_redesign' GROUP BY variant_id ORDER BY avg_time DESC;"}
{"prompt": "What’s the average time to convert a visitor into a subscriber?", "response": "sql SELECT AVG(subscription_date - registration_date) AS avg_days_to_subscribe FROM Users WHERE subscription_date IS NOT NULL;"}
{"prompt": "Detect users showing potential bot activity (e.g., >1000 reads/day).", "response": "sql SELECT user_id, COUNT(*) AS reads FROM AccessLogs WHERE access_time >= CURRENT_DATE GROUP BY user_id HAVING COUNT(*) > 1000;"}
{"prompt": "Show all active users who accessed from more than 3 devices this week.", "response": "sql SELECT user_id FROM AccessLogs WHERE access_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY user_id HAVING COUNT(DISTINCT device_id) > 3;"}
{"prompt": "What’s the click-through rate for homepage banners? (Assume BannerClicks, BannerImpressions)", "response": "sql SELECT banner_id, (SUM(clicks) * 1.0 / NULLIF(SUM(impressions), 0)) AS ctr FROM BannerMetrics GROUP BY banner_id ORDER BY ctr DESC;"}
{"prompt": "Which articles had unusually low engagement compared to their views?", "response": "sql SELECT article_id, AVG(time_spent_seconds) AS avg_time, COUNT(*) AS views FROM AccessLogs GROUP BY article_id HAVING COUNT(*) > 100 AND AVG(time_spent_seconds) < 10 ORDER BY views DESC;"}
{"prompt": "Compliance / Legal Team", "response": "nan"}
{"prompt": "Which articles have been flagged for legal review in the past 7 days?", "response": "sql SELECT article_id, title, flagged_date FROM Articles WHERE is_legal_flagged = TRUE AND flagged_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many investigative reports have required fact-verification support?", "response": "sql SELECT COUNT(*) FROM Articles WHERE category = 'Investigative' AND fact_verified = TRUE;"}
{"prompt": "List all articles that were issued a legal notice.", "response": "sql SELECT article_id, notice_id, notice_date, reason FROM LegalNotices;"}
{"prompt": "Which flagged articles involve political topics?", "response": "sql SELECT article_id, title FROM Articles WHERE is_legal_flagged = TRUE AND topic = 'Politics';"}
{"prompt": "How many branded content pieces were reviewed by the legal team last month?", "response": "sql SELECT COUNT(*) FROM ContentReviews WHERE content_type = 'Branded' AND review_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "What percentage of legal notices were related to defamation claims?", "response": "sql SELECT (COUNT(*) FILTER (WHERE reason = 'Defamation') * 100.0 / COUNT(*)) AS defamation_pct FROM LegalNotices;"}
{"prompt": "List whistleblower cases reviewed for IP violations.", "response": "sql SELECT case_id, submitted_by, ip_verified FROM WhistleblowerCases WHERE ip_verified = TRUE;"}
{"prompt": "How many user-generated content pieces required legal approval?", "response": "sql SELECT COUNT(*) FROM ContentReviews WHERE content_type = 'UGC' AND reviewed_by = 'Legal';"}
{"prompt": "What are the most common reasons for compliance violations?", "response": "sql SELECT violation_reason, COUNT(*) AS count FROM ComplianceViolations GROUP BY violation_reason ORDER BY count DESC;"}
{"prompt": "Which compliance training sessions were conducted this year?", "response": "sql SELECT session_title, trainer, session_date FROM ComplianceTrainings WHERE EXTRACT(YEAR FROM session_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "How many articles were edited after legal intervention?", "response": "sql SELECT COUNT(*) FROM Articles WHERE legal_intervention = TRUE AND was_edited = TRUE;"}
{"prompt": "Which reporters have received the most legal review requests?", "response": "sql SELECT reporter_id, COUNT(*) AS reviews FROM Articles WHERE is_legal_flagged = TRUE GROUP BY reporter_id ORDER BY reviews DESC;"}
{"prompt": "List all active legal cases related to copyright infringement.", "response": "sql SELECT case_id, article_id, status FROM LegalCases WHERE issue_type = 'Copyright' AND status = 'Open';"}
{"prompt": "How many stories required right-to-reply inclusion before publishing?", "response": "sql SELECT COUNT(*) FROM Articles WHERE included_right_to_reply = TRUE;"}
{"prompt": "What is the average response time to legal notices?", "response": "sql SELECT AVG(response_date - notice_date) AS avg_response_time FROM LegalNotices WHERE response_date IS NOT NULL;"}
{"prompt": "Which articles were flagged for religious sensitivity and later cleared?", "response": "sql SELECT article_id, title FROM Articles WHERE sensitivity_flag = 'Religious' AND legal_clearance = TRUE;"}
{"prompt": "What topics have the highest frequency of legal concerns?", "response": "sql SELECT topic, COUNT(*) AS flagged_count FROM Articles WHERE is_legal_flagged = TRUE GROUP BY topic ORDER BY flagged_count DESC;"}
{"prompt": "Which branded campaigns were reviewed and flagged for ad compliance?", "response": "sql SELECT campaign_id, brand_name FROM AdCampaigns WHERE legal_flagged = TRUE;"}
{"prompt": "How many pieces were delayed due to pending legal clearance?", "response": "sql SELECT COUNT(*) FROM Articles WHERE legal_clearance_pending = TRUE AND publication_status = 'Delayed';"}
{"prompt": "List all GDPR-related compliance issues logged this quarter.", "response": "sql SELECT issue_id, reported_by, report_date FROM ComplianceIssues WHERE issue_type = 'GDPR' AND report_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "CollegeHostel", "response": "nan"}
{"prompt": "Students", "response": "nan"}
{"prompt": "“Hey, I’m Meera from Room 207. Can you tell me my current billing details?”", "response": "SELECT * FROM Billing WHERE student_id = (SELECT student_id FROM Students WHERE room_number = '207');"}
{"prompt": "“I’m Arjun, new here. Who’s the warden of my hostel?”", "response": "SELECT hw.* FROM HostelWardens hw JOIN Hostels h ON hw.warden_id = h.warden_id JOIN Students s ON s.hostel_id = h.hostel_id WHERE s.student_id = Arjun_ID; (Replace Arjun_ID with actual ID)"}
{"prompt": "“Is that maintenance request for the broken tap in Block A resolved yet?”", "response": "SELECT * FROM MaintenanceRequests WHERE description LIKE '%broken tap%' AND status = 'Resolved';"}
{"prompt": "“I manage the mess. What meals are planned for dinner tomorrow?”", "response": "SELECT * FROM MessMenus WHERE meal_type = 'Dinner' AND date = CURRENT_DATE + INTERVAL '1 day';"}
{"prompt": "“I’m filing a support ticket. Can I see all my previously raised tickets?”", "response": "SELECT * FROM SupportTickets WHERE raised_by_id = Me_ID AND role = 'student'; (Replace Me_ID with actual ID)"}
{"prompt": "“Can you get me a list of all students staying in Hostel Sunrise?”", "response": "SELECT s.* FROM Students s JOIN Hostels h ON s.hostel_id = h.hostel_id WHERE h.name = 'Sunrise';"}
{"prompt": "“Who was the last person to log in to the hostel system?”", "response": "SELECT * FROM Users ORDER BY last_login DESC LIMIT 1;"}
{"prompt": "“What are the contact details of the receptionist on duty?”", "response": "SELECT first_name, last_name, email, phone FROM Receptionists;"}
{"prompt": "“We’re prepping for fest. Can you get us students who joined in the last month?”", "response": "SELECT * FROM Students WHERE registration_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "“My roommate says the billing system missed his payment update. Can you verify his status?”", "response": "SELECT * FROM Billing WHERE student_id = Roommate_ID; (Replace Roommate_ID with actual ID)"}
{"prompt": "“Who’s responsible for today’s mess menu?”", "response": "SELECT mm.* FROM MessManagers mm JOIN MessMenus m ON mm.manager_id = m.mess_manager_id WHERE m.date = CURRENT_DATE;"}
{"prompt": "“What support issues are still unresolved?”", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "“Show me all maintenance requests for Hostel A that are still pending.”", "response": "SELECT * FROM MaintenanceRequests WHERE hostel_id = (SELECT hostel_id FROM Hostels WHERE name = 'Hostel A') AND status != 'Resolved';"}
{"prompt": "“Which students haven't paid their bills yet?”", "response": "SELECT * FROM Billing WHERE status != 'Paid';"}
{"prompt": "“Can you show the mess menu for breakfast next Monday?”", "response": "SELECT * FROM MessMenus WHERE meal_type = 'Breakfast' AND date = (CURRENT_DATE + INTERVAL '1 week')::date;"}
{"prompt": "“Who are all the wardens and how can I reach them?”", "response": "SELECT first_name, last_name, email, phone FROM HostelWardens;"}
{"prompt": "“Show me students who stay in Room 2XX series.”", "response": "SELECT * FROM Students WHERE room_number LIKE '2__';"}
{"prompt": "“Get me the analytics report generated most recently.”", "response": "SELECT * FROM AnalyticsReports ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "“Which support tickets were raised this week by wardens?”", "response": "SELECT * FROM SupportTickets WHERE role = 'warden' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Who are the security personnel working the night shift?”", "response": "SELECT * FROM SecurityPersonnel WHERE shift = 'Night';"}
{"prompt": "Hostel Wardens", "response": "nan"}
{"prompt": "“I need to check how many maintenance issues are still pending in my hostel.”", "response": "SELECT * FROM MaintenanceRequests WHERE hostel_id = MY_HOSTEL_ID AND status != 'Resolved'; (Replace MY_HOSTEL_ID)"}
{"prompt": "“Which student reported the plumbing problem in Room 108?”", "response": "SELECT s.first_name, s.last_name FROM Students s JOIN MaintenanceRequests m ON s.student_id = m.student_id WHERE s.room_number = '108' AND m.description LIKE '%plumb%';"}
{"prompt": "“Let me see the names and contacts of all students under my hostel.”", "response": "SELECT first_name, last_name, phone FROM Students WHERE hostel_id = MY_HOSTEL_ID;"}
{"prompt": "“I want the latest maintenance request from my hostel.”", "response": "SELECT * FROM MaintenanceRequests WHERE hostel_id = MY_HOSTEL_ID ORDER BY requested_on DESC LIMIT 1;"}
{"prompt": "“Which students haven’t paid their hostel dues yet?”", "response": "SELECT s.first_name, s.last_name, b.amount_due FROM Students s JOIN Billing b ON s.student_id = b.student_id WHERE s.hostel_id = MY_HOSTEL_ID AND b.status != 'Paid';"}
{"prompt": "“Give me a list of all rooms with repeated maintenance issues.”", "response": "SELECT room_number, COUNT(*) as issue_count FROM Students s JOIN MaintenanceRequests m ON s.student_id = m.student_id GROUP BY room_number HAVING COUNT(*) > 1;"}
{"prompt": "“I need a report of all completed maintenance this month.”", "response": "SELECT * FROM MaintenanceRequests WHERE hostel_id = MY_HOSTEL_ID AND status = 'Resolved' AND completed_on >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "“What students joined my hostel in the past 2 weeks?”", "response": "SELECT * FROM Students WHERE hostel_id = MY_HOSTEL_ID AND registration_date >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "“Let me know who’s staying in Room 205.”", "response": "SELECT * FROM Students WHERE room_number = '205' AND hostel_id = MY_HOSTEL_ID;"}
{"prompt": "“I want a list of support tickets raised by students from my hostel.”", "response": "SELECT t.* FROM SupportTickets t JOIN Students s ON t.raised_by_id = s.student_id WHERE t.role = 'student' AND s.hostel_id = MY_HOSTEL_ID;"}
{"prompt": "“Who’s the current mess manager assigned to my hostel?”", "response": "SELECT * FROM MessManagers WHERE hostel_id = MY_HOSTEL_ID;"}
{"prompt": "“I need the breakfast menu for today to verify it during inspection.”", "response": "SELECT * FROM MessMenus WHERE meal_type = 'Breakfast' AND date = CURRENT_DATE AND mess_manager_id IN (SELECT manager_id FROM MessManagers WHERE hostel_id = MY_HOSTEL_ID);"}
{"prompt": "“Can I see all students from my hostel who raised maintenance requests?”", "response": "SELECT DISTINCT s.student_id, s.first_name, s.last_name FROM Students s JOIN MaintenanceRequests m ON s.student_id = m.student_id WHERE s.hostel_id = MY_HOSTEL_ID;"}
{"prompt": "“Fetch security contacts assigned for today’s night shift.”", "response": "SELECT * FROM SecurityPersonnel WHERE shift = 'Night';"}
{"prompt": "“Is there any unresolved support ticket by a warden?”", "response": "SELECT * FROM SupportTickets WHERE role = 'warden' AND status != 'Resolved';"}
{"prompt": "“I need to know how many billing records were paid this week for my hostel.”", "response": "SELECT COUNT(*) FROM Billing b JOIN Students s ON b.student_id = s.student_id WHERE s.hostel_id = MY_HOSTEL_ID AND b.payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Give me the contact details of the receptionist on duty.”", "response": "SELECT first_name, last_name, email, phone FROM Receptionists;"}
{"prompt": "“Which student has the highest pending amount in my hostel?”", "response": "SELECT s.first_name, s.last_name, b.amount_due FROM Students s JOIN Billing b ON s.student_id = b.student_id WHERE s.hostel_id = MY_HOSTEL_ID ORDER BY b.amount_due DESC LIMIT 1;"}
{"prompt": "“List all support tickets raised in the past 3 days.”", "response": "SELECT * FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "“I need all mess menus for this week to approve for printing.”", "response": "SELECT * FROM MessMenus WHERE date >= CURRENT_DATE AND date < CURRENT_DATE + INTERVAL '7 days' AND mess_manager_id IN (SELECT manager_id FROM MessManagers WHERE hostel_id = MY_HOSTEL_ID);"}
{"prompt": "Maintenance Staff", "response": "nan"}
{"prompt": "“Show me all maintenance requests I need to work on that are still pending.”", "response": "SELECT * FROM MaintenanceRequests WHERE status != 'Resolved';"}
{"prompt": "“Which rooms have raised repeated issues with fans or lights?”", "response": "SELECT s.room_number, COUNT(*) AS issue_count FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id WHERE m.description LIKE '%fan%' OR m.description LIKE '%light%' GROUP BY s.room_number HAVING COUNT(*) > 1;"}
{"prompt": "“Who reported the water cooler issue yesterday?”", "response": "SELECT s.first_name, s.last_name, s.room_number FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id WHERE m.description LIKE '%water cooler%' AND m.requested_on::date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "“List all maintenance issues from Room 203.”", "response": "SELECT * FROM MaintenanceRequests WHERE student_id IN (SELECT student_id FROM Students WHERE room_number = '203');"}
{"prompt": "“Can I see all open requests in Hostel B?”", "response": "SELECT * FROM MaintenanceRequests WHERE hostel_id = (SELECT hostel_id FROM Hostels WHERE name = 'Hostel B') AND status != 'Resolved';"}
{"prompt": "“Which problems were fixed today?”", "response": "SELECT * FROM MaintenanceRequests WHERE status = 'Resolved' AND completed_on::date = CURRENT_DATE;"}
{"prompt": "“I need all requests that mention 'short circuit'.”", "response": "SELECT * FROM MaintenanceRequests WHERE description LIKE '%short circuit%';"}
{"prompt": "“Who reported the latest maintenance issue?”", "response": "SELECT s.first_name, s.last_name, m.description, m.requested_on FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id ORDER BY m.requested_on DESC LIMIT 1;"}
{"prompt": "“How many unresolved complaints are there in total?”", "response": "SELECT COUNT(*) FROM MaintenanceRequests WHERE status != 'Resolved';"}
{"prompt": "“Which hostels have the highest number of open issues?”", "response": "SELECT h.name, COUNT(*) AS pending_issues FROM MaintenanceRequests m JOIN Hostels h ON m.hostel_id = h.hostel_id WHERE m.status != 'Resolved' GROUP BY h.name ORDER BY pending_issues DESC;"}
{"prompt": "“Which rooms often complain about bathroom issues?”", "response": "SELECT s.room_number, COUNT(*) FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id WHERE m.description LIKE '%bathroom%' GROUP BY s.room_number HAVING COUNT(*) > 1;"}
{"prompt": "“List issues raised by students in the last 3 days.”", "response": "SELECT * FROM MaintenanceRequests WHERE requested_on >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "“Can I view all resolved complaints from Room 207?”", "response": "SELECT * FROM MaintenanceRequests WHERE student_id IN (SELECT student_id FROM Students WHERE room_number = '207') AND status = 'Resolved';"}
{"prompt": "“Get me a list of all the leaky tap complaints.”", "response": "SELECT * FROM MaintenanceRequests WHERE description LIKE '%leak%' OR description LIKE '%tap%';"}
{"prompt": "“Which students have submitted more than two requests this month?”", "response": "SELECT s.first_name, s.last_name, COUNT(*) AS request_count FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id WHERE m.requested_on >= date_trunc('month', CURRENT_DATE) GROUP BY s.first_name, s.last_name HAVING COUNT(*) > 2;"}
{"prompt": "“What is the status of maintenance for the common room short circuit?”", "response": "SELECT * FROM MaintenanceRequests WHERE description LIKE '%common room%' AND description LIKE '%short circuit%';"}
{"prompt": "“How many problems were solved in the past week?”", "response": "SELECT COUNT(*) FROM MaintenanceRequests WHERE status = 'Resolved' AND completed_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Show me all complaints from students of Hostel Sunrise.”", "response": "SELECT m.* FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id JOIN Hostels h ON s.hostel_id = h.hostel_id WHERE h.name = 'Sunrise';"}
{"prompt": "“Are there any unresolved maintenance issues in Room 105?”", "response": "SELECT * FROM MaintenanceRequests WHERE status != 'Resolved' AND student_id IN (SELECT student_id FROM Students WHERE room_number = '105');"}
{"prompt": "“List the most common maintenance issue this month.”", "response": "SELECT description, COUNT(*) AS count FROM MaintenanceRequests WHERE requested_on >= date_trunc('month', CURRENT_DATE) GROUP BY description ORDER BY count DESC LIMIT 1;"}
{"prompt": "Receptionists", "response": "nan"}
{"prompt": "“Which students are currently staying in Hostel A?”", "response": "SELECT first_name, last_name, room_number FROM Students WHERE hostel_id = (SELECT hostel_id FROM Hostels WHERE name = 'Hostel A');"}
{"prompt": "“Give me a list of students who registered in the last 7 days.”", "response": "SELECT * FROM Students WHERE registration_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Show me the contact numbers of all wardens.”", "response": "SELECT first_name, last_name, phone FROM HostelWardens;"}
{"prompt": "“Which room is assigned to a student named Sneha Patel?”", "response": "SELECT room_number FROM Students WHERE first_name = 'Sneha' AND last_name = 'Patel';"}
{"prompt": "“How many students are currently registered in each hostel?”", "response": "SELECT h.name, COUNT(s.student_id) AS student_count FROM Students s JOIN Hostels h ON s.hostel_id = h.hostel_id GROUP BY h.name;"}
{"prompt": "“List all unresolved maintenance complaints raised by students.”", "response": "SELECT * FROM MaintenanceRequests WHERE status != 'Resolved';"}
{"prompt": "“Get the phone numbers of all Receptionists currently on staff.”", "response": "SELECT first_name, last_name, phone FROM Receptionists;"}
{"prompt": "“Which students have outstanding bills due today?”", "response": "SELECT s.first_name, s.last_name, b.amount_due FROM Billing b JOIN Students s ON b.student_id = s.student_id WHERE b.due_date = CURRENT_DATE AND b.status != 'Paid';"}
{"prompt": "“List students whose billing status is overdue.”", "response": "SELECT s.first_name, s.last_name, b.amount_due, b.due_date FROM Billing b JOIN Students s ON b.student_id = s.student_id WHERE b.status = 'Overdue';"}
{"prompt": "“Which wardens are assigned to which hostels?”", "response": "SELECT h.name AS hostel_name, w.first_name, w.last_name FROM Hostels h JOIN HostelWardens w ON h.warden_id = w.warden_id;"}
{"prompt": "“Give me a list of support tickets still unresolved.”", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "“Which student raised a support ticket about ID card loss?”", "response": "SELECT s.first_name, s.last_name FROM SupportTickets t JOIN Students s ON t.raised_by_id = s.student_id WHERE t.role = 'student' AND t.subject LIKE '%ID card%';"}
{"prompt": "“How many support tickets were created today?”", "response": "SELECT COUNT(*) FROM SupportTickets WHERE created_at::date = CURRENT_DATE;"}
{"prompt": "“Get the latest support ticket raised by any receptionist.”", "response": "SELECT * FROM SupportTickets WHERE role = 'receptionist' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "“Who are the mess managers for each hostel?”", "response": "SELECT h.name AS hostel_name, m.name AS manager_name, m.contact FROM Hostels h JOIN MessManagers m ON h.hostel_id = m.hostel_id;"}
{"prompt": "“List mess menus planned for today.”", "response": "SELECT * FROM MessMenus WHERE date = CURRENT_DATE;"}
{"prompt": "“Which students have not paid their bills yet?”", "response": "SELECT s.first_name, s.last_name, b.amount_due FROM Students s JOIN Billing b ON s.student_id = b.student_id WHERE b.status != 'Paid';"}
{"prompt": "“Who raised maintenance complaints from Room 203?”", "response": "SELECT s.first_name, s.last_name, m.description FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id WHERE s.room_number = '203';"}
{"prompt": "“Which hostels have mess menus scheduled for tomorrow?”", "response": "SELECT DISTINCT h.name FROM Hostels h JOIN MessManagers mm ON h.hostel_id = mm.hostel_id JOIN MessMenus m ON mm.manager_id = m.mess_manager_id WHERE m.date = CURRENT_DATE + INTERVAL '1 day';"}
{"prompt": "“Can I get the contact info of the student who reported a short circuit?”", "response": "SELECT s.first_name, s.last_name, s.phone FROM MaintenanceRequests m JOIN Students s ON m.student_id = s.student_id WHERE m.description LIKE '%short circuit%';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "“Show me all unresolved support tickets raised by students.”", "response": "SELECT * FROM SupportTickets WHERE role = 'student' AND status != 'Resolved';"}
{"prompt": "“Which tickets were created today and still remain open?”", "response": "SELECT * FROM SupportTickets WHERE created_at::date = CURRENT_DATE AND status != 'Resolved';"}
{"prompt": "“List all complaints mentioning Wi-Fi issues.”", "response": "SELECT * FROM SupportTickets WHERE description LIKE '%wifi%' OR subject LIKE '%wifi%';"}
{"prompt": "“Which students raised support tickets related to billing problems?”", "response": "SELECT s.first_name, s.last_name FROM SupportTickets t JOIN Students s ON t.raised_by_id = s.student_id WHERE role = 'student' AND (subject LIKE '%bill%' OR description LIKE '%charge%');"}
{"prompt": "“Get a list of all tickets resolved this week.”", "response": "SELECT * FROM SupportTickets WHERE status = 'Resolved' AND resolved_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“How many room change requests have been submitted in the last 30 days?”", "response": "SELECT COUNT(*) FROM SupportTickets WHERE (subject LIKE '%room change%' OR description LIKE '%switch room%' OR description LIKE '%room transfer%') AND created_at >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "“Which hostels have the most support tickets?”", "response": "SELECT h.name, COUNT(*) AS ticket_count FROM SupportTickets t JOIN Students s ON t.raised_by_id = s.student_id JOIN Hostels h ON s.hostel_id = h.hostel_id WHERE t.role = 'student' GROUP BY h.name ORDER BY ticket_count DESC;"}
{"prompt": "“Show all unresolved support tickets related to medical issues.”", "response": "SELECT * FROM SupportTickets WHERE status != 'Resolved' AND (description LIKE '%medical%' OR subject LIKE '%medical%');"}
{"prompt": "“List the contact numbers of students who raised unresolved tickets.”", "response": "SELECT DISTINCT s.first_name, s.last_name, s.phone FROM SupportTickets t JOIN Students s ON t.raised_by_id = s.student_id WHERE t.status != 'Resolved' AND t.role = 'student';"}
{"prompt": "“Get the latest support ticket raised by a student.”", "response": "SELECT * FROM SupportTickets WHERE role = 'student' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "“Which support tickets took more than 3 days to resolve?”", "response": "SELECT * FROM SupportTickets WHERE status = 'Resolved' AND resolved_at - created_at > INTERVAL '3 days';"}
{"prompt": "“How many total support tickets have been raised by mess managers?”", "response": "SELECT COUNT(*) FROM SupportTickets WHERE role = 'mess_manager';"}
{"prompt": "“Which issues have been flagged repeatedly in the last month?”", "response": "SELECT subject, COUNT(*) AS issue_count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '30 days' GROUP BY subject HAVING COUNT(*) > 1 ORDER BY issue_count DESC;"}
{"prompt": "“List all support tickets that were escalated to wardens.”", "response": "SELECT * FROM SupportTickets WHERE description LIKE '%warden%' OR subject LIKE '%warden%';"}
{"prompt": "“How many unresolved support tickets were raised in the last 2 days?”", "response": "SELECT COUNT(*) FROM SupportTickets WHERE status != 'Resolved' AND created_at >= CURRENT_DATE - INTERVAL '2 days';"}
{"prompt": "“Find the average resolution time for tickets raised this month.”", "response": "SELECT AVG(resolved_at - created_at) AS avg_resolution_time FROM SupportTickets WHERE status = 'Resolved' AND created_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "“Which student has raised the most support tickets overall?”", "response": "SELECT s.first_name, s.last_name, COUNT(*) AS ticket_count FROM SupportTickets t JOIN Students s ON t.raised_by_id = s.student_id WHERE t.role = 'student' GROUP BY s.first_name, s.last_name ORDER BY ticket_count DESC LIMIT 1;"}
{"prompt": "“Which support ticket mentions a lost key?”", "response": "SELECT * FROM SupportTickets WHERE subject LIKE '%lost key%' OR description LIKE '%lost key%';"}
{"prompt": "“List all tickets created by receptionists and still open.”", "response": "SELECT * FROM SupportTickets WHERE role = 'receptionist' AND status != 'Resolved';"}
{"prompt": "“Can I get the full history of tickets created by student Ankit Kumar?”", "response": "SELECT * FROM SupportTickets WHERE role = 'student' AND raised_by_id = (SELECT student_id FROM Students WHERE first_name = 'Ankit' AND last_name = 'Kumar');"}
{"prompt": "Mess Managers", "response": "nan"}
{"prompt": "What meals are scheduled for today in my hostel?”", "response": "SELECT m.meal_type, m.menu_items FROM MessMenus m JOIN MessManagers mgr ON m.mess_manager_id = mgr.manager_id WHERE mgr.hostel_id = <your_hostel_id> AND m.date = CURRENT_DATE;"}
{"prompt": "“Show me this week’s complete mess menu.”", "response": "SELECT date, meal_type, menu_items FROM MessMenus WHERE mess_manager_id = <your_manager_id> AND date >= CURRENT_DATE AND date < CURRENT_DATE + INTERVAL '7 days' ORDER BY date, meal_type;"}
{"prompt": "“What was served for dinner last Sunday?”", "response": "SELECT menu_items FROM MessMenus WHERE mess_manager_id = <your_manager_id> AND meal_type = 'Dinner' AND date = (SELECT MAX(date) FROM MessMenus WHERE EXTRACT(DOW FROM date) = 0 AND date <= CURRENT_DATE);"}
{"prompt": "“Which hostel does this mess manager handle?”", "response": "SELECT h.name FROM Hostels h JOIN MessManagers m ON h.hostel_id = m.hostel_id WHERE m.manager_id = <your_manager_id>;"}
{"prompt": "“Show the mess menu history for the past month.”", "response": "SELECT date, meal_type, menu_items FROM MessMenus WHERE mess_manager_id = <your_manager_id> AND date >= CURRENT_DATE - INTERVAL '30 days' ORDER BY date DESC;"}
{"prompt": "“Which mess manager is responsible for Hostel 3?”", "response": "SELECT name FROM MessManagers WHERE hostel_id = 3;"}
{"prompt": "“List all menus where poha was served.”", "response": "SELECT date, meal_type, menu_items FROM MessMenus WHERE menu_items LIKE '%poha%';"}
{"prompt": "“Get contact info of all mess managers across hostels.”", "response": "SELECT name, contact FROM MessManagers;"}
{"prompt": "“Was there a menu update for today’s lunch?”", "response": "SELECT * FROM MessMenus WHERE mess_manager_id = <your_manager_id> AND date = CURRENT_DATE AND meal_type = 'Lunch';"}
{"prompt": "“Which mess managers updated the menu last Friday?”", "response": "SELECT DISTINCT m.manager_id, mm.name FROM MessMenus m JOIN MessManagers mm ON m.mess_manager_id = mm.manager_id WHERE m.date = CURRENT_DATE - INTERVAL '7 days' AND EXTRACT(DOW FROM m.date) = 5;"}
{"prompt": "“How many meals are planned for Hostel 2 this week?”", "response": "SELECT COUNT(*) FROM MessMenus m JOIN MessManagers mgr ON m.mess_manager_id = mgr.manager_id WHERE mgr.hostel_id = 2 AND m.date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '6 days';"}
{"prompt": "“Which students belong to my hostel and may need special dietary requests handled?”", "response": "SELECT first_name, last_name, email FROM Students WHERE hostel_id = (SELECT hostel_id FROM MessManagers WHERE manager_id = <your_manager_id>);"}
{"prompt": "“Get yesterday’s full-day menu for quality check.”", "response": "SELECT meal_type, menu_items FROM MessMenus WHERE mess_manager_id = <your_manager_id> AND date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "“Which hostels don’t have a mess manager assigned yet?”", "response": "SELECT hostel_id, name FROM Hostels WHERE hostel_id NOT IN (SELECT hostel_id FROM MessManagers);"}
{"prompt": "“Check if the Diwali special menu was entered last year.”", "response": "SELECT * FROM MessMenus WHERE date BETWEEN '2024-10-15' AND '2024-11-15' AND menu_items LIKE '%diwali%';"}
{"prompt": "“Get upcoming menus that include festive or special items.”", "response": "SELECT date, meal_type, menu_items FROM MessMenus WHERE menu_items LIKE '%special%' OR menu_items LIKE '%festival%' AND date >= CURRENT_DATE;"}
{"prompt": "“How many different meals are planned in the next 10 days?”", "response": "SELECT COUNT(DISTINCT meal_type) FROM MessMenus WHERE date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '10 days';"}
{"prompt": "“Which mess manager planned the highest number of meals last month?”", "response": "SELECT mess_manager_id, COUNT(*) AS meal_count FROM MessMenus WHERE date >= date_trunc('month', CURRENT_DATE - INTERVAL '1 month') AND date < date_trunc('month', CURRENT_DATE) GROUP BY mess_manager_id ORDER BY meal_count DESC LIMIT 1;"}
{"prompt": "“List all menu items for exam week (e.g. June 1 to June 7) to ensure snack readiness.”", "response": "SELECT date, meal_type, menu_items FROM MessMenus WHERE mess_manager_id = <your_manager_id> AND date BETWEEN '2025-06-01' AND '2025-06-07';"}
{"prompt": "“Which days had both breakfast and dinner served but no lunch recorded?”", "response": "SELECT date FROM MessMenus WHERE mess_manager_id = <your_manager_id> GROUP BY date HAVING COUNT(CASE WHEN meal_type = 'Lunch' THEN 1 END) = 0 AND COUNT(CASE WHEN meal_type = 'Breakfast' THEN 1 END) > 0 AND COUNT(CASE WHEN meal_type = 'Dinner' THEN 1 END) > 0;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "“Which students have pending hostel fee payments?”", "response": "SELECT s.first_name, s.last_name, f.amount_due FROM FinanceRecords f JOIN Students s ON f.student_id = s.student_id WHERE f.fee_type = 'hostel_fee' AND f.amount_due > 0;"}
{"prompt": "“List all payments made by UPI this month.”", "response": "SELECT * FROM FinanceRecords WHERE payment_mode = 'UPI' AND paid_on >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "“Who paid their mess bill twice this week?”", "response": "SELECT student_id, COUNT(*) FROM FinanceRecords WHERE fee_type = 'mess_fee' AND paid_on >= CURRENT_DATE - INTERVAL '7 days' GROUP BY student_id HAVING COUNT(*) > 1;"}
{"prompt": "“Show me all students who requested a refund but haven't received it yet.”", "response": "SELECT s.first_name, s.last_name, f.amount_due FROM FinanceRecords f JOIN Students s ON f.student_id = s.student_id WHERE f.fee_type = 'refund' AND f.amount_due > 0;"}
{"prompt": "“Get the complete payment history for student Aryan Sharma.”", "response": "SELECT * FROM FinanceRecords WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Aryan' AND last_name = 'Sharma') ORDER BY paid_on DESC;"}
{"prompt": "“Which students paid in installments for their hostel fee?”", "response": "SELECT student_id, COUNT(*) AS installment_count FROM FinanceRecords WHERE fee_type = 'hostel_fee' GROUP BY student_id HAVING COUNT(*) > 1;"}
{"prompt": "“How much mess fee has been collected in the last 30 days?”", "response": "SELECT SUM(amount_paid) FROM FinanceRecords WHERE fee_type = 'mess_fee' AND paid_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "“List all finance records with negative or zero payment values (possible errors).”", "response": "SELECT * FROM FinanceRecords WHERE amount_paid <= 0;"}
{"prompt": "“Get total amount collected per fee type this semester.”", "response": "SELECT fee_type, SUM(amount_paid) AS total_collected FROM FinanceRecords WHERE paid_on >= '2025-01-01' GROUP BY fee_type;"}
{"prompt": "“Which students from Hostel 5 have pending mess dues?”", "response": "SELECT s.first_name, s.last_name, f.amount_due FROM FinanceRecords f JOIN Students s ON f.student_id = s.student_id WHERE f.fee_type = 'mess_fee' AND f.amount_due > 0 AND s.hostel_id = 5;"}
{"prompt": "“Which payment modes were used by students for hostel fees last week?”", "response": "SELECT DISTINCT payment_mode FROM FinanceRecords WHERE fee_type = 'hostel_fee' AND paid_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Identify any duplicate payment records (same student, amount, and date).”", "response": "SELECT student_id, amount_paid, paid_on, COUNT(*) FROM FinanceRecords GROUP BY student_id, amount_paid, paid_on HAVING COUNT(*) > 1;"}
{"prompt": "“List all finance records updated today.”", "response": "SELECT * FROM FinanceRecords WHERE updated_at::date = CURRENT_DATE;"}
{"prompt": "“What is the average mess fee paid by students this semester?”", "response": "SELECT AVG(amount_paid) FROM FinanceRecords WHERE fee_type = 'mess_fee' AND paid_on >= '2025-01-01';"}
{"prompt": "“Which students paid late (after due date) for hostel fee?”", "response": "SELECT s.first_name, s.last_name, f.paid_on, f.due_date FROM FinanceRecords f JOIN Students s ON f.student_id = s.student_id WHERE f.fee_type = 'hostel_fee' AND f.paid_on > f.due_date;"}
{"prompt": "“List all finance entries for maintenance charges.”", "response": "SELECT * FROM FinanceRecords WHERE fee_type = 'maintenance_fee';"}
{"prompt": "“Get a monthly summary of finance records for the past 3 months.”", "response": "SELECT DATE_TRUNC('month', paid_on) AS month, fee_type, SUM(amount_paid) AS total FROM FinanceRecords WHERE paid_on >= CURRENT_DATE - INTERVAL '3 months' GROUP BY month, fee_type ORDER BY month;"}
{"prompt": "“Which students received partial refunds?”", "response": "SELECT student_id, amount_paid, amount_due FROM FinanceRecords WHERE fee_type = 'refund' AND amount_paid < amount_due AND amount_due > 0;"}
{"prompt": "“List students whose payments failed (no payment mode recorded).”", "response": "SELECT s.first_name, s.last_name FROM FinanceRecords f JOIN Students s ON f.student_id = s.student_id WHERE payment_mode IS NULL OR payment_mode = '';"}
{"prompt": "“Which fee types had the highest revenue this quarter?”", "response": "SELECT fee_type, SUM(amount_paid) AS total FROM FinanceRecords WHERE paid_on >= CURRENT_DATE - INTERVAL '90 days' GROUP BY fee_type ORDER BY total DESC;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "'Which students experienced biometric login issues this week?”", "response": "SELECT student_id, issue_type, reported_on FROM ITSupportLogs WHERE issue_type LIKE '%biometric%' AND reported_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“List all internet outages reported in Block D.”", "response": "SELECT * FROM ITSupportLogs WHERE issue_type LIKE '%internet%' AND location = 'Block D';"}
{"prompt": "“Which rooms requested Wi-Fi reset in the past 10 days?”", "response": "SELECT room_number, student_id, reported_on FROM ITSupportLogs WHERE issue_type LIKE '%wifi%' AND reported_on >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "“Show all ticketed issues related to the surveillance system.”", "response": "SELECT * FROM ITSupportLogs WHERE issue_type LIKE '%camera%' OR system_module = 'CCTV';"}
{"prompt": "“What are the most frequent IT complaints logged last month?”", "response": "SELECT issue_type, COUNT(*) AS frequency FROM ITSupportLogs WHERE reported_on >= date_trunc('month', CURRENT_DATE - INTERVAL '1 month') AND reported_on < date_trunc('month', CURRENT_DATE) GROUP BY issue_type ORDER BY frequency DESC;"}
{"prompt": "“Get a list of all unresolved IT support tickets.”", "response": "SELECT * FROM ITSupportLogs WHERE status != 'Resolved';"}
{"prompt": "“Which student IDs had failed biometric entries today?”", "response": "SELECT student_id, entry_time FROM BiometricLogs WHERE success = FALSE AND entry_time::date = CURRENT_DATE;"}
{"prompt": "“Which blocks have the most frequent internet issues?”", "response": "SELECT location, COUNT(*) FROM ITSupportLogs WHERE issue_type LIKE '%internet%' GROUP BY location ORDER BY COUNT(*) DESC;"}
{"prompt": "“Which students had their passwords reset this month?”", "response": "SELECT student_id, updated_on FROM CredentialLogs WHERE action = 'Password Reset' AND updated_on >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "“Who accessed the student complaint dashboard in the past 24 hours?”", "response": "SELECT user_id, access_time FROM SystemAccessLogs WHERE module_accessed = 'Complaint Dashboard' AND access_time >= NOW() - INTERVAL '1 day';"}
{"prompt": "“List all biometric entries for Room 302 over the last 3 days.”", "response": "SELECT * FROM BiometricLogs WHERE room_number = '302' AND entry_time >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "“What are the unresolved issues across all system modules?”", "response": "SELECT system_module, COUNT(*) AS open_issues FROM ITSupportLogs WHERE status != 'Resolved' GROUP BY system_module;"}
{"prompt": "“Show surveillance access logs by wardens this week.”", "response": "SELECT user_id, access_time FROM SystemAccessLogs WHERE module_accessed = 'CCTV' AND role = 'Warden' AND access_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Which rooms faced both internet and biometric issues in the last month?”", "response": "SELECT DISTINCT room_number FROM ITSupportLogs WHERE reported_on >= CURRENT_DATE - INTERVAL '30 days' AND (issue_type LIKE '%internet%' OR issue_type LIKE '%biometric%') GROUP BY room_number HAVING COUNT(DISTINCT issue_type) > 1;"}
{"prompt": "“List students who were locked out due to system errors.”", "response": "SELECT DISTINCT student_id FROM ITSupportLogs WHERE issue_type LIKE '%lock%' OR description LIKE '%unable to login%';"}
{"prompt": "“How many users accessed the fee payment portal last weekend?”", "response": "SELECT COUNT(DISTINCT user_id) FROM SystemAccessLogs WHERE module_accessed = 'Fee Portal' AND access_time::date BETWEEN CURRENT_DATE - EXTRACT(DOW FROM CURRENT_DATE)::int AND CURRENT_DATE - EXTRACT(DOW FROM CURRENT_DATE)::int + 1;"}
{"prompt": "“What is the average response time for ticket resolution this semester?”", "response": "SELECT AVG(resolved_on - reported_on) AS avg_resolution_time FROM ITSupportLogs WHERE reported_on >= '2025-01-01' AND status = 'Resolved';"}
{"prompt": "“List all modules upgraded in the last two months.”", "response": "SELECT * FROM SystemUpdates WHERE updated_on >= CURRENT_DATE - INTERVAL '2 months';"}
{"prompt": "“Which vendors were contacted for hardware issues this year?”", "response": "SELECT DISTINCT vendor_name FROM VendorSupportLogs WHERE issue_type = 'Hardware' AND contacted_on >= '2025-01-01';"}
{"prompt": "“Get logs of all students who entered after curfew using biometric override.”", "response": "SELECT student_id, entry_time FROM BiometricLogs WHERE entry_time::time > '22:00:00' AND override_used = TRUE;"}
{"prompt": "Security Personnel", "response": "nan"}
{"prompt": "“Which students entered the hostel after curfew last night?”", "response": "SELECT student_id, entry_time FROM BiometricLogs WHERE entry_time::time > '22:00:00' AND entry_time::date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "“List all visitors logged this week and whom they came to meet.”", "response": "SELECT visitor_name, student_id, entry_time FROM VisitorLogs WHERE entry_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Show all security guards currently on night shift.”", "response": "SELECT first_name, last_name FROM SecurityPersonnel WHERE shift = 'Night';"}
{"prompt": "“Which rooms had noise complaints filed in the last month?”", "response": "SELECT DISTINCT room_number FROM SecurityIncidents WHERE incident_type LIKE '%noise%' AND reported_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "“Get details of any intruder alerts in the last 3 months.”", "response": "SELECT * FROM SecurityIncidents WHERE incident_type LIKE '%intruder%' AND reported_on >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "“Who was the last student to enter the hostel today?”", "response": "SELECT student_id, MAX(entry_time) AS last_entry FROM BiometricLogs WHERE entry_time::date = CURRENT_DATE;"}
{"prompt": "“List all parcels checked and cleared by security this week.”", "response": "SELECT * FROM ParcelLogs WHERE status = 'Cleared' AND checked_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "“Which security personnel handled the most incident reports last semester?”", "response": "SELECT security_id, COUNT(*) AS total_handled FROM SecurityIncidents WHERE reported_on >= '2025-01-01' GROUP BY security_id ORDER BY total_handled DESC;"}
{"prompt": "“Which students required escort to the medical room recently?”", "response": "SELECT student_id, escorted_on FROM MedicalEscortLogs WHERE escorted_on >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "“What are the top 5 most reported security incidents?”", "response": "SELECT incident_type, COUNT(*) AS frequency FROM SecurityIncidents GROUP BY incident_type ORDER BY frequency DESC LIMIT 5;"}
{"prompt": "“Show list of students with frequent late entries in the past month.”", "response": "SELECT student_id, COUNT(*) AS late_entries FROM BiometricLogs WHERE entry_time::time > '22:00:00' AND entry_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY student_id HAVING COUNT(*) > 3;"}
{"prompt": "“Which blocks reported fire or health emergencies this year?”", "response": "SELECT DISTINCT location FROM SecurityIncidents WHERE incident_type LIKE '%fire%' OR incident_type LIKE '%health%' AND reported_on >= '2025-01-01';"}
{"prompt": "“List all parents or guardians who visited students last weekend.”", "response": "SELECT visitor_name, student_id, entry_time FROM VisitorLogs WHERE entry_time::date BETWEEN CURRENT_DATE - EXTRACT(DOW FROM CURRENT_DATE)::int - 1 AND CURRENT_DATE - EXTRACT(DOW FROM CURRENT_DATE)::int;"}
{"prompt": "“Which guards were on duty during the Diwali festival?”", "response": "SELECT DISTINCT security_id FROM DutyLogs WHERE duty_date BETWEEN '2024-11-10' AND '2024-11-15';"}
{"prompt": "“Which parcels were rejected or held by the security desk this month?”", "response": "SELECT * FROM ParcelLogs WHERE status IN ('Held', 'Rejected') AND checked_on >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "“What is the average response time to incident reports?”", "response": "SELECT AVG(resolved_on - reported_on) AS avg_response_time FROM SecurityIncidents WHERE status = 'Resolved';"}
{"prompt": "“Who monitored CCTV during the night shift yesterday?”", "response": "SELECT security_id FROM CCTVLogs WHERE monitored_on::date = CURRENT_DATE - INTERVAL '1 day' AND shift = 'Night';"}
{"prompt": "“List all female security personnel currently assigned to Block A.”", "response": "SELECT first_name, last_name FROM SecurityPersonnel WHERE assigned_block = 'Block A' AND gender = 'Female';"}
{"prompt": "“How many times was Room 207 visited by outsiders in the last month?”", "response": "SELECT COUNT(*) FROM VisitorLogs WHERE student_id IN (SELECT student_id FROM Students WHERE room_number = '207') AND entry_time >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "“Show unresolved incidents escalated to the Warden.”", "response": "SELECT * FROM SecurityIncidents WHERE escalated_to = 'Warden' AND status != 'Resolved';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "“Which hostels reached full capacity first during the last admission cycle?”", "response": "SELECT hostel_id, COUNT(*) AS total_students FROM Students WHERE registration_date BETWEEN '2025-06-01' AND '2025-07-31' GROUP BY hostel_id ORDER BY total_students DESC;"}
{"prompt": "“How many maintenance requests were raised for each hostel last month?”", "response": "SELECT hostel_id, COUNT(*) AS request_count FROM MaintenanceRequests WHERE requested_on >= date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' AND requested_on < date_trunc('month', CURRENT_DATE) GROUP BY hostel_id;"}
{"prompt": "“What’s the average resolution time for completed maintenance requests?”", "response": "SELECT AVG(completed_on - requested_on) AS avg_resolution_time FROM MaintenanceRequests WHERE status = 'Completed';"}
{"prompt": "“Show students with overdue payments and unpaid dues.”", "response": "SELECT student_id, amount_due - amount_paid AS balance FROM Billing WHERE status != 'Paid' AND due_date < CURRENT_DATE;"}
{"prompt": "“Which hostels report the highest mess absenteeism based on unpaid mess bills?”", "response": "SELECT h.name, COUNT(b.billing_id) AS unpaid_count FROM Billing b JOIN Students s ON b.student_id = s.student_id JOIN Hostels h ON s.hostel_id = h.hostel_id WHERE b.status = 'Unpaid' GROUP BY h.name ORDER BY unpaid_count DESC;"}
{"prompt": "“What percentage of students submitted maintenance complaints in May?”", "response": "SELECT ROUND(COUNT(DISTINCT student_id)*100.0 / (SELECT COUNT(*) FROM Students), 2) AS complaint_percentage FROM MaintenanceRequests WHERE requested_on BETWEEN '2025-05-01' AND '2025-05-31';"}
{"prompt": "“List top 3 common maintenance issues reported this quarter.”", "response": "SELECT description, COUNT(*) AS freq FROM MaintenanceRequests WHERE requested_on >= date_trunc('quarter', CURRENT_DATE) GROUP BY description ORDER BY freq DESC LIMIT 3;"}
{"prompt": "“Which hostels had the most completed vs pending maintenance requests?”", "response": "SELECT hostel_id, SUM(CASE WHEN status = 'Completed' THEN 1 ELSE 0 END) AS completed, SUM(CASE WHEN status != 'Completed' THEN 1 ELSE 0 END) AS pending FROM MaintenanceRequests GROUP BY hostel_id;"}
{"prompt": "“Which students made more than 3 maintenance requests in the last 60 days?”", "response": "SELECT student_id, COUNT(*) AS request_count FROM MaintenanceRequests WHERE requested_on >= CURRENT_DATE - INTERVAL '60 days' GROUP BY student_id HAVING COUNT(*) > 3;"}
{"prompt": "“Identify hostels with more than 80% room occupancy.”", "response": "SELECT hostel_id, COUNT(*) AS current_occupancy FROM Students GROUP BY hostel_id HAVING COUNT(*) > (SELECT COUNT(*) / COUNT(DISTINCT hostel_id) * 0.8 FROM Students);"}
{"prompt": "“How many students registered each week over the last two months?”", "response": "SELECT date_trunc('week', registration_date) AS week, COUNT(*) AS registrations FROM Students WHERE registration_date >= CURRENT_DATE - INTERVAL '2 months' GROUP BY week ORDER BY week;"}
{"prompt": "“Get average payment delays (in days) across all students.”", "response": "SELECT AVG(payment_date - due_date) AS avg_delay FROM Billing WHERE payment_date IS NOT NULL AND payment_date > due_date;"}
{"prompt": "“Which wardens oversee hostels with the highest number of complaints?”", "response": "SELECT w.warden_id, w.first_name, w.last_name, COUNT(m.request_id) AS total_requests FROM HostelWardens w JOIN Hostels h ON w.warden_id = h.warden_id JOIN MaintenanceRequests m ON m.hostel_id = h.hostel_id GROUP BY w.warden_id, w.first_name, w.last_name ORDER BY total_requests DESC;"}
{"prompt": "“Which day of the week sees the most maintenance request submissions?”", "response": "SELECT TO_CHAR(requested_on, 'Day') AS day_of_week, COUNT(*) AS count FROM MaintenanceRequests GROUP BY day_of_week ORDER BY count DESC;"}
{"prompt": "“List students with partial fee payments (i.e. not paid in full).”", "response": "SELECT student_id, amount_due, amount_paid FROM Billing WHERE amount_paid < amount_due;"}
{"prompt": "“Show top 5 students with the highest outstanding balances.”", "response": "SELECT student_id, amount_due - amount_paid AS balance FROM Billing WHERE amount_due > amount_paid ORDER BY balance DESC LIMIT 5;"}
{"prompt": "“Generate a report of maintenance requests categorized by status for each hostel.”", "response": "SELECT hostel_id, status, COUNT(*) AS request_count FROM MaintenanceRequests GROUP BY hostel_id, status ORDER BY hostel_id, status;"}
{"prompt": "“Which students paid fees late more than once?”", "response": "SELECT student_id, COUNT(*) AS late_payments FROM Billing WHERE payment_date > due_date GROUP BY student_id HAVING COUNT(*) > 1;"}
{"prompt": "“Get total maintenance workload handled per month this year.”", "response": "SELECT date_trunc('month', requested_on) AS month, COUNT(*) AS total_requests FROM MaintenanceRequests WHERE requested_on >= '2025-01-01' GROUP BY month ORDER BY month;"}
{"prompt": "“List mess managers and the number of menus they’ve created this semester.”", "response": "SELECT mm.name, COUNT(menu_id) AS menu_count FROM MessManagers mm JOIN MessMenus me ON mm.manager_id = me.mess_manager_id WHERE me.date >= '2025-01-01' GROUP BY mm.name;"}
{"prompt": "DocumentManagement", "response": "nan"}
{"prompt": "Document Creators", "response": "nan"}
{"prompt": "Which documents have I created in the past month?", "response": "sql SELECT * FROM Documents WHERE created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND created_on >= NOW() - INTERVAL '30 days';"}
{"prompt": "Which documents I worked on were last modified by someone else?", "response": "sql SELECT * FROM Documents WHERE created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND last_modified_by_id != created_by_id;"}
{"prompt": "What is the current status of all documents I have created?", "response": "sql SELECT title, status FROM Documents WHERE created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha');"}
{"prompt": "Which of my documents have received reviews?", "response": "sql SELECT d.title, dr.status FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha');"}
{"prompt": "Who has reviewed the documents I authored?", "response": "sql SELECT d.title, u.first_name, u.last_name FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id JOIN Users u ON dr.reviewer_id = u.user_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha');"}
{"prompt": "How many of my documents were approved?", "response": "sql SELECT COUNT(*) FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND da.status = 'Approved';"}
{"prompt": "Which documents I created are pending approval?", "response": "sql SELECT d.title FROM Documents d LEFT JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND (da.status IS NULL OR da.status = 'Pending');"}
{"prompt": "Have any of my documents failed compliance checks?", "response": "sql SELECT d.title FROM Documents d JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND rm.compliance_status = 'Failed';"}
{"prompt": "Which documents under my name are stored with a retention policy over 5 years?", "response": "sql SELECT d.title, rm.retention_period FROM Documents d JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND rm.retention_period > 5;"}
{"prompt": "What actions have I performed in the system recently?", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') ORDER BY timestamp DESC;"}
{"prompt": "What are the latest support tickets I raised as a document creator?", "response": "sql SELECT subject, status FROM SupportTickets WHERE raised_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND role = 'Document Creator' ORDER BY created_at DESC;"}
{"prompt": "How many of my documents have been reviewed but not yet approved?", "response": "sql SELECT COUNT(*) FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id LEFT JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND dr.status = 'Reviewed' AND (da.status IS NULL OR da.status != 'Approved');"}
{"prompt": "Which of my documents have received multiple reviews?", "response": "sql SELECT d.title, COUNT(dr.review_id) AS review_count FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') GROUP BY d.title HAVING COUNT(dr.review_id) > 1;"}
{"prompt": "What metadata (creation and modification) is associated with my training manual documents?", "response": "sql SELECT title, created_on, last_modified_on FROM Documents WHERE created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND title LIKE '%training manual%';"}
{"prompt": "Are there any compliance records that mention my documents?", "response": "sql SELECT cr.details, cr.status FROM ComplianceRecords cr JOIN RecordsManagement rm ON cr.compliance_id = rm.record_id JOIN Documents d ON rm.document_id = d.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha');"}
{"prompt": "What is the total number of documents I’ve authored till date?", "response": "sql SELECT COUNT(*) FROM Documents WHERE created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha');"}
{"prompt": "What are the names and emails of all users who modified my documents?", "response": "sql SELECT DISTINCT u.first_name, u.last_name, u.email FROM Documents d JOIN Users u ON d.last_modified_by_id = u.user_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND d.last_modified_by_id != d.created_by_id;"}
{"prompt": "Which of my documents were last edited in the past week?", "response": "sql SELECT title FROM Documents WHERE created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND last_modified_on >= NOW() - INTERVAL '7 days';"}
{"prompt": "What feedback did reviewers leave on my onboarding SOP documents?", "response": "sql SELECT dr.comments FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id WHERE d.created_by_id = (SELECT user_id FROM Users WHERE first_name = 'Anisha') AND d.title LIKE '%onboarding SOP%';"}
{"prompt": "Have any of my documents been used in analytics reports?", "response": "```sql SELECT ar.name, ar.generated_on FROM AnalyticsReports ar WHERE ar.data::text LIKE '%'"}
{"prompt": "Document Approvers", "response": "nan"}
{"prompt": "Which documents are currently pending my approval?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND da.status = 'Pending';"}
{"prompt": "How many documents have I approved this month?", "response": "sql SELECT COUNT(*) FROM DocumentApprovals WHERE approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND status = 'Approved' AND approval_date >= NOW() - INTERVAL '30 days';"}
{"prompt": "Which documents did I reject and why?", "response": "sql SELECT d.title, da.status FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND da.status = 'Rejected';"}
{"prompt": "What documents were sent to me without being reviewed first?", "response": "sql SELECT d.title FROM Documents d WHERE d.document_id NOT IN (SELECT document_id FROM DocumentReviews) AND d.document_id IN (SELECT document_id FROM DocumentApprovals WHERE approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha'));"}
{"prompt": "When did I last approve any document?", "response": "sql SELECT MAX(approval_date) FROM DocumentApprovals WHERE approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha');"}
{"prompt": "What is the current approval status of all documents I’ve reviewed?", "response": "sql SELECT d.title, da.status FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha');"}
{"prompt": "Which documents required multiple rounds of review before my approval?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') GROUP BY d.title HAVING COUNT(dr.review_id) > 1;"}
{"prompt": "Who created the documents I’ve approved this week?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM Documents d JOIN Users u ON d.created_by_id = u.user_id JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND da.approval_date >= NOW() - INTERVAL '7 days';"}
{"prompt": "How many HR policy documents have I approved?", "response": "sql SELECT COUNT(*) FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND d.title LIKE '%HR policy%' AND da.status = 'Approved';"}
{"prompt": "What was the timestamp and IP address of my last approval action?", "response": "sql SELECT timestamp, ip_address FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND action LIKE '%approve%' ORDER BY timestamp DESC LIMIT 1;"}
{"prompt": "Which documents are still awaiting approval, regardless of who is responsible?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.status = 'Pending';"}
{"prompt": "What are the documents I approved but were later flagged for compliance issues?", "response": "sql SELECT DISTINCT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND rm.compliance_status = 'Failed';"}
{"prompt": "Which teams or departments are the most frequent source of documents I approve?", "response": "sql SELECT u.role, COUNT(*) FROM Documents d JOIN Users u ON d.created_by_id = u.user_id JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') GROUP BY u.role ORDER BY COUNT(*) DESC;"}
{"prompt": "What comments did reviewers leave on documents I approved?", "response": "sql SELECT d.title, dr.comments FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND da.status = 'Approved';"}
{"prompt": "How many documents have I rejected more than once (resubmitted after revision)?", "response": "sql SELECT COUNT(*) FROM (SELECT document_id FROM DocumentApprovals WHERE approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND status = 'Rejected' GROUP BY document_id HAVING COUNT(*) > 1) AS sub;"}
{"prompt": "What are the oldest pending approvals still in my queue?", "response": "sql SELECT d.title, da.approval_date FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND da.status = 'Pending' ORDER BY da.approval_date ASC;"}
{"prompt": "Have I ever approved a document that didn’t go through any review process?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND d.document_id NOT IN (SELECT document_id FROM DocumentReviews);"}
{"prompt": "What documents I approved were later referenced in AnalyticsReports?", "response": "```sql SELECT ar.name, ar.generated_on FROM AnalyticsReports ar WHERE ar.data::text LIKE '%'"}
{"prompt": "What are the compliance statuses of documents I’ve signed off on?", "response": "sql SELECT d.title, rm.compliance_status FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha');"}
{"prompt": "How many documents I approved were later revised by someone else?", "response": "sql SELECT COUNT(*) FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.approver_id = (SELECT user_id FROM Users WHERE first_name = 'Neha') AND d.last_modified_by_id != d.created_by_id AND d.last_modified_on > da.approval_date;"}
{"prompt": "End Users / Viewers", "response": "nan"}
{"prompt": "What are the most recently approved documents I can view?", "response": "sql SELECT d.title, da.approval_date FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE da.status = 'Approved' ORDER BY da.approval_date DESC LIMIT 10;"}
{"prompt": "Which documents were updated in the last week?", "response": "sql SELECT title, last_modified_on FROM Documents WHERE last_modified_on >= NOW() - INTERVAL '7 days';"}
{"prompt": "Where can I find documents related to remote work policies?", "response": "sql SELECT title FROM Documents WHERE title LIKE '%remote work policy%';"}
{"prompt": "What training materials have been added recently?", "response": "sql SELECT title FROM Documents WHERE title LIKE '%training%' ORDER BY created_on DESC LIMIT 10;"}
{"prompt": "Which SOPs are currently approved and ready for use?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE d.title LIKE '%SOP%' AND da.status = 'Approved';"}
{"prompt": "What documents have been created by the HR team?", "response": "sql SELECT d.title FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE u.role = 'HR';"}
{"prompt": "Who created the document titled 'Onboarding Guide'?", "response": "sql SELECT u.first_name, u.last_name FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE d.title = 'Onboarding Guide';"}
{"prompt": "Which documents were modified after they were approved?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE d.last_modified_on > da.approval_date;"}
{"prompt": "What are the latest clinical protocol documents available?", "response": "sql SELECT title FROM Documents WHERE title LIKE '%clinical protocol%' ORDER BY created_on DESC;"}
{"prompt": "What documents have not yet been approved and may be outdated?", "response": "sql SELECT d.title FROM Documents d WHERE d.document_id NOT IN (SELECT document_id FROM DocumentApprovals WHERE status = 'Approved');"}
{"prompt": "Are there any compliance forms that have failed verification?", "response": "sql SELECT d.title FROM Documents d JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE rm.compliance_status = 'Failed';"}
{"prompt": "What documents are tagged under 'project roadmap'?", "response": "sql SELECT title FROM Documents WHERE title LIKE '%project roadmap%';"}
{"prompt": "Which documents were created by engineering team members?", "response": "sql SELECT d.title FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE u.role = 'Engineering';"}
{"prompt": "What are the most commonly viewed documents in the system? (Assuming log-based proxy)", "response": "sql SELECT d.title, COUNT(*) AS views FROM Documents d JOIN SystemLogs sl ON d.created_by_id = sl.user_id WHERE sl.action LIKE '%view%' GROUP BY d.title ORDER BY views DESC LIMIT 10;"}
{"prompt": "Can I view the document history for a specific title, say 'Vendor Contract'?", "response": "sql SELECT d.title, d.created_on, d.last_modified_on FROM Documents d WHERE d.title = 'Vendor Contract';"}
{"prompt": "Which documents were reviewed but not yet approved?", "response": "sql SELECT DISTINCT d.title FROM Documents d JOIN DocumentReviews dr ON d.document_id = dr.document_id WHERE d.document_id NOT IN (SELECT document_id FROM DocumentApprovals WHERE status = 'Approved');"}
{"prompt": "What are all documents created by users with the role 'Legal'?", "response": "sql SELECT d.title FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE u.role = 'Legal';"}
{"prompt": "Which documents are retained for more than 5 years?", "response": "sql SELECT d.title FROM Documents d JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE rm.retention_period > 5;"}
{"prompt": "Are there any technical manuals available for internal use?", "response": "sql SELECT title FROM Documents WHERE title LIKE '%technical manual%';"}
{"prompt": "Which documents have been approved by Neha?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id JOIN Users u ON da.approver_id = u.user_id WHERE u.first_name = 'Neha' AND da.status = 'Approved';"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Which support tickets are still unresolved?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "Who raised the highest number of tickets last month?", "response": "sql SELECT u.first_name, u.last_name, COUNT(*) AS ticket_count FROM SupportTickets st JOIN Users u ON st.raised_by_id = u.user_id WHERE DATE_PART('month', st.created_at) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') GROUP BY u.user_id ORDER BY ticket_count DESC LIMIT 1;"}
{"prompt": "What were the most common issues raised by users with the role 'Employee'?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE role = 'Employee' GROUP BY subject ORDER BY count DESC;"}
{"prompt": "Which users have submitted more than 3 unresolved tickets?", "response": "sql SELECT u.first_name, u.last_name, COUNT(*) AS open_tickets FROM SupportTickets st JOIN Users u ON st.raised_by_id = u.user_id WHERE st.status != 'Resolved' GROUP BY u.user_id HAVING COUNT(*) > 3;"}
{"prompt": "What tickets were created during the last system-wide document outage?", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE created_at BETWEEN '2025-06-01 10:00:00' AND '2025-06-01 14:00:00';"}
{"prompt": "Which support requests were raised by new users (registered in last 30 days)?", "response": "sql SELECT st.ticket_id, st.subject FROM SupportTickets st JOIN Users u ON st.raised_by_id = u.user_id WHERE u.last_login >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the average resolution time for support tickets?", "response": "sql SELECT AVG(resolved_at - created_at) AS avg_resolution_time FROM SupportTickets WHERE resolved_at IS NOT NULL;"}
{"prompt": "List unresolved tickets mentioning 'login' issues.", "response": "sql SELECT ticket_id, subject, description FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%login%' OR description LIKE '%login%');"}
{"prompt": "Which users submitted tickets related to document approval problems?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM SupportTickets st JOIN Users u ON st.raised_by_id = u.user_id WHERE st.subject LIKE '%approval%';"}
{"prompt": "Show all tickets raised by Ritika.", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets st JOIN Users u ON st.raised_by_id = u.user_id WHERE u.first_name = 'Ritika';"}
{"prompt": "What tickets remain unresolved for more than 3 days?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE status != 'Resolved' AND created_at <= NOW() - INTERVAL '3 days';"}
{"prompt": "List support tickets resolved today.", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "What document access issues have been reported recently?", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE subject LIKE '%access%' OR description LIKE '%access%' ORDER BY created_at DESC;"}
{"prompt": "Who submitted a ticket about a missing project report?", "response": "sql SELECT u.first_name, u.last_name FROM SupportTickets st JOIN Users u ON st.raised_by_id = u.user_id WHERE st.subject LIKE '%project report%' OR st.description LIKE '%project report%';"}
{"prompt": "What’s the status of the ticket titled “Cannot find document in shared folder”?", "response": "sql SELECT status FROM SupportTickets WHERE subject = 'Cannot find document in shared folder';"}
{"prompt": "Which support tickets were escalated to IT (assuming tagged via description)?", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE description LIKE '%escalated to IT%';"}
{"prompt": "What was the first support ticket created by any user?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets ORDER BY created_at ASC LIMIT 1;"}
{"prompt": "How many tickets were raised per role type?", "response": "sql SELECT role, COUNT(*) AS ticket_count FROM SupportTickets GROUP BY role;"}
{"prompt": "Are there tickets mentioning problems with document review workflows?", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE subject LIKE '%review%' OR description LIKE '%review%';"}
{"prompt": "What was the most recent support interaction related to document metadata?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets WHERE subject LIKE '%metadata%' OR description LIKE '%metadata%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "Records Managers", "response": "nan"}
{"prompt": "Which documents are scheduled for disposal (retention period is over)?", "response": "```sql SELECT rm.record_id, d.title, rm.retention_period FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE d.created_on + (rm.retention_period"}
{"prompt": "What documents have a 'Non-Compliant' compliance status?", "response": "sql SELECT d.title, rm.compliance_status FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.compliance_status = 'Non-Compliant';"}
{"prompt": "List all documents currently marked for permanent retention.", "response": "sql SELECT d.title, rm.retention_period FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.retention_period = -1;"}
{"prompt": "Which records have passed their retention period but haven’t been deleted?", "response": "```sql SELECT d.title, rm.retention_period FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE d.created_on + (rm.retention_period"}
{"prompt": "Show documents archived more than 5 years ago.", "response": "sql SELECT d.title FROM Documents d WHERE d.created_on <= CURRENT_DATE - INTERVAL '5 years';"}
{"prompt": "Which document types are stored under 'legal' classification?", "response": "sql SELECT d.title, rm.record_type FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.record_type = 'legal';"}
{"prompt": "List records created by a specific user named Varun.", "response": "sql SELECT d.title FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE u.first_name = 'Varun';"}
{"prompt": "How many records were marked compliant this year?", "response": "sql SELECT COUNT(*) FROM RecordsManagement WHERE compliance_status = 'Compliant' AND document_id IN (SELECT document_id FROM Documents WHERE EXTRACT(YEAR FROM created_on) = EXTRACT(YEAR FROM CURRENT_DATE));"}
{"prompt": "Which documents have compliance issues flagged in the last compliance check?", "response": "sql SELECT cr.details FROM ComplianceRecords cr WHERE cr.status = 'Non-Compliant' AND cr.check_date = (SELECT MAX(check_date) FROM ComplianceRecords);"}
{"prompt": "What are the top 5 oldest documents still marked “Compliant”?", "response": "sql SELECT d.title, d.created_on FROM Documents d JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE rm.compliance_status = 'Compliant' ORDER BY d.created_on ASC LIMIT 5;"}
{"prompt": "List documents with retention period longer than 7 years.", "response": "sql SELECT d.title, rm.retention_period FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.retention_period > 7;"}
{"prompt": "Retrieve the compliance check status of documents reviewed last month.", "response": "sql SELECT cr.details, cr.status FROM ComplianceRecords cr WHERE DATE_PART('month', check_date) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "Which documents are still active but were created over 8 years ago?", "response": "sql SELECT d.title FROM Documents d WHERE d.status = 'Active' AND d.created_on <= CURRENT_DATE - INTERVAL '8 years';"}
{"prompt": "How many documents have been modified in the last 30 days?", "response": "sql SELECT COUNT(*) FROM Documents WHERE last_modified_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Find records with missing compliance status.", "response": "sql SELECT d.title FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.compliance_status IS NULL;"}
{"prompt": "What documents were created but never reviewed or approved?", "response": "sql SELECT d.title FROM Documents d WHERE d.document_id NOT IN (SELECT document_id FROM DocumentReviews) AND d.document_id NOT IN (SELECT document_id FROM DocumentApprovals);"}
{"prompt": "Which records have been checked for compliance this week?", "response": "sql SELECT cr.details, cr.status FROM ComplianceRecords cr WHERE DATE_PART('week', check_date) = DATE_PART('week', CURRENT_DATE);"}
{"prompt": "List document titles that are of type 'policy' and compliant.", "response": "sql SELECT d.title FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.record_type = 'policy' AND rm.compliance_status = 'Compliant';"}
{"prompt": "What’s the average retention period across all records?", "response": "sql SELECT AVG(retention_period) FROM RecordsManagement;"}
{"prompt": "Who are the users responsible for documents with non-compliant status?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id JOIN Users u ON d.created_by_id = u.user_id WHERE rm.compliance_status = 'Non-Compliant';"}
{"prompt": "Compliance / Legal Team", "response": "nan"}
{"prompt": "Which documents have been flagged as 'Non-Compliant'?", "response": "sql SELECT d.title FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.compliance_status = 'Non-Compliant';"}
{"prompt": "List all compliance checks conducted in the last 30 days.", "response": "sql SELECT * FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which documents do not have any compliance record yet?", "response": "sql SELECT d.title FROM Documents d WHERE d.document_id NOT IN (SELECT DISTINCT document_id FROM RecordsManagement);"}
{"prompt": "Show me documents that failed the last compliance audit.", "response": "sql SELECT cr.details FROM ComplianceRecords cr WHERE cr.status = 'Non-Compliant' AND cr.check_date = (SELECT MAX(check_date) FROM ComplianceRecords);"}
{"prompt": "How many documents were marked compliant this year?", "response": "sql SELECT COUNT(*) FROM RecordsManagement WHERE compliance_status = 'Compliant' AND document_id IN (SELECT document_id FROM Documents WHERE EXTRACT(YEAR FROM created_on) = EXTRACT(YEAR FROM CURRENT_DATE));"}
{"prompt": "List all documents created without going through approval.", "response": "sql SELECT d.title FROM Documents d WHERE d.document_id NOT IN (SELECT document_id FROM DocumentApprovals);"}
{"prompt": "Which users created documents that are currently non-compliant?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM Users u JOIN Documents d ON u.user_id = d.created_by_id JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE rm.compliance_status = 'Non-Compliant';"}
{"prompt": "Find documents with a retention period shorter than 3 years.", "response": "sql SELECT d.title, rm.retention_period FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.retention_period < 3;"}
{"prompt": "What is the average retention period for compliant documents?", "response": "sql SELECT AVG(retention_period) FROM RecordsManagement WHERE compliance_status = 'Compliant';"}
{"prompt": "Show all compliance records with status and check date for this quarter.", "response": "sql SELECT * FROM ComplianceRecords WHERE DATE_TRUNC('quarter', check_date) = DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which documents were approved but never had a compliance check?", "response": "sql SELECT d.title FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id WHERE d.document_id NOT IN (SELECT document_id FROM RecordsManagement);"}
{"prompt": "Retrieve full audit trail (logs) of users who modified documents recently.", "response": "sql SELECT u.first_name, u.last_name, sl.action, sl.timestamp FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action LIKE '%modified%' AND sl.timestamp >= CURRENT_DATE - INTERVAL '15 days';"}
{"prompt": "List documents tagged as ‘legal’ type but not yet reviewed.", "response": "sql SELECT d.title FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE rm.record_type = 'legal' AND d.document_id NOT IN (SELECT document_id FROM DocumentReviews);"}
{"prompt": "What documents are due for a compliance review next month (based on annual cycle)?", "response": "sql SELECT d.title FROM Documents d JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE EXTRACT(MONTH FROM d.created_on) = EXTRACT(MONTH FROM CURRENT_DATE + INTERVAL '1 month');"}
{"prompt": "Identify any compliance records marked “Pending” or “Incomplete.”", "response": "sql SELECT * FROM ComplianceRecords WHERE status IN ('Pending', 'Incomplete');"}
{"prompt": "What are the latest 5 compliance checks with status details?", "response": "sql SELECT * FROM ComplianceRecords ORDER BY check_date DESC LIMIT 5;"}
{"prompt": "Count of documents per compliance status.", "response": "sql SELECT compliance_status, COUNT(*) FROM RecordsManagement GROUP BY compliance_status;"}
{"prompt": "Which document titles were created by legal team users (role-based)?", "response": "sql SELECT d.title FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE u.role = 'Legal';"}
{"prompt": "List users who last modified documents later flagged non-compliant.", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM Documents d JOIN Users u ON d.last_modified_by_id = u.user_id JOIN RecordsManagement rm ON d.document_id = rm.document_id WHERE rm.compliance_status = 'Non-Compliant';"}
{"prompt": "Fetch compliance details for documents created more than 5 years ago.", "response": "sql SELECT d.title, rm.compliance_status FROM RecordsManagement rm JOIN Documents d ON rm.document_id = d.document_id WHERE d.created_on <= CURRENT_DATE - INTERVAL '5 years';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which users have had more than 5 failed login attempts in the past week?", "response": "sql SELECT u.first_name, u.last_name, COUNT(*) AS failed_attempts FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action = 'failed_login' AND sl.timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY u.user_id HAVING COUNT(*) > 5;"}
{"prompt": "List all users who currently have admin privileges.", "response": "sql SELECT first_name, last_name FROM Users WHERE role = 'Admin';"}
{"prompt": "Show the average document size uploaded by each department.", "response": "sql SELECT u.department, AVG(d.file_size) AS avg_size_kb FROM Documents d JOIN Users u ON d.created_by_id = u.user_id GROUP BY u.department;"}
{"prompt": "Find documents accessed during system downtime windows.", "response": "sql SELECT sl.* FROM SystemLogs sl JOIN DowntimeWindows dw ON sl.timestamp BETWEEN dw.start_time AND dw.end_time WHERE sl.action = 'document_access';"}
{"prompt": "Which documents were last accessed more than 180 days ago?", "response": "sql SELECT d.title FROM Documents d WHERE d.last_accessed < CURRENT_DATE - INTERVAL '180 days';"}
{"prompt": "Get count of document uploads per user for the current month.", "response": "sql SELECT u.first_name, u.last_name, COUNT(*) AS uploads FROM Documents d JOIN Users u ON d.created_by_id = u.user_id WHERE DATE_TRUNC('month', d.created_on) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY u.user_id;"}
{"prompt": "List documents exceeding 100 MB in file size.", "response": "sql SELECT title, file_size FROM Documents WHERE file_size > 102400;"}
{"prompt": "Show system logs related to permission changes in the last 15 days.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%permission%' AND timestamp >= CURRENT_DATE - INTERVAL '15 days';"}
{"prompt": "Which departments have the highest storage usage?", "response": "sql SELECT u.department, SUM(d.file_size) AS total_storage FROM Documents d JOIN Users u ON d.created_by_id = u.user_id GROUP BY u.department ORDER BY total_storage DESC;"}
{"prompt": "List all users whose last login was more than 90 days ago.", "response": "sql SELECT first_name, last_name FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '90 days';"}
{"prompt": "Which documents have been downloaded more than 50 times?", "response": "sql SELECT title, download_count FROM Documents WHERE download_count > 50;"}
{"prompt": "Retrieve all documents uploaded during a server maintenance window.", "response": "sql SELECT d.* FROM Documents d JOIN DowntimeWindows dw ON d.created_on BETWEEN dw.start_time AND dw.end_time;"}
{"prompt": "Show audit logs where document access was denied.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'access_denied';"}
{"prompt": "Which users shared documents with external collaborators?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action = 'external_share';"}
{"prompt": "Count the number of unique users accessing the system daily for the last 7 days.", "response": "sql SELECT DATE(timestamp) AS day, COUNT(DISTINCT user_id) AS unique_users FROM SystemLogs WHERE action = 'login' AND timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY day;"}
{"prompt": "List documents modified during or after the last major patch update.", "response": "sql SELECT d.title FROM Documents d JOIN SystemPatches sp ON d.last_modified >= sp.applied_on WHERE sp.patch_type = 'Major';"}
{"prompt": "Show all backup events performed in the last month.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'backup' AND timestamp >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which users attempted unauthorized access to restricted documents?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action = 'unauthorized_access';"}
{"prompt": "Get a report of the 10 most frequently accessed documents.", "response": "sql SELECT title, access_count FROM Documents ORDER BY access_count DESC LIMIT 10;"}
{"prompt": "List active sessions per user currently in the system.", "response": "sql SELECT u.first_name, u.last_name, COUNT(*) AS active_sessions FROM UserSessions us JOIN Users u ON us.user_id = u.user_id WHERE us.status = 'active' GROUP BY u.user_id;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which documents had the highest number of views in the past month?", "response": "sql SELECT d.title, COUNT(sl.log_id) AS view_count FROM SystemLogs sl JOIN Documents d ON sl.document_id = d.document_id WHERE sl.action = 'view_document' AND sl.timestamp >= CURRENT_DATE - INTERVAL '30 days' GROUP BY d.title ORDER BY view_count DESC;"}
{"prompt": "Which users are accessing the most documents?", "response": "sql SELECT u.first_name, u.last_name, COUNT(sl.log_id) AS access_count FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action = 'view_document' GROUP BY u.user_id, u.first_name, u.last_name ORDER BY access_count DESC;"}
{"prompt": "What is the average time between document creation and approval?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM da.approval_date - d.created_on)) / 3600, 2) AS avg_hours FROM Documents d JOIN DocumentApprovals da ON d.document_id = da.document_id;"}
{"prompt": "Which roles are creating the most documents?", "response": "sql SELECT u.role, COUNT(d.document_id) AS doc_count FROM Documents d JOIN Users u ON d.created_by_id = u.user_id GROUP BY u.role ORDER BY doc_count DESC;"}
{"prompt": "How many documents were approved this week?", "response": "sql SELECT COUNT(*) FROM DocumentApprovals WHERE approval_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What percentage of documents created this month have been approved?", "response": "sql SELECT ROUND((SELECT COUNT(*) FROM DocumentApprovals WHERE approval_date >= date_trunc('month', CURRENT_DATE)) * 100.0 / (SELECT COUNT(*) FROM Documents WHERE created_on >= date_trunc('month', CURRENT_DATE)), 2) AS approval_rate;"}
{"prompt": "Which users have not logged in over the past 30 days?", "response": "sql SELECT first_name, last_name, email FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days' OR last_login IS NULL;"}
{"prompt": "What are the most frequent actions in the system logs?", "response": "sql SELECT action, COUNT(*) AS frequency FROM SystemLogs GROUP BY action ORDER BY frequency DESC;"}
{"prompt": "How many documents are currently in draft status?", "response": "sql SELECT COUNT(*) FROM Documents WHERE status = 'Draft';"}
{"prompt": "What’s the average number of reviews per document?", "response": "sql SELECT ROUND(COUNT(*) * 1.0 / (SELECT COUNT(*) FROM Documents), 2) AS avg_reviews FROM DocumentReviews;"}
{"prompt": "How many documents were archived in the past quarter?", "response": "sql SELECT COUNT(*) FROM Documents WHERE status = 'Archived' AND modified_on >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Which department has the most approved documents?", "response": "sql SELECT u.department, COUNT(*) AS approved_docs FROM DocumentApprovals da JOIN Documents d ON da.document_id = d.document_id JOIN Users u ON d.created_by_id = u.user_id GROUP BY u.department ORDER BY approved_docs DESC;"}
{"prompt": "What is the average review duration across all documents?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM reviewed_on - assigned_on)) / 3600, 2) AS avg_review_hours FROM DocumentReviews WHERE reviewed_on IS NOT NULL;"}
{"prompt": "Which documents have been downloaded the most this year?", "response": "sql SELECT d.title, COUNT(*) AS download_count FROM SystemLogs sl JOIN Documents d ON sl.document_id = d.document_id WHERE sl.action = 'download_document' AND sl.timestamp >= date_trunc('year', CURRENT_DATE) GROUP BY d.title ORDER BY download_count DESC;"}
{"prompt": "What’s the distribution of document statuses in the system?", "response": "sql SELECT status, COUNT(*) AS total FROM Documents GROUP BY status;"}
{"prompt": "How many unique users viewed documents last month?", "response": "sql SELECT COUNT(DISTINCT user_id) AS unique_viewers FROM SystemLogs WHERE action = 'view_document' AND timestamp >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What’s the average document size per department?", "response": "sql SELECT u.department, ROUND(AVG(d.size_kb), 2) AS avg_size_kb FROM Documents d JOIN Users u ON d.created_by_id = u.user_id GROUP BY u.department;"}
{"prompt": "Which users had failed login attempts in the past week?", "response": "sql SELECT DISTINCT u.first_name, u.last_name FROM SystemLogs sl JOIN Users u ON sl.user_id = u.user_id WHERE sl.action = 'failed_login' AND sl.timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the average number of documents accessed per user?", "response": "sql SELECT ROUND(COUNT(*) * 1.0 / (SELECT COUNT(DISTINCT user_id) FROM SystemLogs WHERE action = 'view_document'), 2) AS avg_access_per_user FROM SystemLogs WHERE action = 'view_document';"}
{"prompt": "Which documents have not been accessed in over 90 days?", "response": "sql SELECT d.title FROM Documents d LEFT JOIN SystemLogs sl ON d.document_id = sl.document_id AND sl.action = 'view_document' GROUP BY d.document_id, d.title HAVING MAX(sl.timestamp) < CURRENT_DATE - INTERVAL '90 days' OR MAX(sl.timestamp) IS NULL;"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "What are the most frequently requested features from users in the last 30 days?", "response": "SELECT feature, COUNT(*) AS request_count FROM FeatureRequests WHERE request_date >= NOW() - INTERVAL 30 DAY GROUP BY feature ORDER BY request_count DESC;"}
{"prompt": "Which teams have submitted the highest number of product feedback items?", "response": "SELECT team_name, COUNT(*) AS feedback_count FROM Feedback GROUP BY team_name ORDER BY feedback_count DESC;"}
{"prompt": "What is the average resolution time for bugs reported by QA testers?", "response": "SELECT AVG(TIMESTAMPDIFF(HOUR, reported_at, resolved_at)) AS avg_resolution_hours FROM BugReports WHERE resolved_at IS NOT NULL;"}
{"prompt": "Which features have the lowest user adoption rates?", "response": "SELECT feature_name, adoption_rate FROM FeatureUsage ORDER BY adoption_rate ASC LIMIT 10;"}
{"prompt": "How many feedback entries mention upload lag issues?", "response": "SELECT COUNT(*) FROM Feedback WHERE description LIKE '%upload lag%';"}
{"prompt": "What are the KPIs tracked by the product manager along with their current values?", "response": "SELECT kpi_name, current_value FROM ProductKPIs;"}
{"prompt": "Which sprints included feature rollouts related to document tagging or smart search?", "response": "SELECT sprint_id, feature_name FROM FeatureRollouts WHERE feature_name LIKE '%tagging%' OR feature_name LIKE '%smart search%';"}
{"prompt": "What is the monthly active user count for the DocumentManagement system?", "response": "SELECT MONTH(access_date) AS month, COUNT(DISTINCT user_id) AS active_users FROM AccessLogs GROUP BY MONTH(access_date);"}
{"prompt": "Which product demos were conducted in the last quarter?", "response": "SELECT demo_title, conducted_by, demo_date FROM ProductDemos WHERE demo_date >= CURDATE() - INTERVAL 3 MONTH;"}
{"prompt": "Which departments are experiencing the highest system reliability issues?", "response": "SELECT department, COUNT(*) AS issue_count FROM SystemIssues WHERE issue_type = 'Reliability' GROUP BY department ORDER BY issue_count DESC;"}
{"prompt": "What percentage of roadmap items are marked as “in progress”?", "response": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Roadmap)) AS percent_in_progress FROM Roadmap WHERE status = 'In Progress';"}
{"prompt": "How many user interviews were conducted by the product team last month?", "response": "SELECT COUNT(*) FROM UserInterviews WHERE interview_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();"}
{"prompt": "Which developers worked on the e-signature integration feature?", "response": "SELECT DISTINCT developer_name FROM FeatureAssignments WHERE feature_name = 'E-Signature Integration';"}
{"prompt": "What is the system uptime percentage over the past 90 days?", "response": "SELECT (SUM(uptime_minutes) / (SUM(uptime_minutes) + SUM(downtime_minutes))) * 100 AS uptime_percent FROM SystemLogs WHERE log_date >= CURDATE() - INTERVAL 90 DAY;"}
{"prompt": "How many times was the roadmap updated in the last 6 months?", "response": "SELECT COUNT(*) FROM RoadmapChanges WHERE change_date >= CURDATE() - INTERVAL 6 MONTH;"}
{"prompt": "Which features had the highest number of bug reports after release?", "response": "SELECT feature_name, COUNT(*) AS bug_count FROM BugReports GROUP BY feature_name ORDER BY bug_count DESC;"}
{"prompt": "What is the current adoption rate of the smart search feature?", "response": "SELECT adoption_rate FROM FeatureUsage WHERE feature_name = 'Smart Search';"}
{"prompt": "How many backend constraints were flagged by engineers during planning?", "response": "SELECT COUNT(*) FROM EngineeringFeedback WHERE feedback_type = 'Constraint';"}
{"prompt": "Which release included both version control and analytics enhancements?", "response": "SELECT release_id, release_date FROM Releases WHERE features LIKE '%version control%' AND features LIKE '%analytics%';"}
{"prompt": "What is the retention rate of users who adopted at least 3 new features in the last 60 days?", "response": "SELECT (COUNT(DISTINCT user_id) * 100.0 / (SELECT COUNT(DISTINCT user_id) FROM FeatureUsage WHERE feature_adoption_date >= CURDATE() - INTERVAL 60 DAY)) AS retention_rate FROM FeatureUsage WHERE features_adopted >= 3 AND retained = 1;"}
{"prompt": "LoanManagement", "response": "nan"}
{"prompt": "Borrowers / Customers", "response": "nan"}
{"prompt": "As Ravi, I want to see all the loans I’ve applied for so far.", "response": "sql SELECT * FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "I want to check the current status of my business expansion loan.", "response": "sql SELECT status FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND amount > 1000000;"}
{"prompt": "I need the EMI payment history for my approved loan.", "response": "sql SELECT * FROM LoanPayments WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND status = 'Approved');"}
{"prompt": "I want to download my repayment schedule.", "response": "sql SELECT payment_date, amount, status FROM LoanPayments WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com'));"}
{"prompt": "I raised a support ticket for EMI restructuring—what’s the status?", "response": "sql SELECT status FROM SupportTickets WHERE raised_by_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND subject LIKE '%EMI restructuring%';"}
{"prompt": "Did the system send me a congratulatory message after I closed my loan?", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND action LIKE '%congratulatory message%';"}
{"prompt": "I want to know when my loan was disbursed.", "response": "sql SELECT disbursement_date FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "When was my loan approved and by which officer?", "response": "sql SELECT approval_date, loan_officer_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "I want to verify if my documents were reviewed by the credit analyst.", "response": "sql SELECT credit_analyst_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "Was there any compliance check on my loan?", "response": "sql SELECT * FROM ComplianceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com'));"}
{"prompt": "How many times have I contacted support since my registration?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE raised_by_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "Which branch processed my loan?", "response": "sql SELECT b.name, b.address FROM Branches b JOIN Users u ON b.manager_id = u.user_id JOIN Loans l ON l.loan_officer_id = u.user_id WHERE l.borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "I want to see logs of all my actions in the portal.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "Which payment methods did I use during my loan repayment?", "response": "sql SELECT DISTINCT payment_method FROM LoanPayments WHERE loan_id IN (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com'));"}
{"prompt": "What’s the total amount I’ve repaid so far?", "response": "sql SELECT SUM(amount) FROM LoanPayments WHERE loan_id IN (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com')) AND status = 'Successful';"}
{"prompt": "What is the interest rate of my personal loan?", "response": "sql SELECT interest_rate FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND status = 'Approved' AND term_months < 60;"}
{"prompt": "When did I last log into the portal?", "response": "sql SELECT last_login FROM Users WHERE email = 'ravi.kumar@example.com';"}
{"prompt": "Which finance records are associated with my loans?", "response": "sql SELECT * FROM FinanceRecords WHERE loan_id IN (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com'));"}
{"prompt": "Has the virtual assistant LUMA handled my questions?", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND action LIKE '%LUMA%';"}
{"prompt": "I want to compare the disbursement dates of my business and personal loans.", "response": "sql SELECT amount, disbursement_date FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND status = 'Approved';"}
{"prompt": "Loan Officers", "response": "nan"}
{"prompt": "Show me the list of new or pending loan applications in my queue.", "response": "sql SELECT * FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND status IN ('New', 'Pending');"}
{"prompt": "I need Ravi Kumar’s loan application details.", "response": "sql SELECT * FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "Did Ravi upload all required documents for his business loan?", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND action LIKE '%uploaded%';"}
{"prompt": "What is the current risk score or analyst assignment for Ravi's loan?", "response": "sql SELECT credit_analyst_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com');"}
{"prompt": "How many applications have I approved this week?", "response": "sql SELECT COUNT(*) FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND status = 'Approved' AND approval_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Who are the borrowers with missing documents that I’ve flagged?", "response": "sql SELECT DISTINCT b.first_name, b.last_name, b.email FROM Borrowers b JOIN Loans l ON b.borrower_id = l.borrower_id JOIN SystemLogs s ON s.user_id = b.borrower_id WHERE l.loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND s.action LIKE '%missing document%';"}
{"prompt": "Show me all EMI restructuring requests I reviewed today.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%EMI restructuring%' AND raised_by_id IN (SELECT borrower_id FROM Borrowers) AND created_at::date = CURRENT_DATE AND role = 'Borrower';"}
{"prompt": "How many loans have I processed that were eventually disbursed?", "response": "sql SELECT COUNT(*) FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND disbursement_date IS NOT NULL;"}
{"prompt": "Which compliance records are associated with the loans I handled?", "response": "sql SELECT * FROM ComplianceRecords WHERE loan_id IN (SELECT loan_id FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com'));"}
{"prompt": "Give me a list of loans flagged for inconsistencies by me this month.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND action LIKE '%flagged%' AND timestamp >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "How many follow-up calls did I schedule this week?", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND action LIKE '%follow-up call%' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Generate a report of loans disbursed by me this month with amounts.", "response": "sql SELECT loan_id, borrower_id, disbursement_date, amount FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND disbursement_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "What is the average processing time for loans I handled this week?", "response": "sql SELECT AVG(approval_date - application_date) AS avg_processing_days FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND approval_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which loans have unusually long approval times?", "response": "sql SELECT loan_id, approval_date - application_date AS processing_days FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND approval_date - application_date > INTERVAL '10 days';"}
{"prompt": "What repayment trends can I observe from borrowers I’ve approved loans for?", "response": "sql SELECT lp.payment_date, lp.amount, lp.status FROM LoanPayments lp JOIN Loans l ON lp.loan_id = l.loan_id WHERE l.loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com');"}
{"prompt": "Which support requests have been resolved for loans under my supervision?", "response": "sql SELECT * FROM SupportTickets WHERE resolved_at IS NOT NULL AND raised_by_id IN (SELECT borrower_id FROM Loans WHERE loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com'));"}
{"prompt": "How many compliance checks were done for loans I forwarded to underwriting?", "response": "sql SELECT COUNT(*) FROM ComplianceRecords WHERE loan_id IN (SELECT loan_id FROM Loans WHERE underwriter_id IS NOT NULL AND loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com'));"}
{"prompt": "Show me logs of actions I took on borrower accounts this week.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com') AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "I want to know which of my loans have received finance record updates.", "response": "sql SELECT fr.* FROM FinanceRecords fr JOIN Loans l ON fr.loan_id = l.loan_id WHERE l.loan_officer_id = (SELECT user_id FROM Users WHERE email = 'ananya.sharma@example.com');"}
{"prompt": "Generate an end-of-week analytics report for loans I managed.", "response": "sql SELECT * FROM AnalyticsReports WHERE generated_on::date = CURRENT_DATE AND name LIKE '%weekly loan report%' OR name LIKE '%Ananya Sharma%';"}
{"prompt": "Credit Analysts", "response": "nan"}
{"prompt": "Show me all loan applications currently assigned to me for analysis.", "response": "sql SELECT * FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com');"}
{"prompt": "Retrieve all financial records associated with Ravi Kumar’s loan.", "response": "sql SELECT * FROM FinanceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com'));"}
{"prompt": "Which loans have been flagged recently for seasonal cash flow variations?", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%seasonal cash flow%' AND timestamp >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Give me a list of borrowers with more than 3 delayed payments.", "response": "sql SELECT loan_id, COUNT(*) AS delays FROM LoanPayments WHERE status = 'Delayed' GROUP BY loan_id HAVING COUNT(*) > 3;"}
{"prompt": "Show the repayment history for Ravi Kumar.", "response": "sql SELECT * FROM LoanPayments WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com')) ORDER BY payment_date;"}
{"prompt": "Which loans in my queue show risk-prone repayment patterns?", "response": "sql SELECT l.loan_id, COUNT(lp.status) AS delayed_count FROM Loans l JOIN LoanPayments lp ON l.loan_id = lp.loan_id WHERE l.credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND lp.status = 'Delayed' GROUP BY l.loan_id HAVING COUNT(lp.status) >= 2;"}
{"prompt": "List the loans I've flagged for credit risk review this month.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND action LIKE '%credit risk%' AND timestamp >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Give me a summary of risk categories among loans I’ve analyzed this week.", "response": "sql SELECT l.status, COUNT(*) FROM Loans l WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND approval_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY l.status;"}
{"prompt": "Pull up the loan IDs I’ve forwarded to the Credit Committee.", "response": "sql SELECT loan_id FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND action LIKE '%forwarded to credit committee%';"}
{"prompt": "Which loan applications in my queue have missing or incomplete finance records?", "response": "sql SELECT loan_id FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND loan_id NOT IN (SELECT DISTINCT loan_id FROM FinanceRecords);"}
{"prompt": "What is the average loan amount I’ve reviewed in the last 14 days?", "response": "sql SELECT AVG(amount) FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND application_date >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "List support tickets raised by borrowers I’m evaluating.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id IN (SELECT borrower_id FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com'));"}
{"prompt": "Which loan sectors have the highest repayment delays this quarter?", "response": "sql SELECT l.loan_id, COUNT(lp.status) AS delay_count FROM Loans l JOIN LoanPayments lp ON l.loan_id = lp.loan_id WHERE lp.status = 'Delayed' AND lp.payment_date >= date_trunc('quarter', CURRENT_DATE) GROUP BY l.loan_id ORDER BY delay_count DESC;"}
{"prompt": "Retrieve the compliance check results for loans I’ve assessed.", "response": "sql SELECT * FROM ComplianceRecords WHERE loan_id IN (SELECT loan_id FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com'));"}
{"prompt": "What is the total disbursed amount of loans I’ve analyzed this year?", "response": "sql SELECT SUM(amount) FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND disbursement_date >= date_trunc('year', CURRENT_DATE);"}
{"prompt": "Show the repayment status distribution across all loans I’ve reviewed.", "response": "sql SELECT lp.status, COUNT(*) FROM LoanPayments lp JOIN Loans l ON lp.loan_id = l.loan_id WHERE l.credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') GROUP BY lp.status;"}
{"prompt": "List overdue loans where I was the assigned credit analyst.", "response": "sql SELECT DISTINCT l.loan_id FROM Loans l JOIN LoanPayments lp ON l.loan_id = lp.loan_id WHERE lp.status = 'Overdue' AND l.credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com');"}
{"prompt": "What feedback or notes have I entered in the system for high-risk loans?", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND action LIKE '%high-risk%' OR action LIKE '%mitigation%';"}
{"prompt": "Generate a performance report of my credit assessment activity this month.", "response": "sql SELECT COUNT(*) AS total_loans, AVG(amount) AS avg_amount, MIN(application_date) AS first_reviewed, MAX(application_date) AS last_reviewed FROM Loans WHERE credit_analyst_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND application_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Pull logs of all risk mitigation actions I’ve recommended.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE email = 'aarav.mehta@example.com') AND action LIKE '%risk mitigation%';"}
{"prompt": "Underwriters", "response": "nan"}
{"prompt": "Show me all applications marked “Pre-approved pending underwriting”.", "response": "sql SELECT * FROM Loans WHERE status = 'Pre-approved pending underwriting';"}
{"prompt": "Retrieve all documentation submitted for Ravi Kumar’s loan application.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com') AND action LIKE '%uploaded%';"}
{"prompt": "Which loans were assigned to me this week for underwriting?", "response": "sql SELECT * FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com') AND application_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Get credit analyst and loan officer notes for Ravi Kumar’s loan.", "response": "sql SELECT * FROM SystemLogs WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com')) AND action LIKE '%note%';"}
{"prompt": "List all loans where collateral includes commercial property.", "response": "sql SELECT * FROM Collateral WHERE type = 'Commercial Property';"}
{"prompt": "What are the active conditional covenants attached to Ravi’s loan?", "response": "sql SELECT * FROM LoanConditions WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com'));"}
{"prompt": "Show all loans approved by me with at least one conditional covenant.", "response": "sql SELECT * FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com') AND loan_id IN (SELECT loan_id FROM LoanConditions);"}
{"prompt": "Which applications are flagged for seasonal income variability?", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%seasonal income%' OR action LIKE '%income variability%';"}
{"prompt": "Pull the latest appraisal valuation for Ravi’s collateral.", "response": "sql SELECT * FROM Collateral WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com')) ORDER BY valuation_date DESC LIMIT 1;"}
{"prompt": "List all loans I’ve approved in the last 30 days along with their statuses.", "response": "sql SELECT loan_id, status, approval_date FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com') AND approval_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Show underwriting audit logs from the past quarter.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%underwriting audit%' AND timestamp >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Identify cases where underwriting policy was manually overridden.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%manual override%' AND user_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com');"}
{"prompt": "List all borderline cases I discussed with Compliance Officers.", "response": "sql SELECT * FROM ComplianceRecords WHERE reviewed_by_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com') AND notes LIKE '%borderline%';"}
{"prompt": "Which loans required AML verification during underwriting?", "response": "sql SELECT * FROM ComplianceRecords WHERE check_type = 'AML' AND loan_id IN (SELECT loan_id FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com'));"}
{"prompt": "What are the outcomes of interest rate stress simulations on Ravi’s loan?", "response": "sql SELECT * FROM RiskModels WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE email = 'ravi.kumar@example.com')) AND scenario LIKE '%interest rate%';"}
{"prompt": "List all training sessions I conducted for junior underwriters.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%training%' AND user_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com');"}
{"prompt": "What updates have I made to underwriting policy this month?", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%policy update%' AND timestamp >= date_trunc('month', CURRENT_DATE) AND user_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com');"}
{"prompt": "List loans I approved that are currently in disbursal workflow.", "response": "sql SELECT * FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com') AND status = 'Approved' AND disbursement_date IS NULL;"}
{"prompt": "Find applications with incomplete KYC reviewed by me.", "response": "sql SELECT * FROM ComplianceRecords WHERE check_type = 'KYC' AND status != 'Completed' AND loan_id IN (SELECT loan_id FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com'));"}
{"prompt": "Generate a summary report of all loans underwritten by me with final decisions.", "response": "sql SELECT status, COUNT(*) AS total FROM Loans WHERE underwriter_id = (SELECT user_id FROM Users WHERE email = 'meena.iyer@example.com') GROUP BY status;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Show me all open support tickets from borrowers who need assistance.", "response": "sql SELECT * FROM SupportTickets WHERE status = 'Open' AND role = 'Borrower';"}
{"prompt": "Find the most recent support ticket raised by Ravi Kumar.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar') ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "List all tickets related to EMI clarification.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%EMI%' OR description LIKE '%EMI%';"}
{"prompt": "How many tickets were raised for issues related to downloading documents in the past 7 days?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%download%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show resolved tickets about PAN verification delays.", "response": "sql SELECT * FROM SupportTickets WHERE status = 'Resolved' AND description LIKE '%PAN verification%';"}
{"prompt": "List all tickets raised by borrowers aged 60 or above.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id IN (SELECT borrower_id FROM Borrowers WHERE DATE_PART('year', AGE(date_of_birth)) >= 60);"}
{"prompt": "How many borrowers asked about auto-debit setup this month?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%auto-debit%' AND created_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Get all tickets that mention issues with mobile app access.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%mobile app%' OR subject LIKE '%mobile app%';"}
{"prompt": "List unresolved tickets that were created more than 3 days ago.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND created_at < CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "Which ticket subjects have occurred most frequently this week?", "response": "sql SELECT subject, COUNT(*) as frequency FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Find all borrower tickets regarding EMI schedule downloads.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%EMI schedule%' OR subject LIKE '%EMI schedule%';"}
{"prompt": "Show tickets involving browser compatibility problems.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%browser%' OR subject LIKE '%browser%';"}
{"prompt": "Get all complaints related to technical issues with document uploads.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%upload%' AND description LIKE '%document%';"}
{"prompt": "List all support queries where legal escalation is mentioned.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%legal team%' OR description LIKE '%legal department%';"}
{"prompt": "How many support tickets were created in the last 5 days, day-wise?", "response": "sql SELECT DATE(created_at) AS date, COUNT(*) FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '5 days' GROUP BY DATE(created_at) ORDER BY DATE(created_at);"}
{"prompt": "Retrieve all support interactions raised by Ravi Kumar during his business loan application.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "List tickets mentioning missed deadlines by borrowers.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%missed deadline%';"}
{"prompt": "Count how many tickets were marked resolved on the same day they were created.", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_at) = DATE(resolved_at);"}
{"prompt": "Show support tickets that mention trouble understanding EMI terms.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%EMI%' AND description LIKE '%understand%';"}
{"prompt": "Get all tickets mentioning trouble with the sanction letter download.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%sanction letter%' AND description LIKE '%download%';"}
{"prompt": "Branch Managers", "response": "nan"}
{"prompt": "Show me the disbursed loans from the Pune branch this month.", "response": "sql SELECT * FROM Loans WHERE status = 'Disbursed' AND loan_id IN (SELECT loan_id FROM Users WHERE user_id IN (SELECT manager_id FROM Branches WHERE name = 'Pune')) AND disbursement_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List loans that had the shortest turnaround time from application to approval.", "response": "sql SELECT loan_id, (approval_date - application_date) AS turnaround_days FROM Loans WHERE approval_date IS NOT NULL ORDER BY turnaround_days ASC;"}
{"prompt": "Find all loans approved under my branch.", "response": "sql SELECT * FROM Loans WHERE loan_officer_id IN (SELECT user_id FROM Users WHERE user_id = (SELECT manager_id FROM Branches WHERE name = 'Pune')) AND status = 'Approved';"}
{"prompt": "Identify support tickets escalated for manager intervention.", "response": "sql SELECT * FROM SupportTickets WHERE status = 'Escalated' OR description LIKE '%manager intervention%';"}
{"prompt": "Get the total number of loans disbursed last week in my branch.", "response": "sql SELECT COUNT(*) FROM Loans WHERE disbursement_date >= CURRENT_DATE - INTERVAL '7 days' AND loan_officer_id IN (SELECT user_id FROM Users WHERE user_id = (SELECT manager_id FROM Branches WHERE name = 'Pune'));"}
{"prompt": "Show all delinquent loans (with missed payments) from my branch.", "response": "sql SELECT * FROM Loans WHERE loan_id IN (SELECT loan_id FROM LoanPayments WHERE status = 'Missed') AND loan_officer_id IN (SELECT user_id FROM Users WHERE user_id = (SELECT manager_id FROM Branches WHERE name = 'Pune'));"}
{"prompt": "How many EMI payments were missed this quarter by borrowers in my branch?", "response": "sql SELECT COUNT(*) FROM LoanPayments WHERE status = 'Missed' AND payment_date >= date_trunc('quarter', CURRENT_DATE) AND loan_id IN (SELECT loan_id FROM Loans WHERE loan_officer_id IN (SELECT user_id FROM Users WHERE user_id = (SELECT manager_id FROM Branches WHERE name = 'Pune')));"}
{"prompt": "Which users report directly to me as the Branch Manager?", "response": "sql SELECT * FROM Users WHERE user_id IN (SELECT manager_id FROM Branches WHERE name = 'Pune');"}
{"prompt": "Get the number of loans processed per loan officer in my branch.", "response": "sql SELECT loan_officer_id, COUNT(*) AS total_loans FROM Loans WHERE loan_officer_id IN (SELECT user_id FROM Users WHERE user_id = (SELECT manager_id FROM Branches WHERE name = 'Pune')) GROUP BY loan_officer_id;"}
{"prompt": "List all loans flagged by the compliance team in my branch.", "response": "sql SELECT * FROM Loans WHERE loan_id IN (SELECT loan_id FROM ComplianceRecords WHERE compliance_status = 'Flagged');"}
{"prompt": "Show me Ravi Kumar’s loan approval timeline.", "response": "sql SELECT application_date, approval_date, disbursement_date FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "List borrowers with repeated missed payments.", "response": "sql SELECT borrower_id, COUNT(*) AS missed_payments FROM Loans JOIN LoanPayments USING (loan_id) WHERE status = 'Missed' GROUP BY borrower_id HAVING COUNT(*) > 1;"}
{"prompt": "Identify loans in progress that are pending underwriting.", "response": "sql SELECT * FROM Loans WHERE status = 'Pre-approved pending underwriting';"}
{"prompt": "Find loan officers with the highest number of approved loans this month.", "response": "sql SELECT loan_officer_id, COUNT(*) AS approved_count FROM Loans WHERE status = 'Approved' AND approval_date >= date_trunc('month', CURRENT_DATE) GROUP BY loan_officer_id ORDER BY approved_count DESC;"}
{"prompt": "List all compliance checks conducted this week.", "response": "sql SELECT * FROM ComplianceRecords WHERE check_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show finance records associated with Ravi Kumar’s loan.", "response": "sql SELECT * FROM FinanceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar'));"}
{"prompt": "Get all active support tickets related to EMI restructuring.", "response": "sql SELECT * FROM SupportTickets WHERE status != 'Resolved' AND (description LIKE '%EMI restructuring%' OR subject LIKE '%EMI restructuring%');"}
{"prompt": "Display system logs of users from my branch during this week.", "response": "sql SELECT * FROM SystemLogs WHERE user_id IN (SELECT user_id FROM Users WHERE user_id = (SELECT manager_id FROM Branches WHERE name = 'Pune')) AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the most common support ticket subjects in my branch?", "response": "sql SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE raised_by_id IN (SELECT borrower_id FROM Borrowers) GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Show all analytics reports generated in the last 30 days.", "response": "sql SELECT * FROM AnalyticsReports WHERE generated_on >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "Show all loan disbursals recorded yesterday.", "response": "sql SELECT * FROM FinanceRecords WHERE transaction_type = 'Disbursal' AND transaction_date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "List EMI collections received yesterday.", "response": "sql SELECT * FROM FinanceRecords WHERE transaction_type = 'EMI Collection' AND transaction_date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "Find transactions where EMI amount was not equal to expected.", "response": "sql SELECT * FROM FinanceRecords WHERE transaction_type = 'EMI Collection' AND amount != expected_amount;"}
{"prompt": "Show all journal entries linked to Ravi Kumar’s business loan.", "response": "sql SELECT * FROM FinanceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar'));"}
{"prompt": "List all accrued interest transactions this month.", "response": "sql SELECT * FROM FinanceRecords WHERE transaction_type = 'Accrued Interest' AND transaction_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Show all provisioning entries made this quarter.", "response": "sql SELECT * FROM FinanceRecords WHERE transaction_type = 'Loan Provisioning' AND transaction_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Count the number of prepayments made this month.", "response": "sql SELECT COUNT(*) FROM FinanceRecords WHERE transaction_type = 'Prepayment' AND transaction_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Display all foreclosure transactions done this year.", "response": "sql SELECT * FROM FinanceRecords WHERE transaction_type = 'Foreclosure' AND EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "Show monthly interest income grouped by month.", "response": "sql SELECT DATE_TRUNC('month', transaction_date) AS month, SUM(amount) AS interest_income FROM FinanceRecords WHERE transaction_type = 'Accrued Interest' GROUP BY month ORDER BY month DESC;"}
{"prompt": "List loans that were charged penalties this week.", "response": "sql SELECT DISTINCT loan_id FROM FinanceRecords WHERE transaction_type = 'Penalty' AND transaction_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show all finance transactions for Ravi Kumar’s loan.", "response": "sql SELECT * FROM FinanceRecords WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar')) ORDER BY transaction_date DESC;"}
{"prompt": "Count TDS deduction entries created last month.", "response": "sql SELECT COUNT(*) FROM FinanceRecords WHERE transaction_type = 'TDS Deduction' AND transaction_date >= date_trunc('month', CURRENT_DATE - INTERVAL '1 month') AND transaction_date < date_trunc('month', CURRENT_DATE);"}
{"prompt": "Show all TDS certificates issued so far.", "response": "sql SELECT * FROM TDSCertificates;"}
{"prompt": "List loans with auto-debit failure transactions.", "response": "sql SELECT * FROM FinanceRecords WHERE description LIKE '%auto-debit%' AND status = 'Failed';"}
{"prompt": "Find all negative ledger adjustments in last 15 days.", "response": "sql SELECT * FROM FinanceRecords WHERE adjustment_type = 'Negative' AND transaction_date >= CURRENT_DATE - INTERVAL '15 days';"}
{"prompt": "List finance records that mention manual correction.", "response": "sql SELECT * FROM FinanceRecords WHERE description LIKE '%manual correction%' OR source = 'Manual Entry';"}
{"prompt": "Show interest income by loan ID for the current year.", "response": "sql SELECT loan_id, SUM(amount) AS total_interest FROM FinanceRecords WHERE transaction_type = 'Accrued Interest' AND transaction_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY loan_id ORDER BY total_interest DESC;"}
{"prompt": "Show transactions flagged with interest computation errors.", "response": "sql SELECT * FROM FinanceRecords WHERE description LIKE '%interest computation error%';"}
{"prompt": "Display all transactions posted by Nikita Rao this week.", "response": "sql SELECT * FROM FinanceRecords WHERE processed_by = 'Nikita Rao' AND transaction_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show journal entries marked for audit review last month.", "response": "sql SELECT * FROM FinanceRecords WHERE notes LIKE '%audit%' AND transaction_date >= date_trunc('month', CURRENT_DATE - INTERVAL '1 month') AND transaction_date < date_trunc('month', CURRENT_DATE);"}
{"prompt": "Compliance / Risk Management Team", "response": "nan"}
{"prompt": "List all loans with pending KYC verification.", "response": "sql SELECT * FROM Loans WHERE kyc_status = 'Pending';"}
{"prompt": "Show all loans with AML flags raised in the last 30 days.", "response": "sql SELECT * FROM ComplianceFlags WHERE flag_type = 'AML' AND flag_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Retrieve compliance audit trail for Ravi Kumar’s loan.", "response": "sql SELECT * FROM AuditTrail WHERE loan_id = (SELECT loan_id FROM Loans WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar'));"}
{"prompt": "List loans issued to politically exposed persons (PEPs).", "response": "sql SELECT * FROM Loans WHERE borrower_id IN (SELECT borrower_id FROM Borrowers WHERE pep_status = 'Yes');"}
{"prompt": "Show loans from sensitive industries with disbursals this quarter.", "response": "sql SELECT * FROM Loans WHERE industry_category IN ('Arms', 'Gambling', 'Mining') AND disbursal_date >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "Find all loans where collateral documentation is incomplete.", "response": "sql SELECT * FROM Loans WHERE collateral_status = 'Incomplete';"}
{"prompt": "Display loans flagged for documentation mismatch in the last 7 days.", "response": "sql SELECT * FROM ComplianceFlags WHERE flag_type = 'Documentation Mismatch' AND flag_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List all high-risk loans currently active.", "response": "sql SELECT * FROM Loans WHERE risk_level = 'High' AND status = 'Active';"}
{"prompt": "Show borrowers flagged more than once for compliance checks.", "response": "sql SELECT borrower_id, COUNT(*) AS flag_count FROM ComplianceFlags GROUP BY borrower_id HAVING COUNT(*) > 1;"}
{"prompt": "Retrieve recent RBI regulation updates logged in the system.", "response": "sql SELECT * FROM RegulatoryUpdates ORDER BY update_date DESC LIMIT 10;"}
{"prompt": "List all loans with overdue internal compliance review.", "response": "sql SELECT * FROM Loans WHERE compliance_review_due_date < CURRENT_DATE AND compliance_review_status = 'Pending';"}
{"prompt": "Get compliance flags associated with Ravi Kumar.", "response": "sql SELECT * FROM ComplianceFlags WHERE borrower_id = (SELECT borrower_id FROM Borrowers WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "Show audit logs for loans reviewed by Arvind Menon this month.", "response": "sql SELECT * FROM AuditTrail WHERE reviewed_by = 'Arvind Menon' AND action_date >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Identify loans with missing annexure in collateral documentation.", "response": "sql SELECT * FROM Loans WHERE annexure_attached = FALSE AND collateral_status = 'Submitted';"}
{"prompt": "Display all compliance reports prepared in the last 30 days.", "response": "sql SELECT * FROM ComplianceReports WHERE report_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Show all escalations made after a forensic audit.", "response": "sql SELECT * FROM Escalations WHERE reason LIKE '%forensic audit%';"}
{"prompt": "List loans where moratorium rules were applied.", "response": "sql SELECT * FROM Loans WHERE moratorium_applied = TRUE;"}
{"prompt": "Get the compliance risk score for each active loan.", "response": "sql SELECT loan_id, risk_score FROM ComplianceRiskScores WHERE loan_id IN (SELECT loan_id FROM Loans WHERE status = 'Active');"}
{"prompt": "Find branches with loans under compliance investigation.", "response": "sql SELECT DISTINCT branch_id FROM Loans WHERE loan_id IN (SELECT loan_id FROM ComplianceFlags WHERE flag_status = 'Under Investigation');"}
{"prompt": "Show all internal policy breaches logged in the system.", "response": "sql SELECT * FROM PolicyBreaches ORDER BY breach_date DESC;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Show all system alerts generated today.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%alert%' AND timestamp::date = CURRENT_DATE;"}
{"prompt": "List all failed login attempts in the last 24 hours.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'Login Failed' AND timestamp >= NOW() - INTERVAL '24 hours';"}
{"prompt": "Display last 10 users who logged in successfully.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'Login Success' ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "Retrieve logs of users who accessed the loan module.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%accessed loan module%';"}
{"prompt": "Show password reset actions from the past week.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'Password Reset' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Get audit logs for Ravi Kumar’s account activity.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE first_name = 'Ravi' AND last_name = 'Kumar');"}
{"prompt": "List all IP addresses used to log in by administrators.", "response": "sql SELECT DISTINCT ip_address FROM SystemLogs WHERE user_id IN (SELECT user_id FROM Users WHERE role = 'Admin');"}
{"prompt": "Show changes made to loan status fields in the system.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%loan status updated%';"}
{"prompt": "Find users who haven't logged in for more than 30 days.", "response": "sql SELECT * FROM Users WHERE last_login < CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "List all roles assigned in the last 10 days.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%role assigned%' AND timestamp >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "Display all logs related to document upload failures.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%upload failed%';"}
{"prompt": "Retrieve the complete action history for user 'Priya Desai'.", "response": "sql SELECT * FROM SystemLogs WHERE user_id = (SELECT user_id FROM Users WHERE first_name = 'Priya' AND last_name = 'Desai');"}
{"prompt": "List all system actions taken after 10 PM yesterday.", "response": "sql SELECT * FROM SystemLogs WHERE timestamp >= CURRENT_DATE - INTERVAL '1 day' + INTERVAL '22 hours';"}
{"prompt": "Show log entries where permission changes occurred.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%permission% changed%';"}
{"prompt": "Identify the top 5 most common actions logged by the system.", "response": "sql SELECT action, COUNT(*) AS count FROM SystemLogs GROUP BY action ORDER BY count DESC LIMIT 5;"}
{"prompt": "Find all unauthorized access attempts flagged by the system.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%unauthorized access%';"}
{"prompt": "List all users whose credentials were updated in the last month.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'Credentials Updated' AND timestamp >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Get system actions performed from unrecognized IPs.", "response": "sql SELECT * FROM SystemLogs WHERE ip_address NOT IN (SELECT DISTINCT ip_address FROM SystemLogs WHERE action = 'Login Success');"}
{"prompt": "Retrieve logs of all configuration changes.", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%configuration updated%';"}
{"prompt": "Show all backup verification actions performed this week.", "response": "sql SELECT * FROM SystemLogs WHERE action = 'Backup Verified' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "What is the average loan amount approved for business loans in the last 6 months?", "response": "sql SELECT AVG(amount) FROM Loans WHERE application_date >= CURRENT_DATE - INTERVAL '6 months' AND status = 'Approved';"}
{"prompt": "Show the default rate by loan status.", "response": "sql SELECT status, COUNT(*) AS total, SUM(CASE WHEN status = 'Defaulted' THEN 1 ELSE 0 END) AS default_count, ROUND(100.0 * SUM(CASE WHEN status = 'Defaulted' THEN 1 ELSE 0 END)/COUNT(*), 2) AS default_rate FROM Loans GROUP BY status;"}
{"prompt": "Display repayment trends month-by-month for the current year.", "response": "sql SELECT DATE_TRUNC('month', payment_date) AS month, SUM(amount) AS total_repayment FROM LoanPayments WHERE payment_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY month ORDER BY month;"}
{"prompt": "Identify borrowers who have made early repayments.", "response": "sql SELECT DISTINCT lp.loan_id, b.first_name, b.last_name FROM LoanPayments lp JOIN Loans l ON lp.loan_id = l.loan_id JOIN Borrowers b ON l.borrower_id = b.borrower_id WHERE lp.status = 'Paid' AND lp.payment_date < l.term_months;"}
{"prompt": "List all loans disbursed to borrowers in Tier-2 cities (assume cities inferred from address text).", "response": "sql SELECT * FROM Loans l JOIN Borrowers b ON l.borrower_id = b.borrower_id WHERE b.address LIKE '%Tier-2%';"}
{"prompt": "How many loans were disbursed each month in the last year?", "response": "sql SELECT DATE_TRUNC('month', disbursement_date) AS month, COUNT(*) AS loans_disbursed FROM Loans WHERE disbursement_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY month ORDER BY month;"}
{"prompt": "What’s the average time taken from application to approval for loans this quarter?", "response": "sql SELECT AVG(approval_date - application_date) AS avg_days FROM Loans WHERE application_date >= DATE_TRUNC('quarter', CURRENT_DATE) AND approval_date IS NOT NULL;"}
{"prompt": "Show total EMI collections by branch.", "response": "sql SELECT br.name AS branch_name, SUM(lp.amount) AS total_emi FROM LoanPayments lp JOIN Loans l ON lp.loan_id = l.loan_id JOIN Users u ON l.loan_officer_id = u.user_id JOIN Branches br ON br.manager_id = u.user_id GROUP BY br.name;"}
{"prompt": "How many borrowers applied for more than one loan?", "response": "sql SELECT borrower_id, COUNT(*) AS loan_count FROM Loans GROUP BY borrower_id HAVING COUNT(*) > 1;"}
{"prompt": "Find top 5 loan officers by number of loans processed.", "response": "sql SELECT u.first_name, u.last_name, COUNT(*) AS loans_processed FROM Loans l JOIN Users u ON l.loan_officer_id = u.user_id GROUP BY u.user_id ORDER BY loans_processed DESC LIMIT 5;"}
{"prompt": "Track the approval conversion rate for the last 3 months.", "response": "sql SELECT COUNT(CASE WHEN status = 'Approved' THEN 1 END) * 100.0 / COUNT(*) AS approval_rate FROM Loans WHERE application_date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Identify loans with repayment delays.", "response": "sql SELECT loan_id, MAX(payment_date) AS last_payment FROM LoanPayments GROUP BY loan_id HAVING MAX(payment_date) < CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "What’s the total amount disbursed by loan type in the last year?", "response": "(Assuming type is inferred via notes or status)"}
{"prompt": "nan", "response": "sql SELECT status, SUM(amount) AS total_amount FROM Loans WHERE disbursement_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY status;"}
{"prompt": "Find the repayment percentage completed for each active loan.", "response": "sql SELECT l.loan_id, ROUND(SUM(lp.amount) * 100.0 / l.amount, 2) AS repayment_percentage FROM Loans l JOIN LoanPayments lp ON l.loan_id = lp.loan_id WHERE l.status = 'Active' GROUP BY l.loan_id, l.amount;"}
{"prompt": "Show Ravi Kumar’s full loan repayment history.", "response": "sql SELECT lp.* FROM LoanPayments lp JOIN Loans l ON lp.loan_id = l.loan_id JOIN Borrowers b ON l.borrower_id = b.borrower_id WHERE b.first_name = 'Ravi' AND b.last_name = 'Kumar';"}
{"prompt": "Display average interest rate trend over the past 4 quarters.", "response": "sql SELECT DATE_TRUNC('quarter', application_date) AS quarter, AVG(interest_rate) AS avg_interest FROM Loans GROUP BY quarter ORDER BY quarter;"}
{"prompt": "Find loans disbursed but with no repayment yet.", "response": "sql SELECT l.loan_id FROM Loans l LEFT JOIN LoanPayments lp ON l.loan_id = lp.loan_id WHERE lp.loan_id IS NULL AND l.status = 'Disbursed';"}
{"prompt": "Identify peak loan application days of the week.", "response": "sql SELECT TO_CHAR(application_date, 'Day') AS day_of_week, COUNT(*) AS applications FROM Loans GROUP BY day_of_week ORDER BY applications DESC;"}
{"prompt": "Compare disbursement vs repayment totals this year.", "response": "sql SELECT (SELECT SUM(amount) FROM Loans WHERE disbursement_date >= DATE_TRUNC('year', CURRENT_DATE)) AS total_disbursed, (SELECT SUM(amount) FROM LoanPayments WHERE payment_date >= DATE_TRUNC('year', CURRENT_DATE)) AS total_repaid;"}
{"prompt": "ParkingSystem", "response": "nan"}
{"prompt": "Vehicle Owners / Users", "response": "nan"}
{"prompt": "What are the details of my latest parking reservation including start time, end time, spot number, and status?", "response": "sql SELECT R.reservation_id, R.start_time, R.end_time, PS.spot_number, R.status FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan' ORDER BY R.start_time DESC LIMIT 1;"}
{"prompt": "What is my total billing amount paid in the last 30 days?", "response": "sql SELECT SUM(amount_paid) AS total_paid FROM BillingRecords BR JOIN VehicleOwners VO ON BR.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan' AND payment_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "On which days was my reserved spot unavailable recently?", "response": "sql SELECT R.start_time::date AS date_unavailable FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE VO.first_name = 'Rohit' AND R.status = 'cancelled' ORDER BY R.start_time DESC;"}
{"prompt": "What are all my digital parking payments made through the system?", "response": "sql SELECT billing_id, amount_paid, payment_date FROM BillingRecords BR JOIN VehicleOwners VO ON BR.owner_id = VO.owner_id WHERE VO.first_name = 'Jay' AND amount_paid > 0;"}
{"prompt": "Show all available accessible parking spots near elevators in MetroMall lot.", "response": "sql SELECT spot_number FROM ParkingSpots PS JOIN ParkingLots PL ON PS.lot_id = PL.lot_id WHERE PL.name = 'MetroMall' AND PS.type = 'accessible' AND PS.status = 'available';"}
{"prompt": "When was my most recent payment made and what was the amount?", "response": "sql SELECT payment_date, amount_paid FROM BillingRecords BR JOIN VehicleOwners VO ON BR.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan' ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "What are the most common vehicle types among all registered owners?", "response": "sql SELECT vehicle_type, COUNT(*) AS total FROM VehicleOwners GROUP BY vehicle_type ORDER BY total DESC;"}
{"prompt": "How many reservations have been made in MetroMall lot in the past 7 days?", "response": "sql SELECT COUNT(*) AS reservation_count FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN ParkingLots PL ON PS.lot_id = PL.lot_id WHERE PL.name = 'MetroMall' AND R.start_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List all my past parking reservations with spot number and duration.", "response": "sql SELECT PS.spot_number, R.start_time, R.end_time, (R.end_time - R.start_time) AS duration FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan';"}
{"prompt": "How many parking spots are currently available in each parking lot?", "response": "sql SELECT PL.name, COUNT(*) AS available_spots FROM ParkingSpots PS JOIN ParkingLots PL ON PS.lot_id = PL.lot_id WHERE PS.status = 'available' GROUP BY PL.name;"}
{"prompt": "Where are long-term parking spots currently available?", "response": "sql SELECT PL.name, PS.spot_number FROM ParkingSpots PS JOIN ParkingLots PL ON PS.lot_id = PL.lot_id WHERE PS.type = 'long-term' AND PS.status = 'available';"}
{"prompt": "What’s the status of all my monthly reservation slots this month?", "response": "sql SELECT R.reservation_id, R.status, R.start_time, R.end_time FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE VO.first_name = 'Rohit' AND R.start_time >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Have I raised any support tickets recently? What is their current status?", "response": "sql SELECT subject, description, status, created_at, resolved_at FROM SupportTickets ST JOIN VehicleOwners VO ON ST.raised_by_id = VO.owner_id WHERE VO.first_name = 'Nandita' ORDER BY created_at DESC;"}
{"prompt": "Which parking lots are currently fully occupied?", "response": "sql SELECT PL.name FROM ParkingLots PL JOIN ParkingSpots PS ON PL.lot_id = PS.lot_id GROUP BY PL.name, PL.total_spots HAVING COUNT(CASE WHEN PS.status = 'occupied' THEN 1 END) = PL.total_spots;"}
{"prompt": "How many total hours have I parked over the last 7 days?", "response": "sql SELECT SUM(EXTRACT(EPOCH FROM (end_time - start_time))/3600) AS total_hours FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan' AND R.start_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many users have logged into the system in the last 24 hours?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM SystemLogs WHERE timestamp >= NOW() - INTERVAL '24 hours';"}
{"prompt": "Show the breakdown of my most recent bill — amount due, amount paid, and payment date.", "response": "sql SELECT amount_due, amount_paid, due_date, payment_date FROM BillingRecords BR JOIN VehicleOwners VO ON BR.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan' ORDER BY payment_date DESC LIMIT 1;"}
{"prompt": "How many reservations were cancelled during the last month?", "response": "sql SELECT COUNT(*) AS cancelled_reservations FROM Reservations WHERE status = 'cancelled' AND start_time >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "What is my total spend on parking so far?", "response": "sql SELECT SUM(amount_paid) AS total_spent FROM BillingRecords BR JOIN VehicleOwners VO ON BR.owner_id = VO.owner_id WHERE VO.first_name = 'Ayesha' AND VO.last_name = 'Khan';"}
{"prompt": "Which users have generated the most activity logs in the last 7 days?", "response": "sql SELECT U.username, COUNT(*) AS log_count FROM SystemLogs SL JOIN Users U ON SL.user_id = U.user_id WHERE SL.timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY U.username ORDER BY log_count DESC LIMIT 5;"}
{"prompt": "Parking Attendants", "response": "nan"}
{"prompt": "Which reserved spot in Zone C was recently reported as incorrectly occupied?", "response": "sql SELECT PS.spot_number, R.reservation_id, R.status, R.start_time FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE PS.spot_number LIKE 'C%' AND R.status = 'active' AND R.start_time::date = CURRENT_DATE;"}
{"prompt": "Which reservations today belong to customers arriving within the next 15 minutes?", "response": "sql SELECT VO.first_name, VO.last_name, PS.spot_number, R.start_time FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE R.start_time BETWEEN NOW() AND NOW() + INTERVAL '15 minutes' AND R.status = 'active';"}
{"prompt": "Which spots are currently marked as occupied but are not part of any active reservation?", "response": "sql SELECT PS.spot_number FROM ParkingSpots PS LEFT JOIN Reservations R ON PS.spot_id = R.spot_id AND R.status = 'active' WHERE PS.status = 'occupied' AND R.reservation_id IS NULL;"}
{"prompt": "Which parking spots in my lot are reserved right now?", "response": "sql SELECT PS.spot_number FROM ParkingSpots PS JOIN Reservations R ON PS.spot_id = R.spot_id WHERE PS.lot_id = (SELECT lot_id FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra') AND R.status = 'active';"}
{"prompt": "Which customers had trouble scanning their parking QR codes today (based on manually resolved tickets)?", "response": "sql SELECT ST.subject, ST.description, ST.created_at FROM SupportTickets ST WHERE ST.subject LIKE '%QR%' AND ST.created_at::date = CURRENT_DATE;"}
{"prompt": "Which security staff are on the same shift as me today?", "response": "sql SELECT first_name, last_name, contact FROM SecurityStaff WHERE shift = (SELECT shift FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra');"}
{"prompt": "What’s the count of available vs. occupied spots in my lot?", "response": "sql SELECT status, COUNT(*) AS count FROM ParkingSpots WHERE lot_id = (SELECT lot_id FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra') GROUP BY status;"}
{"prompt": "Which vehicles were reallocated to new spots due to overflows today?", "response": "sql SELECT VO.first_name, VO.last_name, PS.spot_number, R.start_time FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE R.status = 'modified' AND R.start_time::date = CURRENT_DATE;"}
{"prompt": "Which reservation ended most recently in my lot?", "response": "sql SELECT R.reservation_id, VO.first_name, VO.last_name, R.end_time FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE PS.lot_id = (SELECT lot_id FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra') ORDER BY R.end_time DESC LIMIT 1;"}
{"prompt": "Which kiosk or charging station spots had maintenance requests today?", "response": "sql SELECT subject, description, created_at FROM SupportTickets WHERE subject LIKE '%maintenance%' AND created_at::date = CURRENT_DATE;"}
{"prompt": "What are the contact details of other attendants working in my lot?", "response": "sql SELECT first_name, last_name, phone FROM ParkingAttendants WHERE lot_id = (SELECT lot_id FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra');"}
{"prompt": "How many EV charging spots are currently available in my zone?", "response": "sql SELECT COUNT(*) FROM ParkingSpots WHERE type = 'EV' AND status = 'available' AND lot_id = (SELECT lot_id FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra');"}
{"prompt": "Which reservations are active for elderly users or those needing assistance?", "response": "sql SELECT VO.first_name, VO.last_name, R.start_time, PS.spot_number FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE PS.type = 'accessible' AND R.status = 'active';"}
{"prompt": "What vehicles are currently parked in spots that were manually updated?", "response": "sql SELECT VO.first_name, VO.last_name, PS.spot_number, R.start_time FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE R.status = 'modified' AND PS.status = 'occupied';"}
{"prompt": "Which users requested help through support tickets in the last 48 hours?", "response": "sql SELECT raised_by_id, subject, status FROM SupportTickets WHERE created_at >= NOW() - INTERVAL '48 hours';"}
{"prompt": "What are the details of any emergency-related incidents reported today?", "response": "sql SELECT subject, description, created_at FROM SupportTickets WHERE subject LIKE '%emergency%' AND created_at::date = CURRENT_DATE;"}
{"prompt": "Show all active reservations sorted by spot number in my assigned lot.", "response": "sql SELECT PS.spot_number, VO.first_name, VO.last_name, R.start_time, R.end_time FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE PS.lot_id = (SELECT lot_id FROM ParkingAttendants WHERE first_name = 'Raj' AND last_name = 'Malhotra') AND R.status = 'active' ORDER BY PS.spot_number;"}
{"prompt": "Who are the vehicle owners currently parked in accessible spots?", "response": "sql SELECT VO.first_name, VO.last_name, PS.spot_number FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE PS.type = 'accessible' AND PS.status = 'occupied' AND R.status = 'active';"}
{"prompt": "Are there any unresolved support tickets in my lot today?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE status != 'resolved' AND created_at::date = CURRENT_DATE;"}
{"prompt": "Which support tickets were created and resolved within the same day?", "response": "sql SELECT ticket_id, subject, created_at, resolved_at FROM SupportTickets WHERE DATE(created_at) = DATE(resolved_at);"}
{"prompt": "Parking Lot Managers", "response": "nan"}
{"prompt": "What were the total entries and exits across the lot in the last 24 hours?", "response": "sql SELECT COUNT(*) FILTER (WHERE action = 'entry') AS total_entries, COUNT(*) FILTER (WHERE action = 'exit') AS total_exits FROM SystemLogs WHERE timestamp >= NOW() - INTERVAL '24 hours';"}
{"prompt": "Which levels experienced the highest occupancy during peak hours yesterday?", "response": "sql SELECT PS.lot_id, PS.level, COUNT(*) AS active_reservations FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE R.start_time::date = CURRENT_DATE - INTERVAL '1 day' AND EXTRACT(HOUR FROM R.start_time) BETWEEN 17 AND 20 GROUP BY PS.lot_id, PS.level ORDER BY active_reservations DESC;"}
{"prompt": "Show me all unauthorized parking alerts triggered on Level 2 this week.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%unauthorized%' AND description LIKE '%Level 2%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What’s the current availability status of all EV charging spots?", "response": "sql SELECT PS.spot_number, PS.status FROM ParkingSpots PS WHERE PS.type = 'EV';"}
{"prompt": "Which Parking Attendants are scheduled for today's evening shift in TechPark lot?", "response": "sql SELECT first_name, last_name FROM ParkingAttendants WHERE lot_id = (SELECT lot_id FROM ParkingLots WHERE name = 'TechPark') AND shift = 'Evening';"}
{"prompt": "Are any kiosks, gates, or sensors in TechPark lot currently reported as faulty?", "response": "sql SELECT subject, description, created_at FROM SupportTickets WHERE subject LIKE '%maintenance%' AND description LIKE '%TechPark%' AND status != 'resolved';"}
{"prompt": "List all reservations affected during today's reservation system downtime.", "response": "sql SELECT reservation_id, owner_id, start_time, status FROM Reservations WHERE created_at BETWEEN '2025-06-16 10:00:00' AND '2025-06-16 11:00:00' AND status != 'confirmed';"}
{"prompt": "Who are the vehicle owners that submitted feedback praising cleanliness or lighting?", "response": "sql SELECT DISTINCT raised_by_id, subject, description FROM SupportTickets WHERE subject LIKE '%feedback%' AND (description LIKE '%clean%' OR description LIKE '%light%');"}
{"prompt": "How many parking spots are currently occupied in Level 3 of TechPark lot?", "response": "sql SELECT COUNT(*) FROM ParkingSpots WHERE lot_id = (SELECT lot_id FROM ParkingLots WHERE name = 'TechPark') AND level = '3' AND status = 'occupied';"}
{"prompt": "When was the last safety drill or fire compliance check logged?", "response": "sql SELECT created_at, subject FROM SupportTickets WHERE subject LIKE '%safety%' OR subject LIKE '%fire%' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "What are the most common incident types flagged by attendants in the last 7 days?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY subject ORDER BY count DESC;"}
{"prompt": "How many total billing complaints have been raised this month?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%billing%' AND created_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Are there any unresolved escalations related to misplaced vehicles?", "response": "sql SELECT ticket_id, subject, description, status FROM SupportTickets WHERE subject LIKE '%misplaced%' AND status != 'resolved';"}
{"prompt": "What are the occupancy trends for the last 7 days in TechPark lot?", "response": "sql SELECT DATE(R.start_time) AS day, COUNT(*) AS total_reservations FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE PS.lot_id = (SELECT lot_id FROM ParkingLots WHERE name = 'TechPark') GROUP BY DATE(R.start_time) ORDER BY day DESC;"}
{"prompt": "Which attendants worked double shifts in the past 3 days?", "response": "sql SELECT first_name, last_name, COUNT(*) AS shifts FROM ParkingAttendants WHERE date_part('day', CURRENT_DATE - created_at) <= 3 GROUP BY first_name, last_name HAVING COUNT(*) > 1;"}
{"prompt": "What is the average usage of EV charging spots per day over the last week?", "response": "sql SELECT DATE(R.start_time) AS day, COUNT(*) AS ev_usage FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE PS.type = 'EV' AND R.start_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY day ORDER BY day;"}
{"prompt": "Which zones need redistribution due to high congestion patterns?", "response": "sql SELECT PS.level, COUNT(*) AS total FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE R.start_time::date = CURRENT_DATE - INTERVAL '1 day' GROUP BY PS.level HAVING COUNT(*) > 30;"}
{"prompt": "Show all open issues reported by on-ground staff today.", "response": "sql SELECT subject, description FROM SupportTickets WHERE created_at::date = CURRENT_DATE AND raised_by_id IN (SELECT user_id FROM Users WHERE role = 'attendant') AND status != 'resolved';"}
{"prompt": "Which digital signage rerouting changes were logged this week?", "response": "sql SELECT subject, description, created_at FROM SupportTickets WHERE subject LIKE '%signage%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Are any overflow lots currently in use or recently activated?", "response": "sql SELECT PS.spot_number, PS.status FROM ParkingSpots PS JOIN ParkingLots PL ON PS.lot_id = PL.lot_id WHERE PL.name LIKE '%overflow%' AND PS.status = 'occupied';"}
{"prompt": "Reservation Specialists", "response": "nan"}
{"prompt": "How many reservations are currently active across all lots?", "response": "sql SELECT COUNT(*) FROM Reservations WHERE status = 'active' AND NOW() BETWEEN start_time AND end_time;"}
{"prompt": "Which parking lots had the highest number of reservations today?", "response": "sql SELECT PS.lot_id, COUNT(*) AS reservation_count FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE R.start_time::date = CURRENT_DATE GROUP BY PS.lot_id ORDER BY reservation_count DESC;"}
{"prompt": "Show all reservations for VIP zones today.", "response": "sql SELECT R.* FROM Reservations R JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE PS.type = 'VIP' AND R.start_time::date = CURRENT_DATE;"}
{"prompt": "How many double bookings were recorded in the last 7 days?", "response": "sql SELECT COUNT(*) FROM Reservations R1 JOIN Reservations R2 ON R1.spot_id = R2.spot_id AND R1.reservation_id <> R2.reservation_id WHERE R1.start_time < R2.end_time AND R1.end_time > R2.start_time AND R1.start_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List all upcoming reservations made by EV vehicle owners.", "response": "sql SELECT R.* FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE PS.type = 'EV' AND R.start_time > NOW();"}
{"prompt": "Which slots were reserved but had no check-in 2 hours after start time?", "response": "sql SELECT * FROM Reservations WHERE status = 'confirmed' AND start_time BETWEEN NOW() - INTERVAL '2 hours' AND NOW();"}
{"prompt": "What are the daily cancellation counts for the past 7 days?", "response": "sql SELECT DATE(start_time) AS day, COUNT(*) AS cancellations FROM Reservations WHERE status = 'cancelled' AND start_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY day ORDER BY day DESC;"}
{"prompt": "Which clients reserved 10 or more slots recently?", "response": "sql SELECT owner_id, COUNT(*) AS slots_reserved FROM Reservations WHERE start_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY owner_id HAVING COUNT(*) >= 10;"}
{"prompt": "Show all reservations during tomorrow evening's event.", "response": "sql SELECT * FROM Reservations WHERE start_time BETWEEN CURRENT_DATE + INTERVAL '1 day 16 hours' AND CURRENT_DATE + INTERVAL '1 day 23 hours';"}
{"prompt": "List reservations created by admin users today.", "response": "sql SELECT R.* FROM Reservations R JOIN Users U ON R.owner_id = U.user_id WHERE U.role = 'admin' AND R.start_time::date = CURRENT_DATE;"}
{"prompt": "What was the average parking duration of confirmed reservations yesterday?", "response": "sql SELECT AVG(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS avg_minutes FROM Reservations WHERE start_time::date = CURRENT_DATE - INTERVAL '1 day' AND status = 'confirmed';"}
{"prompt": "Which vehicle types reserve the most on weekends?", "response": "sql SELECT VO.vehicle_type, COUNT(*) AS total FROM Reservations R JOIN VehicleOwners VO ON R.owner_id = VO.owner_id WHERE EXTRACT(DOW FROM R.start_time) IN (0, 6) GROUP BY VO.vehicle_type ORDER BY total DESC;"}
{"prompt": "Identify users with 3 or more cancellations this month.", "response": "sql SELECT owner_id, COUNT(*) AS cancel_count FROM Reservations WHERE status = 'cancelled' AND start_time >= date_trunc('month', CURRENT_DATE) GROUP BY owner_id HAVING COUNT(*) >= 3;"}
{"prompt": "Which slots were overbooked 5 or more times last month?", "response": "sql SELECT spot_id, COUNT(*) AS overlaps FROM ( SELECT R1.spot_id FROM Reservations R1 JOIN Reservations R2 ON R1.spot_id = R2.spot_id AND R1.reservation_id <> R2.reservation_id WHERE R1.start_time < R2.end_time AND R1.end_time > R2.start_time AND R1.start_time >= CURRENT_DATE - INTERVAL '30 days' ) AS Overlaps GROUP BY spot_id HAVING COUNT(*) >= 5;"}
{"prompt": "What percentage of yesterday’s reservations were no-shows?", "response": "sql SELECT ROUND(100.0 * COUNT(*) FILTER (WHERE status = 'confirmed') / NULLIF(COUNT(*), 0), 2) AS no_show_percentage FROM Reservations WHERE start_time::date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "Which lots had the most support tickets about reservation failure in the past week?", "response": "sql SELECT PL.name, COUNT(*) AS ticket_count FROM SupportTickets ST JOIN VehicleOwners VO ON ST.raised_by_id = VO.owner_id JOIN Reservations R ON R.owner_id = VO.owner_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id JOIN ParkingLots PL ON PS.lot_id = PL.lot_id WHERE ST.subject LIKE '%reservation%' AND ST.created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY PL.name ORDER BY ticket_count DESC;"}
{"prompt": "What is the current count of available spots per lot?", "response": "sql SELECT lot_id, COUNT(*) AS available_spots FROM ParkingSpots WHERE status = 'available' GROUP BY lot_id;"}
{"prompt": "How many active reservations are scheduled in the next 6 hours?", "response": "sql SELECT COUNT(*) FROM Reservations WHERE start_time BETWEEN NOW() AND NOW() + INTERVAL '6 hours';"}
{"prompt": "What are the top 5 hours with the most reservations in the past month?", "response": "sql SELECT EXTRACT(HOUR FROM start_time) AS hour, COUNT(*) AS total FROM Reservations WHERE start_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY hour ORDER BY total DESC LIMIT 5;"}
{"prompt": "What is the average number of reservations per day over the past 2 weeks?", "response": "sql SELECT ROUND(AVG(res_count), 2) AS avg_daily FROM ( SELECT DATE(start_time) AS res_day, COUNT(*) AS res_count FROM Reservations WHERE start_time >= CURRENT_DATE - INTERVAL '14 days' GROUP BY res_day ) AS daily;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Which users reported issues related to access failures today?", "response": "sql SELECT raised_by_id, subject, description FROM SupportTickets WHERE subject LIKE '%access%' AND created_at::date = CURRENT_DATE;"}
{"prompt": "How many unresolved support tickets are currently open?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status != 'resolved';"}
{"prompt": "List the top 5 most frequent support issues this week.", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY subject ORDER BY count DESC LIMIT 5;"}
{"prompt": "Which reservations had QR code access problems in the past 3 days?", "response": "sql SELECT R.* FROM Reservations R JOIN SupportTickets ST ON R.owner_id = ST.raised_by_id WHERE ST.subject LIKE '%QR code%' AND ST.created_at >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "How many users faced failed online payment issues this month?", "response": "sql SELECT COUNT(DISTINCT raised_by_id) FROM SupportTickets WHERE subject LIKE '%payment%' AND created_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Show support requests submitted by Ayesha Khan.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT owner_id FROM VehicleOwners WHERE first_name = 'Ayesha' AND last_name = 'Khan');"}
{"prompt": "How many times did users request help with app navigation in the last week?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%navigation%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the top issues reported during peak evening hours (5 PM - 9 PM)?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE EXTRACT(HOUR FROM created_at) BETWEEN 17 AND 21 GROUP BY subject ORDER BY count DESC;"}
{"prompt": "How many support cases were resolved within 10 minutes today?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE created_at::date = CURRENT_DATE AND resolved_at IS NOT NULL AND EXTRACT(EPOCH FROM (resolved_at - created_at))/60 <= 10;"}
{"prompt": "List users who raised support tickets more than 3 times in the last 14 days.", "response": "sql SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= CURRENT_DATE - INTERVAL '14 days' GROUP BY raised_by_id HAVING COUNT(*) > 3;"}
{"prompt": "Show pending support tickets related to EV parking issues.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%EV%' AND status != 'resolved';"}
{"prompt": "How many support tickets were about license plate errors in the last 30 days?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE subject LIKE '%license plate%' AND created_at >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "List all resolved tickets involving delayed reservation confirmations.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%confirmation%' AND description LIKE '%delay%' AND status = 'resolved';"}
{"prompt": "Which parking lots have the highest number of support tickets logged?", "response": "sql SELECT PS.lot_id, COUNT(*) AS issue_count FROM Reservations R JOIN SupportTickets ST ON R.owner_id = ST.raised_by_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id GROUP BY PS.lot_id ORDER BY issue_count DESC;"}
{"prompt": "Which users were assisted more than once today by support?", "response": "sql SELECT raised_by_id, COUNT(*) AS interactions FROM SupportTickets WHERE created_at::date = CURRENT_DATE GROUP BY raised_by_id HAVING COUNT(*) > 1;"}
{"prompt": "How many senior users (age 60+) contacted support this week?", "response": "sql SELECT COUNT(DISTINCT ST.raised_by_id) FROM SupportTickets ST JOIN VehicleOwners VO ON ST.raised_by_id = VO.owner_id WHERE VO.date_of_birth <= CURRENT_DATE - INTERVAL '60 years' AND ST.created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the average response time (in minutes) for resolved tickets this month?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM (resolved_at - created_at))/60), 2) AS avg_response_minutes FROM SupportTickets WHERE status = 'resolved' AND created_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List the descriptions of all unresolved tickets flagged for manager coordination.", "response": "sql SELECT description FROM SupportTickets WHERE subject LIKE '%manager%' AND status != 'resolved';"}
{"prompt": "Show support logs involving blocked exit due to payment issues.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%exit%' AND description LIKE '%payment%';"}
{"prompt": "Which app features are most frequently mentioned in support tickets?", "response": "sql SELECT feature, COUNT(*) AS mentions FROM ( SELECT CASE WHEN description LIKE '%Find My Car%' THEN 'Find My Car' WHEN description LIKE '%QR%' THEN 'QR Access' WHEN description LIKE '%payment%' THEN 'Payment' WHEN description LIKE '%navigation%' THEN 'Navigation' ELSE 'Other' END AS feature FROM SupportTickets ) AS FeatureMap GROUP BY feature ORDER BY mentions DESC;"}
{"prompt": "Security Staff", "response": "nan"}
{"prompt": "How many security alerts were triggered today?", "response": "sql SELECT COUNT(*) FROM SecurityAlerts WHERE alert_time::date = CURRENT_DATE;"}
{"prompt": "Show details of all idle vehicle alerts from this week.", "response": "sql SELECT * FROM SecurityAlerts WHERE alert_type = 'idle_vehicle' AND alert_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which zones had the most alerts in the past 30 days?", "response": "sql SELECT location, COUNT(*) AS alert_count FROM SecurityAlerts WHERE alert_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY location ORDER BY alert_count DESC;"}
{"prompt": "How many incidents were recorded involving unregistered vehicles this month?", "response": "sql SELECT COUNT(*) FROM SecurityAlerts WHERE alert_type = 'unregistered_vehicle' AND alert_time >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List all security incidents handled by Vikram this week.", "response": "sql SELECT * FROM SecurityIncidents WHERE reported_by_id = (SELECT staff_id FROM SecurityStaff WHERE first_name = 'Vikram' AND last_name = 'Rathi') AND reported_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show incident logs that occurred during night hours (8 PM to 6 AM).", "response": "sql SELECT * FROM SecurityIncidents WHERE EXTRACT(HOUR FROM reported_at) NOT BETWEEN 6 AND 19;"}
{"prompt": "How many lost vehicle assists were reported in the last 10 days?", "response": "sql SELECT COUNT(*) FROM SecurityIncidents WHERE incident_type = 'lost_vehicle' AND reported_at >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "Which staff member handled the most security alerts this week?", "response": "sql SELECT reported_by_id, COUNT(*) AS total_handled FROM SecurityIncidents WHERE reported_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY reported_by_id ORDER BY total_handled DESC LIMIT 1;"}
{"prompt": "Which areas had recurring collision reports recently?", "response": "sql SELECT location, COUNT(*) AS collision_count FROM SecurityIncidents WHERE incident_type = 'minor_collision' AND reported_at >= CURRENT_DATE - INTERVAL '30 days' GROUP BY location HAVING COUNT(*) > 1;"}
{"prompt": "How many patrol logs did Vikram complete today?", "response": "sql SELECT COUNT(*) FROM PatrolLogs WHERE staff_id = (SELECT staff_id FROM SecurityStaff WHERE first_name = 'Vikram' AND last_name = 'Rathi') AND patrol_time::date = CURRENT_DATE;"}
{"prompt": "Which emergency exits were flagged for malfunction last month?", "response": "sql SELECT location, issue FROM SafetyChecks WHERE equipment_type = 'emergency_exit' AND status = 'faulty' AND check_time >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "How many fire extinguisher checks failed this quarter?", "response": "sql SELECT COUNT(*) FROM SafetyChecks WHERE equipment_type = 'fire_extinguisher' AND status = 'faulty' AND check_time >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "List all surveillance alerts marked as critical severity.", "response": "sql SELECT * FROM SecurityAlerts WHERE severity = 'critical';"}
{"prompt": "What was the average response time to security alerts yesterday?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM (response_time - alert_time))/60), 2) AS avg_minutes FROM SecurityAlerts WHERE alert_time::date = CURRENT_DATE - INTERVAL '1 day' AND response_time IS NOT NULL;"}
{"prompt": "Show all incident descriptions involving tourists.", "response": "sql SELECT description FROM SecurityIncidents WHERE description LIKE '%tourist%';"}
{"prompt": "How many lighting system issues were found during checks this week?", "response": "sql SELECT COUNT(*) FROM SafetyChecks WHERE equipment_type = 'lighting' AND status = 'faulty' AND check_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List unresolved or pending incidents from the past 48 hours.", "response": "sql SELECT * FROM SecurityIncidents WHERE status IN ('pending', 'unresolved') AND reported_at >= NOW() - INTERVAL '48 hours';"}
{"prompt": "Which zones were blocked due to incidents in the last 14 days?", "response": "sql SELECT DISTINCT location FROM SecurityIncidents WHERE requires_zone_block = true AND reported_at >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "How many assistance calls were made due to locked-in keys last month?", "response": "sql SELECT COUNT(*) FROM SecurityIncidents WHERE incident_type = 'locked_keys' AND reported_at >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "Which CCTV zones had the most manual verifications requested?", "response": "sql SELECT location, COUNT(*) AS manual_checks FROM SurveillanceLogs WHERE review_type = 'manual_verification' GROUP BY location ORDER BY manual_checks DESC;"}
{"prompt": "Finance / Billing Staff", "response": "nan"}
{"prompt": "What is the total revenue collected from all zones today?", "response": "sql SELECT SUM(amount_paid) AS total_revenue FROM Payments WHERE payment_time::date = CURRENT_DATE;"}
{"prompt": "How many payments failed in the last 24 hours?", "response": "sql SELECT COUNT(*) FROM Payments WHERE status = 'failed' AND payment_time >= NOW() - INTERVAL '1 day';"}
{"prompt": "List all double charges reported by users this week.", "response": "sql SELECT * FROM SupportTickets WHERE subject LIKE '%double charge%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which user received the highest number of refunds this month?", "response": "sql SELECT refunded_to_id, COUNT(*) AS refund_count FROM Refunds WHERE refund_time >= date_trunc('month', CURRENT_DATE) GROUP BY refunded_to_id ORDER BY refund_count DESC LIMIT 1;"}
{"prompt": "Show all refunds processed today with their reasons.", "response": "sql SELECT refund_id, refunded_to_id, amount, reason FROM Refunds WHERE refund_time::date = CURRENT_DATE;"}
{"prompt": "How much revenue came from UPI payments last week?", "response": "sql SELECT SUM(amount_paid) FROM Payments WHERE payment_method = 'UPI' AND payment_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List users who were billed more than ₹1000 in a single transaction.", "response": "sql SELECT paid_by_id, amount_paid FROM Payments WHERE amount_paid > 1000;"}
{"prompt": "Show all corporate clients billed in the last billing cycle.", "response": "sql SELECT * FROM CorporateInvoices WHERE invoice_date >= CURRENT_DATE - INTERVAL '1 month';"}
{"prompt": "How many reservations were discounted this week?", "response": "sql SELECT COUNT(*) FROM Reservations WHERE discount_applied = true AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Find the total refunds issued due to system glitches.", "response": "sql SELECT SUM(amount) FROM Refunds WHERE reason LIKE '%system glitch%';"}
{"prompt": "Which parking zones generated the most revenue this month?", "response": "sql SELECT PS.lot_id, SUM(P.amount_paid) AS total_revenue FROM Payments P JOIN Reservations R ON P.reservation_id = R.reservation_id JOIN ParkingSpots PS ON R.spot_id = PS.spot_id WHERE P.payment_time >= date_trunc('month', CURRENT_DATE) GROUP BY PS.lot_id ORDER BY total_revenue DESC;"}
{"prompt": "What was the average transaction value today?", "response": "sql SELECT ROUND(AVG(amount_paid), 2) AS avg_transaction FROM Payments WHERE payment_time::date = CURRENT_DATE;"}
{"prompt": "Show invoice details for a corporate client named “Zentech Solutions”.", "response": "sql SELECT * FROM CorporateInvoices WHERE company_name = 'Zentech Solutions';"}
{"prompt": "List all transactions where the user ID is associated with more than 3 payments today.", "response": "sql SELECT paid_by_id, COUNT(*) AS num_payments FROM Payments WHERE payment_time::date = CURRENT_DATE GROUP BY paid_by_id HAVING COUNT(*) > 3;"}
{"prompt": "Show all pending payments with amount and user details.", "response": "sql SELECT paid_by_id, amount_paid, payment_method FROM Payments WHERE status = 'pending';"}
{"prompt": "Which users received refunds greater than ₹500?", "response": "sql SELECT refunded_to_id, amount FROM Refunds WHERE amount > 500;"}
{"prompt": "How many failed payments occurred via credit card in the last 7 days?", "response": "sql SELECT COUNT(*) FROM Payments WHERE payment_method = 'Credit Card' AND status = 'failed' AND payment_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List all subscription renewals processed yesterday.", "response": "sql SELECT * FROM Payments WHERE description LIKE '%subscription renewal%' AND payment_time::date = CURRENT_DATE - INTERVAL '1 day';"}
{"prompt": "How many users were refunded due to duplicate reservation entries?", "response": "sql SELECT COUNT(DISTINCT refunded_to_id) FROM Refunds WHERE reason LIKE '%duplicate reservation%';"}
{"prompt": "Show the total revenue earned through kiosk transactions this month.", "response": "sql SELECT SUM(amount_paid) FROM Payments WHERE payment_method = 'Kiosk' AND payment_time >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "How many system outages occurred this month?", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE event_type = 'outage' AND event_time >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List all gate sensors that reported slow response times in the last 24 hours.", "response": "sql SELECT device_id, location, response_time_ms FROM IoTDevices WHERE device_type = 'gate_sensor' AND last_updated >= NOW() - INTERVAL '1 day' AND response_time_ms > 1000;"}
{"prompt": "Which APIs had the highest average latency today?", "response": "sql SELECT api_name, ROUND(AVG(response_time_ms), 2) AS avg_latency FROM APIMetrics WHERE timestamp::date = CURRENT_DATE GROUP BY api_name ORDER BY avg_latency DESC;"}
{"prompt": "Show all failed login attempts in the past 7 days.", "response": "sql SELECT * FROM AuthLogs WHERE status = 'failed' AND login_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "How many times did the mobile app crash this week?", "response": "sql SELECT COUNT(*) FROM AppCrashLogs WHERE crash_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List all active DDoS alerts and the affected endpoints.", "response": "sql SELECT * FROM SecurityAlerts WHERE alert_type = 'DDoS' AND status = 'active';"}
{"prompt": "Which server reported CPU usage over 90% in the last 12 hours?", "response": "sql SELECT server_id, cpu_usage, recorded_at FROM ServerStats WHERE cpu_usage > 90 AND recorded_at >= NOW() - INTERVAL '12 hours';"}
{"prompt": "How many patch updates were successfully deployed this month?", "response": "sql SELECT COUNT(*) FROM SystemUpdates WHERE update_status = 'completed' AND update_time >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "List kiosks that have not checked in within the last 2 hours.", "response": "sql SELECT kiosk_id, last_heartbeat FROM KioskStatus WHERE last_heartbeat < NOW() - INTERVAL '2 hours';"}
{"prompt": "Which LPR cameras failed to sync in the last 3 days?", "response": "sql SELECT device_id, last_sync_time FROM IoTDevices WHERE device_type = 'LPR_camera' AND last_sync_time < CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "What is the current uptime percentage of cloud servers?", "response": "sql SELECT ROUND(AVG(uptime_percentage), 2) AS avg_uptime FROM ServerUptime WHERE recorded_on = CURRENT_DATE;"}
{"prompt": "How many firewall breach attempts were blocked this quarter?", "response": "sql SELECT COUNT(*) FROM FirewallLogs WHERE action = 'blocked' AND event_type = 'breach_attempt' AND event_time >= date_trunc('quarter', CURRENT_DATE);"}
{"prompt": "List systems that triggered internal error codes during peak hours (5 PM to 8 PM).", "response": "sql SELECT system_name, error_code, error_time FROM ErrorLogs WHERE EXTRACT(HOUR FROM error_time) BETWEEN 17 AND 20;"}
{"prompt": "Which servers handled the most payment requests today?", "response": "sql SELECT server_id, COUNT(*) AS payment_requests FROM PaymentLogs WHERE request_time::date = CURRENT_DATE GROUP BY server_id ORDER BY payment_requests DESC;"}
{"prompt": "How many helpdesk tickets were created due to backend system delays this week?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE issue_description LIKE '%backend delay%' AND created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What were the top 5 most frequent error codes this month?", "response": "sql SELECT error_code, COUNT(*) AS frequency FROM ErrorLogs WHERE error_time >= date_trunc('month', CURRENT_DATE) GROUP BY error_code ORDER BY frequency DESC LIMIT 5;"}
{"prompt": "Show details of IPs flagged for suspicious login spikes today.", "response": "sql SELECT ip_address, COUNT(*) AS attempts FROM AuthLogs WHERE login_time::date = CURRENT_DATE GROUP BY ip_address HAVING COUNT(*) > 10;"}
{"prompt": "How many intercom systems were offline in the last 48 hours?", "response": "sql SELECT COUNT(*) FROM DeviceStatus WHERE device_type = 'intercom' AND last_online < NOW() - INTERVAL '48 hours';"}
{"prompt": "List database backups completed successfully in the past 5 days.", "response": "sql SELECT backup_id, backup_time FROM BackupLogs WHERE status = 'success' AND backup_time >= CURRENT_DATE - INTERVAL '5 days';"}
{"prompt": "Which security patches failed to install last month?", "response": "sql SELECT patch_id, device_id, failure_reason FROM SystemUpdates WHERE update_status = 'failed' AND update_time >= date_trunc('month', CURRENT_DATE) - INTERVAL '1 month';"}
{"prompt": "Operations Managers", "response": "nan"}
{"prompt": "What was the average gate processing speed across all parking hubs today?", "response": "sql SELECT ROUND(AVG(processing_time_seconds), 2) AS avg_gate_processing_speed FROM GateLogs WHERE entry_time::date = CURRENT_DATE;"}
{"prompt": "How many customer complaints were logged in the last 7 days?", "response": "sql SELECT COUNT(*) FROM Complaints WHERE created_at >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which zones had the highest vehicle turnover rate yesterday?", "response": "sql SELECT zone_id, COUNT(*) AS turnover FROM ParkingSessions WHERE end_time::date = CURRENT_DATE - 1 GROUP BY zone_id ORDER BY turnover DESC;"}
{"prompt": "Show all reported downtimes by system type in the past 30 days.", "response": "sql SELECT system_type, COUNT(*) AS incidents FROM DowntimeLogs WHERE start_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY system_type;"}
{"prompt": "Which parking zones had underutilization (occupancy < 40%) last week?", "response": "sql SELECT zone_id, ROUND(AVG(occupancy_rate), 2) AS avg_occupancy FROM ZoneStats WHERE stat_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY zone_id HAVING AVG(occupancy_rate) < 40;"}
{"prompt": "How many EV-priority slots are currently in use across all facilities?", "response": "sql SELECT COUNT(*) FROM ParkingSessions WHERE slot_type = 'EV' AND end_time IS NULL;"}
{"prompt": "Which gates recorded the longest average entry delay this week?", "response": "sql SELECT gate_id, ROUND(AVG(entry_delay_seconds), 2) AS avg_delay FROM EntryLogs WHERE entry_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY gate_id ORDER BY avg_delay DESC;"}
{"prompt": "What was the total revenue generated per parking zone yesterday?", "response": "sql SELECT zone_id, SUM(fee_collected) AS total_revenue FROM ParkingSessions WHERE end_time::date = CURRENT_DATE - 1 GROUP BY zone_id;"}
{"prompt": "Which parking areas had the most complaints tagged “slow entry”?", "response": "sql SELECT zone_id, COUNT(*) AS complaint_count FROM Complaints WHERE category = 'slow entry' GROUP BY zone_id ORDER BY complaint_count DESC;"}
{"prompt": "How many overflow rerouting events occurred in the last 10 days?", "response": "sql SELECT COUNT(*) FROM RoutingEvents WHERE reason = 'overflow' AND event_time >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "Show top 5 zones by user satisfaction rating this month.", "response": "sql SELECT zone_id, ROUND(AVG(rating), 2) AS avg_rating FROM Feedback WHERE submitted_at >= date_trunc('month', CURRENT_DATE) GROUP BY zone_id ORDER BY avg_rating DESC LIMIT 5;"}
{"prompt": "Which zones were affected by faulty sensors in the last 72 hours?", "response": "sql SELECT DISTINCT zone_id FROM DeviceAlerts WHERE alert_type = 'sensor_fault' AND alert_time >= NOW() - INTERVAL '72 hours';"}
{"prompt": "What is the average parking duration by user type (regular, VIP, EV)?", "response": "sql SELECT user_type, ROUND(AVG(EXTRACT(EPOCH FROM (end_time - start_time))/60), 2) AS avg_duration_minutes FROM ParkingSessions WHERE end_time IS NOT NULL GROUP BY user_type;"}
{"prompt": "List customer feedbacks mentioning “cleanliness” or “lighting” in the last 2 weeks.", "response": "sql SELECT feedback_id, user_id, comment, submitted_at FROM Feedback WHERE comment LIKE '%clean%' OR comment LIKE '%light%' AND submitted_at >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "Which departments had the highest number of escalations this quarter?", "response": "sql SELECT department, COUNT(*) AS escalations FROM EscalationLogs WHERE created_at >= date_trunc('quarter', CURRENT_DATE) GROUP BY department ORDER BY escalations DESC;"}
{"prompt": "Show zones where pricing was changed in the last 15 days.", "response": "sql SELECT zone_id, old_price, new_price, changed_at FROM PricingHistory WHERE changed_at >= CURRENT_DATE - INTERVAL '15 days';"}
{"prompt": "How many users activated a promo from the downtown discount campaign?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM Promotions WHERE campaign_name = 'Downtown Zone Discount' AND activated_at IS NOT NULL;"}
{"prompt": "What was the utilization rate of each zone during the last city festival weekend?", "response": "sql SELECT zone_id, ROUND(AVG(occupancy_rate), 2) AS utilization FROM ZoneStats WHERE stat_date BETWEEN '2025-05-31' AND '2025-06-02' GROUP BY zone_id;"}
{"prompt": "Show the daily number of parking sessions city-wide for the last 10 days.", "response": "sql SELECT session_date, COUNT(*) AS total_sessions FROM (SELECT start_time::date AS session_date FROM ParkingSessions) sub GROUP BY session_date ORDER BY session_date DESC;"}
{"prompt": "Which zone had the highest revenue per slot yesterday?", "response": "sql SELECT zone_id, ROUND(SUM(fee_collected)::numeric / COUNT(DISTINCT slot_id), 2) AS revenue_per_slot FROM ParkingSessions WHERE end_time::date = CURRENT_DATE - 1 GROUP BY zone_id ORDER BY revenue_per_slot DESC LIMIT 1;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which parking zones hit full capacity most frequently in the past week?", "response": "sql SELECT zone_id, COUNT(*) AS full_capacity_days FROM ZoneStats WHERE occupancy_rate = 100 AND stat_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY zone_id ORDER BY full_capacity_days DESC;"}
{"prompt": "What was the average parking duration by zone in the last 30 days?", "response": "sql SELECT zone_id, ROUND(AVG(EXTRACT(EPOCH FROM (end_time - start_time))/60), 2) AS avg_duration_minutes FROM ParkingSessions WHERE end_time IS NOT NULL AND start_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY zone_id;"}
{"prompt": "How many payment failures occurred per day this month?", "response": "sql SELECT DATE(payment_time) AS failure_date, COUNT(*) AS failure_count FROM Payments WHERE status = 'failed' AND payment_time >= date_trunc('month', CURRENT_DATE) GROUP BY failure_date ORDER BY failure_date;"}
{"prompt": "Which hours have the highest entry congestion across all hubs?", "response": "sql SELECT EXTRACT(HOUR FROM entry_time) AS hour, COUNT(*) AS entry_count FROM EntryLogs GROUP BY hour ORDER BY entry_count DESC;"}
{"prompt": "Show average app load time by device type (iOS vs Android).", "response": "sql SELECT device_type, ROUND(AVG(load_time_ms), 2) AS avg_load_time FROM AppPerformance WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days' GROUP BY device_type;"}
{"prompt": "What is the reservation success rate per zone this week?", "response": "sql SELECT zone_id, ROUND(SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END)*100.0/COUNT(*), 2) AS success_rate FROM Reservations WHERE created_at >= CURRENT_DATE - INTERVAL '7 days' GROUP BY zone_id;"}
{"prompt": "Which zones have seen the biggest drop in daily revenue compared to last week?", "response": "sql WITH current AS ( SELECT zone_id, SUM(fee_collected) AS revenue FROM ParkingSessions WHERE end_time::date = CURRENT_DATE - 1 GROUP BY zone_id ), previous AS ( SELECT zone_id, SUM(fee_collected) AS revenue FROM ParkingSessions WHERE end_time::date = CURRENT_DATE - 8 GROUP BY zone_id ) SELECT c.zone_id, c.revenue AS yesterday, p.revenue AS prev_week_same_day, (c.revenue - p.revenue) AS change FROM current c JOIN previous p ON c.zone_id = p.zone_id ORDER BY change ASC;"}
{"prompt": "Which zones had below-average utilization last weekend?", "response": "sql SELECT zone_id, ROUND(AVG(occupancy_rate), 2) AS avg_util FROM ZoneStats WHERE stat_date BETWEEN CURRENT_DATE - INTERVAL '2 days' AND CURRENT_DATE - INTERVAL '1 day' AND EXTRACT(DOW FROM stat_date) IN (6, 0) GROUP BY zone_id HAVING AVG(occupancy_rate) < 50;"}
{"prompt": "How many first-time users failed to return within 14 days?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM ( SELECT user_id, MIN(start_time) AS first_use FROM ParkingSessions GROUP BY user_id ) t WHERE NOT EXISTS ( SELECT 1 FROM ParkingSessions ps WHERE ps.user_id = t.user_id AND ps.start_time > t.first_use + INTERVAL '14 days' );"}
{"prompt": "Show average churn rate per week over the past 2 months.", "response": "sql SELECT TO_CHAR(week_start, 'YYYY-MM-DD') AS week_start, ROUND(AVG(churn_rate), 2) AS avg_churn FROM WeeklyUserStats WHERE week_start >= CURRENT_DATE - INTERVAL '2 months' GROUP BY week_start ORDER BY week_start;"}
{"prompt": "Which kiosks have the highest error frequency in the last month?", "response": "sql SELECT kiosk_id, COUNT(*) AS error_count FROM KioskLogs WHERE log_type = 'error' AND log_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY kiosk_id ORDER BY error_count DESC;"}
{"prompt": "What was the average daily occupancy by zone last week?", "response": "sql SELECT zone_id, ROUND(AVG(occupancy_rate), 2) AS avg_occupancy FROM ZoneStats WHERE stat_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE - 1 GROUP BY zone_id;"}
{"prompt": "How many users gave a rating below 3 stars last month?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE rating < 3 AND submitted_at >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which zones experienced technical issues during peak hours last week?", "response": "sql SELECT DISTINCT zone_id FROM ErrorLogs WHERE EXTRACT(HOUR FROM error_time) BETWEEN 17 AND 20 AND error_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What’s the trend in EV slot usage over the last 14 days?", "response": "sql SELECT usage_date, SUM(usage_count) AS total_ev_usage FROM EVSlotUsage WHERE usage_date >= CURRENT_DATE - INTERVAL '14 days' GROUP BY usage_date ORDER BY usage_date;"}
{"prompt": "Which app features are used most by returning users?", "response": "sql SELECT feature_name, COUNT(*) AS usage_count FROM AppUsage WHERE user_id IN ( SELECT user_id FROM UserStats WHERE visit_count > 1 ) GROUP BY feature_name ORDER BY usage_count DESC;"}
{"prompt": "How many repeat complaints have been logged by the same user in the past month?", "response": "sql SELECT user_id, COUNT(*) AS complaint_count FROM Complaints WHERE created_at >= CURRENT_DATE - INTERVAL '1 month' GROUP BY user_id HAVING COUNT(*) > 1 ORDER BY complaint_count DESC;"}
{"prompt": "Which zones should be prioritized for adding more EV chargers?", "response": "sql SELECT zone_id, AVG(ev_occupancy_rate) AS avg_ev_use FROM ZoneEVStats WHERE stat_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY zone_id HAVING AVG(ev_occupancy_rate) > 85 ORDER BY avg_ev_use DESC;"}
{"prompt": "What percentage of users use digital payment vs cash?", "response": "sql SELECT payment_method, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Payments), 2) AS percentage FROM Payments GROUP BY payment_method;"}
{"prompt": "Show the correlation between sensor downtime and entry delays.", "response": "sql SELECT zone_id, ROUND(CORR(sensor_downtime_minutes, avg_entry_delay_seconds), 2) AS correlation FROM ZoneDailyStats WHERE stat_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY zone_id;"}
{"prompt": "CustomerFeedback", "response": "nan"}
{"prompt": "Customers / End Users", "response": "nan"}
{"prompt": "What feedback did I (Ravi Menon) recently submit about the loan experience?", "response": "sql SELECT f.rating, f.comments, f.submitted_on FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' ORDER BY f.submitted_on DESC LIMIT 1;"}
{"prompt": "What was the status of my most recent feedback submission?", "response": "sql SELECT f.status FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' ORDER BY f.submitted_on DESC LIMIT 1;"}
{"prompt": "Show me all the feedback I've given over time.", "response": "sql SELECT f.submitted_on, f.rating, f.comments, f.status FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon';"}
{"prompt": "Which product was my recent feedback linked to?", "response": "sql SELECT p.name FROM Feedback f JOIN Products p ON f.product_id = p.product_id JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' ORDER BY f.submitted_on DESC LIMIT 1;"}
{"prompt": "Who is the marketing manager responsible for the product I gave feedback on?", "response": "sql SELECT m.first_name, m.last_name FROM Feedback f JOIN Products p ON f.product_id = p.product_id JOIN ProductManagers m ON p.marketing_manager_id = m.manager_id JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' ORDER BY f.submitted_on DESC LIMIT 1;"}
{"prompt": "Are there any open support tickets raised by me?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets t JOIN Customers c ON t.raised_by_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND t.role = 'Customer' AND t.status != 'Resolved';"}
{"prompt": "What was the subject and status of the last support ticket I raised?", "response": "sql SELECT subject, status FROM SupportTickets t JOIN Customers c ON t.raised_by_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND t.role = 'Customer' ORDER BY created_at DESC LIMIT 1;"}
{"prompt": "How many support tickets have I raised in total?", "response": "sql SELECT COUNT(*) FROM SupportTickets t JOIN Customers c ON t.raised_by_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND t.role = 'Customer';"}
{"prompt": "Did I receive any follow-up for my recent feedback? (Check if ticket was created after feedback)", "response": "sql SELECT COUNT(*) FROM SupportTickets t JOIN Customers c ON t.raised_by_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND t.role = 'Customer' AND t.created_at > (SELECT MAX(submitted_on) FROM Feedback f WHERE f.customer_id = c.customer_id);"}
{"prompt": "What rating did I give for the mobile app experience?", "response": "sql SELECT rating, comments FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND f.comments LIKE '%app%';"}
{"prompt": "Which comments from me were marked as impactful internally?", "response": "sql SELECT comments, status FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND f.status = 'Featured';"}
{"prompt": "How many customers submitted feedback on the same product I used?", "response": "sql SELECT COUNT(DISTINCT f.customer_id) FROM Feedback f WHERE f.product_id = (SELECT product_id FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' ORDER BY f.submitted_on DESC LIMIT 1);"}
{"prompt": "What are the average ratings of all users for the product I used?", "response": "sql SELECT AVG(rating) FROM Feedback WHERE product_id = (SELECT product_id FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' ORDER BY f.submitted_on DESC LIMIT 1);"}
{"prompt": "How many bugs have been reported via feedback overall?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%bug%' OR comments LIKE '%glitch%' OR comments LIKE '%issue%';"}
{"prompt": "How many user feedbacks mentioned “EMI” in the comments?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%EMI%';"}
{"prompt": "When was the last feedback submitted by any customer?", "response": "sql SELECT MAX(submitted_on) FROM Feedback;"}
{"prompt": "Which customers gave a 5-star rating for mobile app experience?", "response": "sql SELECT c.first_name, c.last_name FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE f.rating = 5 AND f.comments LIKE '%app%';"}
{"prompt": "What actions were logged right after I submitted feedback?", "response": "sql SELECT s.action, s.timestamp FROM SystemLogs s JOIN Users u ON s.user_id = u.user_id JOIN Customers c ON u.username = c.email WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon' AND s.timestamp > (SELECT MAX(submitted_on) FROM Feedback f WHERE f.customer_id = c.customer_id);"}
{"prompt": "Who generated the most recent analytics report after I raised my concern?", "response": "sql SELECT name, generated_on FROM AnalyticsReports WHERE generated_on > (SELECT MAX(submitted_on) FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon') ORDER BY generated_on DESC LIMIT 1;"}
{"prompt": "What details were recorded in the compliance record closest to my feedback?", "response": "sql SELECT * FROM ComplianceRecords WHERE check_date = (SELECT MIN(check_date) FROM ComplianceRecords WHERE check_date >= (SELECT MAX(submitted_on)::date FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE c.first_name = 'Ravi' AND c.last_name = 'Menon'));"}
{"prompt": "Feedback Analysts", "response": "nan"}
{"prompt": "Which feedback entries mention confusion about EMI date notifications?", "response": "sql SELECT feedback_id, customer_id, comments FROM Feedback WHERE comments LIKE '%EMI%' AND comments LIKE '%confus%';"}
{"prompt": "What is the average rating for feedback related to the mobile app?", "response": "sql SELECT AVG(rating) FROM Feedback WHERE comments LIKE '%app%';"}
{"prompt": "How many negative feedbacks (rating ≤ 2) were submitted in the past 30 days?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE rating <= 2 AND submitted_on >= NOW() - INTERVAL '30 days';"}
{"prompt": "Show all feedback comments that mentioned document uploads.", "response": "sql SELECT comments FROM Feedback WHERE comments LIKE '%document upload%';"}
{"prompt": "How many total feedback entries have been submitted for the mobile app?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%app%';"}
{"prompt": "List all customers who submitted feedback mentioning the onboarding process.", "response": "sql SELECT DISTINCT c.first_name, c.last_name FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id WHERE f.comments LIKE '%onboarding%';"}
{"prompt": "What’s the total number of feedbacks tagged as ‘Featured’?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE status = 'Featured';"}
{"prompt": "Which products have received the most feedback entries?", "response": "sql SELECT p.name, COUNT(*) AS feedback_count FROM Feedback f JOIN Products p ON f.product_id = p.product_id GROUP BY p.name ORDER BY feedback_count DESC;"}
{"prompt": "What’s the most common rating given by customers in the last 7 days?", "response": "sql SELECT rating, COUNT(*) AS frequency FROM Feedback WHERE submitted_on >= NOW() - INTERVAL '7 days' GROUP BY rating ORDER BY frequency DESC LIMIT 1;"}
{"prompt": "How many customers submitted feedback with the word “support” in it?", "response": "sql SELECT COUNT(DISTINCT customer_id) FROM Feedback WHERE comments LIKE '%support%';"}
{"prompt": "Which support tickets are related to unresolved or open customer complaints?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "What are the categories of products that have received complaints about usability?", "response": "sql SELECT DISTINCT p.category FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE f.comments LIKE '%usability%' OR f.comments LIKE '%confusing%' OR f.comments LIKE '%difficult%';"}
{"prompt": "Which users have submitted more than 1 feedback entry?", "response": "sql SELECT c.first_name, c.last_name, COUNT(*) AS total_feedbacks FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(*) > 1;"}
{"prompt": "What is the earliest date on which feedback was received about EMI issues?", "response": "sql SELECT MIN(submitted_on) FROM Feedback WHERE comments LIKE '%EMI%';"}
{"prompt": "List all feedback entries received after the latest app update.", "response": "sql SELECT * FROM Feedback WHERE submitted_on > (SELECT MAX(generated_on) FROM AnalyticsReports WHERE name LIKE '%app update%');"}
{"prompt": "What is the feedback trend for the last four weeks in terms of average rating?", "response": "sql SELECT DATE_TRUNC('week', submitted_on) AS week_start, AVG(rating) AS avg_rating FROM Feedback WHERE submitted_on >= NOW() - INTERVAL '28 days' GROUP BY week_start ORDER BY week_start;"}
{"prompt": "Which keywords are most frequent in negative feedback (rating ≤ 2)? (Requires further processing beyond SQL)", "response": "Not fully feasible via SQL alone. Needs NLP post-processing."}
{"prompt": "Which product categories have more positive feedback (rating ≥ 4)?", "response": "sql SELECT p.category, COUNT(*) AS positive_count FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE f.rating >= 4 GROUP BY p.category ORDER BY positive_count DESC;"}
{"prompt": "How many feedback records were created after the latest compliance check?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE submitted_on > (SELECT MAX(check_date) FROM ComplianceRecords);"}
{"prompt": "Which support tickets were raised by users within 2 days after submitting feedback?", "response": "sql SELECT t.ticket_id, t.subject FROM SupportTickets t JOIN Customers c ON t.raised_by_id = c.customer_id WHERE t.role = 'Customer' AND EXISTS ( SELECT 1 FROM Feedback f WHERE f.customer_id = c.customer_id AND t.created_at BETWEEN f.submitted_on AND f.submitted_on + INTERVAL '2 days' );"}
{"prompt": "Product Managers", "response": "nan"}
{"prompt": "Which feedback comments specifically mentioned confusion with EMI reminders?", "response": "sql SELECT comments FROM Feedback WHERE comments LIKE '%EMI%' AND (comments LIKE '%confus%' OR comments LIKE '%reminder%');"}
{"prompt": "What’s the average customer rating for the product I manage?", "response": "sql SELECT AVG(f.rating) FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE p.marketing_manager_id = (SELECT manager_id FROM ProductManagers WHERE first_name = 'Arjun' AND last_name = 'Malhotra');"}
{"prompt": "Which features have received the most positive feedback (rating ≥ 4)?", "response": "sql SELECT p.name, COUNT(*) AS positive_count FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE f.rating >= 4 GROUP BY p.name ORDER BY positive_count DESC;"}
{"prompt": "How many feedback entries mention the term ‘auto-disbursement’?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%auto-disbursement%';"}
{"prompt": "Show all feedback submitted after the release of “Navya Lite.”", "response": "sql SELECT * FROM Feedback WHERE submitted_on >= (SELECT MIN(generated_on) FROM AnalyticsReports WHERE name LIKE '%Navya Lite%');"}
{"prompt": "Which products have high drop-off feedback such as “did not complete” or “left midway”?", "response": "sql SELECT p.name FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE f.comments LIKE '%did not complete%' OR f.comments LIKE '%left midway%';"}
{"prompt": "What’s the trend in customer ratings over the past 4 weeks for my product?", "response": "sql SELECT DATE_TRUNC('week', f.submitted_on) AS week_start, AVG(f.rating) AS avg_rating FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE p.marketing_manager_id = (SELECT manager_id FROM ProductManagers WHERE first_name = 'Arjun' AND last_name = 'Malhotra') AND f.submitted_on >= NOW() - INTERVAL '28 days' GROUP BY week_start ORDER BY week_start;"}
{"prompt": "How many feedbacks mention the phrase “multilingual support”?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%multilingual support%';"}
{"prompt": "Who are the top 5 customers who submitted the most feedback across any product?", "response": "sql SELECT c.first_name, c.last_name, COUNT(*) AS total_feedbacks FROM Feedback f JOIN Customers c ON f.customer_id = c.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_feedbacks DESC LIMIT 5;"}
{"prompt": "What’s the average rating for products released in the last 30 days? (Assuming “release” date info is in AnalyticsReports)", "response": "sql SELECT AVG(f.rating) FROM Feedback f JOIN AnalyticsReports a ON f.submitted_on >= a.generated_on WHERE a.name LIKE '%product release%' AND a.generated_on >= NOW() - INTERVAL '30 days';"}
{"prompt": "How many users raised support tickets after experiencing issues with onboarding?", "response": "sql SELECT COUNT(DISTINCT t.raised_by_id) FROM SupportTickets t WHERE t.description LIKE '%onboarding%';"}
{"prompt": "Which product features are mentioned in customer complaints (rating ≤ 2)?", "response": "sql SELECT DISTINCT p.name FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE f.rating <= 2;"}
{"prompt": "Are customers still experiencing issues with EMI updates post-release?", "response": "sql SELECT COUNT(*) FROM Feedback WHERE comments LIKE '%EMI%' AND comments LIKE '%not update%' AND submitted_on > (SELECT MAX(generated_on) FROM AnalyticsReports WHERE name LIKE '%EMI update%');"}
{"prompt": "What was the impact of Navya Lite on new user feedback volume?", "response": "sql SELECT DATE_TRUNC('week', f.submitted_on) AS week_start, COUNT(*) AS feedback_count FROM Feedback f WHERE submitted_on >= (SELECT MIN(generated_on) FROM AnalyticsReports WHERE name LIKE '%Navya Lite%') GROUP BY week_start ORDER BY week_start;"}
{"prompt": "Which categories of products are receiving the most customer suggestions?", "response": "sql SELECT p.category, COUNT(*) FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE f.comments LIKE '%suggestion%' GROUP BY p.category ORDER BY COUNT(*) DESC;"}
{"prompt": "What are users saying about the new EMI calculator?", "response": "sql SELECT comments FROM Feedback WHERE comments LIKE '%EMI calculator%';"}
{"prompt": "How many support tickets were resolved within 2 days of creation?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE resolved_at IS NOT NULL AND resolved_at <= created_at + INTERVAL '2 days';"}
{"prompt": "Are compliance records up to date with new product releases?", "response": "sql SELECT COUNT(*) FROM ComplianceRecords WHERE check_date >= (SELECT MAX(generated_on) FROM AnalyticsReports);"}
{"prompt": "What feedback keywords appear most in tickets marked ‘Open’? (Needs external text analysis)", "response": "Requires NLP — not feasible with plain SQL only."}
{"prompt": "What was the volume of feedback before and after launching “credit score tracking”?", "response": "sql SELECT 'Before' AS phase, COUNT(*) FROM Feedback WHERE submitted_on < (SELECT MIN(generated_on) FROM AnalyticsReports WHERE name LIKE '%credit score tracking%') UNION ALL SELECT 'After' AS phase, COUNT(*) FROM Feedback WHERE submitted_on >= (SELECT MIN(generated_on) FROM AnalyticsReports WHERE name LIKE '%credit score tracking%');"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "Which tickets are still open and need my attention today?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved' AND DATE(created_at) = CURRENT_DATE;"}
{"prompt": "Show me Ravi Menon's recent support history so I can follow up properly.", "response": "sql SELECT * FROM SupportTickets WHERE raised_by_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ravi' AND last_name = 'Menon') ORDER BY created_at DESC;"}
{"prompt": "How many tickets have been raised about EMI updates or sync issues?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%EMI%' AND description LIKE '%sync%';"}
{"prompt": "Can I find all complaints that mentioned auto-debit failures?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%auto-debit failure%';"}
{"prompt": "How many tickets were resolved in the last 7 days?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status = 'resolved' AND resolved_at >= NOW() - INTERVAL '7 days';"}
{"prompt": "Who are the customers who faced login issues recently?", "response": "sql SELECT DISTINCT c.first_name, c.last_name, c.email FROM SupportTickets st JOIN Customers c ON st.raised_by_id = c.customer_id WHERE st.description LIKE '%login%';"}
{"prompt": "Which open tickets are pending for more than 2 days?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved' AND created_at < NOW() - INTERVAL '2 days';"}
{"prompt": "How many support requests are about the new EMI layout?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%EMI layout%';"}
{"prompt": "Which support cases required follow-up emails or document confirmations?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%follow-up email%' OR description LIKE '%confirmation%';"}
{"prompt": "Can I pull all unresolved tickets related to payments?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved' AND (description LIKE '%payment%' OR subject LIKE '%payment%');"}
{"prompt": "Which tickets were created today from elderly or senior customers? (Needs age filter if available, assuming none: list all for now)", "response": "sql SELECT * FROM SupportTickets WHERE DATE(created_at) = CURRENT_DATE;"}
{"prompt": "What are the most frequently mentioned issues in support tickets?", "response": "sql SELECT subject, COUNT(*) AS issue_count FROM SupportTickets GROUP BY subject ORDER BY issue_count DESC LIMIT 5;"}
{"prompt": "How many issues were reported in the app vs the web portal? (Assuming app/web mentioned in descriptions)", "response": "sql SELECT 'App' AS platform, COUNT(*) FROM SupportTickets WHERE description LIKE '%app%' UNION ALL SELECT 'Web Portal' AS platform, COUNT(*) FROM SupportTickets WHERE description LIKE '%portal%';"}
{"prompt": "Which borrowers have submitted multiple complaints in the past month?", "response": "sql SELECT raised_by_id, COUNT(*) AS ticket_count FROM SupportTickets WHERE created_at >= NOW() - INTERVAL '30 days' GROUP BY raised_by_id HAVING COUNT(*) > 1;"}
{"prompt": "Can I check how long it took to resolve each ticket last week?", "response": "sql SELECT ticket_id, resolved_at - created_at AS resolution_time FROM SupportTickets WHERE resolved_at IS NOT NULL AND created_at >= NOW() - INTERVAL '7 days';"}
{"prompt": "Which technical issues were escalated more than once?", "response": "sql SELECT subject, COUNT(*) FROM SupportTickets WHERE description LIKE '%technical%' GROUP BY subject HAVING COUNT(*) > 1;"}
{"prompt": "Who raised support tickets on EMI confirmation but hasn’t received a resolution yet?", "response": "sql SELECT c.first_name, c.last_name, st.ticket_id FROM SupportTickets st JOIN Customers c ON st.raised_by_id = c.customer_id WHERE st.description LIKE '%EMI confirmation%' AND st.status != 'resolved';"}
{"prompt": "How many tickets were logged in total this month?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Show me support queries that mentioned “credit score” confusion.", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%credit score%';"}
{"prompt": "Which tickets did I close today? (Assuming Meera’s user ID is needed — if not tracked directly, we list today's resolutions)", "response": "sql SELECT * FROM SupportTickets WHERE status = 'resolved' AND DATE(resolved_at) = CURRENT_DATE;"}
{"prompt": "Quality Assurance Team", "response": "nan"}
{"prompt": "Which support tickets were resolved without escalation, and how quickly were they handled?", "response": "sql SELECT ticket_id, created_at, resolved_at, resolved_at - created_at AS resolution_time FROM SupportTickets WHERE status = 'resolved';"}
{"prompt": "Can I find support interactions where compliance keywords like 'disclosure' or 'consent' are missing in the description?", "response": "sql SELECT * FROM SupportTickets WHERE description NOT LIKE '%disclosure%' AND description NOT LIKE '%consent%';"}
{"prompt": "How many tickets were created and resolved on the same day — indicating good first-call resolution?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE DATE(created_at) = DATE(resolved_at);"}
{"prompt": "Which tickets had unusually long handling times? (Over 5 days)", "response": "sql SELECT * FROM SupportTickets WHERE resolved_at - created_at > INTERVAL '5 days';"}
{"prompt": "Which agents (based on user_id) had the most delayed ticket resolutions last month?", "response": "sql SELECT user_id, COUNT(*) AS delayed_cases FROM SystemLogs WHERE action = 'resolved_ticket' AND timestamp >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND timestamp <= DATE_TRUNC('month', CURRENT_DATE) AND user_id IN (SELECT user_id FROM Users WHERE role = 'support') GROUP BY user_id ORDER BY delayed_cases DESC;"}
{"prompt": "Show me recent feedback that was marked as negative (rating <= 2).", "response": "sql SELECT * FROM Feedback WHERE rating <= 2 ORDER BY submitted_on DESC;"}
{"prompt": "What are the average ratings across each product based on customer feedback?", "response": "sql SELECT p.name, AVG(f.rating) AS avg_rating FROM Feedback f JOIN Products p ON f.product_id = p.product_id GROUP BY p.name ORDER BY avg_rating ASC;"}
{"prompt": "Can I pull customer complaints that mention confusion over foreclosure or early repayment?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%foreclosure%' OR description LIKE '%early repayment%';"}
{"prompt": "Which feedback entries have not yet been reviewed or are still pending action?", "response": "sql SELECT * FROM Feedback WHERE status != 'resolved';"}
{"prompt": "What were the most common reasons mentioned in support tickets over the last 14 days?", "response": "sql SELECT subject, COUNT(*) AS frequency FROM SupportTickets WHERE created_at >= NOW() - INTERVAL '14 days' GROUP BY subject ORDER BY frequency DESC;"}
{"prompt": "Which users accessed or modified tickets after office hours?", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%ticket%' AND EXTRACT(HOUR FROM timestamp) NOT BETWEEN 9 AND 18;"}
{"prompt": "How many unresolved tickets were created during weekends?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE status != 'resolved' AND EXTRACT(DOW FROM created_at) IN (0,6);"}
{"prompt": "Identify customers who gave a poor rating but never received follow-up contact.", "response": "sql SELECT f.customer_id FROM Feedback f LEFT JOIN SupportTickets st ON f.customer_id = st.raised_by_id WHERE f.rating <= 2 AND st.created_at IS NULL;"}
{"prompt": "Which QA team members haven't logged any system actions in the past week?", "response": "sql SELECT qa_id, name FROM QualityAssurance WHERE qa_id NOT IN (SELECT user_id FROM SystemLogs WHERE timestamp >= NOW() - INTERVAL '7 days');"}
{"prompt": "Can I review logs of users who performed more than 20 actions today?", "response": "sql SELECT user_id, COUNT(*) AS action_count FROM SystemLogs WHERE DATE(timestamp) = CURRENT_DATE GROUP BY user_id HAVING COUNT(*) > 20;"}
{"prompt": "What actions were performed on tickets during high-traffic hours (12 PM to 3 PM)?", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%ticket%' AND EXTRACT(HOUR FROM timestamp) BETWEEN 12 AND 15;"}
{"prompt": "List customers who submitted multiple negative feedback entries.", "response": "sql SELECT customer_id, COUNT(*) AS low_ratings FROM Feedback WHERE rating <= 2 GROUP BY customer_id HAVING COUNT(*) > 1;"}
{"prompt": "How many feedback entries were submitted this month per product category?", "response": "sql SELECT p.category, COUNT(*) AS feedback_count FROM Feedback f JOIN Products p ON f.product_id = p.product_id WHERE DATE_TRUNC('month', f.submitted_on) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY p.category;"}
{"prompt": "Which users viewed system logs after a critical support escalation? (Assuming 'escalation' is logged in action)", "response": "sql SELECT * FROM SystemLogs WHERE action LIKE '%escalation%' AND timestamp >= NOW() - INTERVAL '1 day';"}
{"prompt": "Show me feedback records submitted outside working hours that need QA review.", "response": "sql SELECT * FROM Feedback WHERE EXTRACT(HOUR FROM submitted_on) NOT BETWEEN 9 AND 18 AND status != 'resolved';"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "How many customers signed up after viewing the “Sapno Ka Saathi” campaign?", "response": "sql SELECT COUNT(*) FROM CampaignMetrics WHERE campaign_name = 'Sapno Ka Saathi' AND action = 'signup';"}
{"prompt": "What was the conversion rate from views to applications for the “Home Loan Dreams” campaign?", "response": "sql SELECT (SUM(CASE WHEN action = 'application' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS conversion_rate FROM CampaignMetrics WHERE campaign_name = 'Home Loan Dreams';"}
{"prompt": "Which regional language content had the highest click-through rate?", "response": "sql SELECT language, AVG(click_through_rate) AS avg_ctr FROM CampaignMetrics GROUP BY language ORDER BY avg_ctr DESC;"}
{"prompt": "What was the total reach of our WhatsApp onboarding journey?", "response": "sql SELECT SUM(impressions) FROM CampaignMetrics WHERE channel = 'WhatsApp' AND action = 'onboarding';"}
{"prompt": "Which campaigns led to the highest number of new installs from semi-urban users?", "response": "sql SELECT campaign_name, COUNT(*) AS installs FROM CampaignMetrics WHERE user_region = 'semi-urban' AND action = 'app_install' GROUP BY campaign_name ORDER BY installs DESC;"}
{"prompt": "How many users watched the borrower story video series?", "response": "sql SELECT COUNT(*) FROM CampaignMetrics WHERE campaign_name = 'Borrower Stories Series' AND action = 'video_view';"}
{"prompt": "Which campaign had the best engagement rate among users aged 30–45?", "response": "sql SELECT campaign_name, AVG(engagement_rate) FROM CampaignMetrics WHERE age BETWEEN 30 AND 45 GROUP BY campaign_name ORDER BY AVG(engagement_rate) DESC;"}
{"prompt": "How many signups came from the WhatsApp voice-note journey this quarter?", "response": "sql SELECT COUNT(*) FROM CampaignMetrics WHERE channel = 'WhatsApp' AND content_type = 'voice_note' AND action = 'signup' AND timestamp >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which product type saw the most campaign-driven conversions?", "response": "sql SELECT product_type, COUNT(*) AS conversions FROM CampaignMetrics WHERE action = 'conversion' GROUP BY product_type ORDER BY conversions DESC;"}
{"prompt": "How did the education loan campaign perform in Tier-2 cities?", "response": "sql SELECT * FROM CampaignMetrics WHERE campaign_name = 'Education Empowerment' AND user_region = 'Tier-2';"}
{"prompt": "Which influencer-led posts had the highest reach last month?", "response": "sql SELECT post_title, reach FROM SocialMediaCampaigns WHERE influencer IS NOT NULL AND post_date >= CURRENT_DATE - INTERVAL '30 days' ORDER BY reach DESC;"}
{"prompt": "What is the average bounce rate for our financial literacy webinar landing pages?", "response": "sql SELECT AVG(bounce_rate) FROM CampaignMetrics WHERE campaign_name LIKE '%webinar%';"}
{"prompt": "How many app guide downloads came from our Instagram reels?", "response": "sql SELECT COUNT(*) FROM CampaignMetrics WHERE channel = 'Instagram' AND content_type = 'reel' AND action = 'guide_download';"}
{"prompt": "Which city had the highest conversion rate from the Navya Lite campaign?", "response": "sql SELECT user_city, (SUM(CASE WHEN action = 'conversion' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS conversion_rate FROM CampaignMetrics WHERE campaign_name = 'Navya Lite' GROUP BY user_city ORDER BY conversion_rate DESC;"}
{"prompt": "How many customer reviews mentioned “trust” or “support” positively?", "response": "sql SELECT COUNT(*) FROM CustomerReviews WHERE review_text LIKE '%trust%' OR review_text LIKE '%support%';"}
{"prompt": "Which campaigns were active during last month’s interest rate change?", "response": "sql SELECT DISTINCT campaign_name FROM CampaignMetrics WHERE timestamp BETWEEN '2025-05-01' AND '2025-05-31';"}
{"prompt": "What is the daily trend of app signups via marketing campaigns over the past 14 days?", "response": "sql SELECT DATE(timestamp) AS signup_date, COUNT(*) AS signups FROM CampaignMetrics WHERE action = 'signup' GROUP BY signup_date ORDER BY signup_date;"}
{"prompt": "Which campaign was responsible for the most personal loan inquiries in regional languages?", "response": "sql SELECT campaign_name, COUNT(*) FROM CampaignMetrics WHERE product_type = 'Personal Loan' AND language != 'English' AND action = 'inquiry' GROUP BY campaign_name ORDER BY COUNT(*) DESC;"}
{"prompt": "Which WhatsApp messages had the highest click-through rate among users aged 50+?", "response": "sql SELECT message_title, click_through_rate FROM CampaignMetrics WHERE channel = 'WhatsApp' AND age >= 50 ORDER BY click_through_rate DESC;"}
{"prompt": "How many new borrowers came from campaigns targeting rural areas in the last 60 days?", "response": "sql SELECT COUNT(*) FROM CampaignMetrics WHERE user_region = 'rural' AND action = 'conversion' AND timestamp >= CURRENT_DATE - INTERVAL '60 days';"}
{"prompt": "Sales Team", "response": "nan"}
{"prompt": "How many loans were sanctioned through field visits last month?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE channel = 'Field Visit' AND status = 'Sanctioned' AND application_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What is the average loan amount approved by Manoj Shekhar in the last 3 months?", "response": "sql SELECT AVG(loan_amount) FROM LoanApplications WHERE sales_executive = 'Manoj Shekhar' AND status = 'Approved' AND application_date >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "Which regions saw the most successful loan conversions via the sales team?", "response": "sql SELECT region, COUNT(*) AS approved_loans FROM LoanApplications WHERE channel = 'Field Visit' AND status = 'Approved' GROUP BY region ORDER BY approved_loans DESC;"}
{"prompt": "How many first-time borrowers were onboarded by field executives this quarter?", "response": "sql SELECT COUNT(*) FROM Borrowers WHERE is_first_time = TRUE AND onboarding_channel = 'Sales Field Team' AND registration_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "How many leads converted into loans after festival outreach campaigns?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE campaign_name LIKE '%Festival%' AND lead_source = 'Field Outreach' AND status = 'Approved';"}
{"prompt": "What is the loan rejection rate for applications initiated through field visits?", "response": "sql SELECT (SUM(CASE WHEN status = 'Rejected' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS rejection_rate FROM LoanApplications WHERE channel = 'Field Visit';"}
{"prompt": "Which sales executive has the highest number of successful referrals this year?", "response": "sql SELECT sales_executive, COUNT(*) AS referral_conversions FROM Referrals WHERE status = 'Converted' AND referral_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY sales_executive ORDER BY referral_conversions DESC;"}
{"prompt": "What are the top concerns reported by borrowers during field visits?", "response": "sql SELECT concern_type, COUNT(*) FROM FieldVisitFeedback GROUP BY concern_type ORDER BY COUNT(*) DESC;"}
{"prompt": "How many emergency monsoon loans were disbursed in affected villages?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE purpose = 'Emergency Monsoon Assistance' AND status = 'Disbursed';"}
{"prompt": "What’s the average turnaround time for loans assisted by the Sales Team?", "response": "sql SELECT AVG(DATE_PART('day', approval_date - application_date)) AS avg_tat FROM LoanApplications WHERE channel = 'Field Visit' AND status = 'Approved';"}
{"prompt": "How many farmers applied for working capital loans in the last 60 days?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE borrower_occupation = 'Farmer' AND loan_type = 'Working Capital' AND application_date >= CURRENT_DATE - INTERVAL '60 days';"}
{"prompt": "Which communities or occupations have the highest loan approval rates via field sales?", "response": "sql SELECT borrower_occupation, (SUM(CASE WHEN status = 'Approved' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS approval_rate FROM LoanApplications WHERE channel = 'Field Visit' GROUP BY borrower_occupation ORDER BY approval_rate DESC;"}
{"prompt": "How many mobile-based loan applications were completed in the field?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE channel = 'Mobile Device - Assisted' AND assisted_by = 'Sales Team';"}
{"prompt": "Which locations reported the most hidden charges concern before sales intervention?", "response": "sql SELECT region, COUNT(*) FROM FieldVisitFeedback WHERE feedback_text LIKE '%hidden charges%' GROUP BY region ORDER BY COUNT(*) DESC;"}
{"prompt": "What is the monthly trend of field-based loan applications in rural areas?", "response": "sql SELECT DATE_TRUNC('month', application_date) AS month, COUNT(*) AS applications FROM LoanApplications WHERE region_type = 'Rural' AND channel = 'Field Visit' GROUP BY month ORDER BY month;"}
{"prompt": "What percentage of field-collected documents were verified on the first try?", "response": "sql SELECT (SUM(CASE WHEN document_status = 'Verified First Attempt' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS verification_success_rate FROM DocumentSubmissions WHERE submission_mode = 'Field Collection';"}
{"prompt": "How many feedback suggestions were submitted by the Sales Team to the Product Team?", "response": "sql SELECT COUNT(*) FROM InternalFeedback WHERE submitted_by_team = 'Sales' AND recipient_team = 'Product';"}
{"prompt": "What’s the most recommended loan product by the field sales team?", "response": "sql SELECT loan_type, COUNT(*) AS recommendations FROM SalesRecommendations GROUP BY loan_type ORDER BY recommendations DESC;"}
{"prompt": "How many follow-up visits were completed by sales executives last month?", "response": "sql SELECT COUNT(*) FROM FieldVisits WHERE visit_type = 'Follow-Up' AND visit_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "How many outreach campaigns led by Manoj resulted in same-day loan approvals?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE sales_executive = 'Manoj Shekhar' AND DATE(approval_date) = DATE(application_date) AND status = 'Approved';"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "How many system alerts were triggered in the last 30 days?", "response": "sql SELECT COUNT(*) FROM SystemAlerts WHERE alert_timestamp >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What was the average system uptime last month?", "response": "sql SELECT AVG(uptime_percentage) FROM DailySystemHealth WHERE report_month = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "How many login failures were reported from rural zones in the last 7 days?", "response": "sql SELECT COUNT(*) FROM LoginLogs WHERE login_status = 'Failure' AND region_type = 'Rural' AND login_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the most frequent system issue category reported last quarter?", "response": "sql SELECT issue_category, COUNT(*) AS frequency FROM SystemAlerts WHERE alert_timestamp >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter' GROUP BY issue_category ORDER BY frequency DESC LIMIT 1;"}
{"prompt": "Which days saw unusually high CPU usage across servers?", "response": "sql SELECT log_date, AVG(cpu_usage) AS avg_cpu FROM ServerMetrics GROUP BY log_date HAVING AVG(cpu_usage) > 85 ORDER BY log_date;"}
{"prompt": "How many successful backup operations were completed this month?", "response": "sql SELECT COUNT(*) FROM SystemBackups WHERE status = 'Success' AND backup_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "How many failed document uploads were logged due to backend errors?", "response": "sql SELECT COUNT(*) FROM UploadLogs WHERE upload_status = 'Failed' AND failure_reason LIKE '%backend%';"}
{"prompt": "What percentage of EMI reminders were delayed due to system issues?", "response": "sql SELECT (COUNT(*) FILTER (WHERE status = 'Delayed' AND delay_reason = 'System Error') * 100.0 / COUNT(*)) AS delayed_percentage FROM EMIReminders;"}
{"prompt": "Which external APIs were integrated in the past 6 months?", "response": "sql SELECT api_name, integration_date FROM APIIntegrations WHERE integration_date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "How many times did server scaling events occur during peak traffic periods?", "response": "sql SELECT COUNT(*) FROM ServerScalingEvents WHERE reason = 'Peak Load' AND event_time >= CURRENT_DATE - INTERVAL '3 months';"}
{"prompt": "What is the current size of the secure data lake used for feedback analysis?", "response": "sql SELECT ROUND(SUM(data_size_gb), 2) AS total_size_gb FROM DataLakeStorage WHERE project = 'Feedback_Insights';"}
{"prompt": "How many patch updates were applied in the last quarter?", "response": "sql SELECT COUNT(*) FROM PatchManagement WHERE patch_status = 'Completed' AND patch_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter';"}
{"prompt": "What are the top three recurring system errors by frequency?", "response": "sql SELECT error_message, COUNT(*) AS occurrences FROM SystemLogs GROUP BY error_message ORDER BY occurrences DESC LIMIT 3;"}
{"prompt": "How many user access permission requests were approved this month?", "response": "sql SELECT COUNT(*) FROM AccessControlRequests WHERE status = 'Approved' AND request_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which days had the longest average latency in app response times?", "response": "sql SELECT log_date, AVG(response_time_ms) AS avg_latency FROM AppPerformanceLogs GROUP BY log_date ORDER BY avg_latency DESC LIMIT 5;"}
{"prompt": "How many fraudulent login attempts were blocked by the system firewall this year?", "response": "sql SELECT COUNT(*) FROM LoginLogs WHERE login_status = 'Blocked' AND reason = 'Suspicious Activity' AND login_time >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "Which internal tool had the highest downtime in the last 60 days?", "response": "sql SELECT tool_name, SUM(downtime_minutes) AS total_downtime FROM InternalToolLogs WHERE log_date >= CURRENT_DATE - INTERVAL '60 days' GROUP BY tool_name ORDER BY total_downtime DESC LIMIT 1;"}
{"prompt": "How many successful UPI auto-debit transactions were processed last month?", "response": "sql SELECT COUNT(*) FROM UPITransactions WHERE status = 'Success' AND transaction_type = 'Auto-Debit' AND transaction_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "How many server rollbacks were performed due to incompatibility issues?", "response": "sql SELECT COUNT(*) FROM ServerRollbackLogs WHERE rollback_reason LIKE '%incompatibility%';"}
{"prompt": "What was the average time taken to resolve critical infrastructure alerts?", "response": "sql SELECT AVG(EXTRACT(EPOCH FROM resolution_time - alert_time)/60) AS avg_resolution_minutes FROM SystemAlerts WHERE severity = 'Critical' AND resolution_time IS NOT NULL;"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "How many loan applications dropped off at the documentation stage last month?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE status = 'Dropped' AND drop_off_stage = 'Document Upload' AND drop_off_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "What is the average time taken from loan application to disbursement?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM disbursement_date - application_date)/86400), 2) AS avg_days_to_disburse FROM Loans WHERE disbursement_date IS NOT NULL;"}
{"prompt": "Which regions have the highest loan default rates in the last 6 months?", "response": "sql SELECT region, ROUND((COUNT(*) FILTER (WHERE default_flag = TRUE) * 100.0 / COUNT(*)), 2) AS default_rate FROM LoanPerformance WHERE disbursed_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY region ORDER BY default_rate DESC;"}
{"prompt": "What is the churn rate of borrowers in the last quarter?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE churn_flag = TRUE) * 100.0 / COUNT(*)), 2) AS churn_rate FROM BorrowerActivity WHERE last_active_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter');"}
{"prompt": "How many support tickets were tagged with 'upload failure' in the past month?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE tag LIKE '%upload failure%' AND created_at >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "What is the conversion rate of loan leads to disbursed loans this year?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE status = 'Disbursed') * 100.0 / COUNT(*)), 2) AS conversion_rate FROM LoanApplications WHERE application_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "What’s the average credit score of borrowers approved for personal loans?", "response": "sql SELECT ROUND(AVG(credit_score), 2) FROM Loans WHERE loan_type = 'Personal' AND status = 'Approved';"}
{"prompt": "Which age group has the highest loan approval rate?", "response": "sql SELECT age_group, ROUND((COUNT(*) FILTER (WHERE status = 'Approved') * 100.0 / COUNT(*)), 2) AS approval_rate FROM BorrowerProfiles GROUP BY age_group ORDER BY approval_rate DESC;"}
{"prompt": "What are the top 5 reasons for application rejection?", "response": "sql SELECT rejection_reason, COUNT(*) AS occurrences FROM LoanApplications WHERE status = 'Rejected' GROUP BY rejection_reason ORDER BY occurrences DESC LIMIT 5;"}
{"prompt": "Which app screens have the highest exit rate during onboarding?", "response": "sql SELECT screen_name, ROUND((exit_count * 100.0 / view_count), 2) AS exit_rate FROM AppFunnelStats WHERE funnel_stage = 'Onboarding' ORDER BY exit_rate DESC LIMIT 5;"}
{"prompt": "What is the repayment behavior trend over the past 12 months?", "response": "sql SELECT TO_CHAR(payment_date, 'YYYY-MM') AS month, SUM(amount_paid) AS total_paid FROM EMIRepayments WHERE payment_date >= CURRENT_DATE - INTERVAL '12 months' GROUP BY month ORDER BY month;"}
{"prompt": "How many users interacted with in-app nudges last quarter?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM InAppNudgeLogs WHERE interaction_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter');"}
{"prompt": "How did loan application success rate change after the retry mechanism update?", "response": "sql SELECT TO_CHAR(application_date, 'YYYY-MM') AS month, ROUND((COUNT(*) FILTER (WHERE status = 'Disbursed') * 100.0 / COUNT(*)), 2) AS success_rate FROM LoanApplications WHERE feature_version IN ('pre-retry', 'post-retry') GROUP BY month ORDER BY month;"}
{"prompt": "Which products have the highest Customer Lifetime Value (CLV)?", "response": "sql SELECT loan_type, ROUND(AVG(customer_lifetime_value), 2) AS avg_clv FROM BorrowerStats GROUP BY loan_type ORDER BY avg_clv DESC;"}
{"prompt": "What’s the default rate among users flagged with risk in predictive models?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE default_flag = TRUE) * 100.0 / COUNT(*)), 2) AS risk_default_rate FROM CreditRiskScores WHERE risk_prediction = 'High';"}
{"prompt": "How many app users are active daily (DAU) vs. monthly (MAU)?", "response": "sql SELECT 'DAU' AS metric, COUNT(DISTINCT user_id) FROM AppUsage WHERE usage_date = CURRENT_DATE UNION ALL SELECT 'MAU', COUNT(DISTINCT user_id) FROM AppUsage WHERE usage_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which regional languages are most used in the app?", "response": "sql SELECT preferred_language, COUNT(*) AS user_count FROM UserPreferences GROUP BY preferred_language ORDER BY user_count DESC;"}
{"prompt": "What is the average EMI paid vs. expected for education loans?", "response": "sql SELECT ROUND(AVG(actual_paid), 2) AS avg_paid, ROUND(AVG(expected_emi), 2) AS avg_expected FROM EMIRepayments WHERE loan_type = 'Education';"}
{"prompt": "Which user segments responded best to the A/B tested onboarding nudges?", "response": "sql SELECT segment, ROUND((COUNT(*) FILTER (WHERE group_variant = 'B' AND converted = TRUE) * 100.0 / COUNT(*) FILTER (WHERE group_variant = 'B')), 2) AS conversion_b FROM ABTestResults WHERE test_name = 'OnboardingNudge' GROUP BY segment ORDER BY conversion_b DESC;"}
{"prompt": "Which product had the highest increase in applications after targeted campaigns?", "response": "sql SELECT product_name, (post_campaign_apps - pre_campaign_apps) AS application_increase FROM CampaignImpactAnalysis ORDER BY application_increase DESC LIMIT 1;"}
{"prompt": "Compliance / Legal Team", "response": "nan"}
{"prompt": "How many internal audits were conducted in the past 6 months?", "response": "sql SELECT COUNT(*) FROM InternalAudits WHERE audit_date >= CURRENT_DATE - INTERVAL '6 months';"}
{"prompt": "What percentage of loan agreements have the latest compliance version applied?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE compliance_version = (SELECT MAX(version_id) FROM ComplianceVersions)) * 100.0 / COUNT(*)), 2) AS compliance_uptake_rate FROM LoanAgreements;"}
{"prompt": "How many borrower disputes escalated to legal counsel this year?", "response": "sql SELECT COUNT(*) FROM DisputeCases WHERE escalation_status = 'Legal Counsel' AND escalation_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "What is the average resolution time for compliance-related grievances?", "response": "sql SELECT ROUND(AVG(EXTRACT(EPOCH FROM resolution_date - report_date)/86400), 2) AS avg_resolution_days FROM ComplianceGrievances WHERE resolution_date IS NOT NULL;"}
{"prompt": "How many EMI reminders violated RBI communication guidelines last month?", "response": "sql SELECT COUNT(*) FROM EMIComplianceLogs WHERE violation_flag = TRUE AND log_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "Which teams have not completed compliance training in the current quarter?", "response": "sql SELECT DISTINCT team_name FROM TeamRoster WHERE team_name NOT IN (SELECT DISTINCT team_name FROM ComplianceTrainingLogs WHERE completion_date >= DATE_TRUNC('quarter', CURRENT_DATE));"}
{"prompt": "How many KYC violations were flagged during onboarding in the last quarter?", "response": "sql SELECT COUNT(*) FROM KYCAuditLogs WHERE violation_flag = TRUE AND check_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter');"}
{"prompt": "Which loan features required legal review before approval this year?", "response": "sql SELECT feature_name, review_status, legal_review_date FROM ProductComplianceReviews WHERE legal_review_required = TRUE AND review_status = 'Approved' AND legal_review_date >= DATE_TRUNC('year', CURRENT_DATE);"}
{"prompt": "How many borrower consent forms were missing in processed loan files?", "response": "sql SELECT COUNT(*) FROM LoanApplications WHERE consent_form_status = 'Missing';"}
{"prompt": "What percentage of marketing campaigns included legally approved disclaimers?", "response": "sql SELECT ROUND((COUNT(*) FILTER (WHERE disclaimer_approved = TRUE) * 100.0 / COUNT(*)), 2) AS approved_percentage FROM CampaignCompliance;"}
{"prompt": "How many users accessed the borrower rights module in the app last month?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM BorrowerRightsModuleLogs WHERE access_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');"}
{"prompt": "Which regions had the highest number of borrower grievance reports?", "response": "sql SELECT region, COUNT(*) AS grievance_count FROM BorrowerGrievances GROUP BY region ORDER BY grievance_count DESC LIMIT 5;"}
{"prompt": "How many new policies were added due to regulatory changes in the last 12 months?", "response": "sql SELECT COUNT(*) FROM PolicyRegistry WHERE reason LIKE '%regulatory%' AND creation_date >= CURRENT_DATE - INTERVAL '12 months';"}
{"prompt": "What is the status of ongoing litigation cases involving borrowers?", "response": "sql SELECT case_id, borrower_id, case_status FROM LegalCases WHERE case_type = 'Borrower Dispute' AND case_status IN ('Open', 'Under Arbitration');"}
{"prompt": "How many system features have legal disclaimer links embedded?", "response": "sql SELECT COUNT(*) FROM FeatureRegistry WHERE legal_disclaimer_link IS NOT NULL;"}
{"prompt": "What is the compliance audit score trend over the past 4 quarters?", "response": "sql SELECT TO_CHAR(audit_date, 'YYYY-Q') AS quarter, AVG(score) AS avg_score FROM InternalAudits GROUP BY TO_CHAR(audit_date, 'YYYY-Q') ORDER BY quarter;"}
{"prompt": "How many privacy policy versions were released since January 2024?", "response": "sql SELECT COUNT(*) FROM PrivacyPolicyVersions WHERE release_date >= '2024-01-01';"}
{"prompt": "How many users revoked consent for data sharing with third parties?", "response": "sql SELECT COUNT(*) FROM ConsentLogs WHERE consent_type = 'Third Party Sharing' AND status = 'Revoked';"}
{"prompt": "What are the most common compliance violations found during audits?", "response": "sql SELECT violation_type, COUNT(*) AS occurrences FROM AuditFindings GROUP BY violation_type ORDER BY occurrences DESC LIMIT 5;"}
{"prompt": "Which communication templates were flagged for non-compliance with RBI guidelines?", "response": "sql SELECT template_id, usage_context, flag_reason FROM CommunicationTemplateLogs WHERE rbi_violation_flag = TRUE;"}
{"prompt": "ArtGallery", "response": "nan"}
{"prompt": "Visitors / Art Enthusiasts", "response": "nan"}
{"prompt": "How many visitors attended the 'Modern Myths' exhibition?", "response": "sql SELECT COUNT(DISTINCT v.visitor_id) FROM Visitors v JOIN ExhibitionArtworks ea ON v.visitor_id = ea.exhibition_id WHERE ea.exhibition_id = (SELECT exhibition_id FROM Exhibitions WHERE name = 'Modern Myths');"}
{"prompt": "Which artworks are currently on display at the 'Modern Myths' exhibition?", "response": "sql SELECT a.title, a.creation_year FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "What is the price range of artworks in the 'Modern Myths' exhibition?", "response": "sql SELECT MIN(price), MAX(price) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "Can you list all the artworks displayed in the gallery along with the artists' names?", "response": "sql SELECT a.title, CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name FROM Artworks a JOIN Artists ar ON a.artist_id = ar.artist_id;"}
{"prompt": "How many visitors interacted with the digital installation today?", "response": "sql SELECT COUNT(DISTINCT v.visitor_id) FROM Visitors v JOIN SystemLogs sl ON v.visitor_id = sl.user_id WHERE sl.action = 'Interacted with digital installation' AND sl.timestamp >= CURDATE();"}
{"prompt": "What is the total sales amount for artworks sold in the last month?", "response": "sql SELECT SUM(s.sale_price) FROM SalesRecords s WHERE s.sale_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();"}
{"prompt": "Who are the top 5 selling artists this month based on the number of artworks sold?", "response": "sql SELECT CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name, COUNT(s.sale_id) AS total_sales FROM Artworks a JOIN Artists ar ON a.artist_id = ar.artist_id JOIN SalesRecords s ON a.artwork_id = s.artwork_id WHERE s.sale_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY artist_name ORDER BY total_sales DESC LIMIT 5;"}
{"prompt": "Which artworks have been sold in the last 7 days, and who bought them?", "response": "sql SELECT a.title, CONCAT(b.first_name, ' ', b.last_name) AS buyer_name, s.sale_date FROM SalesRecords s JOIN Artworks a ON s.artwork_id = a.artwork_id JOIN Visitors b ON s.buyer_id = b.visitor_id WHERE s.sale_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE();"}
{"prompt": "How many new visitors registered today at the gallery?", "response": "sql SELECT COUNT(visitor_id) FROM Visitors WHERE registration_date = CURDATE();"}
{"prompt": "How many artworks by each artist are currently in the 'Modern Myths' exhibition?", "response": "sql SELECT CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name, COUNT(a.artwork_id) AS artwork_count FROM Artworks a JOIN Artists ar ON a.artist_id = ar.artist_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths' GROUP BY artist_name;"}
{"prompt": "What is the current status of each artwork in the exhibition?", "response": "sql SELECT a.title, a.status FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "How many artworks in total have been sold this year?", "response": "sql SELECT COUNT(s.sale_id) FROM SalesRecords s WHERE YEAR(s.sale_date) = YEAR(CURDATE());"}
{"prompt": "Which visitors raised the most support tickets in the last month?", "response": "sql SELECT CONCAT(v.first_name, ' ', v.last_name) AS visitor_name, COUNT(st.ticket_id) AS tickets_raised FROM Visitors v JOIN SupportTickets st ON v.visitor_id = st.raised_by_id WHERE st.created_at BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY visitor_name ORDER BY tickets_raised DESC;"}
{"prompt": "Who are the curators and managers for the 'Modern Myths' exhibition?", "response": "sql SELECT CONCAT(c.first_name, ' ', c.last_name) AS curator_name, CONCAT(m.first_name, ' ', m.last_name) AS manager_name FROM Exhibitions e JOIN Curators c ON e.curator_id = c.curator_id JOIN ExhibitionManagers m ON e.manager_id = m.manager_id WHERE e.name = 'Modern Myths';"}
{"prompt": "How many artworks are being managed by each curator across all exhibitions?", "response": "sql SELECT CONCAT(c.first_name, ' ', c.last_name) AS curator_name, COUNT(a.artwork_id) AS artwork_count FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id JOIN Curators c ON e.curator_id = c.curator_id GROUP BY curator_name;"}
{"prompt": "Which artworks have had the highest number of visitors in the last month?", "response": "sql SELECT a.title, COUNT(DISTINCT v.visitor_id) AS visitor_count FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id JOIN Visitors v ON v.visitor_id = ea.exhibition_id WHERE e.start_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY a.title ORDER BY visitor_count DESC LIMIT 5;"}
{"prompt": "How many artworks were added to the 'Modern Myths' exhibition after it opened?", "response": "sql SELECT COUNT(a.artwork_id) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths' AND a.creation_year > e.start_date;"}
{"prompt": "What is the total number of support tickets raised by visitors related to 'Modern Myths'?", "response": "sql SELECT COUNT(st.ticket_id) FROM SupportTickets st JOIN Visitors v ON st.raised_by_id = v.visitor_id JOIN Exhibitions e ON v.visitor_id = ea.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "Which artworks are priced above the average for the 'Modern Myths' exhibition?", "response": "sql SELECT a.title, a.price FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths' AND a.price > (SELECT AVG(price) FROM Artworks WHERE artwork_id IN (SELECT artwork_id FROM ExhibitionArtworks WHERE exhibition_id = (SELECT exhibition_id FROM Exhibitions WHERE name = 'Modern Myths')));"}
{"prompt": "Who were the top 3 visitors based on the number of artworks interacted with in the last week?", "response": "sql SELECT CONCAT(v.first_name, ' ', v.last_name) AS visitor_name, COUNT(ea.artwork_id) AS artworks_interacted FROM Visitors v JOIN ExhibitionArtworks ea ON v.visitor_id = ea.exhibition_id WHERE ea.exhibition_id IN (SELECT exhibition_id FROM Exhibitions WHERE start_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 WEEK) AND CURDATE()) GROUP BY visitor_name ORDER BY artworks_interacted DESC LIMIT 3;"}
{"prompt": "Artists", "response": "nan"}
{"prompt": "As I walked through the 'Modern Myths' exhibition, I wondered — how many different artists contributed to this showcase?", "response": "sql SELECT COUNT(DISTINCT AR.artist_id) AS artist_count FROM Artists AR JOIN Artworks A ON AR.artist_id = A.artist_id JOIN ExhibitionArtworks EA ON A.artwork_id = EA.artwork_id JOIN Exhibitions E ON EA.exhibition_id = E.exhibition_id WHERE E.name = 'Modern Myths';"}
{"prompt": "How many of my artworks are currently displayed in exhibitions?", "response": "sql SELECT COUNT(*) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id WHERE a.title = 'Whispers of Clay';"}
{"prompt": "What are the titles and statuses of all my artworks on display?", "response": "sql SELECT a.title, a.status FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav');"}
{"prompt": "Which exhibitions are currently showcasing any of my artworks?", "response": "sql SELECT DISTINCT e.name FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id JOIN Artworks a ON ea.artwork_id = a.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav');"}
{"prompt": "How many of my artworks have been sold?", "response": "sql SELECT COUNT(*) FROM Artworks a JOIN SalesRecords s ON a.artwork_id = s.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav');"}
{"prompt": "What is the total revenue generated from the sale of my artworks?", "response": "sql SELECT SUM(s.sale_price) FROM Artworks a JOIN SalesRecords s ON a.artwork_id = s.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav');"}
{"prompt": "What is the price and medium of 'Whispers of Clay'?", "response": "sql SELECT price, medium FROM Artworks WHERE title = 'Whispers of Clay';"}
{"prompt": "Which of my artworks were created before 2020 and are still available for sale?", "response": "sql SELECT title FROM Artworks WHERE artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND creation_year < 2020 AND status = 'Available';"}
{"prompt": "How many exhibitions have featured at least one of my artworks in the past year?", "response": "sql SELECT COUNT(DISTINCT e.exhibition_id) FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id JOIN Artworks a ON ea.artwork_id = a.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND e.start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}
{"prompt": "What’s the average sale price of my artworks sold in the last 6 months?", "response": "sql SELECT AVG(s.sale_price) FROM Artworks a JOIN SalesRecords s ON a.artwork_id = s.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND s.sale_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"}
{"prompt": "List the titles and sale dates of my artworks that have been purchased.", "response": "sql SELECT a.title, s.sale_date FROM Artworks a JOIN SalesRecords s ON a.artwork_id = s.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav');"}
{"prompt": "Which of my artworks were part of the most recent exhibition I participated in?", "response": "sql SELECT a.title FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND e.start_date = (SELECT MAX(e2.start_date) FROM Exhibitions e2 JOIN ExhibitionArtworks ea2 ON e2.exhibition_id = ea2.exhibition_id JOIN Artworks a2 ON ea2.artwork_id = a2.artwork_id WHERE a2.artist_id = a.artist_id);"}
{"prompt": "Which other artists are exhibiting alongside me in the 'Modern Myths' exhibition?", "response": "sql SELECT DISTINCT CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name FROM Artworks a JOIN Artists ar ON a.artist_id = ar.artist_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths' AND ar.first_name <> 'Aarav';"}
{"prompt": "How many exhibitions have I participated in as an artist so far?", "response": "sql SELECT COUNT(DISTINCT ea.exhibition_id) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav');"}
{"prompt": "Which of my artworks are not assigned to any exhibition yet?", "response": "sql SELECT title FROM Artworks WHERE artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND artwork_id NOT IN (SELECT artwork_id FROM ExhibitionArtworks);"}
{"prompt": "What is the average price of artworks created by me in 2024?", "response": "sql SELECT AVG(price) FROM Artworks WHERE artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND creation_year = 2024;"}
{"prompt": "How many of my artworks are categorized under ‘mixed-media’?", "response": "sql SELECT COUNT(*) FROM Artworks WHERE artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND medium = 'mixed-media';"}
{"prompt": "Have any of my artworks ever been marked as 'On Hold'?", "response": "sql SELECT COUNT(*) FROM Artworks WHERE artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND status = 'On Hold';"}
{"prompt": "What is the total number of visitors who might have seen my artwork in exhibitions since Jan 1st this year?", "response": "sql SELECT COUNT(DISTINCT v.visitor_id) FROM Visitors v JOIN ExhibitionArtworks ea ON v.visitor_id = ea.exhibition_id JOIN Artworks a ON ea.artwork_id = a.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE a.artist_id = (SELECT artist_id FROM Artists WHERE first_name = 'Aarav') AND e.start_date >= '2025-01-01';"}
{"prompt": "What are the names of all exhibitions where 'Whispers of Clay' was displayed?", "response": "sql SELECT e.name FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id JOIN Artworks a ON ea.artwork_id = a.artwork_id WHERE a.title = 'Whispers of Clay';"}
{"prompt": "Curators", "response": "nan"}
{"prompt": "How many exhibitions have I curated so far?", "response": "sql SELECT COUNT(*) FROM Exhibitions WHERE curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera');"}
{"prompt": "Which artworks are being featured in the 'Modern Myths' exhibition I curated?", "response": "sql SELECT a.title FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "Who are the artists featured in the 'Modern Myths' exhibition?", "response": "sql SELECT DISTINCT CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name FROM Artists ar JOIN Artworks a ON ar.artist_id = a.artist_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "What are the mediums used across all artworks in the 'Modern Myths' exhibition?", "response": "sql SELECT DISTINCT a.medium FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "What’s the total value of artworks in the 'Modern Myths' exhibition?", "response": "sql SELECT SUM(a.price) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "Which artworks in the exhibition are not available for sale?", "response": "sql SELECT a.title FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths' AND a.status != 'Available';"}
{"prompt": "What is the average price of artworks in the exhibitions I have curated?", "response": "sql SELECT AVG(a.price) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera');"}
{"prompt": "How many exhibitions were curated by me in the last 12 months?", "response": "sql SELECT COUNT(*) FROM Exhibitions WHERE curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') AND start_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);"}
{"prompt": "How many distinct artists have I worked with across all exhibitions?", "response": "sql SELECT COUNT(DISTINCT a.artist_id) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera');"}
{"prompt": "Which exhibition had the highest number of artworks curated by me?", "response": "sql SELECT e.name, COUNT(*) AS artwork_count FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id JOIN Artworks a ON ea.artwork_id = a.artwork_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') GROUP BY e.name ORDER BY artwork_count DESC LIMIT 1;"}
{"prompt": "Which exhibitions that I curated have already ended?", "response": "sql SELECT name FROM Exhibitions WHERE curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') AND end_date < CURDATE();"}
{"prompt": "Which artworks were displayed in more than one exhibition that I curated?", "response": "sql SELECT a.title FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') GROUP BY a.artwork_id HAVING COUNT(DISTINCT e.exhibition_id) > 1;"}
{"prompt": "List all upcoming exhibitions I am curating.", "response": "sql SELECT name, start_date FROM Exhibitions WHERE curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') AND start_date > CURDATE();"}
{"prompt": "Which of my curated exhibitions included digital installations?", "response": "sql SELECT DISTINCT e.name FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id JOIN Artworks a ON ea.artwork_id = a.artwork_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') AND a.medium LIKE '%digital%';"}
{"prompt": "How many artworks have been sold from exhibitions I curated?", "response": "sql SELECT COUNT(*) FROM SalesRecords s JOIN Artworks a ON s.artwork_id = a.artwork_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera');"}
{"prompt": "What’s the total sale revenue from exhibitions curated by me?", "response": "sql SELECT SUM(s.sale_price) FROM SalesRecords s JOIN Artworks a ON s.artwork_id = a.artwork_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera');"}
{"prompt": "Which exhibitions curated by me had more than 10 artworks displayed?", "response": "sql SELECT e.name FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') GROUP BY e.exhibition_id HAVING COUNT(ea.artwork_id) > 10;"}
{"prompt": "List the email addresses of all artists featured in the 'Modern Myths' exhibition.", "response": "sql SELECT DISTINCT ar.contact_email FROM Artists ar JOIN Artworks a ON ar.artist_id = a.artist_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "What was the most expensive artwork ever featured in an exhibition curated by me?", "response": "sql SELECT a.title, a.price FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') ORDER BY a.price DESC LIMIT 1;"}
{"prompt": "Which artists were newly featured in the most recent exhibition I curated (but not in any of my past ones)?", "response": "sql SELECT DISTINCT ar.first_name, ar.last_name FROM Artists ar JOIN Artworks a ON ar.artist_id = a.artist_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') AND e.exhibition_id = (SELECT exhibition_id FROM Exhibitions WHERE curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') ORDER BY start_date DESC LIMIT 1) AND ar.artist_id NOT IN (SELECT DISTINCT ar2.artist_id FROM Artists ar2 JOIN Artworks a2 ON ar2.artist_id = a2.artist_id JOIN ExhibitionArtworks ea2 ON a2.artwork_id = ea2.artwork_id JOIN Exhibitions e2 ON ea2.exhibition_id = e2.exhibition_id WHERE e2.curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') AND e2.exhibition_id != (SELECT exhibition_id FROM Exhibitions WHERE curator_id = (SELECT curator_id FROM Curators WHERE first_name = 'Meera') ORDER BY start_date DESC LIMIT 1));"}
{"prompt": "Exhibition Managers", "response": "nan"}
{"prompt": "How many exhibitions have I managed so far?", "response": "sql SELECT COUNT(*) FROM Exhibitions WHERE manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "Which exhibitions under my management are currently ongoing?", "response": "sql SELECT name FROM Exhibitions WHERE manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') AND CURDATE() BETWEEN start_date AND end_date;"}
{"prompt": "Which artworks are displayed in the 'Modern Myths' exhibition I’m managing?", "response": "sql SELECT a.title FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "How many total artworks are featured in exhibitions I’ve managed?", "response": "sql SELECT COUNT(*) FROM ExhibitionArtworks ea JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "What is the average number of artworks per exhibition I have managed?", "response": "sql SELECT AVG(artwork_count) FROM (SELECT COUNT(ea.artwork_id) AS artwork_count FROM ExhibitionArtworks ea JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') GROUP BY e.exhibition_id) AS sub;"}
{"prompt": "Which exhibition that I managed had the highest number of artworks?", "response": "sql SELECT e.name, COUNT(ea.artwork_id) AS total FROM Exhibitions e JOIN ExhibitionArtworks ea ON e.exhibition_id = ea.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') GROUP BY e.exhibition_id ORDER BY total DESC LIMIT 1;"}
{"prompt": "What are the mediums used in the current exhibition I'm managing?", "response": "sql SELECT DISTINCT a.medium FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths';"}
{"prompt": "Which artists are featured in the exhibitions I’ve managed?", "response": "sql SELECT DISTINCT CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name FROM Artists ar JOIN Artworks a ON ar.artist_id = a.artist_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "What is the total estimated value of all artworks under my management?", "response": "sql SELECT SUM(a.price) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "Which artwork in 'Modern Myths' is the most expensive?", "response": "sql SELECT a.title, a.price FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.name = 'Modern Myths' ORDER BY a.price DESC LIMIT 1;"}
{"prompt": "How many support tickets were raised during exhibitions I’ve managed?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE role = 'manager' AND raised_by_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "What’s the average resolution time for tickets raised by me?", "response": "sql SELECT AVG(TIMESTAMPDIFF(HOUR, created_at, resolved_at)) AS avg_resolution_hours FROM SupportTickets WHERE role = 'manager' AND raised_by_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "Which exhibitions I managed generated the most sales?", "response": "sql SELECT e.name, SUM(s.sale_price) AS total_sales FROM SalesRecords s JOIN Artworks a ON s.artwork_id = a.artwork_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') GROUP BY e.name ORDER BY total_sales DESC;"}
{"prompt": "What is the total number of sales for artworks from the exhibitions I managed?", "response": "sql SELECT COUNT(*) FROM SalesRecords s JOIN Artworks a ON s.artwork_id = a.artwork_id JOIN ExhibitionArtworks ea ON ea.artwork_id = a.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan');"}
{"prompt": "How many digital installations were included in the exhibitions I managed?", "response": "sql SELECT COUNT(DISTINCT a.artwork_id) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') AND a.medium LIKE '%digital%';"}
{"prompt": "What is the total revenue from the merchandise sold at exhibitions I managed?", "response": "sql SELECT SUM(amount) FROM FinanceRecords WHERE description LIKE '%merchandise%' AND type = 'income'; (Assuming merchandise is tracked in FinanceRecords)"}
{"prompt": "What is the list of exhibitions I managed that started this year?", "response": "sql SELECT name, start_date FROM Exhibitions WHERE manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') AND YEAR(start_date) = YEAR(CURDATE());"}
{"prompt": "What are the most common types of issues reported in support tickets by exhibition managers?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE role = 'manager' GROUP BY subject ORDER BY count DESC;"}
{"prompt": "How many interactive artworks are included in exhibitions I’ve managed?", "response": "sql SELECT COUNT(DISTINCT a.artwork_id) FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') AND a.medium LIKE '%interactive%';"}
{"prompt": "Which artists have had the most sales from exhibitions I managed?", "response": "sql SELECT CONCAT(ar.first_name, ' ', ar.last_name) AS artist_name, COUNT(*) AS sales_count FROM Artists ar JOIN Artworks a ON ar.artist_id = a.artist_id JOIN SalesRecords s ON s.artwork_id = a.artwork_id JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON ea.exhibition_id = e.exhibition_id WHERE e.manager_id = (SELECT manager_id FROM ExhibitionManagers WHERE first_name = 'Rohan') GROUP BY ar.artist_id ORDER BY sales_count DESC;"}
{"prompt": "Customer Support Representatives", "response": "nan"}
{"prompt": "How many support tickets have I handled so far?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE role = 'support' AND raised_by_id = (SELECT user_id FROM Users WHERE username = 'Anaya');"}
{"prompt": "What are the most common types of visitor issues I’ve resolved?", "response": "sql SELECT subject, COUNT(*) AS total FROM SupportTickets WHERE role = 'support' GROUP BY subject ORDER BY total DESC;"}
{"prompt": "What percentage of my tickets are still unresolved?", "response": "sql SELECT ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM SupportTickets WHERE role = 'support' AND raised_by_id = (SELECT user_id FROM Users WHERE username = 'Anaya')), 2) AS unresolved_percent FROM SupportTickets WHERE role = 'support' AND status != 'resolved' AND raised_by_id = (SELECT user_id FROM Users WHERE username = 'Anaya');"}
{"prompt": "How long does it typically take to resolve a support ticket?", "response": "sql SELECT AVG(TIMESTAMPDIFF(HOUR, created_at, resolved_at)) AS avg_resolution_hours FROM SupportTickets WHERE role = 'support';"}
{"prompt": "Can I get a list of support tickets I resolved this week?", "response": "sql SELECT * FROM SupportTickets WHERE role = 'support' AND resolved_at BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE();"}
{"prompt": "What are the latest unresolved support tickets submitted by visitors?", "response": "sql SELECT * FROM SupportTickets WHERE role = 'visitor' AND status != 'resolved' ORDER BY created_at DESC;"}
{"prompt": "Which day last month had the highest number of support tickets created?", "response": "sql SELECT DATE(created_at) AS day, COUNT(*) AS total FROM SupportTickets WHERE MONTH(created_at) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY day ORDER BY total DESC LIMIT 1;"}
{"prompt": "What’s the average resolution time for tickets submitted by visitors?", "response": "sql SELECT AVG(TIMESTAMPDIFF(HOUR, created_at, resolved_at)) AS avg_visitor_resolution_time FROM SupportTickets WHERE role = 'visitor';"}
{"prompt": "What are the most frequently raised support topics in the current month?", "response": "sql SELECT subject, COUNT(*) AS count FROM SupportTickets WHERE MONTH(created_at) = MONTH(CURDATE()) GROUP BY subject ORDER BY count DESC;"}
{"prompt": "Which support tickets were flagged for the online booking page glitch?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%booking page%';"}
{"prompt": "Which unresolved tickets have been pending the longest?", "response": "sql SELECT * FROM SupportTickets WHERE status != 'resolved' ORDER BY created_at ASC LIMIT 5;"}
{"prompt": "What kind of issues did we face during the launch week of “Modern Myths”?", "response": "sql SELECT subject, COUNT(*) FROM SupportTickets WHERE created_at BETWEEN '2024-06-01' AND '2024-06-07' GROUP BY subject; (Replace dates based on exhibition launch)"}
{"prompt": "How many support requests related to accessibility have been logged?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%accessibility%' OR subject LIKE '%accessibility%';"}
{"prompt": "What are the feedback trends from visitors over the past 30 days?", "response": "sql SELECT subject, COUNT(*) FROM SupportTickets WHERE created_at >= CURDATE() - INTERVAL 30 DAY AND role = 'visitor' GROUP BY subject ORDER BY COUNT(*) DESC;"}
{"prompt": "Which recurring issues should I report to operations?", "response": "sql SELECT subject, COUNT(*) FROM SupportTickets GROUP BY subject HAVING COUNT(*) > 3 ORDER BY COUNT(*) DESC;"}
{"prompt": "How many tickets were created during weekends this month?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE WEEKDAY(created_at) IN (5,6) AND MONTH(created_at) = MONTH(CURDATE());"}
{"prompt": "What were the top 3 issues reported by tourists in the past two weeks?", "response": "sql SELECT subject, COUNT(*) FROM SupportTickets WHERE description LIKE '%tourist%' AND created_at >= CURDATE() - INTERVAL 14 DAY GROUP BY subject ORDER BY COUNT(*) DESC LIMIT 3;"}
{"prompt": "Can I get a list of all tickets created by school groups or children’s visits?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%school%' OR description LIKE '%children%';"}
{"prompt": "How many tickets were raised due to multilingual or international visitor needs?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%language%' OR description LIKE '%multilingual%' OR description LIKE '%international%';"}
{"prompt": "What is the current support workload for all representatives?", "response": "sql SELECT raised_by_id, COUNT(*) AS open_tickets FROM SupportTickets WHERE status != 'resolved' GROUP BY raised_by_id ORDER BY open_tickets DESC;"}
{"prompt": "Marketing Team", "response": "nan"}
{"prompt": "How many marketing team members are currently part of our organization?", "response": "sql SELECT COUNT(*) FROM MarketingTeam;"}
{"prompt": "What are the names and emails of all marketing team members working on the 'Modern Myths' campaign?", "response": "sql SELECT first_name, last_name, email FROM MarketingTeam; (Assumes all are involved in the current campaign since campaign-specific table is not present.)"}
{"prompt": "How many support tickets mentioned marketing-related issues like campaigns or promotions?", "response": "sql SELECT COUNT(*) FROM SupportTickets WHERE description LIKE '%campaign%' OR description LIKE '%promotion%';"}
{"prompt": "Which marketing members have accounts in the system (i.e., are registered users)?", "response": "sql SELECT mt.first_name, mt.last_name FROM MarketingTeam mt JOIN Users u ON mt.email = u.username; (Assumes email = username mapping)"}
{"prompt": "What are the peak days for visitor footfall as per sales data?", "response": "sql SELECT sale_date, COUNT(*) AS tickets_sold FROM SalesRecords GROUP BY sale_date ORDER BY tickets_sold DESC LIMIT 5;"}
{"prompt": "How many artworks were sold during the 'Modern Myths' exhibition dates?", "response": "sql SELECT COUNT(*) FROM SalesRecords WHERE sale_date BETWEEN (SELECT start_date FROM Exhibitions WHERE name = 'Modern Myths') AND (SELECT end_date FROM Exhibitions WHERE name = 'Modern Myths');"}
{"prompt": "What is the total revenue generated from 'Modern Myths' exhibition sales?", "response": "sql SELECT SUM(sale_price) FROM SalesRecords WHERE sale_date BETWEEN (SELECT start_date FROM Exhibitions WHERE name = 'Modern Myths') AND (SELECT end_date FROM Exhibitions WHERE name = 'Modern Myths');"}
{"prompt": "Which artworks from the 'Modern Myths' exhibition were sold?", "response": "sql SELECT a.title FROM Artworks a JOIN ExhibitionArtworks ea ON a.artwork_id = ea.artwork_id JOIN Exhibitions e ON e.exhibition_id = ea.exhibition_id JOIN SalesRecords s ON s.artwork_id = a.artwork_id WHERE e.name = 'Modern Myths';"}
{"prompt": "What’s the most expensive artwork sold during the exhibition?", "response": "sql SELECT a.title, s.sale_price FROM Artworks a JOIN SalesRecords s ON a.artwork_id = s.artwork_id ORDER BY s.sale_price DESC LIMIT 1;"}
{"prompt": "Which day during the exhibition saw the highest number of artwork sales?", "response": "sql SELECT sale_date, COUNT(*) AS total_sales FROM SalesRecords WHERE sale_date BETWEEN (SELECT start_date FROM Exhibitions WHERE name = 'Modern Myths') AND (SELECT end_date FROM Exhibitions WHERE name = 'Modern Myths') GROUP BY sale_date ORDER BY total_sales DESC LIMIT 1;"}
{"prompt": "How many unique buyers made purchases during the “Modern Myths” exhibition?", "response": "sql SELECT COUNT(DISTINCT buyer_id) FROM SalesRecords WHERE sale_date BETWEEN (SELECT start_date FROM Exhibitions WHERE name = 'Modern Myths') AND (SELECT end_date FROM Exhibitions WHERE name = 'Modern Myths');"}
{"prompt": "What is the email list we could target based on recent art buyers?", "response": "sql SELECT DISTINCT v.email FROM Visitors v JOIN SalesRecords s ON v.visitor_id = s.buyer_id WHERE s.sale_date > CURDATE() - INTERVAL 30 DAY;"}
{"prompt": "Which support tickets came from visitors referencing Instagram, reels, or social media?", "response": "sql SELECT * FROM SupportTickets WHERE description LIKE '%Instagram%' OR description LIKE '%reel%' OR description LIKE '%social media%';"}
{"prompt": "How many finance records show revenue from marketing-driven activities (tagged by description)?", "response": "sql SELECT COUNT(*) FROM FinanceRecords WHERE description LIKE '%marketing%';"}
{"prompt": "What is the total spend recorded under marketing in the finance logs this month?", "response": "sql SELECT SUM(amount) FROM FinanceRecords WHERE type = 'expense' AND description LIKE '%marketing%' AND MONTH(date) = MONTH(CURDATE());"}
{"prompt": "What feedback trends are we seeing that relate to marketing campaigns or advertisements?", "response": "sql SELECT subject, COUNT(*) FROM SupportTickets WHERE description LIKE '%ad%' OR description LIKE '%campaign%' GROUP BY subject ORDER BY COUNT(*) DESC;"}
{"prompt": "How many system logins did the marketing team perform this week?", "response": "sql SELECT COUNT(*) FROM SystemLogs WHERE user_id IN (SELECT user_id FROM Users WHERE username IN (SELECT email FROM MarketingTeam)) AND timestamp >= CURDATE() - INTERVAL 7 DAY;"}
{"prompt": "What were the most recent analytics reports generated by the team?", "response": "sql SELECT name, generated_on FROM AnalyticsReports ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "Which visitors made purchases within one day of the live Q&A campaign launch date (e.g., 2025-06-08)?", "response": "sql SELECT v.first_name, v.last_name FROM Visitors v JOIN SalesRecords s ON v.visitor_id = s.buyer_id WHERE s.sale_date = '2025-06-08'; (Change date as per actual Q&A date.)"}
{"prompt": "Which exhibitions had the highest correlation between footfall and online buzz?", "response": "(Not possible to compute precisely without explicit online metrics table — suggest analytics team to use joined data externally)"}
{"prompt": "Sales / Auction Staff", "response": "nan"}
{"prompt": "How many artworks were listed for the current auction event?", "response": "sql SELECT COUNT(*) FROM AuctionArtworks WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "What are the titles and base prices of all artworks in the latest auction?", "response": "sql SELECT a.title, aa.base_price FROM AuctionArtworks aa JOIN Artworks a ON aa.artwork_id = a.artwork_id WHERE aa.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "Which buyers participated in the most recent auction?", "response": "sql SELECT DISTINCT b.first_name, b.last_name FROM Buyers b JOIN AuctionBids ab ON b.buyer_id = ab.buyer_id WHERE ab.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "What were the final sale prices of all artworks sold during the latest auction?", "response": "sql SELECT a.title, ab.final_price FROM AuctionResults ab JOIN Artworks a ON ab.artwork_id = a.artwork_id WHERE ab.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "Which artwork fetched the highest bid in the latest auction?", "response": "sql SELECT a.title, ab.final_price FROM AuctionResults ab JOIN Artworks a ON ab.artwork_id = a.artwork_id WHERE ab.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) ORDER BY ab.final_price DESC LIMIT 1;"}
{"prompt": "Who were the top 3 bidders based on the total amount they spent in the auction?", "response": "sql SELECT b.first_name, b.last_name, SUM(ab.final_price) AS total_spent FROM AuctionResults ab JOIN Buyers b ON ab.buyer_id = b.buyer_id WHERE ab.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) GROUP BY b.buyer_id ORDER BY total_spent DESC LIMIT 3;"}
{"prompt": "How many artworks were left unsold after the auction event?", "response": "sql SELECT COUNT(*) FROM AuctionArtworks WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) AND artwork_id NOT IN (SELECT artwork_id FROM AuctionResults WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1));"}
{"prompt": "Which buyers placed bids but didn’t win any artwork?", "response": "sql SELECT DISTINCT b.first_name, b.last_name FROM AuctionBids ab JOIN Buyers b ON ab.buyer_id = b.buyer_id WHERE ab.buyer_id NOT IN (SELECT buyer_id FROM AuctionResults WHERE auction_id = ab.auction_id) AND ab.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "What were the most frequently bid-on artworks in the auction?", "response": "sql SELECT a.title, COUNT(*) AS bid_count FROM AuctionBids ab JOIN Artworks a ON ab.artwork_id = a.artwork_id WHERE ab.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) GROUP BY a.title ORDER BY bid_count DESC;"}
{"prompt": "How many private viewings were arranged during the auction event?", "response": "sql SELECT COUNT(*) FROM PrivateViewings WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "Which artwork was most commonly requested for private viewing?", "response": "sql SELECT a.title, COUNT(*) AS requests FROM PrivateViewings pv JOIN Artworks a ON pv.artwork_id = a.artwork_id WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) GROUP BY a.title ORDER BY requests DESC LIMIT 1;"}
{"prompt": "What is the total revenue generated from the latest auction?", "response": "sql SELECT SUM(final_price) FROM AuctionResults WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "What are the contact details of all buyers who made purchases during the latest auction?", "response": "sql SELECT DISTINCT b.first_name, b.last_name, b.email, b.phone FROM Buyers b JOIN AuctionResults ar ON b.buyer_id = ar.buyer_id WHERE ar.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "Which artworks had a final price significantly above their base price?", "response": "sql SELECT a.title, ar.final_price, aa.base_price FROM AuctionResults ar JOIN AuctionArtworks aa ON ar.artwork_id = aa.artwork_id AND ar.auction_id = aa.auction_id JOIN Artworks a ON ar.artwork_id = a.artwork_id WHERE ar.final_price > aa.base_price * 1.25;"}
{"prompt": "How many bids were placed during the entire auction event?", "response": "sql SELECT COUNT(*) FROM AuctionBids WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1);"}
{"prompt": "Which artworks received the lowest number of bids?", "response": "sql SELECT a.title, COUNT(ab.bid_id) AS bid_count FROM AuctionArtworks aa JOIN Artworks a ON aa.artwork_id = a.artwork_id LEFT JOIN AuctionBids ab ON aa.artwork_id = ab.artwork_id AND aa.auction_id = ab.auction_id WHERE aa.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) GROUP BY a.title ORDER BY bid_count ASC LIMIT 5;"}
{"prompt": "Which auctioneer conducted the most recent auction?", "response": "sql SELECT a.auctioneer_name FROM Auctions a ORDER BY auction_date DESC LIMIT 1;"}
{"prompt": "Which artworks were purchased by first-time buyers?", "response": "sql SELECT a.title, b.first_name, b.last_name FROM AuctionResults ar JOIN Artworks a ON ar.artwork_id = a.artwork_id JOIN Buyers b ON ar.buyer_id = b.buyer_id WHERE b.total_auctions = 1 AND ar.auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1); (Assumes a column total_auctions in Buyers)"}
{"prompt": "What is the average number of bids per artwork in the auction?", "response": "sql SELECT AVG(bid_count) FROM (SELECT COUNT(*) AS bid_count FROM AuctionBids WHERE auction_id = (SELECT auction_id FROM Auctions ORDER BY auction_date DESC LIMIT 1) GROUP BY artwork_id) AS sub;"}
{"prompt": "Which unsold artwork is likely to match known collector preferences for minimalist pieces?", "response": "(This requires qualitative tagging — not possible via SQL alone. Recommendation: Use metadata tags like 'style = 'minimalist'' and match with buyer preferences stored in a collector profile table.)"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "How many devices are currently active in the gallery network?", "response": "sql SELECT COUNT(*) FROM Devices WHERE status = 'active';"}
{"prompt": "Which systems had errors reported in the last 24 hours?", "response": "sql SELECT system_name, error_message, timestamp FROM SystemLogs WHERE log_level = 'error' AND timestamp >= NOW() - INTERVAL 1 DAY;"}
{"prompt": "What are the most recent failed login attempts and their IP addresses?", "response": "sql SELECT username, ip_address, timestamp FROM LoginAttempts WHERE success = FALSE ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "How many kiosks are installed in the “Modern Myths” exhibition area?", "response": "sql SELECT COUNT(*) FROM Devices WHERE device_type = 'kiosk' AND location = 'Modern Myths';"}
{"prompt": "Which devices required manual intervention in the past week?", "response": "sql SELECT device_id, device_name, issue_reported, resolved_by FROM DeviceMaintenanceLogs WHERE resolution_method = 'manual' AND timestamp >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "How many times did the firewall detect intrusion attempts this month?", "response": "sql SELECT COUNT(*) FROM SecurityEvents WHERE event_type = 'intrusion' AND timestamp >= DATE_TRUNC('month', NOW());"}
{"prompt": "Which touchscreen kiosk was last reported offline?", "response": "sql SELECT device_id, device_name, last_reported_status FROM Devices WHERE device_type = 'kiosk' ORDER BY last_offline_time DESC LIMIT 1;"}
{"prompt": "What is the total system uptime percentage for the past 30 days?", "response": "sql SELECT (SUM(uptime_minutes) / SUM(total_minutes)) * 100 AS uptime_percentage FROM UptimeLogs WHERE log_date >= NOW() - INTERVAL 30 DAY;"}
{"prompt": "Which rooms had Wi-Fi configuration changes in the last 48 hours?", "response": "sql SELECT room_name, device_id, change_description, changed_by FROM NetworkConfigLogs WHERE timestamp >= NOW() - INTERVAL 2 DAY;"}
{"prompt": "What were the top 5 most accessed digital artworks last week?", "response": "sql SELECT artwork_title, COUNT(*) AS access_count FROM DigitalArtworkLogs WHERE timestamp >= NOW() - INTERVAL 7 DAY GROUP BY artwork_title ORDER BY access_count DESC LIMIT 5;"}
{"prompt": "What systems are scheduled for backup today?", "response": "sql SELECT system_name, scheduled_time FROM BackupSchedule WHERE DATE(scheduled_time) = CURRENT_DATE;"}
{"prompt": "How many devices are currently flagged as needing maintenance?", "response": "sql SELECT COUNT(*) FROM Devices WHERE maintenance_required = TRUE;"}
{"prompt": "What are the most common error types logged in the gallery’s IT infrastructure?", "response": "sql SELECT error_type, COUNT(*) AS frequency FROM SystemLogs WHERE log_level = 'error' GROUP BY error_type ORDER BY frequency DESC;"}
{"prompt": "Which employees accessed the CMS system in the past 3 days?", "response": "sql SELECT DISTINCT employee_name FROM AccessLogs WHERE system_name = 'CMS' AND access_time >= NOW() - INTERVAL 3 DAY;"}
{"prompt": "What are the current statuses of all interactive displays?", "response": "sql SELECT device_name, status FROM Devices WHERE device_type = 'interactive_display';"}
{"prompt": "Which network zones had abnormal traffic spikes during exhibition hours yesterday?", "response": "sql SELECT zone_name, traffic_mb FROM NetworkTrafficLogs WHERE DATE(timestamp) = CURRENT_DATE - INTERVAL 1 DAY AND traffic_mb > 500; (Threshold is hypothetical)"}
{"prompt": "How many login attempts were made from foreign IPs in the last week?", "response": "sql SELECT COUNT(*) FROM LoginAttempts WHERE is_foreign_ip = TRUE AND timestamp >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "Which system had the longest downtime last month?", "response": "sql SELECT system_name, MAX(downtime_minutes) FROM DowntimeLogs WHERE log_date >= DATE_TRUNC('month', NOW()) GROUP BY system_name ORDER BY MAX(downtime_minutes) DESC LIMIT 1;"}
{"prompt": "What is the average resolution time for IT tickets this week?", "response": "sql SELECT AVG(resolution_time_minutes) FROM ITSupportTickets WHERE created_at >= NOW() - INTERVAL 7 DAY AND status = 'resolved';"}
{"prompt": "Which scheduled livestream events required IT support this month?", "response": "sql SELECT event_name, support_request_id, issue_description FROM ITSupportTickets WHERE category = 'livestream' AND created_at >= DATE_TRUNC('month', NOW());"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "How many visitors came to the gallery yesterday?", "response": "sql SELECT COUNT(*) FROM VisitorLogs WHERE visit_date = CURRENT_DATE - INTERVAL 1 DAY;"}
{"prompt": "Which gallery room had the highest foot traffic last week?", "response": "sql SELECT room_name, COUNT(*) AS visit_count FROM RoomVisitLogs WHERE visit_date >= NOW() - INTERVAL 7 DAY GROUP BY room_name ORDER BY visit_count DESC LIMIT 1;"}
{"prompt": "What was the average time spent in Room 4 during the “Modern Myths” exhibition?", "response": "sql SELECT AVG(duration_minutes) FROM RoomVisitLogs WHERE room_name = 'Room 4' AND exhibition = 'Modern Myths';"}
{"prompt": "How many people dropped off before completing the audio guide?", "response": "sql SELECT COUNT(*) FROM AudioGuideUsage WHERE completed = FALSE;"}
{"prompt": "What is the click-through rate of the Instagram teaser campaign for “Modern Myths”?", "response": "sql SELECT (clicks * 100.0 / impressions) AS ctr_percentage FROM CampaignStats WHERE campaign_name = 'Modern Myths Instagram Teaser';"}
{"prompt": "Which day last week had the highest number of donations during the auction?", "response": "sql SELECT donation_date, SUM(amount) AS total_donations FROM Donations WHERE event_type = 'Auction' AND donation_date >= NOW() - INTERVAL 7 DAY GROUP BY donation_date ORDER BY total_donations DESC LIMIT 1;"}
{"prompt": "What age group donates the most on mid-week auction nights?", "response": "sql SELECT age_group, SUM(amount) AS total_donated FROM Donations WHERE event_day IN ('Tuesday', 'Wednesday', 'Thursday') GROUP BY age_group ORDER BY total_donated DESC;"}
{"prompt": "How many users visited the “Modern Myths” exhibition page from social media links last week?", "response": "sql SELECT COUNT(*) FROM WebAnalytics WHERE page = 'Modern Myths Exhibition' AND referrer LIKE '%social%' AND visit_date >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "Which rooms have the lowest average visitor duration?", "response": "sql SELECT room_name, AVG(duration_minutes) AS avg_duration FROM RoomVisitLogs GROUP BY room_name ORDER BY avg_duration ASC LIMIT 3;"}
{"prompt": "What are the top 5 most viewed artworks in the last month?", "response": "sql SELECT artwork_title, COUNT(*) AS views FROM ArtworkViews WHERE view_date >= NOW() - INTERVAL 30 DAY GROUP BY artwork_title ORDER BY views DESC LIMIT 5;"}
{"prompt": "What was the average ticket conversion rate from the “Myths Reimagined” ad campaign?", "response": "sql SELECT (tickets_sold * 100.0 / ad_clicks) AS conversion_rate FROM CampaignStats WHERE campaign_name = 'Myths Reimagined';"}
{"prompt": "How many unique users completed the full audio tour last weekend?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM AudioGuideUsage WHERE completed = TRUE AND DATE(usage_time) BETWEEN CURRENT_DATE - INTERVAL 2 DAY AND CURRENT_DATE - INTERVAL 1 DAY;"}
{"prompt": "How many users visited the ticketing page but didn’t complete purchase last month?", "response": "sql SELECT COUNT(DISTINCT user_id) FROM WebAnalytics WHERE page = 'Ticketing' AND event = 'exit_before_purchase' AND visit_date >= NOW() - INTERVAL 30 DAY;"}
{"prompt": "What was the highest traffic hour in the past week?", "response": "sql SELECT EXTRACT(HOUR FROM visit_time) AS hour, COUNT(*) AS visits FROM VisitorLogs WHERE visit_date >= NOW() - INTERVAL 7 DAY GROUP BY hour ORDER BY visits DESC LIMIT 1;"}
{"prompt": "Which social media post got the most engagement for the “Modern Myths” campaign?", "response": "sql SELECT post_id, platform, (likes + shares + comments) AS engagement_score FROM SocialMediaStats WHERE campaign = 'Modern Myths' ORDER BY engagement_score DESC LIMIT 1;"}
{"prompt": "What is the gender distribution of visitors for the “Modern Myths” exhibition?", "response": "sql SELECT gender, COUNT(*) FROM VisitorLogs WHERE exhibition = 'Modern Myths' GROUP BY gender;"}
{"prompt": "How many users used the online ticket system from mobile devices last week?", "response": "sql SELECT COUNT(*) FROM WebAnalytics WHERE device_type = 'mobile' AND page = 'Ticketing' AND visit_date >= NOW() - INTERVAL 7 DAY;"}
{"prompt": "What is the average time between ticket purchase and visit date?", "response": "sql SELECT AVG(DATEDIFF(visit_date, purchase_date)) AS avg_days FROM Tickets WHERE exhibition = 'Modern Myths';"}
{"prompt": "Which visitor segment (by age group) is most likely to spend over 30 minutes in Room 4?", "response": "sql SELECT age_group, COUNT(*) AS count FROM RoomVisitLogs WHERE room_name = 'Room 4' AND duration_minutes > 30 GROUP BY age_group ORDER BY count DESC;"}
{"prompt": "What is the predicted visitor count for the “NeoNature” exhibition’s opening weekend based on historical data?", "response": "sql<br>SELECT EXTRACT(DOW FROM visit_date) AS weekday,<br> AVG(visitor_count) AS average_visitors<br>FROM HistoricalVisitorData<br>WHERE exhibition = 'NeoNature'<br> AND EXTRACT(DOW FROM visit_date) IN (5, 6)<br>GROUP BY weekday;"}
{"prompt": "Finance / Accounting Staff", "response": "nan"}
{"prompt": "What was the total ticket revenue from the 'Modern Myths' exhibition?", "response": "sql SELECT SUM(amount) FROM TicketSales WHERE exhibition_name = 'Modern Myths';"}
{"prompt": "How many online vs. on-site bookings were made for the exhibition?", "response": "sql SELECT booking_channel, COUNT(*) FROM TicketSales WHERE exhibition_name = 'Modern Myths' GROUP BY booking_channel;"}
{"prompt": "Which international transactions were flagged due to payment errors?", "response": "sql SELECT * FROM Transactions WHERE status = 'flagged' AND payment_country != 'India';"}
{"prompt": "What is the total cost breakdown by expense category for the “Modern Myths” exhibition?", "response": "sql SELECT expense_category, SUM(amount) FROM ExhibitionExpenses WHERE exhibition_name = 'Modern Myths' GROUP BY expense_category;"}
{"prompt": "Which vendor invoice exceeded the approved budget?", "response": "sql SELECT vendor_name, invoice_amount, approved_budget FROM VendorInvoices WHERE invoice_amount > approved_budget AND exhibition_name = 'Modern Myths';"}
{"prompt": "What is the total amount paid in artist commissions for the exhibition?", "response": "sql SELECT SUM(amount) FROM ArtistPayments WHERE exhibition_name = 'Modern Myths';"}
{"prompt": "What was the ROI for the last marketing campaign?", "response": "sql SELECT (revenue - cost) / cost * 100 AS ROI FROM MarketingCampaigns WHERE campaign_name = 'Modern Myths Launch';"}
{"prompt": "How does the ticket revenue compare between weekdays and weekends?", "response": "sql SELECT CASE WHEN EXTRACT(DOW FROM ticket_date) IN (0,6) THEN 'Weekend' ELSE 'Weekday' END AS day_type, SUM(amount) FROM TicketSales WHERE exhibition_name = 'Modern Myths' GROUP BY day_type;"}
{"prompt": "What are the average catering expenses across all exhibitions?", "response": "sql SELECT AVG(amount) FROM ExhibitionExpenses WHERE expense_category = 'Catering';"}
{"prompt": "List all tax-compliant donation receipts issued this month.", "response": "sql SELECT * FROM Donations WHERE tax_document_issued = TRUE AND DATE_TRUNC('month', donation_date) = DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which patrons donated more than ₹50,000 during the auction?", "response": "sql SELECT patron_name, amount FROM Donations WHERE amount > 50000 AND event = 'Modern Myths Auction';"}
{"prompt": "How much has been paid in art insurance premiums this year?", "response": "sql SELECT SUM(amount) FROM InsurancePayments WHERE EXTRACT(YEAR FROM payment_date) = EXTRACT(YEAR FROM CURRENT_DATE);"}
{"prompt": "What are the top 5 highest vendor invoices from the “Modern Myths” event?", "response": "sql SELECT vendor_name, invoice_amount FROM VendorInvoices WHERE exhibition_name = 'Modern Myths' ORDER BY invoice_amount DESC LIMIT 5;"}
{"prompt": "Which days had the highest ticket sales revenue during the exhibition?", "response": "sql SELECT ticket_date, SUM(amount) AS total_sales FROM TicketSales WHERE exhibition_name = 'Modern Myths' GROUP BY ticket_date ORDER BY total_sales DESC LIMIT 5;"}
{"prompt": "What percentage of ticket sales came from international visitors?", "response": "sql SELECT ROUND((SUM(CASE WHEN country != 'India' THEN amount ELSE 0 END) * 100.0 / SUM(amount)), 2) AS international_sales_pct FROM TicketSales WHERE exhibition_name = 'Modern Myths';"}
{"prompt": "What is the total cost of temporary staffing for the exhibition?", "response": "sql SELECT SUM(amount) FROM ExhibitionExpenses WHERE exhibition_name = 'Modern Myths' AND expense_category = 'Temporary Staffing';"}
{"prompt": "Which exhibition had the highest marketing spend in the past year?", "response": "sql SELECT exhibition_name, SUM(cost) AS total_spend FROM MarketingCampaigns WHERE campaign_date >= CURRENT_DATE - INTERVAL '12 months' GROUP BY exhibition_name ORDER BY total_spend DESC LIMIT 1;"}
{"prompt": "What is the total amount collected from artwork sales during auction night?", "response": "sql SELECT SUM(sale_price) FROM ArtSales WHERE event = 'Modern Myths Auction';"}
{"prompt": "List all payment gateway errors in the last 7 days.", "response": "sql SELECT * FROM Transactions WHERE status = 'error' AND payment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What’s the average ticket price paid across all visitor demographics?", "response": "sql SELECT demographic_group, AVG(amount) FROM TicketSales GROUP BY demographic_group;"}
{"prompt": "ResearchLab", "response": "nan"}
{"prompt": "Researchers / Scientists", "response": "nan"}
{"prompt": "Which research projects am I currently involved in?", "response": "sql SELECT P.project_id, P.title, P.start_date, P.end_date FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "Who are the other researchers working on the same projects as me?", "response": "sql SELECT DISTINCT R2.first_name, R2.last_name FROM Researchers R1 JOIN ProjectResearchers PR1 ON R1.researcher_id = PR1.researcher_id JOIN ProjectResearchers PR2 ON PR1.project_id = PR2.project_id JOIN Researchers R2 ON PR2.researcher_id = R2.researcher_id WHERE R1.first_name = 'Isha' AND R1.last_name = 'Verma' AND R2.researcher_id != R1.researcher_id;"}
{"prompt": "Who is managing each project I’m contributing to?", "response": "sql SELECT P.project_id, P.title, PM.first_name, PM.last_name FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id JOIN ProjectManagers PM ON P.manager_id = PM.manager_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "What is the total funding received for each of my active projects?", "response": "sql SELECT GM.project_id, SUM(GM.amount) AS total_funding FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN GrantManagement GM ON PR.project_id = GM.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma' GROUP BY GM.project_id;"}
{"prompt": "Which grants supporting my work are due to expire this quarter?", "response": "sql SELECT GM.project_id, GM.granting_agency, GM.end_date FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN GrantManagement GM ON PR.project_id = GM.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma' AND GM.end_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '3 months';"}
{"prompt": "Which projects had recent compliance checks?", "response": "sql SELECT CR.project_id, CR.check_date, CR.status FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN ComplianceRecords CR ON PR.project_id = CR.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma' ORDER BY CR.check_date DESC;"}
{"prompt": "What were the notes recorded in the latest compliance audit for my projects?", "response": "sql SELECT CR.project_id, CR.notes FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN ComplianceRecords CR ON PR.project_id = CR.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma' ORDER BY CR.check_date DESC LIMIT 1;"}
{"prompt": "What support tickets have I raised recently that are still unresolved?", "response": "sql SELECT ticket_id, subject, created_at FROM SupportTickets ST JOIN Researchers R ON ST.raised_by_id = R.researcher_id WHERE ST.role = 'Researcher' AND ST.status != 'Resolved' AND R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "Which lab technicians have expertise relevant to material simulations?", "response": "sql SELECT first_name, last_name, expertise FROM LabTechnicians WHERE expertise LIKE '%material%' OR expertise LIKE '%simulation%';"}
{"prompt": "Are there any analytics reports generated this week that I should review?", "response": "sql SELECT report_id, name, generated_on FROM AnalyticsReports WHERE generated_on >= CURRENT_DATE - INTERVAL '7 days' ORDER BY generated_on DESC;"}
{"prompt": "What were the financial expenses recorded for this lab last month?", "response": "sql SELECT record_id, amount, description, date FROM FinanceRecords WHERE date >= date_trunc('month', CURRENT_DATE - INTERVAL '1 month') AND date < date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which external collaborators are associated with roles relevant to polymer or fatigue analysis?", "response": "sql SELECT name, organization, role FROM ExternalCollaborators WHERE role LIKE '%polymer%' OR role LIKE '%fatigue%';"}
{"prompt": "What unresolved issues have been logged under the support system recently?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE status != 'Resolved' ORDER BY created_at DESC;"}
{"prompt": "What are the latest entries in the system logs for user actions in my lab group?", "response": "sql SELECT SL.action, SL.timestamp, SL.ip_address FROM SystemLogs SL JOIN Users U ON SL.user_id = U.user_id WHERE U.role = 'Researcher' ORDER BY SL.timestamp DESC LIMIT 10;"}
{"prompt": "Have there been any finance records logged for equipment purchases in the last 30 days?", "response": "sql SELECT record_id, amount, description, date FROM FinanceRecords WHERE description LIKE '%equipment%' AND date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which assistants are reporting under me for project documentation or coordination?", "response": "sql SELECT RA.first_name, RA.last_name, RA.email FROM ResearchAssistants RA JOIN Researchers R ON RA.supervisor_id = R.researcher_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "What is the list of projects with multiple funding sources I’m working on?", "response": "sql SELECT GM.project_id, COUNT(DISTINCT GM.grant_id) AS funding_sources FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN GrantManagement GM ON PR.project_id = GM.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma' GROUP BY GM.project_id HAVING COUNT(DISTINCT GM.grant_id) > 1;"}
{"prompt": "Which analytics reports contain sensor data keywords in their name?", "response": "sql SELECT report_id, name, generated_on FROM AnalyticsReports WHERE name LIKE '%sensor%';"}
{"prompt": "Which support tickets were resolved in the last 48 hours?", "response": "sql SELECT ticket_id, subject, resolved_at FROM SupportTickets WHERE resolved_at >= CURRENT_TIMESTAMP - INTERVAL '2 days';"}
{"prompt": "What is the total grant amount secured for all projects I’ve contributed to so far?", "response": "sql SELECT SUM(GM.amount) AS total_grants FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN GrantManagement GM ON PR.project_id = GM.project_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "Research Assistants", "response": "nan"}
{"prompt": "Who is my supervisor, and what's their area of specialization?", "response": "sql SELECT R.first_name, R.last_name, R.email, R.specialization FROM ResearchAssistants RA JOIN Researchers R ON RA.supervisor_id = R.researcher_id WHERE RA.first_name = 'Aarav';"}
{"prompt": "What are the titles of projects Isha Verma is currently working on?", "response": "sql SELECT P.title FROM Projects P JOIN ProjectResearchers PR ON P.project_id = PR.project_id JOIN Researchers R ON PR.researcher_id = R.researcher_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "Which researchers, besides Dr. Isha, are working on the same projects I support?", "response": "sql SELECT DISTINCT R.first_name, R.last_name FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id WHERE P.project_id IN ( SELECT PR2.project_id FROM ProjectResearchers PR2 JOIN Researchers R2 ON PR2.researcher_id = R2.researcher_id WHERE R2.first_name = 'Isha' AND R2.last_name = 'Verma' ) AND R.first_name != 'Isha';"}
{"prompt": "What is the schedule for compliance checks on our lab’s active projects?", "response": "sql SELECT CR.project_id, CR.check_date, CR.status FROM ComplianceRecords CR WHERE CR.project_id IN ( SELECT project_id FROM ProjectResearchers PR JOIN Researchers R ON PR.researcher_id = R.researcher_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma' );"}
{"prompt": "What are the unresolved support issues raised by any Research Assistant recently?", "response": "sql SELECT ticket_id, subject, description, created_at FROM SupportTickets WHERE role = 'ResearchAssistant' AND status != 'Resolved' ORDER BY created_at DESC;"}
{"prompt": "Are there any analytics reports generated this week that I should review?", "response": "sql SELECT name, generated_on FROM AnalyticsReports WHERE generated_on >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What grants fund the projects I help with under Dr. Isha?", "response": "sql SELECT GM.project_id, GM.amount, GM.granting_agency FROM GrantManagement GM JOIN Projects P ON GM.project_id = P.project_id JOIN ProjectResearchers PR ON P.project_id = PR.project_id JOIN Researchers R ON PR.researcher_id = R.researcher_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "Which lab technicians have expertise in spectrogram or material testing?", "response": "sql SELECT first_name, last_name, expertise FROM LabTechnicians WHERE expertise LIKE '%spectrogram%' OR expertise LIKE '%material%';"}
{"prompt": "Which support tickets are currently open that affect experiments or lab equipment?", "response": "sql SELECT ticket_id, subject, description FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%equipment%' OR description LIKE '%experiment%');"}
{"prompt": "What system logs exist for user activities today in the lab?", "response": "sql SELECT U.username, SL.action, SL.timestamp FROM SystemLogs SL JOIN Users U ON SL.user_id = U.user_id WHERE DATE(SL.timestamp) = CURRENT_DATE ORDER BY SL.timestamp DESC;"}
{"prompt": "Who are the external collaborators working with us on current polymer or bio-coating research?", "response": "sql SELECT name, organization, contact_email FROM ExternalCollaborators WHERE role LIKE '%polymer%' OR role LIKE '%bio-coating%';"}
{"prompt": "What recent financial expenses relate to chemical purchases or machine maintenance?", "response": "sql SELECT record_id, date, amount, description FROM FinanceRecords WHERE description LIKE '%chemical%' OR description LIKE '%maintenance%' ORDER BY date DESC;"}
{"prompt": "Which managers should I loop in if I need help scheduling tomorrow’s experiments?", "response": "sql SELECT DISTINCT PM.first_name, PM.last_name, PM.email FROM ProjectManagers PM JOIN Projects P ON PM.manager_id = P.manager_id JOIN ProjectResearchers PR ON P.project_id = PR.project_id JOIN Researchers R ON PR.researcher_id = R.researcher_id WHERE R.first_name = 'Isha' AND R.last_name = 'Verma';"}
{"prompt": "What analytics reports include mentions of fatigue or thermal failure analysis?", "response": "sql SELECT report_id, name, generated_on FROM AnalyticsReports WHERE name LIKE '%fatigue%' OR name LIKE '%thermal failure%';"}
{"prompt": "What are the support tickets I’ve personally raised so far?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE role = 'ResearchAssistant' AND raised_by_id = (SELECT assistant_id FROM ResearchAssistants WHERE first_name = 'Aarav');"}
{"prompt": "Are there any reports that summarize the performance of our project over the last month?", "response": "sql SELECT report_id, name, generated_on FROM AnalyticsReports WHERE generated_on >= CURRENT_DATE - INTERVAL '30 days' AND name LIKE '%performance%';"}
{"prompt": "Which project had the most recent compliance check, and what was its outcome?", "response": "sql SELECT project_id, status, check_date FROM ComplianceRecords ORDER BY check_date DESC LIMIT 1;"}
{"prompt": "What users have accessed the system within the last 24 hours?", "response": "sql SELECT DISTINCT U.username, SL.timestamp FROM Users U JOIN SystemLogs SL ON U.user_id = SL.user_id WHERE SL.timestamp >= NOW() - INTERVAL '24 hours' ORDER BY SL.timestamp DESC;"}
{"prompt": "What grants are set to expire within the next 60 days that might affect our lab's work?", "response": "sql SELECT project_id, granting_agency, end_date FROM GrantManagement WHERE end_date <= CURRENT_DATE + INTERVAL '60 days';"}
{"prompt": "Which finance records show debit-type expenses in the last two weeks?", "response": "sql SELECT record_id, amount, description FROM FinanceRecords WHERE type = 'debit' AND date >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "Lab Technicians", "response": "nan"}
{"prompt": "What is my assigned area of expertise according to the lab records?", "response": "sql SELECT expertise FROM LabTechnicians WHERE first_name = 'Meena';"}
{"prompt": "Which projects currently require technician support, including mine?", "response": "sql SELECT DISTINCT P.title FROM Projects P JOIN ProjectResearchers PR ON P.project_id = PR.project_id JOIN Researchers R ON PR.researcher_id = R.researcher_id WHERE P.project_id IN (SELECT project_id FROM ProjectResearchers);"}
{"prompt": "What support tickets have been raised for lab equipment maintenance?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE subject LIKE '%equipment%' OR description LIKE '%maintenance%';"}
{"prompt": "Which researchers are working on the polymer-based bio-coating project?", "response": "sql SELECT R.first_name, R.last_name FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id WHERE P.title LIKE '%bio-coating%' OR P.title LIKE '%polymer%';"}
{"prompt": "Are there any analytics reports that mention FTIR spectroscopy or material characterization?", "response": "sql SELECT report_id, name, generated_on FROM AnalyticsReports WHERE name LIKE '%FTIR%' OR name LIKE '%characterization%';"}
{"prompt": "What are the most recent compliance check results for our lab's active projects?", "response": "sql SELECT project_id, status, check_date FROM ComplianceRecords ORDER BY check_date DESC LIMIT 5;"}
{"prompt": "What financial records exist for recent purchases of lab safety equipment or PPE?", "response": "sql SELECT record_id, date, amount, description FROM FinanceRecords WHERE description LIKE '%PPE%' OR description LIKE '%safety equipment%' ORDER BY date DESC;"}
{"prompt": "Which support tickets are still open and might impact lab operations today?", "response": "sql SELECT ticket_id, subject, description FROM SupportTickets WHERE status != 'Resolved' AND (description LIKE '%lab%' OR subject LIKE '%machine%' OR subject LIKE '%centrifuge%');"}
{"prompt": "What are the names of other lab technicians and their respective areas of expertise?", "response": "sql SELECT first_name, last_name, expertise FROM LabTechnicians WHERE first_name != 'Meena';"}
{"prompt": "What projects are currently active that may involve temperature-sensitive compounds or equipment?", "response": "sql SELECT title FROM Projects WHERE title LIKE '%temperature%' OR title LIKE '%thermal%';"}
{"prompt": "Which researchers have raised tickets related to lab errors or calibration issues?", "response": "sql SELECT DISTINCT U.username, ST.subject FROM SupportTickets ST JOIN Users U ON ST.raised_by_id = U.user_id WHERE ST.subject LIKE '%error%' OR ST.subject LIKE '%calibration%';"}
{"prompt": "What are the next upcoming compliance deadlines for lab audits?", "response": "sql SELECT project_id, check_date, status FROM ComplianceRecords WHERE check_date > CURRENT_DATE ORDER BY check_date ASC;"}
{"prompt": "Are there any recent support tickets about the centrifuge I fixed earlier today?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE subject LIKE '%centrifuge%' OR description LIKE '%centrifuge%' ORDER BY created_at DESC LIMIT 5;"}
{"prompt": "What digital logs have I updated or actions I performed today?", "response": "sql SELECT SL.action, SL.timestamp FROM SystemLogs SL JOIN Users U ON SL.user_id = U.user_id WHERE U.username = 'Meena' AND DATE(SL.timestamp) = CURRENT_DATE;"}
{"prompt": "What projects involve FTIR or spectroscopy tools that I frequently support?", "response": "sql SELECT title FROM Projects WHERE title LIKE '%FTIR%' OR title LIKE '%spectroscopy%';"}
{"prompt": "Who are the project managers overseeing the lab research activities I assist in?", "response": "sql SELECT DISTINCT PM.first_name, PM.last_name FROM ProjectManagers PM JOIN Projects P ON PM.manager_id = P.manager_id JOIN ProjectResearchers PR ON P.project_id = PR.project_id;"}
{"prompt": "What were the latest financial expenses tagged to my department or area of responsibility?", "response": "sql SELECT record_id, amount, description FROM FinanceRecords WHERE description LIKE '%lab technician%' OR description LIKE '%glassware%' ORDER BY date DESC;"}
{"prompt": "What external collaborators are involved in experiments that use sensitive lab equipment?", "response": "sql SELECT name, organization, role FROM ExternalCollaborators WHERE role LIKE '%equipment%' OR role LIKE '%lab%';"}
{"prompt": "Are there any lab access logs showing who entered today and when?", "response": "sql SELECT U.username, SL.timestamp FROM Users U JOIN SystemLogs SL ON U.user_id = SL.user_id WHERE DATE(SL.timestamp) = CURRENT_DATE ORDER BY SL.timestamp ASC;"}
{"prompt": "Which researchers or assistants have logged complaints or requests regarding pipettes or glassware?", "response": "sql SELECT subject, description FROM SupportTickets WHERE subject LIKE '%pipette%' OR description LIKE '%glassware%';"}
{"prompt": "Project Managers", "response": "nan"}
{"prompt": "Which projects am I currently managing across the lab?", "response": "sql SELECT title, status FROM Projects WHERE manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav');"}
{"prompt": "Which of my projects are delayed and need attention?", "response": "sql SELECT title, status FROM Projects WHERE status = 'Delayed' AND manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav');"}
{"prompt": "Show me the total number of projects in mid-phase development.", "response": "sql SELECT COUNT(*) FROM Projects WHERE status = 'Mid-Phase';"}
{"prompt": "What researchers are involved in my government-funded materials initiative?", "response": "sql SELECT R.first_name, R.last_name FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id WHERE P.title LIKE '%government%' AND P.manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav');"}
{"prompt": "Which support tickets are open and could affect project timelines?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE status != 'Resolved';"}
{"prompt": "What are the upcoming compliance checks for my projects?", "response": "sql SELECT project_id, check_date, status FROM ComplianceRecords WHERE project_id IN (SELECT project_id FROM Projects WHERE manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav')) AND check_date >= CURRENT_DATE ORDER BY check_date ASC;"}
{"prompt": "What finance records should I review for ongoing budget tracking?", "response": "sql SELECT record_id, date, amount, description FROM FinanceRecords ORDER BY date DESC LIMIT 10;"}
{"prompt": "Who are the lab technicians supporting my ongoing projects?", "response": "sql SELECT DISTINCT LT.first_name, LT.last_name FROM LabTechnicians LT JOIN Projects P ON P.project_id IN (SELECT project_id FROM ProjectResearchers) WHERE P.manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav');"}
{"prompt": "Which external collaborators are attached to my currently active projects?", "response": "sql SELECT name, organization, role FROM ExternalCollaborators WHERE project_id IN (SELECT project_id FROM Projects WHERE status = 'Active' AND manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav'));"}
{"prompt": "Which researcher is leading the polymer simulation model work?", "response": "sql SELECT R.first_name, R.last_name FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id WHERE P.title LIKE '%polymer simulation%';"}
{"prompt": "What recent analytics reports should I summarize for stakeholders?", "response": "sql SELECT report_id, name, generated_on FROM AnalyticsReports ORDER BY generated_on DESC LIMIT 5;"}
{"prompt": "List all unresolved support tickets involving lab hardware (e.g. spectrometers, centrifuges).", "response": "sql SELECT ticket_id, subject FROM SupportTickets WHERE status != 'Resolved' AND (subject LIKE '%spectrometer%' OR subject LIKE '%centrifuge%' OR description LIKE '%maintenance%');"}
{"prompt": "What’s the current progress status for each of my ongoing projects?", "response": "sql SELECT title, status FROM Projects WHERE manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav');"}
{"prompt": "Which researcher teams are working under each of my projects?", "response": "sql SELECT P.title AS project_title, R.first_name, R.last_name FROM Projects P JOIN ProjectResearchers PR ON P.project_id = PR.project_id JOIN Researchers R ON PR.researcher_id = R.researcher_id WHERE P.manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav');"}
{"prompt": "What equipment-related issues could affect my upcoming schedule?", "response": "sql SELECT ticket_id, subject, status FROM SupportTickets WHERE subject LIKE '%equipment%' OR description LIKE '%equipment%' AND status != 'Resolved';"}
{"prompt": "Show me the list of upcoming tasks logged in the system that relate to my teams.", "response": "sql SELECT action, timestamp FROM SystemLogs WHERE user_id IN (SELECT user_id FROM Users WHERE username IN (SELECT username FROM Researchers)) ORDER BY timestamp DESC LIMIT 10;"}
{"prompt": "What financial outflows have occurred for projects I manage?", "response": "sql SELECT record_id, amount, date, description FROM FinanceRecords WHERE description LIKE '%project%' OR description LIKE '%equipment%' ORDER BY date DESC;"}
{"prompt": "What are the top compliance issues flagged in my past projects?", "response": "sql SELECT project_id, status, check_date FROM ComplianceRecords WHERE status != 'Pass' AND project_id IN (SELECT project_id FROM Projects WHERE manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav'));"}
{"prompt": "Which teams need to be notified about a timeline update for the delayed government project?", "response": "sql SELECT DISTINCT R.email FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id WHERE PR.project_id = (SELECT project_id FROM Projects WHERE title LIKE '%government%' AND manager_id = (SELECT manager_id FROM ProjectManagers WHERE first_name = 'Raghav'));"}
{"prompt": "Which external collaborators can I reference in the new interdisciplinary grant proposal?", "response": "sql SELECT name, organization, expertise FROM ExternalCollaborators ORDER BY name;"}
{"prompt": "Compliance / Ethics Officers", "response": "nan"}
{"prompt": "Which participant consent forms are missing clauses about data usage?", "response": "sql SELECT form_id, participant_id FROM ConsentForms WHERE data_usage_clause IS NULL OR data_usage_clause = '';"}
{"prompt": "Show me all consent forms submitted for the new biomedical study.", "response": "sql SELECT form_id, participant_id, submission_date FROM ConsentForms WHERE study_title LIKE '%biomedical%';"}
{"prompt": "Which researchers are handling human-derived samples in current studies?", "response": "sql SELECT DISTINCT R.first_name, R.last_name FROM Researchers R JOIN Projects P ON R.researcher_id = P.lead_researcher_id WHERE P.material_type LIKE '%human%';"}
{"prompt": "List all current studies involving re-use of anonymized data.", "response": "sql SELECT title, data_source, reuse_justification FROM Projects WHERE data_source LIKE '%anonymized%' AND reuse_justification IS NOT NULL;"}
{"prompt": "Which project data sets have incomplete or missing IRB approvals?", "response": "sql SELECT project_id, title FROM Projects WHERE irb_status != 'Approved' OR irb_status IS NULL;"}
{"prompt": "Show me all data compliance violations logged this month.", "response": "sql SELECT violation_id, description, date_reported FROM ComplianceViolations WHERE date_reported >= date_trunc('month', CURRENT_DATE);"}
{"prompt": "Which researchers haven’t completed their ethics training modules?", "response": "sql SELECT R.first_name, R.last_name FROM Researchers R LEFT JOIN EthicsTraining T ON R.researcher_id = T.researcher_id WHERE T.completed = FALSE OR T.completed IS NULL;"}
{"prompt": "List all studies involving animal testing and their current approval status.", "response": "sql SELECT title, animal_model_used, animal_ethics_approval FROM Projects WHERE animal_model_used IS NOT NULL;"}
{"prompt": "Which safety audits in the lab have failed in the last 90 days?", "response": "sql SELECT audit_id, area, result, audit_date FROM SafetyAudits WHERE result = 'Failed' AND audit_date >= CURRENT_DATE - INTERVAL '90 days';"}
{"prompt": "What data sets are flagged as sensitive and require encryption?", "response": "sql SELECT dataset_id, name FROM Datasets WHERE sensitivity_level = 'High' AND encrypted = FALSE;"}
{"prompt": "Which researchers were involved in projects flagged for ethical review in the last 30 days?", "response": "sql SELECT DISTINCT R.first_name, R.last_name FROM Researchers R JOIN ProjectResearchers PR ON R.researcher_id = PR.researcher_id JOIN Projects P ON PR.project_id = P.project_id WHERE P.ethics_flagged = TRUE AND P.flagged_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "What was the outcome of the last cross-team ethics review meeting?", "response": "sql SELECT meeting_id, summary, decision FROM EthicsMeetings ORDER BY meeting_date DESC LIMIT 1;"}
{"prompt": "Which experiments are violating the 3Rs (Replace, Reduce, Refine) principles?", "response": "sql SELECT experiment_id, description FROM Experiments WHERE rrr_violation_flag = TRUE;"}
{"prompt": "List all open ethics concerns raised by lab technicians.", "response": "sql SELECT concern_id, reporter_role, status, description FROM EthicsConcerns WHERE reporter_role = 'Lab Technician' AND status != 'Resolved';"}
{"prompt": "Which users accessed sensitive files in the last 7 days?", "response": "sql SELECT user_id, file_name, access_time FROM FileAccessLogs WHERE file_sensitivity = 'High' AND access_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What materials need to be disposed of under biohazard protocol?", "response": "sql SELECT material_id, name, hazard_type FROM LabMaterials WHERE hazard_type = 'Biohazard' AND disposal_status = 'Pending';"}
{"prompt": "Which training modules were updated recently with new ethics standards?", "response": "sql SELECT module_id, title, last_updated FROM EthicsTrainingModules WHERE last_updated >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Who are the lead researchers with unresolved compliance issues?", "response": "sql SELECT DISTINCT R.first_name, R.last_name FROM Researchers R JOIN Projects P ON R.researcher_id = P.lead_researcher_id WHERE P.compliance_status = 'Non-Compliant';"}
{"prompt": "Show all IRB proposals under review.", "response": "sql SELECT proposal_id, project_id, status, submission_date FROM IRBProposals WHERE status = 'Under Review';"}
{"prompt": "List the top 5 recurring types of ethics violations logged in the past year.", "response": "sql SELECT violation_type, COUNT(*) AS count FROM ComplianceViolations WHERE date_reported >= CURRENT_DATE - INTERVAL '1 year' GROUP BY violation_type ORDER BY count DESC LIMIT 5;"}
{"prompt": "Finance / Grant Management Staff", "response": "nan"}
{"prompt": "Which expenses from the government-funded flagship project are still unverified?", "response": "sql SELECT expense_id, category, amount, status FROM ProjectExpenses WHERE project_id = (SELECT project_id FROM Projects WHERE funding_source = 'Government' AND flagship = TRUE) AND status = 'Pending Verification';"}
{"prompt": "Show all conference travel reimbursements submitted in the past 30 days.", "response": "sql SELECT reimbursement_id, researcher_id, amount, submitted_date FROM Reimbursements WHERE category = 'Conference Travel' AND submitted_date >= CURRENT_DATE - INTERVAL '30 days';"}
{"prompt": "Which expenses are not categorized according to grant rules?", "response": "sql SELECT expense_id, description, category FROM ProjectExpenses WHERE category IS NULL OR category NOT IN (SELECT allowed_category FROM GrantGuidelines);"}
{"prompt": "List all budget line items for the current interdisciplinary proposal.", "response": "sql SELECT line_item, description, proposed_amount FROM ProposalBudget WHERE proposal_id = (SELECT proposal_id FROM Proposals WHERE type = 'Interdisciplinary' AND status = 'In Development');"}
{"prompt": "Which international consultant fees exceed the permissible budget limit?", "response": "sql SELECT consultant_id, amount FROM ConsultantFees WHERE consultant_type = 'International' AND amount > (SELECT max_allowed_fee FROM GrantGuidelines WHERE category = 'International Consultant');"}
{"prompt": "Show me the utilization report summary for each active grant.", "response": "sql SELECT grant_id, total_allocated, total_spent, (total_allocated - total_spent) AS remaining_funds FROM GrantUtilization WHERE status = 'Active';"}
{"prompt": "Which researchers have pending stipend payments this quarter?", "response": "sql SELECT researcher_id, amount_due FROM Stipends WHERE quarter = 'Q2' AND status = 'Pending';"}
{"prompt": "What is the burn rate for the main project in the past 60 days?", "response": "sql SELECT project_id, SUM(amount)/60 AS daily_burn_rate FROM ProjectExpenses WHERE project_id = (SELECT project_id FROM Projects WHERE is_main = TRUE) AND expense_date >= CURRENT_DATE - INTERVAL '60 days' GROUP BY project_id;"}
{"prompt": "List all invoices for lab equipment over ₹50,000 in the last financial year.", "response": "sql SELECT invoice_id, vendor_name, amount, expense_date FROM Invoices WHERE category = 'Lab Equipment' AND amount > 50000 AND expense_date BETWEEN '2024-04-01' AND '2025-03-31';"}
{"prompt": "Which grants are nearing their spending deadlines in the next 45 days?", "response": "sql SELECT grant_id, title, end_date FROM Grants WHERE end_date <= CURRENT_DATE + INTERVAL '45 days';"}
{"prompt": "Show all expense entries flagged during the last audit.", "response": "sql SELECT expense_id, reason_flagged, auditor_remarks FROM AuditFindings WHERE status = 'Flagged';"}
{"prompt": "Which researchers submitted procurement requests this week?", "response": "sql SELECT DISTINCT requester_id FROM ProcurementRequests WHERE request_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List the top 5 grant categories by total funds received.", "response": "sql SELECT category, SUM(total_allocated) AS total_funding FROM Grants GROUP BY category ORDER BY total_funding DESC LIMIT 5;"}
{"prompt": "Which financial reports were submitted early to funding agencies?", "response": "sql SELECT report_id, submitted_date, deadline FROM FinancialReports WHERE submitted_date < deadline;"}
{"prompt": "What are the current balances remaining across all active lab projects?", "response": "sql SELECT project_id, title, (budget_allocated - budget_spent) AS remaining_balance FROM Projects WHERE status = 'Active';"}
{"prompt": "Show Priya’s compiled list of upcoming grants with deadlines and amounts.", "response": "sql SELECT funding_agency, grant_title, deadline, max_funding FROM UpcomingGrantOpportunities ORDER BY deadline;"}
{"prompt": "Who are the junior researchers eligible for early-career grants this cycle?", "response": "sql SELECT researcher_id, name FROM Researchers WHERE experience_years <= 5 AND interested_in_grants = TRUE;"}
{"prompt": "List all rejected expenses along with rejection reasons this quarter.", "response": "sql SELECT expense_id, amount, reason_rejected FROM ProjectExpenses WHERE status = 'Rejected' AND expense_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What was the total stipend payout in the last quarter?", "response": "sql SELECT SUM(amount_paid) AS total_stipends FROM Stipends WHERE payout_date BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "Which project budgets were revised after initial approval?", "response": "sql SELECT project_id, revised_budget, revision_date FROM BudgetRevisions WHERE revision_date IS NOT NULL;"}
{"prompt": "IT / System Administrators", "response": "nan"}
{"prompt": "Which servers had backup script failures in the last 24 hours?", "response": "sql SELECT server_id, backup_time, status, error_message FROM BackupLogs WHERE status = 'Failed' AND backup_time >= CURRENT_TIMESTAMP - INTERVAL '24 hours';"}
{"prompt": "Show all GPU jobs that were interrupted or stalled this week.", "response": "sql SELECT job_id, user_id, server_id, issue_type, timestamp FROM GPUJobLogs WHERE status IN ('Stalled', 'Interrupted') AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which users accessed the high-performance computing cluster today?", "response": "sql SELECT DISTINCT user_id, access_time FROM ClusterAccessLogs WHERE access_time >= CURRENT_DATE;"}
{"prompt": "List all Docker containers deployed this month and their host servers.", "response": "sql SELECT container_id, image_name, deployed_on, host_server FROM ContainerDeployments WHERE deployed_on >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "What firewall breaches or unauthorized access attempts were detected this week?", "response": "sql SELECT event_id, source_ip, attempted_endpoint, timestamp FROM SecurityEvents WHERE event_type = 'Unauthorized Access' AND timestamp >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Which software tools are currently containerized and running in the lab environment?", "response": "sql SELECT container_id, software_name, version, status FROM ContainerDeployments WHERE status = 'Running';"}
{"prompt": "List users who failed the phishing simulation this quarter.", "response": "sql SELECT user_id, name, simulation_date FROM PhishingDrillResults WHERE result = 'Failed' AND simulation_date >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What is the current CPU and memory utilization across all lab servers?", "response": "sql SELECT server_id, cpu_usage, memory_usage, checked_at FROM ServerHealthMetrics ORDER BY checked_at DESC;"}
{"prompt": "Which users were active on the network during the neural network crash yesterday?", "response": "sql SELECT user_id, login_time, logout_time FROM UserSessions WHERE login_time BETWEEN TIMESTAMP 'yesterday 00:00:00' AND TIMESTAMP 'yesterday 23:59:59';"}
{"prompt": "Show the uptime logs for the main research data server.", "response": "sql SELECT log_date, uptime_percentage FROM ServerUptime WHERE server_id = 'RD-MAIN-01' ORDER BY log_date DESC LIMIT 30;"}
{"prompt": "What API endpoints are currently being hit by the IoT sensors?", "response": "sql SELECT endpoint_url, request_count, last_access_time FROM IoTAPIMonitoring WHERE device_type = 'Environmental Sensor';"}
{"prompt": "Which systems are pending a critical security patch?", "response": "sql SELECT system_id, hostname, patch_status FROM SystemPatchStatus WHERE patch_status = 'Pending' AND patch_priority = 'Critical';"}
{"prompt": "Who deployed new software dependencies last week?", "response": "sql SELECT deployed_by, software_name, deployment_date FROM SoftwareDeployments WHERE deployment_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "List logs of remote access to the GPU server in the past 48 hours.", "response": "sql SELECT user_id, access_time, ip_address FROM RemoteAccessLogs WHERE server_id = 'GPU-01' AND access_time >= CURRENT_TIMESTAMP - INTERVAL '48 hours';"}
{"prompt": "What is the error rate on the cluster nodes in the past week?", "response": "sql SELECT node_id, COUNT(*) AS error_count FROM ClusterErrorLogs WHERE error_time >= CURRENT_DATE - INTERVAL '7 days' GROUP BY node_id ORDER BY error_count DESC;"}
{"prompt": "How many users accessed encrypted research data this month?", "response": "sql SELECT COUNT(DISTINCT user_id) AS unique_users FROM DataAccessLogs WHERE data_type = 'Encrypted' AND access_time >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Which sensors failed to send real-time data today?", "response": "sql SELECT sensor_id, last_sync_time FROM SensorStatus WHERE last_sync_time < CURRENT_DATE AND is_active = TRUE;"}
{"prompt": "What are the top 5 most frequently accessed scientific datasets?", "response": "sql SELECT dataset_id, name, access_count FROM DatasetAccessStats ORDER BY access_count DESC LIMIT 5;"}
{"prompt": "Which processes consumed the most GPU memory during last week's peak hours?", "response": "sql SELECT process_id, job_id, memory_used_mb, start_time FROM GPUProcessLogs WHERE start_time BETWEEN '2025-06-09 17:00:00' AND '2025-06-09 22:00:00' ORDER BY memory_used_mb DESC LIMIT 10;"}
{"prompt": "Show all successful system-wide health checks conducted this month.", "response": "sql SELECT check_id, check_time, status FROM SystemHealthChecks WHERE status = 'Success' AND check_time >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "Data Analysts", "response": "nan"}
{"prompt": "Which nanomaterials experiment produced sensor data with over 10,000 records?", "response": "sql SELECT experiment_id, material_name, COUNT(*) AS record_count FROM SensorData GROUP BY experiment_id, material_name HAVING COUNT(*) > 10000;"}
{"prompt": "Show the pressure-temperature-stress readings flagged as outliers last week.", "response": "sql SELECT record_id, pressure, temperature, stress_level FROM ExperimentReadings WHERE is_outlier = TRUE AND reading_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What are the average normalized values for stress across all compound types?", "response": "sql SELECT compound_type, AVG(normalized_stress) AS avg_stress FROM NormalizedReadings GROUP BY compound_type;"}
{"prompt": "Which experiments show correlation between high-temperature tolerance and pH conditions?", "response": "sql SELECT experiment_id, correlation_score FROM CorrelationInsights WHERE variable_x = 'temperature_tolerance' AND variable_y = 'pH' AND correlation_score > 0.6;"}
{"prompt": "Which tagged anomalies have not yet been reviewed by the materials team?", "response": "sql SELECT tag_id, experiment_id, tag_description FROM TaggedAnomalies WHERE reviewed_by_materials_team = FALSE;"}
{"prompt": "What were the top 5 features by importance in the molecular breakdown model?", "response": "sql SELECT feature_name, importance_score FROM ModelFeatureImportance WHERE model_name = 'MolecularBreakdown' ORDER BY importance_score DESC LIMIT 5;"}
{"prompt": "Which training datasets have been marked as outdated or deprecated?", "response": "sql SELECT dataset_id, dataset_name, deprecated_on FROM Datasets WHERE status = 'Deprecated';"}
{"prompt": "Show accuracy and loss metrics of the last 3 AI model training sessions.", "response": "sql SELECT session_id, accuracy, loss, trained_on FROM ModelTrainingMetrics ORDER BY trained_on DESC LIMIT 3;"}
{"prompt": "Which experiments showed unexpected results outside of original hypothesis parameters?", "response": "sql SELECT experiment_id, description, unexpected_result FROM ExperimentLogs WHERE result_type = 'Unexpected';"}
{"prompt": "List all datasets that required more than 30% missing value imputation.", "response": "sql SELECT dataset_id, name, missing_value_percentage FROM DatasetQualityMetrics WHERE missing_value_percentage > 30;"}
{"prompt": "What visualization charts were included in the last quarterly impact report?", "response": "sql SELECT chart_type, title, created_by FROM ReportVisualizations WHERE report_quarter = 'Q2-2025';"}
{"prompt": "Which researchers accessed Maya’s visual insights from the nanomaterials dataset?", "response": "sql SELECT researcher_id, access_time, visualization_id FROM VisualizationAccessLogs WHERE created_by = 'Maya' AND dataset_topic = 'Nanomaterials';"}
{"prompt": "List the experiments whose efficiency improved by more than 15% after AI-assisted analysis.", "response": "sql SELECT experiment_id, improvement_percentage FROM ExperimentPerformance WHERE improvement_percentage > 15;"}
{"prompt": "What time-series experiments are currently live and collecting data?", "response": "sql SELECT experiment_id, description, started_on FROM LiveExperiments WHERE is_time_series = TRUE AND status = 'Active';"}
{"prompt": "Who are the research assistants mentored by Maya on data interpretation this year?", "response": "sql SELECT assistant_id, name, mentorship_date FROM MentorshipRecords WHERE mentor_name = 'Maya' AND EXTRACT(YEAR FROM mentorship_date) = 2025;"}
{"prompt": "Which processed datasets were backed up to cloud last week?", "response": "sql SELECT dataset_id, backup_time, backed_up_by FROM BackupLogs WHERE backed_up_by = 'Maya' AND backup_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What documentation files did Maya update most recently for reproducibility?", "response": "sql SELECT doc_id, file_name, last_updated FROM DocumentationFiles WHERE updated_by = 'Maya' ORDER BY last_updated DESC LIMIT 5;"}
{"prompt": "List experiments with strong linear correlation between temperature and material yield.", "response": "sql SELECT experiment_id, correlation_score FROM CorrelationInsights WHERE variable_x = 'temperature' AND variable_y = 'yield' AND correlation_type = 'Linear' AND correlation_score > 0.7;"}
{"prompt": "Which data cleaning operations were applied on sensor batch #2025B?", "response": "sql SELECT operation, description, performed_by, performed_on FROM DataCleaningLogs WHERE sensor_batch = '2025B';"}
{"prompt": "What insights were flagged for AI team review but haven’t been incorporated into models yet?", "response": "sql SELECT insight_id, summary, model_status FROM Insights WHERE flagged_for_ai_team = TRUE AND model_status = 'Not Incorporated';"}
{"prompt": "Lab Managers", "response": "nan"}
{"prompt": "Which equipment is scheduled for overlapping use this week?", "response": "sql SELECT equipment_id, COUNT(*) AS overlapping_count FROM EquipmentSchedule WHERE schedule_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days' GROUP BY equipment_id HAVING COUNT(*) > 1;"}
{"prompt": "List all equipment with pending maintenance in the next 5 days.", "response": "sql SELECT equipment_id, name, next_maintenance_date FROM EquipmentInventory WHERE next_maintenance_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '5 days';"}
{"prompt": "Which biological samples were delivered today and where are they stored?", "response": "sql SELECT sample_id, source_lab, storage_location, delivery_time FROM SampleLog WHERE delivery_time >= CURRENT_DATE;"}
{"prompt": "What was the equipment utilization rate for the nano-imaging station last month?", "response": "sql SELECT equipment_id, SUM(hours_used)/744.0 * 100 AS utilization_percentage FROM EquipmentUsage WHERE equipment_id = 'Nano-Imaging' AND usage_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';"}
{"prompt": "Which interns completed safety protocol training this month?", "response": "sql SELECT intern_id, name, training_date FROM TrainingRecords WHERE topic = 'Safety Protocols' AND training_date >= DATE_TRUNC('month', CURRENT_DATE);"}
{"prompt": "List all fume hood malfunctions recorded this quarter.", "response": "sql SELECT hood_id, incident_time, resolved_by, downtime_minutes FROM EquipmentIncidents WHERE equipment_type = 'Fume Hood' AND incident_time >= DATE_TRUNC('quarter', CURRENT_DATE);"}
{"prompt": "What chemical stock levels are below the minimum threshold?", "response": "sql SELECT chemical_name, current_quantity, minimum_required FROM ChemicalInventory WHERE current_quantity < minimum_required;"}
{"prompt": "Which researchers are scheduled to use the optical microscope next week?", "response": "sql SELECT researcher_id, name, schedule_date FROM EquipmentSchedule WHERE equipment_id = 'Optical-Microscope' AND schedule_date BETWEEN CURRENT_DATE + INTERVAL '1 day' AND CURRENT_DATE + INTERVAL '7 days';"}
{"prompt": "What are the top 5 most requested equipment by research teams?", "response": "sql SELECT equipment_id, COUNT(*) AS request_count FROM EquipmentSchedule GROUP BY equipment_id ORDER BY request_count DESC LIMIT 5;"}
{"prompt": "Show all expired or near-expiry reagents in storage.", "response": "sql SELECT reagent_id, name, expiry_date FROM ReagentInventory WHERE expiry_date <= CURRENT_DATE + INTERVAL '15 days';"}
{"prompt": "Which lab zones were flagged during the last safety inspection?", "response": "sql SELECT zone_id, issue_description, inspection_date FROM SafetyInspections WHERE inspection_result = 'Fail' ORDER BY inspection_date DESC;"}
{"prompt": "What procurement items were added to the upcoming purchase cycle?", "response": "sql SELECT item_id, item_name, justification, added_by FROM ProcurementRequests WHERE status = 'Pending';"}
{"prompt": "Which instruments were calibrated in the past two weeks?", "response": "sql SELECT instrument_id, calibration_date, calibrated_by FROM CalibrationLogs WHERE calibration_date >= CURRENT_DATE - INTERVAL '14 days';"}
{"prompt": "How many hours was the -80°C freezer offline last month?", "response": "sql SELECT SUM(downtime_minutes)/60.0 AS hours_offline FROM EquipmentDowntime WHERE equipment_id = 'Freezer-80C' AND incident_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';"}
{"prompt": "List all logged access entries to chemical storage this week.", "response": "sql SELECT user_id, access_time, purpose FROM ChemicalAccessLogs WHERE access_time >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "What is the current inventory of personal protective equipment (PPE)?", "response": "sql SELECT item_name, current_stock, reorder_threshold FROM SafetyInventory WHERE category = 'PPE';"}
{"prompt": "Who handled the delivery and logging of samples last Friday?", "response": "sql SELECT received_by, sample_id, delivery_time FROM SampleLog WHERE DATE(delivery_time) = CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "Which researchers missed their scheduled equipment time slots this week?", "response": "sql SELECT researcher_id, equipment_id, schedule_date FROM MissedSchedules WHERE schedule_date >= CURRENT_DATE - INTERVAL '7 days';"}
{"prompt": "Show all lab maintenance requests submitted in the last 10 days.", "response": "sql SELECT request_id, issue_type, reported_by, status FROM MaintenanceRequests WHERE request_date >= CURRENT_DATE - INTERVAL '10 days';"}
{"prompt": "Which benches and stations are currently marked “Out of Use”?", "response": "sql SELECT bench_id, reason_flagged, flagged_by, flagged_on FROM LabBenchStatus WHERE status = 'Out of Use';"}
{"prompt": "External Collaborators / Reviewers", "response": "nan"}
{"prompt": "Which experiments on polymer coatings used curing temperatures above 180°C?", "response": "sql SELECT experiment_id, curing_temperature FROM ExperimentParameters WHERE material_type = 'Polymer Coating' AND curing_temperature > 180;"}
{"prompt": "List tensile tests where substrate degradation was recorded beyond threshold.", "response": "sql SELECT test_id, degradation_index, threshold_value FROM TensileTestResults WHERE degradation_index > threshold_value;"}
{"prompt": "Which statistical models used pairwise analysis instead of multivariate methods?", "response": "sql SELECT model_id, analysis_type FROM StatisticalModels WHERE analysis_type = 'Pairwise';"}
{"prompt": "Which datasets contain variables flagged as potentially co-dependent?", "response": "sql SELECT dataset_id, variable_x, variable_y, correlation_score FROM VariableDependencies WHERE correlation_score > 0.6;"}
{"prompt": "What protocols are in place for cross-border data sharing in international grants?", "response": "sql SELECT grant_id, protocol_name, country_restriction, last_updated FROM DataSharingPolicies WHERE grant_type = 'International';"}
{"prompt": "Which anonymization techniques are applied in GDPR-compliant datasets?", "response": "sql SELECT dataset_id, anonymization_method, gdpr_compliant FROM DatasetMetadata WHERE gdpr_compliant = TRUE;"}
{"prompt": "What is the replicability score and status for each published experiment?", "response": "sql SELECT experiment_id, title, replicability_score, replication_status FROM ReplicationAudit;"}
{"prompt": "List all experiments reviewed by Dr. Elina during her current visit.", "response": "sql SELECT experiment_id, review_date, reviewed_by FROM ReviewLogs WHERE reviewed_by = 'Dr. Elina Bose' AND review_date >= CURRENT_DATE - INTERVAL '3 days';"}
{"prompt": "Which lab instruments were inspected by Dr. Elina?", "response": "sql SELECT instrument_id, inspection_time, inspected_by FROM InstrumentReviewLogs WHERE inspected_by = 'Dr. Elina Bose';"}
{"prompt": "What feedback or suggestions did Dr. Elina give during the compliance meeting?", "response": "sql SELECT meeting_id, feedback_summary FROM ReviewerMeetingNotes WHERE attendee_name = 'Dr. Elina Bose' AND topic = 'Compliance';"}
{"prompt": "Which edge-case anomalies were discussed and flagged for documentation?", "response": "sql SELECT anomaly_id, description, flagged_by, flagged_on FROM EdgeCaseLog WHERE flagged_by = 'Dr. Elina Bose';"}
{"prompt": "Show all published papers from the lab reviewed by Elina in the past year.", "response": "sql SELECT publication_id, title, publication_date FROM Publications WHERE reviewed_by = 'Dr. Elina Bose' AND publication_date >= CURRENT_DATE - INTERVAL '1 year';"}
{"prompt": "What research projects co-funded by European agencies are under active peer review?", "response": "sql SELECT project_id, project_title, funding_agency FROM Projects WHERE funding_agency_region = 'Europe' AND peer_review_status = 'In Progress';"}
{"prompt": "Which researchers attended Elina’s talk on scientific replicability?", "response": "sql SELECT researcher_id, name FROM EventAttendance WHERE event_title = 'The Role of Replicability in Scientific Integrity';"}
{"prompt": "List statistical models revised post-review based on Elina’s suggestions.", "response": "sql SELECT model_id, revised_by, revision_notes FROM ModelRevisions WHERE revised_by = 'Dr. Elina Bose';"}
{"prompt": "What compliance changes were made based on GDPR and Elina’s feedback?", "response": "sql SELECT policy_id, updated_by, update_summary FROM ComplianceChanges WHERE updated_by = 'Dr. Elina Bose';"}
{"prompt": "Show Elina’s preliminary review summaries across all lab departments.", "response": "sql SELECT department_id, summary, submitted_on FROM ReviewerReports WHERE reviewer_name = 'Dr. Elina Bose';"}
{"prompt": "What training sessions or workshops has Elina contributed to during her visit?", "response": "sql SELECT session_id, title, date, contributor FROM WorkshopLog WHERE contributor = 'Dr. Elina Bose';"}
{"prompt": "Which lab publications are pending final review and marked for potential patent filing?", "response": "sql SELECT paper_id, title, status FROM PublicationPipeline WHERE review_status = 'Pending Final Review' AND patent_consideration = TRUE;"}
{"prompt": "List collaboration feedback notes between Elina and the Project Manager.", "response": "sql SELECT note_id, topic, comments, created_on FROM CollaborationNotes WHERE reviewer = 'Dr. Elina Bose' AND role = 'Project Manager';"}
